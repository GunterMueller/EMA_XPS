util/findXmH.sh
util/dirs-make.sh ./EMA-XPS
### Filesystem: ./EMA-XPS ###
   creating...
checking existance of directory [kbs]
   creating...
   done.
checking existance of directory [kbs/xbm]
   creating...
   done.
checking existance of directory [lib]
   creating...
   done.
checking existance of directory [lib/bitmaps]
   creating...
   done.
checking existance of directory [lib/deutsch]
   creating...
   done.
checking existance of directory [lib/english]
   creating...
   done.
checking existance of directory [bin]
   creating...
   done.
checking existance of directory [man]
   creating...
   done.
checking existance of directory [man/man1]
   creating...
   done.
checking existance of directory [doc]
   creating...
   done.
mkdir -p ./tmp
util/makeClispNoReadline.sh

[1mBuild Tools:[m
checking for a BSD-compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking for a thread-safe mkdir -p... /bin/mkdir -p
checking for gawk... gawk
checking whether make sets $(MAKE)... yes
checking for gcc... gcc
checking for C compiler default output file name... a.out
checking whether the C compiler works... yes
checking whether we are cross compiling... no
checking for suffix of executables... 
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether gcc accepts -g... yes
checking for gcc option to accept ISO C89... none needed
checking for style of include used by make... GNU
checking dependency style of gcc... none
checking how to run the C preprocessor... gcc -E
checking build system type... x86_64-unknown-linux-gnu
checking host system type... x86_64-unknown-linux-gnu
checking host platform... x86_64-unknown-linux4.4.0-gnu
checking for a BSD-compatible install... /usr/bin/install -c
checking for a sed that does not truncate output... /bin/sed
checking for grep that handles long lines and -e... /bin/grep
checking for egrep... /bin/grep -E
checking for ld used by gcc... /usr/bin/ld
checking if the linker (/usr/bin/ld) is GNU ld... yes
checking for /usr/bin/ld option to reload object files... -r
checking for BSD-compatible nm... /usr/bin/nm -B
checking whether ln -s works... yes
checking how to recognise dependent libraries... pass_all
checking for ANSI C header files... yes
checking for sys/types.h... yes
checking for sys/stat.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for memory.h... yes
checking for strings.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for unistd.h... yes
checking dlfcn.h usability... yes
checking dlfcn.h presence... yes
checking for dlfcn.h... yes
checking for g++... g++
checking whether we are using the GNU C++ compiler... yes
checking whether g++ accepts -g... yes
checking dependency style of g++... none
checking how to run the C++ preprocessor... g++ -E
checking for g77... no
checking for xlf... no
checking for f77... f77
checking whether we are using the GNU Fortran 77 compiler... yes
checking whether f77 accepts -g... yes
checking the maximum length of command line arguments... 32768
checking command to parse /usr/bin/nm -B output from gcc object... ok
checking for objdir... .libs
checking for ar... ar
checking for ranlib... ranlib
checking for strip... strip
checking if gcc supports -fno-rtti -fno-exceptions... no
checking for gcc option to produce PIC... -fPIC
checking if gcc PIC flag -fPIC works... yes
checking if gcc static flag -static works... yes
checking if gcc supports -c -o file.o... yes
checking whether the gcc linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
checking dynamic linker characteristics... GNU/Linux ld.so
checking how to hardcode library paths into programs... immediate
checking whether stripping libraries is possible... yes
checking if libtool supports shared libraries... yes
checking whether to build shared libraries... no
checking whether to build static libraries... yes
configure: creating libtool
appending configuration tag "CXX" to libtool
checking for ld used by g++... /usr/bin/ld -m elf_x86_64
checking if the linker (/usr/bin/ld -m elf_x86_64) is GNU ld... yes
checking whether the g++ linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
checking for g++ option to produce PIC... -fPIC
checking if g++ PIC flag -fPIC works... yes
checking if g++ static flag -static works... yes
checking if g++ supports -c -o file.o... yes
checking whether the g++ linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
checking dynamic linker characteristics... GNU/Linux ld.so
checking how to hardcode library paths into programs... immediate
appending configuration tag "F77" to libtool
checking if libtool supports shared libraries... yes
checking whether to build shared libraries... no
checking whether to build static libraries... yes
checking for f77 option to produce PIC... -fPIC
checking if f77 PIC flag -fPIC works... yes
checking if f77 static flag -static works... yes
checking if f77 supports -c -o file.o... yes
checking whether the f77 linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
checking dynamic linker characteristics... GNU/Linux ld.so
checking how to hardcode library paths into programs... immediate

[1mOptional Platform Environment:[m
checking sys/signal.h usability... yes
checking sys/signal.h presence... yes
checking for sys/signal.h... yes
checking for unistd.h... (cached) yes
checking for getpagesize... yes
checking for sysconf(_SC_PAGESIZE)... yes
checking for PAGESIZE in limits.h... no
checking for mmap with MAP_ANON... yes
checking for mmap with MAP_ANONYMOUS... yes
checking for mmap of /dev/zero... yes
checking whether a fault handler according to POSIX works... yes
checking whether a fault handler according to Linux/i386 works... no
checking whether a fault handler according to old Linux/i386 works... no
checking whether a fault handler according to Linux/m68k works... no
checking whether a fault handler according to Linux/PowerPC works... no
checking whether a fault handler according to Linux/HPPA works... no
checking whether a fault handler according to BSD works... no
checking whether a fault handler according to IRIX works... no
checking whether a fault handler according to HP-UX HPPA works... no
checking whether a fault handler according to OSF/1 Alpha works... no
checking whether a fault handler according to NetBSD Alpha works... no
checking whether a fault handler according to AIX works... no
checking whether a fault handler according to MacOSX/Darwin7 PowerPC works... no
checking whether a fault handler according to MacOSX/Darwin5 PowerPC works... no
checking whether a fault handler according to Hurd works... no
checking for the fault handler specifics... fault-posix.h
checking if the system supports catching SIGSEGV... yes
checking for stack direction... grows down
checking for PIOCMAP in sys/procfs.h... no
checking for mincore... yes
checking for getrlimit... yes
checking for setrlimit... yes
checking for sigaltstack... yes
checking for stack_t... yes
checking for working sigaltstack... yes
checking if the system supports catching stack overflow... yes
checking whether a signal handler can be left through longjmp... yes
checking whether a signal handler can be left through longjmp and sigaltstack... yes
checking whether a signal handler can be left through longjmp and setcontext... yes
checking whether a signal handler can be left through siglongjmp... yes
checking whether a signal handler can be left through siglongjmp and sigaltstack... yes
checking whether a signal handler can be left through siglongjmp and setcontext... yes

[1mBuild Parameters:[m
checking whether to activate relocatable installation... no

[1mOutput Substitution:[m
configure: creating ./config.status
config.status: creating Makefile
config.status: creating src/Makefile
config.status: creating src/sigsegv.h
config.status: creating tests/Makefile
config.status: creating config.h
config.status: executing depfiles commands

Now please type '[1mmake[m' to compile. Good luck.

make[1]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5'
make TARGETSTACK=" all" all-recursive
make[2]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5'
Making all in src
make[3]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5/src'
/bin/bash ../libtool --tag=CC   --mode=compile gcc -DHAVE_CONFIG_H -I. -I.. -I. -I.    -g -O2 -c -o handler.lo handler.c
 gcc -DHAVE_CONFIG_H -I. -I.. -I. -I. -g -O2 -c handler.c -o handler.o
/bin/bash ../libtool --tag=CC   --mode=compile gcc -DHAVE_CONFIG_H -I. -I.. -I. -I.    -g -O2 -c -o stackvma.lo stackvma.c
 gcc -DHAVE_CONFIG_H -I. -I.. -I. -I. -g -O2 -c stackvma.c -o stackvma.o
/bin/bash ../libtool --tag=CC   --mode=compile gcc -DHAVE_CONFIG_H -I. -I.. -I. -I.    -g -O2 -c -o leave.lo leave.c
 gcc -DHAVE_CONFIG_H -I. -I.. -I. -I. -g -O2 -c leave.c -o leave.o
/bin/bash ../libtool --tag=CC   --mode=compile gcc -DHAVE_CONFIG_H -I. -I.. -I. -I.    -g -O2 -c -o dispatcher.lo dispatcher.c
 gcc -DHAVE_CONFIG_H -I. -I.. -I. -I. -g -O2 -c dispatcher.c -o dispatcher.o
/bin/bash ../libtool --tag=CC   --mode=compile gcc -DHAVE_CONFIG_H -I. -I.. -I. -I.    -g -O2 -c -o version.lo version.c
 gcc -DHAVE_CONFIG_H -I. -I.. -I. -I. -g -O2 -c version.c -o version.o
/bin/bash ../libtool --tag=CC   --mode=link gcc  -g -O2 -lc -no-undefined  -o libsigsegv.la -rpath /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/lib handler.lo stackvma.lo leave.lo dispatcher.lo version.lo  
mkdir .libs
ar cru .libs/libsigsegv.a  handler.o stackvma.o leave.o dispatcher.o version.o
ar: `u' modifier ignored since `D' is the default (see `U')
ranlib .libs/libsigsegv.a
creating libsigsegv.la
(cd .libs && rm -f libsigsegv.la && ln -s ../libsigsegv.la libsigsegv.la)
make[3]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5/src'
Making all in tests
make[3]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5/tests'
gcc -DHAVE_CONFIG_H -I. -I.. -I../src    -g -O2 -c sigsegv1.c
/bin/bash ../libtool --tag=CC   --mode=link gcc  -g -O2   -o sigsegv1 sigsegv1.o ../src/libsigsegv.la 
mkdir .libs
gcc -g -O2 -o sigsegv1 sigsegv1.o  ../src/.libs/libsigsegv.a -lc
gcc -DHAVE_CONFIG_H -I. -I.. -I../src    -g -O2 -c sigsegv2.c
/bin/bash ../libtool --tag=CC   --mode=link gcc  -g -O2   -o sigsegv2 sigsegv2.o ../src/libsigsegv.la 
gcc -g -O2 -o sigsegv2 sigsegv2.o  ../src/.libs/libsigsegv.a -lc
gcc -DHAVE_CONFIG_H -I. -I.. -I../src    -g -O2 -c stackoverflow1.c
/bin/bash ../libtool --tag=CC   --mode=link gcc  -g -O2   -o stackoverflow1 stackoverflow1.o ../src/libsigsegv.la 
gcc -g -O2 -o stackoverflow1 stackoverflow1.o  ../src/.libs/libsigsegv.a -lc
gcc -DHAVE_CONFIG_H -I. -I.. -I../src    -g -O2 -c stackoverflow2.c
/bin/bash ../libtool --tag=CC   --mode=link gcc  -g -O2   -o stackoverflow2 stackoverflow2.o ../src/libsigsegv.la 
gcc -g -O2 -o stackoverflow2 stackoverflow2.o  ../src/.libs/libsigsegv.a -lc
make[3]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5/tests'
make[3]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5'

Now please type '[1mmake check[m' to run a quick test suite. Hope it works.

make[3]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5'
make[2]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5'
make[1]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5'
make[1]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5'
Making check in src
make[2]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5/src'
make[2]: Nothing to be done for 'check'.
make[2]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5/src'
Making check in tests
make[2]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5/tests'
make  check-TESTS
make[3]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5/tests'
Test passed.
PASS: sigsegv1
Test passed.
PASS: sigsegv2
Starting recursion pass 1.
Stack overflow 1 caught.
Starting recursion pass 2.
Stack overflow 2 caught.
Test passed.
PASS: stackoverflow1
Starting recursion pass 1.
Stack overflow 1 caught.
Starting recursion pass 2.
Stack overflow 2 caught.
Segmentation violation correctly detected.
Test passed.
PASS: stackoverflow2
==================
All 4 tests passed
==================
make[3]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5/tests'
make[2]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5/tests'
make[2]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5'

Now please type '[1mmake install[m' to install the package.

make[2]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5'
make[1]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5'
make[1]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5'
Making install in src
make[2]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5/src'
make[3]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5/src'
test -z "/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/lib" || /bin/mkdir -p "/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/lib"
 /bin/bash ../libtool --mode=install /usr/bin/install -c  'libsigsegv.la' '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/lib/libsigsegv.la'
/usr/bin/install -c .libs/libsigsegv.lai /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/lib/libsigsegv.la
/usr/bin/install -c .libs/libsigsegv.a /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/lib/libsigsegv.a
chmod 644 /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/lib/libsigsegv.a
ranlib /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/lib/libsigsegv.a
PATH="$PATH:/sbin" ldconfig -n /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/lib
----------------------------------------------------------------------
Libraries have been installed in:
   /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/lib

If you ever happen to want to link against installed libraries
in a given directory, LIBDIR, you must either use libtool, and
specify the full pathname of the library, or use the `-LLIBDIR'
flag during linking and do at least one of the following:
   - add LIBDIR to the `LD_LIBRARY_PATH' environment variable
     during execution
   - add LIBDIR to the `LD_RUN_PATH' environment variable
     during linking
   - use the `-Wl,--rpath -Wl,LIBDIR' linker flag
   - have your system administrator add LIBDIR to `/etc/ld.so.conf'

See any operating system documentation about shared libraries for
more information, such as the ld(1) and ld.so(8) manual pages.
----------------------------------------------------------------------
/bin/bash /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5/build-aux/install-sh -d /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include
/usr/bin/install -c -m 644 sigsegv.h /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include/sigsegv.h
make[3]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5/src'
make[2]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5/src'
Making install in tests
make[2]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5/tests'
make[3]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5/tests'
make[3]: Nothing to be done for 'install-exec-am'.
make[3]: Nothing to be done for 'install-data-am'.
make[3]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5/tests'
make[2]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5/tests'
make[2]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5'
make[3]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5'
make[3]: Nothing to be done for 'install-exec-am'.
make TARGETSTACK="install-recursive install-am install-data-am" install-data-hook
make[4]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5'

Now use the package; you can remove it later via '[1mmake uninstall[m'.

make[4]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5'
make[3]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5'
make[2]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5'
make[1]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/libsigsegv-2.5'
executing /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/configure --without-readline --with-libsigsegv-prefix=/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp --prefix=/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/EMA-XPS --cache-file=config.cache
configure: creating cache config.cache
checking for a BSD-compatible install... /usr/bin/install -c
checking whether build environment is sane... yes
checking for a thread-safe mkdir -p... /bin/mkdir -p
checking for gawk... gawk
checking whether make sets $(MAKE)... yes
configure: [1m** check for host type[m
checking build system type... x86_64-unknown-linux-gnu
checking host system type... x86_64-unknown-linux-gnu
checking for style of include used by make... GNU
checking for gcc... gcc
checking for C compiler default output file name... a.out
checking whether the C compiler works... yes
checking whether we are cross compiling... no
checking for suffix of executables... 
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether gcc accepts -g... yes
checking for gcc option to accept ISO C89... none needed
checking dependency style of gcc... gcc3
checking how to run the C preprocessor... gcc -E
checking for grep that handles long lines and -e... /bin/grep
checking for egrep... /bin/grep -E
checking for 64-bit x86_64... yes
configure: [1m** checks for programs[m
checking for gcc... (cached) gcc
checking whether we are using the GNU C compiler... (cached) yes
checking whether gcc accepts -g... (cached) yes
checking for gcc option to accept ISO C89... (cached) none needed
checking dependency style of gcc... (cached) gcc3
checking how to run the C preprocessor... gcc -E
checking for ranlib... ranlib
checking whether gcc and cc understand -c and -o together... yes
checking for ANSI C header files... yes
checking for sys/types.h... yes
checking for sys/stat.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for memory.h... yes
checking for strings.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for unistd.h... yes
checking minix/config.h usability... no
checking minix/config.h presence... no
checking for minix/config.h... no
checking whether it is safe to define __EXTENSIONS__... yes
checking for a BSD-compatible install... /usr/bin/install -c
checking how to copy files... cp -p
checking how to make hard links... ln
checking whether ln -s works... yes
checking how to make hard links to symlinks... hln
checking for a sed that does not truncate output... /bin/sed
checking for ld used by gcc... /usr/bin/ld
checking if the linker (/usr/bin/ld) is GNU ld... yes
checking for /usr/bin/ld option to reload object files... -r
checking for BSD-compatible nm... /usr/bin/nm -B
checking whether ln -s works... yes
checking how to recognize dependent libraries... pass_all
checking dlfcn.h usability... yes
checking dlfcn.h presence... yes
checking for dlfcn.h... yes
checking for g++... g++
checking whether we are using the GNU C++ compiler... yes
checking whether g++ accepts -g... yes
checking dependency style of g++... gcc3
checking how to run the C++ preprocessor... g++ -E
checking for g77... no
checking for xlf... no
checking for f77... f77
checking whether we are using the GNU Fortran 77 compiler... yes
checking whether f77 accepts -g... yes
checking the maximum length of command line arguments... 3145728
checking command to parse /usr/bin/nm -B output from gcc object... ok
checking for objdir... .libs
checking for ar... ar
checking for ranlib... (cached) ranlib
checking for strip... strip
checking if gcc supports -fno-rtti -fno-exceptions... no
checking for gcc option to produce PIC... -fPIC
checking if gcc PIC flag -fPIC works... yes
checking if gcc static flag -static works... yes
checking if gcc supports -c -o file.o... yes
checking whether the gcc linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
checking whether -lc should be explicitly linked in... no
checking dynamic linker characteristics... GNU/Linux ld.so
checking how to hardcode library paths into programs... immediate
checking whether stripping libraries is possible... yes
checking if libtool supports shared libraries... yes
checking whether to build shared libraries... yes
checking whether to build static libraries... yes
configure: creating libtool
appending configuration tag "CXX" to libtool
checking for ld used by g++... /usr/bin/ld -m elf_x86_64
checking if the linker (/usr/bin/ld -m elf_x86_64) is GNU ld... yes
checking whether the g++ linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
checking for g++ option to produce PIC... -fPIC
checking if g++ PIC flag -fPIC works... yes
checking if g++ static flag -static works... yes
checking if g++ supports -c -o file.o... yes
checking whether the g++ linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
checking dynamic linker characteristics... GNU/Linux ld.so
(cached) (cached) checking how to hardcode library paths into programs... immediate
appending configuration tag "F77" to libtool
checking if libtool supports shared libraries... yes
checking whether to build shared libraries... yes
checking whether to build static libraries... yes
checking for f77 option to produce PIC... -fPIC
checking if f77 PIC flag -fPIC works... yes
checking if f77 static flag -static works... yes
checking if f77 supports -c -o file.o... yes
checking whether the f77 linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes
checking dynamic linker characteristics... GNU/Linux ld.so
(cached) (cached) checking how to hardcode library paths into programs... immediate
checking for groff... groff
checking for dvipdf... dvipdf
checking for gzip... gzip
checking whether test -nt works... yes
checking for gmake... no
checking for make... make
checking whether make sets $(MAKE)... (cached) yes
checking for GNU make... yes
configure: [1m** checks for system features[m
checking for special C compiler options needed for large files... no
checking for _FILE_OFFSET_BITS value needed for large files... no
checking whether using GNU C... yes
checking whether using SUNPRO C... no
checking whether using C++... no
checking whether CPP likes indented directives... yes
checking whether CPP likes empty macro arguments... yes
checking for underscore in external names... no
checking for getpwnam... yes
checking for DYNIX/ptx libseq or libsocket... no
checking whether gethostent requires -lnsl... no
checking whether setsockopt requires -lsocket... no
checking whether CC works at all... yes
configure: [1m** check for add-ons[m
checking for working alloca.h... yes
checking for alloca... yes
checking for mbstate_t... yes
checking for btowc... yes
checking for isblank... yes
checking for iswctype... yes
checking for mbsrtowcs... yes
checking for mempcpy... yes
checking for wmemchr... yes
checking for wmemcpy... yes
checking for wmempcpy... yes
checking for mbrtowc... yes
checking for wcrtomb... yes
checking for wcscoll... yes
checking for iswcntrl... yes
checking wctype.h usability... yes
checking wctype.h presence... yes
checking for wctype.h... yes
checking locale.h usability... yes
checking locale.h presence... yes
checking for locale.h... yes
checking for stdint.h... (cached) yes
checking wchar.h usability... yes
checking wchar.h presence... yes
checking for wchar.h... yes
checking for stdlib.h... (cached) yes
checking for unistd.h... (cached) yes
checking for nl_langinfo and CODESET... yes
checking whether getc_unlocked is declared... yes
checking whether we are using the GNU C Library 2.1 or newer... yes
checking whether malloc, realloc, calloc are POSIX compliant... yes
checking for C/C++ restrict keyword... __restrict
checking for stdbool.h that conforms to C99... yes
checking for _Bool... yes
checking for long long int... yes
checking for unsigned long long int... yes
checking whether the preprocessor supports include_next... yes
checking for inline... inline
checking for wint_t... yes
checking for alloca as a compiler built-in... yes
checking for working GNU fnmatch... yes
checking whether link(2) dereferences a symlink specified with a trailing slash... no
checking for stdlib.h... (cached) yes
checking for GNU libc compatible malloc... yes
checking for working re_compile_pattern... no
checking whether isblank is declared... yes
checking for ssize_t... yes
checking whether stdint.h conforms to C99... yes
checking whether <wchar.h> is standalone... yes
checking for ld used by GCC... /usr/bin/ld -m elf_x86_64
checking if the linker (/usr/bin/ld -m elf_x86_64) is GNU ld... yes
checking for shared library run path origin... done
checking for iconv... yes
checking for working iconv... yes
checking for iconv declaration... 
         extern size_t iconv (iconv_t cd, char * *inbuf, size_t *inbytesleft, char * *outbuf, size_t *outbytesleft);
checking whether NLS is requested... yes
checking for msgfmt... /usr/bin/msgfmt
checking for gmsgfmt... /usr/bin/msgfmt
checking for xgettext... /usr/bin/xgettext
checking for msgmerge... /usr/bin/msgmerge
checking for CFPreferencesCopyAppValue... no
checking for CFLocaleCopyCurrent... no
checking for GNU gettext in libc... yes
checking whether to use NLS... yes
checking where the gettext function comes from... libc
checking for libsigsegv... yes
checking how to link with libsigsegv... /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/lib/libsigsegv.a -lc
checking how to link with libavcall... -lavcall
checking how to link with libcallback... -lcallback
checking avcall.h usability... no
checking avcall.h presence... no
checking for avcall.h... no
checking callback.h usability... no
checking callback.h presence... no
checking for callback.h... no
checking whether libffcall is installed... no
checking lightning.h usability... no
checking lightning.h presence... no
checking for lightning.h... no
configure: [1m** checks for fundamental compiler characteristics[m
checking for inline... (cached) inline
checking for working void... yes
checking for working "return void"... yes
checking for inline __builtin_strlen... no
checking for long long int... (cached) yes
configure: [1m** checks for header files[m
checking for ANSI C header files... (cached) yes
checking sys/inttypes.h usability... no
checking sys/inttypes.h presence... no
checking for sys/inttypes.h... no
checking for unistd.h... (cached) yes
checking sys/file.h usability... yes
checking sys/file.h presence... yes
checking for sys/file.h... yes
checking for offsetof in stddef.h... yes
checking for sys/file.h... (cached) yes
checking for R_OK in unistd.h... yes
checking for sys/file.h... (cached) yes
checking for O_RDWR in fcntl.h... yes
checking for dirent.h that defines DIR... yes
checking for opendir in -ldir... no
checking for sys/utsname.h and struct utsname... yes
checking sys/shm.h usability... yes
checking sys/shm.h presence... yes
checking for sys/shm.h... yes
checking sys/ipc.h usability... yes
checking sys/ipc.h presence... yes
checking for sys/ipc.h... yes
checking termios.h usability... yes
checking termios.h presence... yes
checking for termios.h... yes
checking termio.h usability... yes
checking termio.h presence... yes
checking for termio.h... yes
checking sys/termio.h usability... no
checking sys/termio.h presence... no
checking for sys/termio.h... no
checking sgtty.h usability... yes
checking sgtty.h presence... yes
checking for sgtty.h... yes
checking for tcgetattr... yes
checking for TCSAFLUSH in termios.h... yes
checking for struct winsize in termios.h... no
checking for struct winsize in sys/ioctl.h... yes
checking for X... libraries , headers 
checking for gethostbyname... yes
checking for connect... yes
checking for remove... yes
checking for shmat... yes
checking for IceConnectionNumber in -lICE... yes
configure: [1m** checks for typedefs[m
checking for caddr_t in sys/types.h... yes
checking for socklen_t in sys/socket.h... yes
checking size of off_t... 8
checking size of struct timeval... 16
configure: [1m** checks for structure members[m
checking for struct dirent.d_namlen... no
checking whether struct tm is in sys/time.h or time.h... time.h
configure: [1m** checks for functions and declarations[m
checking for working alloca.h... (cached) yes
checking for alloca... (cached) yes
checking for _setjmp... yes
checking for _longjmp... yes
checking return type of signal handlers... void
checking whether the signal handler function type needs dots... no
checking for sighold... yes
checking for sigprocmask... yes
checking for sigblock... yes
checking for signal blocking interfaces... SystemV POSIX BSD
checking whether signal handlers need to be reinstalled... no
checking whether signals are blocked when signal handlers are entered... yes
checking whether other signals are blocked when signal handlers are entered... no
checking for sigaction... yes
checking for siginterrupt... yes
checking for fpu_control_t... yes
checking for __setfpucw... yes
checking for raise... yes
checking for abort declaration... 
         extern void abort (void);
checking for perror declaration... yes
checking for strerror... yes
checking for sysconf... yes
checking for getdtablesize... yes
checking for memset... yes
checking for setsid... yes
checking for setpgid... yes
checking for fchmod... yes
checking for fsync... yes
checking for flock... yes
checking for gethostent... yes
checking for shutdown... yes
checking for usleep... yes
checking for ualarm... yes
checking for setitimer... yes
checking for nice... yes
checking for ftime... yes
checking for realpath... yes
checking for gethostname... yes
checking for readlink... yes
checking for getcwd... yes
checking for putenv... yes
checking for setenv... yes
checking for unsetenv... yes
checking whether environ is declared... yes
checking return value of unsetenv... void
checking for LC_MESSAGES... yes
checking for getrlimit... yes
checking for setrlimit... yes
checking size of rlim_t... 8
checking for getrlimit declaration... 
         extern int getrlimit (enum __rlimit_resource, struct rlimit *);
checking for setrlimit declaration... 
         extern int setrlimit (enum __rlimit_resource, const struct rlimit *);
checking for pid_t... yes
checking vfork.h usability... no
checking vfork.h presence... no
checking for vfork.h... no
checking for fork... yes
checking for vfork... yes
checking for working fork... yes
checking for working vfork... (cached) yes
checking for waitpid declaration... 
         extern pid_t waitpid (pid_t, int*, int);
checking sys/resource.h usability... yes
checking sys/resource.h presence... yes
checking for sys/resource.h... yes
checking sys/times.h usability... yes
checking sys/times.h presence... yes
checking for sys/times.h... yes
checking for getrusage... yes
checking for getrusage declaration... 
         extern int getrusage (int, struct rusage *);
checking whether getrusage works... yes
checking whether stat file-mode macros are broken... no
checking whether time.h and sys/time.h may both be included... yes
checking for lstat... yes
checking sys/statvfs.h usability... yes
checking sys/statvfs.h presence... yes
checking for sys/statvfs.h... yes
checking sys/statfs.h usability... yes
checking sys/statfs.h presence... yes
checking for sys/statfs.h... yes
checking for sys/stat.h... (cached) yes
checking whether f_fsid is scalar... yes
checking size of fsblkcnt_t... 8
checking size of fsfilcnt_t... 8
checking for struct stat.st_rdev... yes
checking for struct stat.st_blksize... yes
checking for struct stat.st_blocks... yes
checking size of ino_t... 8
checking size of dev_t... 8
checking for ELOOP... yes
checking for closedir declaration... 
         extern int closedir (DIR*);
checking for usable closedir return value... yes
checking for ioctl... yes
checking for ioctl declaration... 
         extern int ioctl (int, unsigned long, ...);
checking for FIONREAD... no
checking for FIONREAD in sys/filio.h... no
checking for FIONREAD in sys/ioctl.h... yes
checking for reliable FIONREAD... yes
checking for poll... yes
checking for reliable poll()... yes
checking for select... yes
checking for sys/select.h... yes
checking for select declaration... 
         extern int select (int, fd_set *, fd_set *, fd_set *, struct timeval *);
checking for reliable select()... yes
checking for gettimeofday... yes
checking for gettimeofday declaration... 
         extern int gettimeofday (struct timeval *, struct timezone *);
checking netdb.h usability... yes
checking netdb.h presence... yes
checking for netdb.h... yes
checking for connect... (cached) yes
checking for connect declaration... 
         extern int connect (int, const struct sockaddr *, unsigned int);
checking sys/un.h usability... yes
checking sys/un.h presence... yes
checking for sys/un.h... yes
checking for sun_len in struct sockaddr_un... no
checking for IPv4 sockets... yes
checking for IPv6 sockets... yes
checking for inet_pton... yes
checking for inet_ntop... yes
checking for inet_addr... yes
checking for setsockopt... yes
checking for getsockopt... yes
checking netinet/in.h usability... yes
checking netinet/in.h presence... yes
checking for netinet/in.h... yes
checking arpa/inet.h usability... yes
checking arpa/inet.h presence... yes
checking for arpa/inet.h... yes
checking for inet_addr declaration... 
         extern unsigned int inet_addr (const char*);
checking for netinet/tcp.h... yes
checking for setsockopt declaration... 
         extern int setsockopt (int, int, int, const void*, unsigned int);
checking for the code address range... 0x0000000000000000
checking for the malloc address range... 0x0000000001000000
checking for the shared library address range... 0x00007EFF46000000
checking for the stack address range... 0x00007FFD50000000
checking for getpagesize... yes
checking for getpagesize declaration... 
         extern int getpagesize (void);
checking for vadvise... no
checking for vm_allocate... no
checking sys/mman.h usability... yes
checking sys/mman.h presence... yes
checking for sys/mman.h... yes
checking for mmap... yes
checking for working mmap... yes
checking for munmap... yes
checking for msync... yes
checking for mprotect... yes
checking for working mprotect... yes
checking for working shared memory... yes
checking sys/sysmacros.h usability... yes
checking sys/sysmacros.h presence... yes
checking for sys/sysmacros.h... yes
checking for attachability of removed shared memory... no
checking for dlfcn.h... (cached) yes
checking for library containing dlopen... -ldl
checking for dlopen... yes
checking for dlsym... yes
checking for dlvsym... yes
checking for dlerror... yes
checking for dlclose... yes
checking for dladdr... yes
configure: [1m** checks for libraries[m
checking for library containing tgetent... -lncurses
configure: not checking for readline
configure: [1m** checks for OS services[m
checking for the valid characters in filenames... 8-bit
configure: [1m** checks for compiler characteristics (arithmetic data types)[m
checking whether char is unsigned... no
checking whether single-float divbyzero raises an exception... no
checking whether single-float overflow raises an exception... no
checking whether single-float underflow raises an exception... no
checking whether single-float inexact raises an exception... no
checking whether double-float divbyzero raises an exception... no
checking whether double-float overflow raises an exception... no
checking whether double-float underflow raises an exception... no
checking whether double-float inexact raises an exception... no
checking for long double... yes
checking whether byte ordering is bigendian... no
configure: checking for integer types and behaviour...
creating intparam.h
configure: checking for floating-point types and behaviour...
creating floatparam.h
configure: [1m** output file generation[m
configure: updating cache config.cache
configure: creating ./config.status
config.status: creating po/Makefile.in
config.status: creating gllib/Makefile
config.status: creating makemake
config.status: creating config.h
config.status: executing depfiles commands
config.status: executing po-directories commands
config.status: creating po/POTFILES
config.status: creating po/Makefile
Configure findings:
  FFI:        no (user requested: default)
  readline:   no (user requested: no)
  libsigsegv: yes
./makemake  --without-readline --with-libsigsegv-prefix=/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp --prefix=/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/EMA-XPS    > Makefile
make[1]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
cp -p cfgunix.lisp config.lisp
chmod +w config.lisp
echo '(setq *clhs-root-default* "http://www.lisp.org/HyperSpec/")' >> config.lisp
make[1]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'

To continue building CLISP, the following commands are recommended
  (cf. unix/INSTALL step 4 ff):
    cd src
    vi config.lisp
    make
    make check
make[1]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
mkdir -p gllib
if test ! -f gllib/Makefile; then sh config.status --file=gllib/Makefile depfiles; fi
cd gllib && make CFLAGS="-g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. "
make[2]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
make[3]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
make[3]: Nothing to be done for 'am--refresh'.
make[3]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
{ echo '/* DO NOT EDIT! GENERATED AUTOMATICALLY! */'; \
  cat ./alloca.in.h; \
} > alloca.h-t
mv -f alloca.h-t alloca.h
rm -f configmake.h-t configmake.h
{ echo '/* DO NOT EDIT! GENERATED AUTOMATICALLY! */'; \
  echo '#define PREFIX "/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/EMA-XPS"'; \
  echo '#define EXEC_PREFIX "/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/EMA-XPS"'; \
  echo '#define BINDIR "/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/EMA-XPS/bin"'; \
  echo '#define SBINDIR "/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/EMA-XPS/sbin"'; \
  echo '#define LIBEXECDIR "/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/EMA-XPS/libexec"'; \
  echo '#define DATAROOTDIR "/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/EMA-XPS/share"'; \
  echo '#define DATADIR "/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/EMA-XPS/share"'; \
  echo '#define SYSCONFDIR "/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/EMA-XPS/etc"'; \
  echo '#define SHAREDSTATEDIR "/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/EMA-XPS/com"'; \
  echo '#define LOCALSTATEDIR "/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/EMA-XPS/var"'; \
  echo '#define INCLUDEDIR "/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/EMA-XPS/include"'; \
  echo '#define OLDINCLUDEDIR "/usr/include"'; \
  echo '#define DOCDIR "/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/EMA-XPS/share/doc/clisp"'; \
  echo '#define INFODIR "/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/EMA-XPS/share/info"'; \
  echo '#define HTMLDIR "/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/EMA-XPS/share/doc/clisp"'; \
  echo '#define DVIDIR "/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/EMA-XPS/share/doc/clisp"'; \
  echo '#define PDFDIR "/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/EMA-XPS/share/doc/clisp"'; \
  echo '#define PSDIR "/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/EMA-XPS/share/doc/clisp"'; \
  echo '#define LIBDIR "/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/EMA-XPS/lib"'; \
  echo '#define LISPDIR ""'; \
  echo '#define LOCALEDIR "/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/EMA-XPS/share/locale"'; \
  echo '#define MANDIR "/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/EMA-XPS/share/man"'; \
  echo '#define MANEXT ""'; \
  echo '#define PKGDATADIR "/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/EMA-XPS/share/clisp"'; \
  echo '#define PKGINCLUDEDIR "/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/EMA-XPS/include/clisp"'; \
  echo '#define PKGLIBDIR "/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/EMA-XPS/lib/clisp"'; \
  echo '#define PKGLIBEXECDIR ""'; \
} | sed '/""/d' > configmake.h-t
mv configmake.h-t configmake.h
rm -f stdlib.h-t stdlib.h
{ echo '/* DO NOT EDIT! GENERATED AUTOMATICALLY! */' && \
  sed -e 's/@''INCLUDE_NEXT''@/include_next/g' \
      -e 's|@''NEXT_STDLIB_H''@|<stdlib.h>|g' \
      -e 's|@''GNULIB_MALLOC_POSIX''@|1|g' \
      -e 's|@''GNULIB_REALLOC_POSIX''@|0|g' \
      -e 's|@''GNULIB_CALLOC_POSIX''@|0|g' \
      -e 's|@''GNULIB_GETSUBOPT''@|0|g' \
      -e 's|@''GNULIB_MKDTEMP''@|0|g' \
      -e 's|@''GNULIB_MKSTEMP''@|0|g' \
      -e 's|@''GNULIB_PUTENV''@|0|g' \
      -e 's|@''GNULIB_SETENV''@|0|g' \
      -e 's|@''GNULIB_UNSETENV''@|0|g' \
      -e 's|@''HAVE_CALLOC_POSIX''@|1|g' \
      -e 's|@''HAVE_GETSUBOPT''@|1|g' \
      -e 's|@''HAVE_MALLOC_POSIX''@|1|g' \
      -e 's|@''HAVE_MKDTEMP''@|1|g' \
      -e 's|@''HAVE_REALLOC_POSIX''@|1|g' \
      -e 's|@''HAVE_SETENV''@|1|g' \
      -e 's|@''HAVE_UNSETENV''@|1|g' \
      -e 's|@''REPLACE_MKSTEMP''@|0|g' \
      -e 's|@''REPLACE_PUTENV''@|0|g' \
      -e 's|@''VOID_UNSETENV''@|0|g' \
      -e '/definition of GL_LINK_WARNING/r ../src/build-aux/link-warning.h' \
      < ./stdlib.in.h; \
} > stdlib.h-t
mv stdlib.h-t stdlib.h
rm -f unistd.h-t unistd.h
{ echo '/* DO NOT EDIT! GENERATED AUTOMATICALLY! */'; \
  sed -e 's|@''HAVE_UNISTD_H''@|1|g' \
      -e 's/@''INCLUDE_NEXT''@/include_next/g' \
      -e 's|@''NEXT_UNISTD_H''@|<unistd.h>|g' \
      -e 's|@''GNULIB_CHOWN''@|0|g' \
      -e 's|@''GNULIB_DUP2''@|0|g' \
      -e 's|@''GNULIB_ENVIRON''@|0|g' \
      -e 's|@''GNULIB_FCHDIR''@|0|g' \
      -e 's|@''GNULIB_FTRUNCATE''@|0|g' \
      -e 's|@''GNULIB_GETCWD''@|0|g' \
      -e 's|@''GNULIB_GETLOGIN_R''@|0|g' \
      -e 's|@''GNULIB_GETPAGESIZE''@|0|g' \
      -e 's|@''GNULIB_LCHOWN''@|0|g' \
      -e 's|@''GNULIB_LSEEK''@|0|g' \
      -e 's|@''GNULIB_READLINK''@|0|g' \
      -e 's|@''GNULIB_SLEEP''@|0|g' \
      -e 's|@''HAVE_DUP2''@|1|g' \
      -e 's|@''HAVE_FTRUNCATE''@|1|g' \
      -e 's|@''HAVE_GETPAGESIZE''@|1|g' \
      -e 's|@''HAVE_READLINK''@|1|g' \
      -e 's|@''HAVE_SLEEP''@|1|g' \
      -e 's|@''HAVE_DECL_ENVIRON''@|1|g' \
      -e 's|@''HAVE_DECL_GETLOGIN_R''@|1|g' \
      -e 's|@''HAVE_OS_H''@|0|g' \
      -e 's|@''HAVE_SYS_PARAM_H''@|0|g' \
      -e 's|@''REPLACE_CHOWN''@|0|g' \
      -e 's|@''REPLACE_FCHDIR''@|0|g' \
      -e 's|@''REPLACE_GETCWD''@|0|g' \
      -e 's|@''REPLACE_GETPAGESIZE''@|0|g' \
      -e 's|@''REPLACE_LCHOWN''@|0|g' \
      -e 's|@''REPLACE_LSEEK''@|0|g' \
      < ./unistd.in.h; \
} > unistd.h-t
mv unistd.h-t unistd.h
make  all-am
make[3]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
make[4]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
make[4]: Nothing to be done for 'am--refresh'.
make[4]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
depbase=`echo localcharset.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool --tag=CC   --mode=compile gcc -DHAVE_CONFIG_H -I. -I..  -I../intl -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include  -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I.  -MT localcharset.lo -MD -MP -MF $depbase.Tpo -c -o localcharset.lo localcharset.c &&\
mv -f $depbase.Tpo $depbase.Plo
mkdir .libs
 gcc -DHAVE_CONFIG_H -I. -I.. -I../intl -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -MT localcharset.lo -MD -MP -MF .deps/localcharset.Tpo -c localcharset.c  -fPIC -DPIC -o .libs/localcharset.o
 gcc -DHAVE_CONFIG_H -I. -I.. -I../intl -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -MT localcharset.lo -MD -MP -MF .deps/localcharset.Tpo -c localcharset.c -o localcharset.o >/dev/null 2>&1
depbase=`echo uniname/uniname.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool --tag=CC   --mode=compile gcc -DHAVE_CONFIG_H -I. -I..  -I../intl -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include  -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I.  -MT uniname/uniname.lo -MD -MP -MF $depbase.Tpo -c -o uniname/uniname.lo uniname/uniname.c &&\
mv -f $depbase.Tpo $depbase.Plo
mkdir uniname/.libs
 gcc -DHAVE_CONFIG_H -I. -I.. -I../intl -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -MT uniname/uniname.lo -MD -MP -MF uniname/.deps/uniname.Tpo -c uniname/uniname.c  -fPIC -DPIC -o uniname/.libs/uniname.o
 gcc -DHAVE_CONFIG_H -I. -I.. -I../intl -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -MT uniname/uniname.lo -MD -MP -MF uniname/.deps/uniname.Tpo -c uniname/uniname.c -o uniname/uniname.o >/dev/null 2>&1
depbase=`echo uniwidth/width.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool --tag=CC   --mode=compile gcc -DHAVE_CONFIG_H -I. -I..  -I../intl -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include  -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I.  -MT uniwidth/width.lo -MD -MP -MF $depbase.Tpo -c -o uniwidth/width.lo uniwidth/width.c &&\
mv -f $depbase.Tpo $depbase.Plo
mkdir uniwidth/.libs
 gcc -DHAVE_CONFIG_H -I. -I.. -I../intl -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -MT uniwidth/width.lo -MD -MP -MF uniwidth/.deps/width.Tpo -c uniwidth/width.c  -fPIC -DPIC -o uniwidth/.libs/width.o
 gcc -DHAVE_CONFIG_H -I. -I.. -I../intl -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -MT uniwidth/width.lo -MD -MP -MF uniwidth/.deps/width.Tpo -c uniwidth/width.c -o uniwidth/width.o >/dev/null 2>&1
depbase=`echo regex.lo | sed 's|[^/]*$|.deps/&|;s|\.lo$||'`;\
/bin/bash ../libtool --tag=CC   --mode=compile gcc -DHAVE_CONFIG_H -I. -I..  -I../intl -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include  -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I.  -MT regex.lo -MD -MP -MF $depbase.Tpo -c -o regex.lo regex.c &&\
mv -f $depbase.Tpo $depbase.Plo
 gcc -DHAVE_CONFIG_H -I. -I.. -I../intl -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -MT regex.lo -MD -MP -MF .deps/regex.Tpo -c regex.c  -fPIC -DPIC -o .libs/regex.o
In file included from regex.c:60:0:
regex_internal.c: In function ‘re_string_allocate’:
regex_internal.c:47:16: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   if (init_len < dfa->mb_cur_max)
                ^
regex_internal.c: In function ‘build_wcs_buffer’:
regex_internal.c:230:42: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
    for (i = 0; i < pstr->mb_cur_max && i < remain_len; ++i)
                                          ^
regex_internal.c: In function ‘build_wcs_upper_buffer’:
regex_internal.c:370:44: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
      for (i = 0; i < pstr->mb_cur_max && i < remain_len; ++i)
                                            ^
regex_internal.c: In function ‘re_string_reconstruct’:
regex_internal.c:750:27: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
      if (raw + offset - p <= mbclen
                           ^
regex_internal.c: In function ‘re_node_set_remove_at’:
regex_internal.c:1393:11: warning: comparison of unsigned expression < 0 is always false [-Wtype-limits]
   if (idx < 0 || idx >= set->nelem)
           ^
In file included from regex.c:61:0:
regcomp.c: In function ‘re_compile_fastmap_iter’:
regcomp.c:337:15: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
       &state) == p - buf
               ^
regcomp.c: In function ‘init_dfa’:
regcomp.c:904:27: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   if (isascii (ch) && wch != ch)
                           ^
regcomp.c: In function ‘parse_dup_op’:
regcomp.c:2555:16: warning: comparison of unsigned expression < 0 is always false [-Wtype-limits]
   if ((Idx) -1 < 0 || end != REG_MISSING)
                ^
regcomp.c: In function ‘build_range_exp’:
regcomp.c:2629:24: warning: signed and unsigned type in conditional expression [-Wsign-compare]
   ? __btowc (start_ch) : start_elem->opr.wch);
                        ^
regcomp.c:2631:27: warning: signed and unsigned type in conditional expression [-Wsign-compare]
        ? __btowc (end_ch) : end_elem->opr.wch);
                           ^
regcomp.c: In function ‘fetch_number’:
regcomp.c:3682:41: warning: signed and unsigned type in conditional expression [-Wsign-compare]
       : ((num == REG_MISSING) ? c - '0' : num * 10 + c - '0'));
                                         ^
In file included from regex.c:58:0:
regexec.c: In function ‘re_search_2_stub’:
regexec.c:381:19: warning: comparison of unsigned expression < 0 is always false [-Wtype-limits]
   if (BE (length1 < 0 || length2 < 0 || stop < 0 || len < length1, 0))
                   ^
regex_internal.h:92:42: note: in definition of macro ‘BE’
 # define BE(expr, val) __builtin_expect (expr, val)
                                          ^
regexec.c:381:34: warning: comparison of unsigned expression < 0 is always false [-Wtype-limits]
   if (BE (length1 < 0 || length2 < 0 || stop < 0 || len < length1, 0))
                                  ^
regex_internal.h:92:42: note: in definition of macro ‘BE’
 # define BE(expr, val) __builtin_expect (expr, val)
                                          ^
regexec.c:381:46: warning: comparison of unsigned expression < 0 is always false [-Wtype-limits]
   if (BE (length1 < 0 || length2 < 0 || stop < 0 || len < length1, 0))
                                              ^
regex_internal.h:92:42: note: in definition of macro ‘BE’
 # define BE(expr, val) __builtin_expect (expr, val)
                                          ^
regexec.c: In function ‘re_search_stub’:
regexec.c:434:17: warning: comparison of unsigned expression < 0 is always false [-Wtype-limits]
   if (BE (start < 0 || start > length, 0))
                 ^
regex_internal.h:92:42: note: in definition of macro ‘BE’
 # define BE(expr, val) __builtin_expect (expr, val)
                                          ^
regexec.c:438:27: warning: comparison of unsigned expression < 0 is always false [-Wtype-limits]
   else if (BE (last_start < 0 || (range < 0 && start <= last_start), 0))
                           ^
regex_internal.h:92:42: note: in definition of macro ‘BE’
 # define BE(expr, val) __builtin_expect (expr, val)
                                          ^
In file included from regex_internal.h:23:0,
                 from regex.c:58:
regexec.c:497:28: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
    assert (pmatch[0].rm_so == start);
                            ^
In file included from regex.c:62:0:
regexec.c: In function ‘re_search_internal’:
regexec.c:934:28: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     (pmatch[reg_idx].rm_so == mctx.input.valid_len
                            ^
regexec.c:938:28: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     (pmatch[reg_idx].rm_eo == mctx.input.valid_len
                            ^
regexec.c: In function ‘set_regs’:
regexec.c:1472:35: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   for (idx = pmatch[0].rm_so; idx <= pmatch[0].rm_eo ;)
                                   ^
regexec.c:1476:15: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
       if (idx == pmatch[0].rm_eo && cur_node == mctx->last_node)
               ^
regexec.c: In function ‘update_regs’:
regexec.c:1575:30: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
    if (pmatch[reg_num].rm_so < cur_idx)
                              ^
regexec.c: In function ‘check_arrival’:
regexec.c:2998:53: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   for (null_cnt = 0; str_idx < last_str && null_cnt <= mctx->max_mb_elem_len;)
                                                     ^
regexec.c: In function ‘check_node_accept_bytes’:
regexec.c:3818:21: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
       for (i = 1; i < char_len; ++i)
                     ^
regexec.c: In function ‘match_ctx_add_entry’:
regexec.c:4301:29: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   if (mctx->max_mb_elem_len < to - from)
                             ^
 gcc -DHAVE_CONFIG_H -I. -I.. -I../intl -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -MT regex.lo -MD -MP -MF .deps/regex.Tpo -c regex.c -o regex.o >/dev/null 2>&1
/bin/bash ../libtool --tag=CC   --mode=link gcc  -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I.    -o libgnu.la  localcharset.lo uniname/uniname.lo uniwidth/width.lo regex.lo  -lncurses -ldl 
ar cru .libs/libgnu.a .libs/localcharset.o uniname/.libs/uniname.o uniwidth/.libs/width.o .libs/regex.o
ar: `u' modifier ignored since `D' is the default (see `U')
ranlib .libs/libgnu.a
creating libgnu.la
(cd .libs && rm -f libgnu.la && ln -s ../libgnu.la libgnu.la)
rm -f t-charset.alias charset.alias
/bin/bash ./config.charset 'x86_64-unknown-linux-gnu' > t-charset.alias
mv t-charset.alias charset.alias
rm -f t-ref-add.sed ref-add.sed
sed -e '/^#/d' -e 's/@''PACKAGE''@/clisp/g' ref-add.sin > t-ref-add.sed
mv t-ref-add.sed ref-add.sed
rm -f t-ref-del.sed ref-del.sed
sed -e '/^#/d' -e 's/@''PACKAGE''@/clisp/g' ref-del.sin > t-ref-del.sed
mv t-ref-del.sed ref-del.sed
make[3]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
make[2]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
echo '#include "config.h"' > tmp.c
cat 'intparam.c' >> tmp.c
gcc tmp.c -o intparam
./intparam > intparam.h
rm -f intparam tmp.c
echo '#include "config.h"' > tmp.c
cat 'floatparam.c' >> tmp.c
gcc tmp.c -o floatparam
./floatparam > floatparam.h
rm -f floatparam tmp.c
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -x none  ../utils/comment5.c -o comment5
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -x none  ../utils/gctrigger.c -o gctrigger
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -x none  ../utils/varbrace.c -o varbrace
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -x none  ../utils/txt2c.c -o txt2c
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -x none  ../utils/ccmp2c.c -o ccmp2c
./comment5 spvw.d | ./gctrigger | ./varbrace > spvw.c
./comment5 spvwtabf.d | ./gctrigger | ./varbrace > spvwtabf.c
./comment5 spvwtabs.d | ./gctrigger | ./varbrace > spvwtabs.c
./comment5 spvwtabo.d | ./gctrigger | ./varbrace > spvwtabo.c
./comment5 eval.d | ./gctrigger | ./varbrace > eval.c
./comment5 control.d | ./gctrigger | ./varbrace > control.c
./comment5 encoding.d | ./gctrigger | ./varbrace > encoding.c
./comment5 pathname.d | ./gctrigger | ./varbrace > pathname.c
./comment5 stream.d | ./gctrigger | ./varbrace > stream.c
./comment5 socket.d | ./gctrigger | ./varbrace > socket.c
./comment5 io.d | ./gctrigger | ./varbrace > io.c
./comment5 funarg.d | ./gctrigger | ./varbrace > funarg.c
./comment5 array.d | ./gctrigger | ./varbrace > array.c
./comment5 hashtabl.d | ./gctrigger | ./varbrace > hashtabl.c
./comment5 list.d | ./gctrigger | ./varbrace > list.c
./comment5 package.d | ./gctrigger | ./varbrace > package.c
./comment5 record.d | ./gctrigger | ./varbrace > record.c
./comment5 weak.d | ./gctrigger | ./varbrace > weak.c
./comment5 sequence.d | ./gctrigger | ./varbrace > sequence.c
./comment5 charstrg.d | ./gctrigger | ./varbrace > charstrg.c
./comment5 debug.d | ./gctrigger | ./varbrace > debug.c
./comment5 error.d | ./gctrigger | ./varbrace > error.c
./comment5 misc.d | ./gctrigger | ./varbrace > misc.c
./comment5 time.d | ./gctrigger | ./varbrace > time.c
./comment5 predtype.d | ./gctrigger | ./varbrace > predtype.c
./comment5 symbol.d | ./gctrigger | ./varbrace > symbol.c
./comment5 lisparit.d | ./gctrigger | ./varbrace > lisparit.c
./comment5 i18n.d | ./gctrigger | ./varbrace > i18n.c
./comment5 unixaux.d | ./gctrigger | ./varbrace > unixaux.c
./comment5 built.d | ./gctrigger | ./varbrace > built.c
./comment5 lispbibl.d | sed -e 's/^\(%% .*\)//' | ./gctrigger | ./varbrace > lispbibl.c
End of comment outside comment in line 5704
./comment5 fsubr.d | ./gctrigger | ./varbrace > fsubr.c
./comment5 subr.d | ./gctrigger | ./varbrace > subr.c
./comment5 pseudofun.d | ./gctrigger | ./varbrace > pseudofun.c
./comment5 constsym.d | ./gctrigger | ./varbrace > constsym.c
./comment5 constobj.d | ./gctrigger | ./varbrace > constobj.c
./comment5 unix.d | ./gctrigger | ./varbrace > unix.c
./comment5 xthread.d | ./gctrigger | ./varbrace > xthread.c
./comment5 constpack.d | ./gctrigger | ./varbrace > constpack.c
./comment5 avl.d | ./gctrigger | ./varbrace > avl.c
./comment5 sort.d | ./gctrigger | ./varbrace > sort.c
./comment5 subrkw.d | ./gctrigger | ./varbrace > subrkw.c
./comment5 bytecode.d | ./gctrigger | ./varbrace > bytecode.c
./comment5 spvw_module.d | ./gctrigger | ./varbrace > spvw_module.c
./comment5 spvw_debug.d | ./gctrigger | ./varbrace > spvw_debug.c
./comment5 spvw_alloca.d | ./gctrigger | ./varbrace > spvw_alloca.c
./comment5 spvw_mmap.d | ./gctrigger | ./varbrace > spvw_mmap.c
./comment5 spvw_multimap.d | ./gctrigger | ./varbrace > spvw_multimap.c
./comment5 spvw_singlemap.d | ./gctrigger | ./varbrace > spvw_singlemap.c
./comment5 spvw_page.d | ./gctrigger | ./varbrace > spvw_page.c
./comment5 spvw_heap.d | ./gctrigger | ./varbrace > spvw_heap.c
./comment5 spvw_global.d | ./gctrigger | ./varbrace > spvw_global.c
./comment5 spvw_gcstat.d | ./gctrigger | ./varbrace > spvw_gcstat.c
./comment5 spvw_space.d | ./gctrigger | ./varbrace > spvw_space.c
./comment5 spvw_mark.d | ./gctrigger | ./varbrace > spvw_mark.c
./comment5 spvw_objsize.d | ./gctrigger | ./varbrace > spvw_objsize.c
./comment5 spvw_update.d | ./gctrigger | ./varbrace > spvw_update.c
./comment5 spvw_fault.d | ./gctrigger | ./varbrace > spvw_fault.c
./comment5 spvw_sigsegv.d | ./gctrigger | ./varbrace > spvw_sigsegv.c
./comment5 spvw_sigcld.d | ./gctrigger | ./varbrace > spvw_sigcld.c
./comment5 spvw_sigpipe.d | ./gctrigger | ./varbrace > spvw_sigpipe.c
./comment5 spvw_sigint.d | ./gctrigger | ./varbrace > spvw_sigint.c
./comment5 spvw_sigwinch.d | ./gctrigger | ./varbrace > spvw_sigwinch.c
./comment5 spvw_sigterm.d | ./gctrigger | ./varbrace > spvw_sigterm.c
./comment5 spvw_garcol.d | ./gctrigger | ./varbrace > spvw_garcol.c
./comment5 spvw_genera1.d | ./gctrigger | ./varbrace > spvw_genera1.c
./comment5 spvw_gcmark.d | ./gctrigger | ./varbrace > spvw_gcmark.c
./comment5 spvw_genera2.d | ./gctrigger | ./varbrace > spvw_genera2.c
./comment5 spvw_weak.d | ./gctrigger | ./varbrace > spvw_weak.c
./comment5 spvw_genera3.d | ./gctrigger | ./varbrace > spvw_genera3.c
./comment5 spvw_allocate.d | ./gctrigger | ./varbrace > spvw_allocate.c
./comment5 spvw_typealloc.d | ./gctrigger | ./varbrace > spvw_typealloc.c
./comment5 spvw_circ.d | ./gctrigger | ./varbrace > spvw_circ.c
./comment5 spvw_walk.d | ./gctrigger | ./varbrace > spvw_walk.c
./comment5 spvw_ctype.d | ./gctrigger | ./varbrace > spvw_ctype.c
./comment5 spvw_language.d | ./gctrigger | ./varbrace > spvw_language.c
./comment5 spvw_memfile.d | ./gctrigger | ./varbrace > spvw_memfile.c
./comment5 errunix.d | ./gctrigger | ./varbrace > errunix.c
./comment5 aridecl.d | ./gctrigger | ./varbrace > aridecl.c
./comment5 arilev0.d | ./gctrigger | ./varbrace > arilev0.c
./comment5 arilev1.d | ./gctrigger | ./varbrace > arilev1.c
./comment5 intelem.d | ./gctrigger | ./varbrace > intelem.c
./comment5 intlog.d | ./gctrigger | ./varbrace > intlog.c
./comment5 intplus.d | ./gctrigger | ./varbrace > intplus.c
./comment5 intcomp.d | ./gctrigger | ./varbrace > intcomp.c
./comment5 intbyte.d | ./gctrigger | ./varbrace > intbyte.c
./comment5 intmal.d | ./gctrigger | ./varbrace > intmal.c
./comment5 intdiv.d | ./gctrigger | ./varbrace > intdiv.c
./comment5 intgcd.d | ./gctrigger | ./varbrace > intgcd.c
./comment5 int2adic.d | ./gctrigger | ./varbrace > int2adic.c
./comment5 intsqrt.d | ./gctrigger | ./varbrace > intsqrt.c
./comment5 intprint.d | ./gctrigger | ./varbrace > intprint.c
./comment5 intread.d | ./gctrigger | ./varbrace > intread.c
./comment5 intserial.d | ./gctrigger | ./varbrace > intserial.c
./comment5 rational.d | ./gctrigger | ./varbrace > rational.c
./comment5 sfloat.d | ./gctrigger | ./varbrace > sfloat.c
./comment5 ffloat.d | ./gctrigger | ./varbrace > ffloat.c
./comment5 dfloat.d | ./gctrigger | ./varbrace > dfloat.c
./comment5 lfloat.d | ./gctrigger | ./varbrace > lfloat.c
./comment5 flo_konv.d | ./gctrigger | ./varbrace > flo_konv.c
./comment5 flo_rest.d | ./gctrigger | ./varbrace > flo_rest.c
./comment5 realelem.d | ./gctrigger | ./varbrace > realelem.c
./comment5 realrand.d | ./gctrigger | ./varbrace > realrand.c
./comment5 realtran.d | ./gctrigger | ./varbrace > realtran.c
./comment5 compelem.d | ./gctrigger | ./varbrace > compelem.c
./comment5 comptran.d | ./gctrigger | ./varbrace > comptran.c
./comment5 arilev1c.d | ./gctrigger | ./varbrace > arilev1c.c
./comment5 arilev1e.d | ./gctrigger | ./varbrace > arilev1e.c
./comment5 arilev1i.d | ./gctrigger | ./varbrace > arilev1i.c
./comment5 genclisph.d | ./gctrigger | ./varbrace > genclisph.c
./comment5 noreadline.d | ./gctrigger | ./varbrace > noreadline.c
./comment5 lispbibl.d | sed -e '/^%% /{s///p;d;}' -e '/^#line /!s/.*//' > gen.lispbibl.c
rm -f localcharset.h
ln -s gllib/localcharset.h localcharset.h
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -c spvw.c
In file included from spvw.d:153:0:
spvw_debug.d: In function ‘nobject_out1’:
spvw_debug.d:224:17: warning: format ‘%lx’ expects argument of type ‘long unsigned int’, but argument 3 has type ‘void *’ [-Wformat=]
     fprintf(out," 0x%lx>",TheFpointer(obj)->fp_pointer);
                 ^
spvw_debug.d:237:40: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long int’ [-Wformat=]
   } else if (fixnump(obj)) fprintf(out,"%d",fixnum_to_V(obj));
                                        ^
spvw_debug.d:288:17: warning: format ‘%d’ expects argument of type ‘int’, but argument 7 has type ‘long unsigned int’ [-Wformat=]
     fprintf(out,"#<built-in-stream type=%d flags=%d len=%d xlen=%d slen=%d",
                 ^
spvw_debug.d:307:19: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
         for (; ii < Stream_length(obj) - strm_len; ii++) {
                   ^
spvw_debug.d:328:20: warning: format ‘%lx’ expects argument of type ‘long unsigned int’, but argument 3 has type ‘void *’ [-Wformat=]
   else fprintf(out,"#<huh?! address=0x%lx>",ThePointer(obj));
                    ^
spvw_debug.d: In function ‘bt_out’:
spvw_debug.d:362:15: warning: format ‘%lx’ expects argument of type ‘long unsigned int’, but argument 4 has type ‘const struct backtrace_t *’ [-Wformat=]
   fprintf(out,"[%d/0x%lx]%s ",bt_index,bt,bt_beyond_stack_p(bt,STACK)?"<":">");
               ^
spvw_debug.d:367:17: warning: format ‘%d’ expects argument of type ‘int’, but argument 4 has type ‘long unsigned int’ [-Wformat=]
     fprintf(out," delta: STACK=%d; SP=%d",
                 ^
In file included from spvw.d:546:0:
spvw_sigsegv.d: In function ‘stackoverflow_handler’:
spvw_sigsegv.d:74:5: warning: format not a string literal and no format arguments [-Wformat-security]
     fprintf(stderr,GETTEXTL("Apollo 13 scenario: Stack overflow handling failed. On the next stack overflow we will crash!!!"));
     ^
In file included from spvw.d:561:0:
spvw_allocate.d: In function ‘make_space_gc_true’:
spvw_allocate.d:246:7: warning: format not a string literal and no format arguments [-Wformat-security]
       fprintf(stderr,GETTEXTL("Trying to make room through a GC..."));
       ^
spvw_allocate.d: In function ‘make_space_gc_false’:
spvw_allocate.d:305:7: warning: format not a string literal and no format arguments [-Wformat-security]
       fprintf(stderr,GETTEXTL("Trying to make room through a GC..."));
       ^
spvw.d: In function ‘init_module_2’:
spvw.d:1563:9: warning: format not a string literal and no format arguments [-Wformat-security]
         fprintf(stderr,GETTEXTL(" in the locked package "));
         ^
spvw.d:1565:9: warning: format not a string literal and no format arguments [-Wformat-security]
         fprintf(stderr,GETTEXTL("\nold definition: "));
         ^
spvw.d: In function ‘usage’:
spvw.d:1602:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL("is an ANSI Common Lisp implementation."));
   ^
spvw.d:1604:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL("Usage:  "));
   ^
spvw.d:1605:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(program_name);
   ^
spvw.d:1609:19: warning: format not a string literal and no format arguments [-Wformat-security]
                   " read-eval-print loop is entered.\n"));
                   ^
spvw.d:1610:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL("Informative output:\n"));
   ^
spvw.d:1611:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL(" -h, --help    - print this help and exit\n"));
   ^
spvw.d:1612:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL(" --version     - print the version information\n"));
   ^
spvw.d:1613:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL(" --license     - print the licensing information\n"));
   ^
spvw.d:1614:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL(" -help-image   - print image-specific help and exit\n"));
   ^
spvw.d:1615:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL("Memory image selection:\n"));
   ^
spvw.d:1616:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL(" -B lisplibdir - set the installation directory\n"));
   ^
spvw.d:1618:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL(" -K linkingset - use this executable and memory image\n"));
   ^
spvw.d:1620:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL(" -M memfile    - use this memory image\n"));
   ^
spvw.d:1621:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL(" -m size       - memory size (size = nB or nKB or nMB)\n"));
   ^
spvw.d:1625:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL("Internationalization:\n"));
   ^
spvw.d:1626:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL(" -L language   - set user language\n"));
   ^
spvw.d:1627:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL(" -N nlsdir     - NLS catalog directory\n"));
   ^
spvw.d:1628:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL(" -Edomain encoding - set encoding\n"));
   ^
spvw.d:1629:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL("Interoperability:\n"));
   ^
spvw.d:1632:19: warning: format not a string literal and no format arguments [-Wformat-security]
                   "     and *LOAD-PRINT*/*COMPILE-PRINT*\n"));
                   ^
spvw.d:1633:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL(" -w            - wait for a keypress after program termination\n"));
   ^
spvw.d:1634:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL(" -I            - be ILISP-friendly\n"));
   ^
spvw.d:1635:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL("Startup actions:\n"));
   ^
spvw.d:1636:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL(" -ansi         - more ANSI CL compliance\n"));
   ^
spvw.d:1637:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL(" -traditional  - traditional (undoes -ansi)\n"));
   ^
spvw.d:1638:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL(" -modern       - start in a case-sensitive lowercase-preferring package\n"));
   ^
spvw.d:1639:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL(" -p package    - start in the package\n"));
   ^
spvw.d:1640:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL(" -C            - set *LOAD-COMPILING* to T\n"));
   ^
spvw.d:1641:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL(" -norc         - do not load the user ~/.clisprc file\n"));
   ^
spvw.d:1642:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL(" -lp dir       - add dir to *LOAD-PATHS* (can be repeated)\n"));
   ^
spvw.d:1643:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL(" -i file       - load initfile (can be repeated)\n"));
   ^
spvw.d:1644:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL("Actions:\n"));
   ^
spvw.d:1645:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL(" -c [-l] lispfile [-o outputfile] - compile lispfile\n"));
   ^
spvw.d:1646:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL(" -x expressions - execute the expressions, then exit\n"));
   ^
spvw.d:1647:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL(" Depending on the image, positional arguments can mean:\n"));
   ^
spvw.d:1648:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL("   lispscript [argument ...] - load script, then exit\n"));
   ^
spvw.d:1649:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL("   [argument ...]            - run the init-function\n"));
   ^
spvw.d:1650:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL("  arguments are placed in EXT:*ARGS* as strings.\n"));
   ^
spvw.d:1651:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL("These actions put CLISP into a batch mode, which is overridden by\n"));
   ^
spvw.d:1652:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL(" -on-error action - action can be one of debug, exit, abort, appease\n"));
   ^
spvw.d:1653:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL(" -repl            - enter the interactive read-eval-print loop when done\n"));
   ^
spvw.d:1654:3: warning: format not a string literal and no format arguments [-Wformat-security]
   printf(GETTEXTL("Default action is an interactive read-eval-print loop.\n"));
   ^
In file included from spvw.d:3542:0:
spvw_memfile.d: In function ‘find_memdump’:
spvw_memfile.d:1797:39: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
       && lseek(fd,mem_start,SEEK_SET) == mem_start) {
                                       ^
spvw.d: In function ‘main_actions’:
spvw.d:3149:16: warning: variable ‘count’ might be clobbered by ‘longjmp’ or ‘vfork’ [-Wclobbered]
     var uintL count = p->argv_init_filecount;
                ^
spvw.d:3167:39: warning: variable ‘fileptr’ might be clobbered by ‘longjmp’ or ‘vfork’ [-Wclobbered]
       var const argv_compile_file_t* fileptr = &p->argv_compile_files[0];
                                       ^
spvw.d:3168:18: warning: variable ‘count’ might be clobbered by ‘longjmp’ or ‘vfork’ [-Wclobbered]
       var uintL count = p->argv_compile_filecount;
                  ^
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -c spvwtabf.c
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -c spvwtabs.c
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -c spvwtabo.c
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -c eval.c
eval.d: In function ‘reset’:
eval.d:572:22: warning: format ‘%x’ expects argument of type ‘unsigned int’, but argument 5 has type ‘long unsigned int’ [-Wformat=]
       fprintf(stderr,"\n[%s:%d] reset() found no driver frame (sp=0x%x-0x%x)\n",
                      ^
eval.d:572:22: warning: format ‘%x’ expects argument of type ‘unsigned int’, but argument 6 has type ‘long unsigned int’ [-Wformat=]
eval.d: In function ‘interpret_bytecode_’:
eval.d:5773:22: warning: variable ‘closureptr’ might be clobbered by ‘longjmp’ or ‘vfork’ [-Wclobbered]
   var gcv_object_t* closureptr = (pushSTACK(closure), &STACK_0);
                      ^
eval.d:5719:23: warning: argument ‘closure’ might be clobbered by ‘longjmp’ or ‘vfork’ [-Wclobbered]
   #define closure_in  closure
                       ^
eval.d:5744:52: note: in expansion of macro ‘closure_in’
 local /*maygc*/ Values interpret_bytecode_ (object closure_in, Sbvector codeptr,
                                                    ^
eval.d:5744:73: warning: argument ‘codeptr’ might be clobbered by ‘longjmp’ or ‘vfork’ [-Wclobbered]
 local /*maygc*/ Values interpret_bytecode_ (object closure_in, Sbvector codeptr,
                                                                         ^
eval.d: In function ‘eval’:
eval.d:2928:34: warning: argument ‘form’ might be clobbered by ‘longjmp’ or ‘vfork’ [-Wclobbered]
 global maygc Values eval (object form)
                                  ^
eval.d: In function ‘funcall_iclosure’:
eval.d:2449:45: warning: argument ‘closure’ might be clobbered by ‘longjmp’ or ‘vfork’ [-Wclobbered]
 local maygc Values funcall_iclosure (object closure, gcv_object_t* args_pointer,
                                             ^
eval.d:2450:44: warning: argument ‘argcount’ might be clobbered by ‘longjmp’ or ‘vfork’ [-Wclobbered]
                                      uintC argcount)
                                            ^
eval.d: In function ‘eval_no_hooks’:
eval.d:2985:43: warning: argument ‘form’ might be clobbered by ‘longjmp’ or ‘vfork’ [-Wclobbered]
 global maygc Values eval_no_hooks (object form) {
                                           ^
eval.d: In function ‘invoke_handlers’:
eval.d:707:23: warning: variable ‘other_ranges’ might be clobbered by ‘longjmp’ or ‘vfork’ [-Wclobbered]
   var stack_range_t* other_ranges = inactive_handlers;
                       ^
eval.d:710:22: warning: variable ‘FRAME’ might be clobbered by ‘longjmp’ or ‘vfork’ [-Wclobbered]
   var gcv_object_t* FRAME = STACK;
                      ^
eval.d:723:20: warning: variable ‘i’ might be clobbered by ‘longjmp’ or ‘vfork’ [-Wclobbered]
         var uintL i = 0;
                    ^
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -c control.c
control.d: In function ‘C_tagbody’:
control.d:1563:15: warning: variable ‘body’ might be clobbered by ‘longjmp’ or ‘vfork’ [-Wclobbered]
   var object body = popSTACK();
               ^
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -c encoding.c
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -c pathname.c
pathname.d: In function ‘C_launch’:
pathname.d:8655:22: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘long int’ [-Wformat=]
       fprintf(stderr,"clisp/child: cannot set priority to %d: %s\n",
                      ^
pathname.d:8653:16: warning: ignoring return value of ‘nice’, declared with attribute warn_unused_result [-Wunused-result]
     errno = 0; nice(priority);
                ^
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -c stream.c
stream.d: In function ‘buffered_nextbyte’:
stream.d:6176:17: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   if ((endvalid == index) && !BufferedStream_have_eof_p(stream)) {
                 ^
stream.d:6197:13: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   if (index < endvalid)
             ^
stream.d: In function ‘redisplay’:
stream.d:11178:13: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     while (y<rows) {
             ^
stream.d: In function ‘clear_screen’:
stream.d:11361:11: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   while (y<rows) { cleared_linepart(y,0,cols); y++; }
           ^
stream.d: In function ‘insert_line’:
stream.d:11629:9: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   if (n > curr->bot - curr->y + 1)
         ^
stream.d: In function ‘delete_line’:
stream.d:11713:9: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   if (n > curr->bot - curr->y + 1)
         ^
stream.d: In function ‘C_set_window_cursor_position’:
stream.d:12241:13: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   if ((line < rows) && (column < cols)) {
             ^
stream.d:12241:32: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
   if ((line < rows) && (column < cols)) {
                                ^
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -c socket.c
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -c io.c
io.d: In function ‘C_pprint_indent’:
io.d:10049:19: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     if (linepos_i < offset)
                   ^
io.d: In function ‘C_bit_vector_reader’:
io.d:3292:10: warning: ‘ch’ may be used uninitialized in this function [-Wmaybe-uninitialized]
       if (chareq(ch,ascii('0'))) {
          ^
io.d: In function ‘C_vector_reader’:
io.d:3349:15: warning: ‘el’ may be used uninitialized in this function [-Wmaybe-uninitialized]
       *vptr++ = el;
               ^
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -c funarg.c
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -c array.c
array.d: In function ‘make_ssstring’:
array.d:4039:11: warning: comparison is always false due to limited range of data type [-Wtype-limits]
   if (len > arraysize_limit_1)
           ^
array.d: In function ‘ssstring_extend_low’:
array.d:4060:12: warning: comparison is always false due to limited range of data type [-Wtype-limits]
   if (size > arraysize_limit_1)
            ^
array.d: In function ‘ssstring_push_extend’:
array.d:4095:13: warning: comparison is always false due to limited range of data type [-Wtype-limits]
     if (len > arraysize_limit_1) /* cannot extend beyond arraysize_limit_1 */
             ^
array.d: In function ‘ssstring_extend’:
array.d:4119:18: warning: comparison is always false due to limited range of data type [-Wtype-limits]
   if (needed_len > arraysize_limit_1) /* cannot extend beyond arraysize_limit_1 */
                  ^
array.d:4124:17: warning: comparison is always false due to limited range of data type [-Wtype-limits]
     if (now_len > arraysize_limit_1) /* cannot extend beyond arraysize_limit_1 */
                 ^
array.d: In function ‘make_ssbvector’:
array.d:4183:11: warning: comparison is always false due to limited range of data type [-Wtype-limits]
   if (len > arraysize_limit_1)
           ^
array.d: In function ‘ssbvector_push_extend’:
array.d:4209:13: warning: comparison is always false due to limited range of data type [-Wtype-limits]
     if (len > arraysize_limit_1) /* cannot extend beyond arraysize_limit_1 */
             ^
array.d: In function ‘test_dims’:
array.d:4274:43: warning: comparison is always true due to limited range of data type [-Wtype-limits]
       if (!((produkt_hi==0) && (produkt_lo<=arraysize_limit_1))) /* product < 2^24 ? */
                                           ^
array.d: In function ‘C_make_array’:
array.d:4713:17: warning: ‘fillpointer’ may be used uninitialized in this function [-Wmaybe-uninitialized]
       *dimptr++ = fillpointer;
                 ^
array.d: In function ‘C_adjust_array’:
array.d:5045:19: warning: ‘fillpointer’ may be used uninitialized in this function [-Wmaybe-uninitialized]
           *dimptr = fillpointer;
                   ^
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -c hashtabl.c
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -c list.c
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -c package.c
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -c record.c
record.d: In function ‘update_instance’:
record.d:1400:62: warning: argument ‘obj’ might be clobbered by ‘longjmp’ or ‘vfork’ [-Wclobbered]
 global maygc object update_instance (object user_obj, object obj) {
                                                              ^
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -c weak.c
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -c sequence.c
sequence.d: In function ‘C_nreverse’:
sequence.d:906:24: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
             if (pstack == vbit(j)) /* stack=2^j -> break the loop */
                        ^
rm -f streq.h
ln -s gllib/streq.h streq.h
rm -f cjk.h
ln -s gllib/uniwidth/cjk.h cjk.h
rm -f uniwidth.h
ln -s gllib/uniwidth.h uniwidth.h
rm -f unitypes.h
ln -s gllib/unitypes.h unitypes.h
rm -f uniname.h
ln -s gllib/uniname.h uniname.h
rm -f uninames.h
ln -s gllib/uniname/uninames.h uninames.h
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -c charstrg.c
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -c debug.c
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -c error.c
In file included from error.d:406:0:
errunix.d: In function ‘errno_out_low’:
errunix.d:729:7: warning: format not a string literal and no format arguments [-Wformat-security]
       fprintf(stderr,errormsg.name);
       ^
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -c misc.c
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -c time.c
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -c predtype.c
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -c symbol.c
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -c lisparit.c
In file included from lisparit.d:42:0:
intserial.d: In function ‘UI_to_LEbytes’:
intserial.d:198:48: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
       if (!((bitsize>=oint_data_len) || (value < vbit(bitsize))))
                                                ^
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -c i18n.c
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -c unixaux.c
echo '/* generated from Makefile */' > cflags.h.new
echo '#define CC "gcc"' >> cflags.h.new
echo '#define CFLAGS "-g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I."' >> cflags.h.new
echo '#define CPP "gcc -E"' >> cflags.h.new
echo '#define CPPLAGS ""' >> cflags.h.new
echo '#define CLFLAGS "-x none"' >> cflags.h.new
echo '#define LIBS "-lncurses -ldl   -L/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/lib -lsigsegv -lc"' >> cflags.h.new
echo '#define X_LIBS ""' >> cflags.h.new
if cmp cflags.h.new cflags.h > /dev/null 2>&1; then rm -f cflags.h.new; else mv cflags.h.new cflags.h; fi
touch cflags.h.stamp
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -c built.c
cd gllib && make CFLAGS="-g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. "
make[2]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
make[3]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
make[3]: Nothing to be done for 'am--refresh'.
make[3]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
make  all-am
make[3]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
make[4]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
make[4]: Nothing to be done for 'am--refresh'.
make[4]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
make[3]: Nothing to be done for 'all-am'.
make[3]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
make[2]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
cd gllib && make CFLAGS="-g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. "
make[2]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
make[3]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
make[3]: Nothing to be done for 'am--refresh'.
make[3]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
make  all-am
make[3]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
make[4]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
make[4]: Nothing to be done for 'am--refresh'.
make[4]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
make[3]: Nothing to be done for 'all-am'.
make[3]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
make[2]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
cd gllib && make CFLAGS="-g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. "
make[2]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
make[3]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
make[3]: Nothing to be done for 'am--refresh'.
make[3]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
make  all-am
make[3]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
make[4]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
make[4]: Nothing to be done for 'am--refresh'.
make[4]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
make[3]: Nothing to be done for 'all-am'.
make[3]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
make[2]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -DCOMPILE_STANDALONE -O0 -c genclisph.c
genclisph.d: In function ‘main’:
genclisph.d:206:54: warning: comparison of unsigned expression < 0 is always false [-Wtype-limits]
 #define EMIT_TO_I(name,type)  emit_to_I(name,(type)-1<(type)0,sizeof(type))
                                                      ^
genclisph.d:258:3: note: in expansion of macro ‘EMIT_TO_I’
   EMIT_TO_I("size",size_t);
   ^
gcc -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -x none genclisph.o -o genclisph
(echo '#ifndef _CLISP_H' ; echo '#define _CLISP_H' ; echo; echo '/* config.h */' ; grep '^#' config.h ) > clisp.h
(echo; echo '/* 'intparam.h' */' ; grep '^#' intparam.h ) >> clisp.h
(echo; echo '/* 'floatparam.h' */' ; grep '^#' floatparam.h ) >> clisp.h
(echo; echo '/* genclisph */' ; ./genclisph clisp-test.c; echo ; echo '#endif /* _CLISP_H */') >> clisp.h
writing test file clisp-test.c
wrote 162 tests (151 typedefs, 11 defines)
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -x none -DUSE_CLISP_H=1 -DCOMPILE_STANDALONE clisp-test.c -o clisp-test-clisp
clisp-test.c: In function ‘main’:
clisp-test.c:11:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(SBYTE)=%d\n",sizeof(SBYTE));
          ^
clisp-test.c:12:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(UBYTE)=%d\n",sizeof(UBYTE));
          ^
clisp-test.c:13:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(SWORD)=%d\n",sizeof(SWORD));
          ^
clisp-test.c:14:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(UWORD)=%d\n",sizeof(UWORD));
          ^
clisp-test.c:15:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(SLONG)=%d\n",sizeof(SLONG));
          ^
clisp-test.c:16:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(ULONG)=%d\n",sizeof(ULONG));
          ^
clisp-test.c:17:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(SLONGLONG)=%d\n",sizeof(SLONGLONG));
          ^
clisp-test.c:18:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(ULONGLONG)=%d\n",sizeof(ULONGLONG));
          ^
clisp-test.c:19:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint1)=%d\n",sizeof(uint1));
          ^
clisp-test.c:20:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint1)=%d\n",sizeof(sint1));
          ^
clisp-test.c:21:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint2)=%d\n",sizeof(uint2));
          ^
clisp-test.c:22:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint2)=%d\n",sizeof(sint2));
          ^
clisp-test.c:23:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint3)=%d\n",sizeof(uint3));
          ^
clisp-test.c:24:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint3)=%d\n",sizeof(sint3));
          ^
clisp-test.c:25:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint4)=%d\n",sizeof(uint4));
          ^
clisp-test.c:26:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint4)=%d\n",sizeof(sint4));
          ^
clisp-test.c:27:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint5)=%d\n",sizeof(uint5));
          ^
clisp-test.c:28:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint5)=%d\n",sizeof(sint5));
          ^
clisp-test.c:29:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint6)=%d\n",sizeof(uint6));
          ^
clisp-test.c:30:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint6)=%d\n",sizeof(sint6));
          ^
clisp-test.c:31:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint7)=%d\n",sizeof(uint7));
          ^
clisp-test.c:32:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint7)=%d\n",sizeof(sint7));
          ^
clisp-test.c:33:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint8)=%d\n",sizeof(uint8));
          ^
clisp-test.c:34:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint8)=%d\n",sizeof(sint8));
          ^
clisp-test.c:35:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint9)=%d\n",sizeof(uint9));
          ^
clisp-test.c:36:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint9)=%d\n",sizeof(sint9));
          ^
clisp-test.c:37:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint10)=%d\n",sizeof(uint10));
          ^
clisp-test.c:38:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint10)=%d\n",sizeof(sint10));
          ^
clisp-test.c:39:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint11)=%d\n",sizeof(uint11));
          ^
clisp-test.c:40:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint11)=%d\n",sizeof(sint11));
          ^
clisp-test.c:41:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint12)=%d\n",sizeof(uint12));
          ^
clisp-test.c:42:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint12)=%d\n",sizeof(sint12));
          ^
clisp-test.c:43:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint13)=%d\n",sizeof(uint13));
          ^
clisp-test.c:44:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint13)=%d\n",sizeof(sint13));
          ^
clisp-test.c:45:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint14)=%d\n",sizeof(uint14));
          ^
clisp-test.c:46:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint14)=%d\n",sizeof(sint14));
          ^
clisp-test.c:47:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint15)=%d\n",sizeof(uint15));
          ^
clisp-test.c:48:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint15)=%d\n",sizeof(sint15));
          ^
clisp-test.c:49:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint16)=%d\n",sizeof(uint16));
          ^
clisp-test.c:50:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint16)=%d\n",sizeof(sint16));
          ^
clisp-test.c:51:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint17)=%d\n",sizeof(uint17));
          ^
clisp-test.c:52:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint17)=%d\n",sizeof(sint17));
          ^
clisp-test.c:53:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint18)=%d\n",sizeof(uint18));
          ^
clisp-test.c:54:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint18)=%d\n",sizeof(sint18));
          ^
clisp-test.c:55:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint19)=%d\n",sizeof(uint19));
          ^
clisp-test.c:56:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint19)=%d\n",sizeof(sint19));
          ^
clisp-test.c:57:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint20)=%d\n",sizeof(uint20));
          ^
clisp-test.c:58:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint20)=%d\n",sizeof(sint20));
          ^
clisp-test.c:59:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint21)=%d\n",sizeof(uint21));
          ^
clisp-test.c:60:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint21)=%d\n",sizeof(sint21));
          ^
clisp-test.c:61:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint22)=%d\n",sizeof(uint22));
          ^
clisp-test.c:62:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint22)=%d\n",sizeof(sint22));
          ^
clisp-test.c:63:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint23)=%d\n",sizeof(uint23));
          ^
clisp-test.c:64:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint23)=%d\n",sizeof(sint23));
          ^
clisp-test.c:65:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint24)=%d\n",sizeof(uint24));
          ^
clisp-test.c:66:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint24)=%d\n",sizeof(sint24));
          ^
clisp-test.c:67:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint25)=%d\n",sizeof(uint25));
          ^
clisp-test.c:68:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint25)=%d\n",sizeof(sint25));
          ^
clisp-test.c:69:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint26)=%d\n",sizeof(uint26));
          ^
clisp-test.c:70:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint26)=%d\n",sizeof(sint26));
          ^
clisp-test.c:71:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint27)=%d\n",sizeof(uint27));
          ^
clisp-test.c:72:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint27)=%d\n",sizeof(sint27));
          ^
clisp-test.c:73:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint28)=%d\n",sizeof(uint28));
          ^
clisp-test.c:74:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint28)=%d\n",sizeof(sint28));
          ^
clisp-test.c:75:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint29)=%d\n",sizeof(uint29));
          ^
clisp-test.c:76:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint29)=%d\n",sizeof(sint29));
          ^
clisp-test.c:77:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint30)=%d\n",sizeof(uint30));
          ^
clisp-test.c:78:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint30)=%d\n",sizeof(sint30));
          ^
clisp-test.c:79:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint31)=%d\n",sizeof(uint31));
          ^
clisp-test.c:80:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint31)=%d\n",sizeof(sint31));
          ^
clisp-test.c:81:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint32)=%d\n",sizeof(uint32));
          ^
clisp-test.c:82:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint32)=%d\n",sizeof(sint32));
          ^
clisp-test.c:83:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint33)=%d\n",sizeof(uint33));
          ^
clisp-test.c:84:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint33)=%d\n",sizeof(sint33));
          ^
clisp-test.c:85:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint48)=%d\n",sizeof(uint48));
          ^
clisp-test.c:86:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint48)=%d\n",sizeof(sint48));
          ^
clisp-test.c:87:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint64)=%d\n",sizeof(uint64));
          ^
clisp-test.c:88:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint64)=%d\n",sizeof(sint64));
          ^
clisp-test.c:89:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sintB)=%d\n",sizeof(sintB));
          ^
clisp-test.c:90:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uintB)=%d\n",sizeof(uintB));
          ^
clisp-test.c:91:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uintW)=%d\n",sizeof(uintW));
          ^
clisp-test.c:92:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sintL)=%d\n",sizeof(sintL));
          ^
clisp-test.c:93:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uintL)=%d\n",sizeof(uintL));
          ^
clisp-test.c:94:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sintP)=%d\n",sizeof(sintP));
          ^
clisp-test.c:95:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uintP)=%d\n",sizeof(uintP));
          ^
clisp-test.c:96:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uintWL)=%d\n",sizeof(uintWL));
          ^
clisp-test.c:97:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uintBWL)=%d\n",sizeof(uintBWL));
          ^
clisp-test.c:98:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uintD)=%d\n",sizeof(uintD));
          ^
clisp-test.c:99:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Handle)=%d\n",sizeof(Handle));
          ^
clisp-test.c:100:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(SOCKET)=%d\n",sizeof(SOCKET));
          ^
clisp-test.c:101:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(gcv_object_t)=%d\n",sizeof(gcv_object_t));
          ^
clisp-test.c:102:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(oint)=%d\n",sizeof(oint));
          ^
clisp-test.c:103:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(soint)=%d\n",sizeof(soint));
          ^
clisp-test.c:104:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(tint)=%d\n",sizeof(tint));
          ^
clisp-test.c:105:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(aint)=%d\n",sizeof(aint));
          ^
clisp-test.c:106:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uintV)=%d\n",sizeof(uintV));
          ^
clisp-test.c:107:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sintV)=%d\n",sizeof(sintV));
          ^
clisp-test.c:108:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(object)=%d\n",sizeof(object));
          ^
clisp-test.c:111:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(hfint)=%d\n",sizeof(hfint));
          ^
clisp-test.c:112:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(record_)=%d\n",sizeof(record_));
          ^
clisp-test.c:113:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Record)=%d\n",sizeof(Record));
          ^
clisp-test.c:114:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(vrecord_)=%d\n",sizeof(vrecord_));
          ^
clisp-test.c:115:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Vrecord)=%d\n",sizeof(Vrecord));
          ^
clisp-test.c:116:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(srecord_)=%d\n",sizeof(srecord_));
          ^
clisp-test.c:117:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Srecord)=%d\n",sizeof(Srecord));
          ^
clisp-test.c:118:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(cons_)=%d\n",sizeof(cons_));
          ^
clisp-test.c:119:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Cons)=%d\n",sizeof(Cons));
          ^
clisp-test.c:120:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(symbol_)=%d\n",sizeof(symbol_));
          ^
clisp-test.c:121:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Symbol)=%d\n",sizeof(Symbol));
          ^
clisp-test.c:122:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(cint)=%d\n",sizeof(cint));
          ^
clisp-test.c:123:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(chart)=%d\n",sizeof(chart));
          ^
clisp-test.c:124:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(cint8)=%d\n",sizeof(cint8));
          ^
clisp-test.c:125:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(cint16)=%d\n",sizeof(cint16));
          ^
clisp-test.c:126:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(cint32)=%d\n",sizeof(cint32));
          ^
clisp-test.c:127:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(bignum_)=%d\n",sizeof(bignum_));
          ^
clisp-test.c:128:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Bignum)=%d\n",sizeof(Bignum));
          ^
clisp-test.c:129:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(ffloat)=%d\n",sizeof(ffloat));
          ^
clisp-test.c:130:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(ffloatjanus)=%d\n",sizeof(ffloatjanus));
          ^
clisp-test.c:131:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(dfloat)=%d\n",sizeof(dfloat));
          ^
clisp-test.c:132:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(dfloatjanus)=%d\n",sizeof(dfloatjanus));
          ^
clisp-test.c:133:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sbvector_)=%d\n",sizeof(sbvector_));
          ^
clisp-test.c:134:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Sbvector)=%d\n",sizeof(Sbvector));
          ^
clisp-test.c:135:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sstring_)=%d\n",sizeof(sstring_));
          ^
clisp-test.c:136:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Sstring)=%d\n",sizeof(Sstring));
          ^
clisp-test.c:137:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(s8string_)=%d\n",sizeof(s8string_));
          ^
clisp-test.c:138:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(S8string)=%d\n",sizeof(S8string));
          ^
clisp-test.c:139:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(s16string_)=%d\n",sizeof(s16string_));
          ^
clisp-test.c:140:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(S16string)=%d\n",sizeof(S16string));
          ^
clisp-test.c:141:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(s32string_)=%d\n",sizeof(s32string_));
          ^
clisp-test.c:142:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(S32string)=%d\n",sizeof(S32string));
          ^
clisp-test.c:143:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(snstring_)=%d\n",sizeof(snstring_));
          ^
clisp-test.c:144:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Snstring)=%d\n",sizeof(Snstring));
          ^
clisp-test.c:145:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(svector_)=%d\n",sizeof(svector_));
          ^
clisp-test.c:146:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Svector)=%d\n",sizeof(Svector));
          ^
clisp-test.c:147:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Encoding)=%d\n",sizeof(Encoding));
          ^
clisp-test.c:148:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Fpointer)=%d\n",sizeof(Fpointer));
          ^
clisp-test.c:149:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Structure)=%d\n",sizeof(Structure));
          ^
clisp-test.c:150:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Instance)=%d\n",sizeof(Instance));
          ^
clisp-test.c:151:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(lisp_function_t)=%d\n",sizeof(lisp_function_t));
          ^
clisp-test.c:152:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(subr_t)=%d\n",sizeof(subr_t));
          ^
clisp-test.c:153:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Subr)=%d\n",sizeof(Subr));
          ^
clisp-test.c:154:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(subr_rest_t)=%d\n",sizeof(subr_rest_t));
          ^
clisp-test.c:155:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(subr_key_t)=%d\n",sizeof(subr_key_t));
          ^
clisp-test.c:156:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(p_backtrace_t)=%d\n",sizeof(p_backtrace_t));
          ^
clisp-test.c:159:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(subr_initdata_t)=%d\n",sizeof(subr_initdata_t));
          ^
clisp-test.c:160:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(object_initdata_t)=%d\n",sizeof(object_initdata_t));
          ^
clisp-test.c:161:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(module_t)=%d\n",sizeof(module_t));
          ^
clisp-test.c:164:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(c_lisp_pair_t)=%d\n",sizeof(c_lisp_pair_t));
          ^
clisp-test.c:165:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(c_lisp_map_t)=%d\n",sizeof(c_lisp_map_t));
          ^
clisp-test.c:170:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(if_does_not_exist_t)=%d\n",sizeof(if_does_not_exist_t));
          ^
clisp-test.c:171:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(if_exists_t)=%d\n",sizeof(if_exists_t));
          ^
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -x none -DUSE_CLISP_H=0 -DCOMPILE_STANDALONE clisp-test.c -o clisp-test-lispbibl
clisp-test.c: In function ‘main’:
clisp-test.c:11:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(SBYTE)=%d\n",sizeof(SBYTE));
          ^
clisp-test.c:12:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(UBYTE)=%d\n",sizeof(UBYTE));
          ^
clisp-test.c:13:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(SWORD)=%d\n",sizeof(SWORD));
          ^
clisp-test.c:14:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(UWORD)=%d\n",sizeof(UWORD));
          ^
clisp-test.c:15:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(SLONG)=%d\n",sizeof(SLONG));
          ^
clisp-test.c:16:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(ULONG)=%d\n",sizeof(ULONG));
          ^
clisp-test.c:17:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(SLONGLONG)=%d\n",sizeof(SLONGLONG));
          ^
clisp-test.c:18:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(ULONGLONG)=%d\n",sizeof(ULONGLONG));
          ^
clisp-test.c:19:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint1)=%d\n",sizeof(uint1));
          ^
clisp-test.c:20:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint1)=%d\n",sizeof(sint1));
          ^
clisp-test.c:21:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint2)=%d\n",sizeof(uint2));
          ^
clisp-test.c:22:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint2)=%d\n",sizeof(sint2));
          ^
clisp-test.c:23:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint3)=%d\n",sizeof(uint3));
          ^
clisp-test.c:24:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint3)=%d\n",sizeof(sint3));
          ^
clisp-test.c:25:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint4)=%d\n",sizeof(uint4));
          ^
clisp-test.c:26:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint4)=%d\n",sizeof(sint4));
          ^
clisp-test.c:27:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint5)=%d\n",sizeof(uint5));
          ^
clisp-test.c:28:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint5)=%d\n",sizeof(sint5));
          ^
clisp-test.c:29:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint6)=%d\n",sizeof(uint6));
          ^
clisp-test.c:30:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint6)=%d\n",sizeof(sint6));
          ^
clisp-test.c:31:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint7)=%d\n",sizeof(uint7));
          ^
clisp-test.c:32:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint7)=%d\n",sizeof(sint7));
          ^
clisp-test.c:33:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint8)=%d\n",sizeof(uint8));
          ^
clisp-test.c:34:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint8)=%d\n",sizeof(sint8));
          ^
clisp-test.c:35:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint9)=%d\n",sizeof(uint9));
          ^
clisp-test.c:36:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint9)=%d\n",sizeof(sint9));
          ^
clisp-test.c:37:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint10)=%d\n",sizeof(uint10));
          ^
clisp-test.c:38:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint10)=%d\n",sizeof(sint10));
          ^
clisp-test.c:39:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint11)=%d\n",sizeof(uint11));
          ^
clisp-test.c:40:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint11)=%d\n",sizeof(sint11));
          ^
clisp-test.c:41:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint12)=%d\n",sizeof(uint12));
          ^
clisp-test.c:42:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint12)=%d\n",sizeof(sint12));
          ^
clisp-test.c:43:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint13)=%d\n",sizeof(uint13));
          ^
clisp-test.c:44:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint13)=%d\n",sizeof(sint13));
          ^
clisp-test.c:45:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint14)=%d\n",sizeof(uint14));
          ^
clisp-test.c:46:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint14)=%d\n",sizeof(sint14));
          ^
clisp-test.c:47:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint15)=%d\n",sizeof(uint15));
          ^
clisp-test.c:48:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint15)=%d\n",sizeof(sint15));
          ^
clisp-test.c:49:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint16)=%d\n",sizeof(uint16));
          ^
clisp-test.c:50:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint16)=%d\n",sizeof(sint16));
          ^
clisp-test.c:51:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint17)=%d\n",sizeof(uint17));
          ^
clisp-test.c:52:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint17)=%d\n",sizeof(sint17));
          ^
clisp-test.c:53:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint18)=%d\n",sizeof(uint18));
          ^
clisp-test.c:54:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint18)=%d\n",sizeof(sint18));
          ^
clisp-test.c:55:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint19)=%d\n",sizeof(uint19));
          ^
clisp-test.c:56:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint19)=%d\n",sizeof(sint19));
          ^
clisp-test.c:57:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint20)=%d\n",sizeof(uint20));
          ^
clisp-test.c:58:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint20)=%d\n",sizeof(sint20));
          ^
clisp-test.c:59:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint21)=%d\n",sizeof(uint21));
          ^
clisp-test.c:60:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint21)=%d\n",sizeof(sint21));
          ^
clisp-test.c:61:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint22)=%d\n",sizeof(uint22));
          ^
clisp-test.c:62:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint22)=%d\n",sizeof(sint22));
          ^
clisp-test.c:63:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint23)=%d\n",sizeof(uint23));
          ^
clisp-test.c:64:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint23)=%d\n",sizeof(sint23));
          ^
clisp-test.c:65:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint24)=%d\n",sizeof(uint24));
          ^
clisp-test.c:66:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint24)=%d\n",sizeof(sint24));
          ^
clisp-test.c:67:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint25)=%d\n",sizeof(uint25));
          ^
clisp-test.c:68:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint25)=%d\n",sizeof(sint25));
          ^
clisp-test.c:69:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint26)=%d\n",sizeof(uint26));
          ^
clisp-test.c:70:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint26)=%d\n",sizeof(sint26));
          ^
clisp-test.c:71:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint27)=%d\n",sizeof(uint27));
          ^
clisp-test.c:72:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint27)=%d\n",sizeof(sint27));
          ^
clisp-test.c:73:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint28)=%d\n",sizeof(uint28));
          ^
clisp-test.c:74:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint28)=%d\n",sizeof(sint28));
          ^
clisp-test.c:75:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint29)=%d\n",sizeof(uint29));
          ^
clisp-test.c:76:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint29)=%d\n",sizeof(sint29));
          ^
clisp-test.c:77:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint30)=%d\n",sizeof(uint30));
          ^
clisp-test.c:78:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint30)=%d\n",sizeof(sint30));
          ^
clisp-test.c:79:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint31)=%d\n",sizeof(uint31));
          ^
clisp-test.c:80:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint31)=%d\n",sizeof(sint31));
          ^
clisp-test.c:81:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint32)=%d\n",sizeof(uint32));
          ^
clisp-test.c:82:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint32)=%d\n",sizeof(sint32));
          ^
clisp-test.c:83:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint33)=%d\n",sizeof(uint33));
          ^
clisp-test.c:84:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint33)=%d\n",sizeof(sint33));
          ^
clisp-test.c:85:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint48)=%d\n",sizeof(uint48));
          ^
clisp-test.c:86:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint48)=%d\n",sizeof(sint48));
          ^
clisp-test.c:87:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uint64)=%d\n",sizeof(uint64));
          ^
clisp-test.c:88:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sint64)=%d\n",sizeof(sint64));
          ^
clisp-test.c:89:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sintB)=%d\n",sizeof(sintB));
          ^
clisp-test.c:90:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uintB)=%d\n",sizeof(uintB));
          ^
clisp-test.c:91:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uintW)=%d\n",sizeof(uintW));
          ^
clisp-test.c:92:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sintL)=%d\n",sizeof(sintL));
          ^
clisp-test.c:93:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uintL)=%d\n",sizeof(uintL));
          ^
clisp-test.c:94:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sintP)=%d\n",sizeof(sintP));
          ^
clisp-test.c:95:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uintP)=%d\n",sizeof(uintP));
          ^
clisp-test.c:96:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uintWL)=%d\n",sizeof(uintWL));
          ^
clisp-test.c:97:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uintBWL)=%d\n",sizeof(uintBWL));
          ^
clisp-test.c:98:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uintD)=%d\n",sizeof(uintD));
          ^
clisp-test.c:99:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Handle)=%d\n",sizeof(Handle));
          ^
clisp-test.c:100:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(SOCKET)=%d\n",sizeof(SOCKET));
          ^
clisp-test.c:101:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(gcv_object_t)=%d\n",sizeof(gcv_object_t));
          ^
clisp-test.c:102:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(oint)=%d\n",sizeof(oint));
          ^
clisp-test.c:103:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(soint)=%d\n",sizeof(soint));
          ^
clisp-test.c:104:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(tint)=%d\n",sizeof(tint));
          ^
clisp-test.c:105:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(aint)=%d\n",sizeof(aint));
          ^
clisp-test.c:106:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(uintV)=%d\n",sizeof(uintV));
          ^
clisp-test.c:107:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sintV)=%d\n",sizeof(sintV));
          ^
clisp-test.c:108:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(object)=%d\n",sizeof(object));
          ^
clisp-test.c:111:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(hfint)=%d\n",sizeof(hfint));
          ^
clisp-test.c:112:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(record_)=%d\n",sizeof(record_));
          ^
clisp-test.c:113:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Record)=%d\n",sizeof(Record));
          ^
clisp-test.c:114:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(vrecord_)=%d\n",sizeof(vrecord_));
          ^
clisp-test.c:115:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Vrecord)=%d\n",sizeof(Vrecord));
          ^
clisp-test.c:116:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(srecord_)=%d\n",sizeof(srecord_));
          ^
clisp-test.c:117:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Srecord)=%d\n",sizeof(Srecord));
          ^
clisp-test.c:118:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(cons_)=%d\n",sizeof(cons_));
          ^
clisp-test.c:119:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Cons)=%d\n",sizeof(Cons));
          ^
clisp-test.c:120:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(symbol_)=%d\n",sizeof(symbol_));
          ^
clisp-test.c:121:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Symbol)=%d\n",sizeof(Symbol));
          ^
clisp-test.c:122:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(cint)=%d\n",sizeof(cint));
          ^
clisp-test.c:123:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(chart)=%d\n",sizeof(chart));
          ^
clisp-test.c:124:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(cint8)=%d\n",sizeof(cint8));
          ^
clisp-test.c:125:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(cint16)=%d\n",sizeof(cint16));
          ^
clisp-test.c:126:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(cint32)=%d\n",sizeof(cint32));
          ^
clisp-test.c:127:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(bignum_)=%d\n",sizeof(bignum_));
          ^
clisp-test.c:128:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Bignum)=%d\n",sizeof(Bignum));
          ^
clisp-test.c:129:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(ffloat)=%d\n",sizeof(ffloat));
          ^
clisp-test.c:130:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(ffloatjanus)=%d\n",sizeof(ffloatjanus));
          ^
clisp-test.c:131:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(dfloat)=%d\n",sizeof(dfloat));
          ^
clisp-test.c:132:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(dfloatjanus)=%d\n",sizeof(dfloatjanus));
          ^
clisp-test.c:133:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sbvector_)=%d\n",sizeof(sbvector_));
          ^
clisp-test.c:134:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Sbvector)=%d\n",sizeof(Sbvector));
          ^
clisp-test.c:135:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(sstring_)=%d\n",sizeof(sstring_));
          ^
clisp-test.c:136:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Sstring)=%d\n",sizeof(Sstring));
          ^
clisp-test.c:137:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(s8string_)=%d\n",sizeof(s8string_));
          ^
clisp-test.c:138:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(S8string)=%d\n",sizeof(S8string));
          ^
clisp-test.c:139:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(s16string_)=%d\n",sizeof(s16string_));
          ^
clisp-test.c:140:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(S16string)=%d\n",sizeof(S16string));
          ^
clisp-test.c:141:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(s32string_)=%d\n",sizeof(s32string_));
          ^
clisp-test.c:142:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(S32string)=%d\n",sizeof(S32string));
          ^
clisp-test.c:143:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(snstring_)=%d\n",sizeof(snstring_));
          ^
clisp-test.c:144:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Snstring)=%d\n",sizeof(Snstring));
          ^
clisp-test.c:145:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(svector_)=%d\n",sizeof(svector_));
          ^
clisp-test.c:146:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Svector)=%d\n",sizeof(Svector));
          ^
clisp-test.c:147:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Encoding)=%d\n",sizeof(Encoding));
          ^
clisp-test.c:148:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Fpointer)=%d\n",sizeof(Fpointer));
          ^
clisp-test.c:149:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Structure)=%d\n",sizeof(Structure));
          ^
clisp-test.c:150:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Instance)=%d\n",sizeof(Instance));
          ^
clisp-test.c:151:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(lisp_function_t)=%d\n",sizeof(lisp_function_t));
          ^
clisp-test.c:152:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(subr_t)=%d\n",sizeof(subr_t));
          ^
clisp-test.c:153:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(Subr)=%d\n",sizeof(Subr));
          ^
clisp-test.c:154:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(subr_rest_t)=%d\n",sizeof(subr_rest_t));
          ^
clisp-test.c:155:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(subr_key_t)=%d\n",sizeof(subr_key_t));
          ^
clisp-test.c:156:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(p_backtrace_t)=%d\n",sizeof(p_backtrace_t));
          ^
clisp-test.c:159:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(subr_initdata_t)=%d\n",sizeof(subr_initdata_t));
          ^
clisp-test.c:160:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(object_initdata_t)=%d\n",sizeof(object_initdata_t));
          ^
clisp-test.c:161:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(module_t)=%d\n",sizeof(module_t));
          ^
clisp-test.c:164:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(c_lisp_pair_t)=%d\n",sizeof(c_lisp_pair_t));
          ^
clisp-test.c:165:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(c_lisp_map_t)=%d\n",sizeof(c_lisp_map_t));
          ^
clisp-test.c:170:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(if_does_not_exist_t)=%d\n",sizeof(if_does_not_exist_t));
          ^
clisp-test.c:171:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘long unsigned int’ [-Wformat=]
   printf("sizeof(if_exists_t)=%d\n",sizeof(if_exists_t));
          ^
./clisp-test-clisp > clisp-test-clisp.out
./clisp-test-lispbibl > clisp-test-lispbibl.out
cmp clisp-test-clisp.out clisp-test-lispbibl.out
if grep lispbibl.d clisp.h; then false; else true; fi
rm -f genclisph clisp-test-clisp clisp-test-lispbibl clisp-test-clisp.out clisp-test-lispbibl.out
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -c modules.c
if test -d locale; then rm -rf locale; fi
mkdir locale
(cd po && make && make install datarootdir=.. localedir='$(datarootdir)/locale' INSTALL_DATA='ln') || (rm -rf locale ; exit 1)
make[2]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/po'
make[2]: Nothing to be done for 'all'.
make[2]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/po'
make[2]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/po'
installing en.gmo as ../locale/en/LC_MESSAGES/clisp.mo
installing clisplow_en.gmo as ../locale/en/LC_MESSAGES/clisplow.mo
installing da.gmo as ../locale/da/LC_MESSAGES/clisp.mo
installing clisplow_da.gmo as ../locale/da/LC_MESSAGES/clisplow.mo
installing de.gmo as ../locale/de/LC_MESSAGES/clisp.mo
installing clisplow_de.gmo as ../locale/de/LC_MESSAGES/clisplow.mo
installing fr.gmo as ../locale/fr/LC_MESSAGES/clisp.mo
installing clisplow_fr.gmo as ../locale/fr/LC_MESSAGES/clisplow.mo
installing es.gmo as ../locale/es/LC_MESSAGES/clisp.mo
installing clisplow_es.gmo as ../locale/es/LC_MESSAGES/clisplow.mo
installing nl.gmo as ../locale/nl/LC_MESSAGES/clisp.mo
installing clisplow_nl.gmo as ../locale/nl/LC_MESSAGES/clisplow.mo
installing ru.gmo as ../locale/ru/LC_MESSAGES/clisp.mo
installing clisplow_ru.gmo as ../locale/ru/LC_MESSAGES/clisplow.mo
make[2]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/po'
rm -rf data
mkdir data
cd data && ln -s ../../utils/unicode/UnicodeDataFull.txt .
cd data && ln -s ../../doc/Symbol-Table.text .
gcc -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -x none spvw.o spvwtabf.o spvwtabs.o spvwtabo.o eval.o control.o encoding.o pathname.o stream.o socket.o io.o funarg.o array.o hashtabl.o list.o package.o record.o weak.o sequence.o charstrg.o debug.o error.o misc.o time.o predtype.o symbol.o lisparit.o i18n.o unixaux.o built.o gllib/uniwidth/width.o gllib/uniname/uniname.o gllib/localcharset.o modules.o -lncurses -ldl   -L/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/lib -lsigsegv -lc -o lisp.run
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -lp  -x '(and (load "init.lisp") (sys::%saveinitmem) (ext::exit)) (ext::exit t)'
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.45 (2008-05-15) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2008

Type :h and hit Enter for context help.

;; Loading file defseq.lisp ...
;; Loaded file defseq.lisp
;; Loading file backquote.lisp ...
;; Loaded file backquote.lisp
;; Loading file defmacro.lisp ...
;; Loaded file defmacro.lisp
;; Loading file macros1.lisp ...
;; Loaded file macros1.lisp
;; Loading file macros2.lisp ...
;; Loaded file macros2.lisp
;; Loading file defs1.lisp ...
;; Loaded file defs1.lisp
;; Loading file lambdalist.lisp ...
;; Loaded file lambdalist.lisp
;; Loading file places.lisp ...
;; Loaded file places.lisp
;; Loading file floatprint.lisp ...
;; Loaded file floatprint.lisp
;; Loading file defpackage.lisp ...
;; Loaded file defpackage.lisp
;; Loading file type.lisp ...
;;  Loading file subtypep.lisp ...
;;  Loaded file subtypep.lisp
;; Loaded file type.lisp
;; Loading file clos-package.lisp ...
;; Loaded file clos-package.lisp
;; Loading file clos-macros.lisp ...
;; Loaded file clos-macros.lisp
;; Loading file clos-class0.lisp ...
;; Loaded file clos-class0.lisp
;; Loading file clos-metaobject1.lisp ...
;; Loaded file clos-metaobject1.lisp
;; Loading file clos-slotdef1.lisp ...
;; Loaded file clos-slotdef1.lisp
;; Loading file clos-stablehash1.lisp ...
;; Loaded file clos-stablehash1.lisp
;; Loading file clos-specializer1.lisp ...
;; Loaded file clos-specializer1.lisp
;; Loading file clos-class1.lisp ...
;; Loaded file clos-class1.lisp
;; Loading file clos-class2.lisp ...
;; Loaded file clos-class2.lisp
;; Loading file clos-class3.lisp ...
;; Loaded file clos-class3.lisp
;; Loading file defstruct.lisp ...
;; Loaded file defstruct.lisp
;; Loading file format.lisp ...
;; Loaded file format.lisp
;; Loading file international.lisp ...
;; Loaded file international.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/room.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/room.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/savemem.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/savemem.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/functions.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/functions.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/trace.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/trace.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/cmacros.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/cmacros.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/compiler.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/compiler.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/defs2.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/defs2.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/loop.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/loop.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos.lisp ...
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slots1.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slots1.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method1.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method1.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb1.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb1.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun1.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun1.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun2a.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun2a.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb2.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb2.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun2b.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun2b.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method2.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method2.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun3.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun3.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-dependent.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-dependent.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun4.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun4.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method3.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method3.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb3.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb3.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slots2.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slots2.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slotdef2.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slotdef2.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-stablehash2.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-stablehash2.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-specializer2.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-specializer2.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class4.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class4.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class5.lisp ...
WARNING:
DEFGENERIC: redefining function SHARED-INITIALIZE in /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class5.lisp, was defined in top-level
WARNING:
DEFGENERIC: redefining function REINITIALIZE-INSTANCE in /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class5.lisp, was defined in top-level
WARNING:
DEFGENERIC: redefining function INITIALIZE-INSTANCE in /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class5.lisp, was defined in top-level
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class5.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slotdef3.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slotdef3.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-specializer3.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-specializer3.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class6.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class6.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method4.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method4.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb4.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb4.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun5.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun5.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-print.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-print.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-custom.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-custom.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/documentation.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/documentation.lisp
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gray.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gray.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/fill-out.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/fill-out.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/disassem.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/disassem.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/condition.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/condition.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/loadform.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/loadform.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gstream.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gstream.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/xcharin.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/xcharin.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/keyboard.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/keyboard.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/screen.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/screen.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/runprog.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/runprog.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/query.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/query.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/reploop.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/reploop.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/dribble.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/dribble.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/pprint.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/pprint.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/describe.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/describe.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/edit.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/edit.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clhs.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clhs.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/inspect.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/inspect.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/macros3.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/macros3.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/complete.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/complete.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/case-sensitive.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/case-sensitive.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/exporting.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/exporting.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/danish.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/danish.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/german.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/german.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/french.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/french.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/spanish.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/spanish.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/dutch.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/dutch.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/russian.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/russian.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/deprecated.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/deprecated.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/config.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/config.lisp
Bye.
mv lispimag.mem interpreted.mem
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M interpreted.mem -q -c compiler.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/compiler.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/compiler.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -lp  -x '(and (load "init.lisp") (sys::%saveinitmem) (ext::exit)) (ext::exit t)'
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.45 (2008-05-15) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2008

Type :h and hit Enter for context help.

;; Loading file defseq.lisp ...
;; Loaded file defseq.lisp
;; Loading file backquote.lisp ...
;; Loaded file backquote.lisp
;; Loading file defmacro.lisp ...
;; Loaded file defmacro.lisp
;; Loading file macros1.lisp ...
;; Loaded file macros1.lisp
;; Loading file macros2.lisp ...
;; Loaded file macros2.lisp
;; Loading file defs1.lisp ...
;; Loaded file defs1.lisp
;; Loading file lambdalist.lisp ...
;; Loaded file lambdalist.lisp
;; Loading file places.lisp ...
;; Loaded file places.lisp
;; Loading file floatprint.lisp ...
;; Loaded file floatprint.lisp
;; Loading file defpackage.lisp ...
;; Loaded file defpackage.lisp
;; Loading file type.lisp ...
;;  Loading file subtypep.lisp ...
;;  Loaded file subtypep.lisp
;; Loaded file type.lisp
;; Loading file clos-package.lisp ...
;; Loaded file clos-package.lisp
;; Loading file clos-macros.lisp ...
;; Loaded file clos-macros.lisp
;; Loading file clos-class0.lisp ...
;; Loaded file clos-class0.lisp
;; Loading file clos-metaobject1.lisp ...
;; Loaded file clos-metaobject1.lisp
;; Loading file clos-slotdef1.lisp ...
;; Loaded file clos-slotdef1.lisp
;; Loading file clos-stablehash1.lisp ...
;; Loaded file clos-stablehash1.lisp
;; Loading file clos-specializer1.lisp ...
;; Loaded file clos-specializer1.lisp
;; Loading file clos-class1.lisp ...
;; Loaded file clos-class1.lisp
;; Loading file clos-class2.lisp ...
;; Loaded file clos-class2.lisp
;; Loading file clos-class3.lisp ...
;; Loaded file clos-class3.lisp
;; Loading file defstruct.lisp ...
;; Loaded file defstruct.lisp
;; Loading file format.lisp ...
;; Loaded file format.lisp
;; Loading file international.lisp ...
;; Loaded file international.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/room.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/room.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/savemem.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/savemem.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/functions.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/functions.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/trace.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/trace.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/cmacros.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/cmacros.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/compiler.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/compiler.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/defs2.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/defs2.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/loop.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/loop.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos.lisp ...
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slots1.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slots1.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method1.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method1.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb1.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb1.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun1.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun1.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun2a.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun2a.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb2.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb2.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun2b.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun2b.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method2.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method2.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun3.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun3.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-dependent.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-dependent.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun4.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun4.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method3.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method3.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb3.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb3.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slots2.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slots2.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slotdef2.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slotdef2.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-stablehash2.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-stablehash2.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-specializer2.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-specializer2.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class4.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class4.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class5.lisp ...
WARNING:
DEFGENERIC: redefining function SHARED-INITIALIZE in /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class5.lisp, was defined in top-level
WARNING:
DEFGENERIC: redefining function REINITIALIZE-INSTANCE in /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class5.lisp, was defined in top-level
WARNING:
DEFGENERIC: redefining function INITIALIZE-INSTANCE in /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class5.lisp, was defined in top-level
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class5.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slotdef3.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slotdef3.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-specializer3.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-specializer3.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class6.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class6.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method4.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method4.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb4.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb4.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun5.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun5.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-print.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-print.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-custom.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-custom.lisp
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/documentation.lisp ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/documentation.lisp
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gray.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gray.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/fill-out.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/fill-out.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/disassem.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/disassem.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/condition.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/condition.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/loadform.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/loadform.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gstream.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gstream.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/xcharin.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/xcharin.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/keyboard.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/keyboard.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/screen.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/screen.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/runprog.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/runprog.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/query.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/query.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/reploop.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/reploop.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/dribble.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/dribble.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/pprint.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/pprint.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/describe.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/describe.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/edit.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/edit.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clhs.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clhs.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/inspect.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/inspect.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/macros3.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/macros3.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/complete.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/complete.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/case-sensitive.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/case-sensitive.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/exporting.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/exporting.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/danish.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/danish.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/german.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/german.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/french.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/french.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/spanish.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/spanish.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/dutch.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/dutch.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/russian.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/russian.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/deprecated.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/deprecated.lisp
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/config.lisp ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/config.lisp
Bye.
mv lispimag.mem halfcompiled.mem
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c init.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/init.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/init.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c defseq.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/defseq.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/defseq.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c backquote.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/backquote.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/backquote.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c defmacro.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/defmacro.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/defmacro.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c macros1.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/macros1.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/macros1.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c macros2.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/macros2.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/macros2.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c defs1.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/defs1.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/defs1.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c timezone.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/timezone.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/timezone.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c lambdalist.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/lambdalist.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/lambdalist.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c places.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/places.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/places.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c floatprint.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/floatprint.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/floatprint.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c defpackage.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/defpackage.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/defpackage.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c type.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/type.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/type.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c subtypep.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/subtypep.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/subtypep.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-package.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-package.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-package.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-macros.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-macros.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-macros.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-class0.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class0.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class0.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-metaobject1.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-metaobject1.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-metaobject1.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-slotdef1.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slotdef1.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slotdef1.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-stablehash1.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-stablehash1.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-stablehash1.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-specializer1.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-specializer1.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-specializer1.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-class1.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class1.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class1.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-class2.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class2.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class2.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-class3.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class3.lisp ...
WARNING: Redefining metaobject class #<STANDARD-CLASS METAOBJECT> has no
         effect.
WARNING: Redefining metaobject class #<STANDARD-CLASS SPECIALIZER> has no
         effect.
WARNING: Redefining metaobject class #<STANDARD-CLASS SUPER-CLASS> has no
         effect.
WARNING: Redefining metaobject class #<STANDARD-CLASS POTENTIAL-CLASS> has no
         effect.
WARNING: Redefining metaobject class #<STANDARD-CLASS BUILT-IN-CLASS> has no
         effect.
WARNING: Redefining metaobject class #<STANDARD-CLASS SLOTTED-CLASS> has no
         effect.
WARNING: Redefining metaobject class #<STANDARD-CLASS SEMI-STANDARD-CLASS> has
         no effect.
WARNING: Redefining metaobject class #<STANDARD-CLASS STANDARD-CLASS> has no
         effect.
WARNING: Redefining metaobject class #<STANDARD-CLASS STRUCTURE-CLASS> has no
         effect.
WARNING: Redefining metaobject class #<STANDARD-CLASS SLOT-DEFINITION> has no
         effect.
WARNING: Redefining metaobject class #<STANDARD-CLASS DIRECT-SLOT-DEFINITION>
         has no effect.
WARNING: Redefining metaobject class
          #<STANDARD-CLASS EFFECTIVE-SLOT-DEFINITION>
         has no effect.
WARNING: Redefining metaobject class
          #<STANDARD-CLASS STANDARD-SLOT-DEFINITION>
         has no effect.
WARNING: Redefining metaobject class
          #<STANDARD-CLASS STANDARD-DIRECT-SLOT-DEFINITION>
         has no effect.
WARNING: Redefining metaobject class
          #<STANDARD-CLASS STANDARD-EFFECTIVE-SLOT-DEFINITION>
         has no effect.
WARNING: Redefining metaobject class
          #<STANDARD-CLASS STRUCTURE-DIRECT-SLOT-DEFINITION>
         has no effect.
WARNING: Redefining metaobject class
          #<STANDARD-CLASS STRUCTURE-EFFECTIVE-SLOT-DEFINITION>
         has no effect.
WARNING: Redefining metaobject class #<STANDARD-CLASS EQL-SPECIALIZER> has no
         effect.
WARNING: Redefining metaobject class
          #<STANDARD-CLASS MISDESIGNED-FORWARD-REFERENCED-CLASS>
         has no effect.
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class3.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c defstruct.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/defstruct.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/defstruct.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c format.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/format.lisp ...
WARNING in FORMATTER-MAIN-1 in lines 2032..2530 :
variable ADD-FILL is not used.
Misspelled or missing IGNORE declaration?
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/format.fas
0 errors, 1 warning
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c international.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/international.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/international.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c savemem.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/savemem.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/savemem.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c functions.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/functions.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/functions.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c trace.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/trace.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/trace.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c cmacros.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/cmacros.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/cmacros.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c defs2.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/defs2.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/defs2.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c loop.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/loop.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/loop.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-stablehash2.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-stablehash2.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-stablehash2.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-specializer2.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-specializer2.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-specializer2.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-specializer3.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-specializer3.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-specializer3.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-class4.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class4.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class4.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-class5.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class5.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class5.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-class6.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class6.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class6.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-slotdef2.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slotdef2.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slotdef2.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-slotdef3.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slotdef3.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slotdef3.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-slots1.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slots1.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slots1.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-slots2.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slots2.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slots2.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-method1.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method1.lisp ...
WARNING: Redefining metaobject class #<STANDARD-CLASS METHOD> has no effect.
WARNING: Redefining metaobject class #<STANDARD-CLASS STANDARD-METHOD> has no
         effect.
WARNING: Redefining metaobject class
          #<STANDARD-CLASS STANDARD-ACCESSOR-METHOD>
         has no effect.
WARNING: Redefining metaobject class #<STANDARD-CLASS STANDARD-READER-METHOD>
         has no effect.
WARNING: Redefining metaobject class #<STANDARD-CLASS STANDARD-WRITER-METHOD>
         has no effect.
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method1.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-method2.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method2.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method2.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-method3.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method3.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method3.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-method4.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method4.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method4.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-methcomb1.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb1.lisp ...
WARNING: Redefining metaobject class #<STANDARD-CLASS METHOD-COMBINATION> has
         no effect.
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb1.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-methcomb2.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb2.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb2.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-methcomb3.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb3.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb3.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-methcomb4.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb4.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb4.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-genfun1.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun1.lisp ...
WARNING: Redefining metaobject class
          #<STANDARD-CLASS FUNCALLABLE-STANDARD-CLASS>
         has no effect.
WARNING: Redefining metaobject class
          #<FUNCALLABLE-STANDARD-CLASS GENERIC-FUNCTION>
         has no effect.
WARNING: Redefining metaobject class
          #<FUNCALLABLE-STANDARD-CLASS STANDARD-GENERIC-FUNCTION>
         has no effect.
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun1.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-genfun2a.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun2a.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun2a.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-genfun2b.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun2b.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun2b.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-genfun3.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun3.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun3.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-genfun4.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun4.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun4.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-genfun5.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun5.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun5.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-dependent.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-dependent.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-dependent.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-print.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-print.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-print.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clos-custom.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-custom.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-custom.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c documentation.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/documentation.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/documentation.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c fill-out.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/fill-out.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/fill-out.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c disassem.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/disassem.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/disassem.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c condition.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/condition.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/condition.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c loadform.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/loadform.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/loadform.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c gstream.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gstream.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gstream.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c xcharin.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/xcharin.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/xcharin.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c keyboard.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/keyboard.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/keyboard.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c screen.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/screen.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/screen.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c runprog.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/runprog.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/runprog.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c query.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/query.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/query.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c reploop.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/reploop.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/reploop.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c dribble.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/dribble.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/dribble.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c complete.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/complete.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/complete.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c pprint.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/pprint.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/pprint.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c describe.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/describe.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/describe.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c room.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/room.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/room.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c edit.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/edit.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/edit.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c macros3.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/macros3.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/macros3.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c clhs.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clhs.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clhs.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c inspect.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/inspect.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/inspect.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c gray.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gray.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gray.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c case-sensitive.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/case-sensitive.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/case-sensitive.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c exporting.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/exporting.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/exporting.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c german.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/german.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/german.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c french.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/french.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/french.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c spanish.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/spanish.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/spanish.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c russian.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/russian.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/russian.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c danish.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/danish.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/danish.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c dutch.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/dutch.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/dutch.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c deprecated.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/deprecated.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/deprecated.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 2MW -M halfcompiled.mem -q -c config.lisp
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/config.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/config.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -x "(and (load \"init.fas\") (ext::saveinitmem) (ext::exit)) (ext::exit t)"
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.45 (2008-05-15) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2008

Type :h and hit Enter for context help.

WARNING:
DEFUN/DEFMACRO: redefining function LOAD in top-level, was defined in C
;; Loading file defseq.fas ...
;; Loaded file defseq.fas
;; Loading file backquote.fas ...
;; Loaded file backquote.fas
;; Loading file defmacro.fas ...
;; Loaded file defmacro.fas
;; Loading file macros1.fas ...
;; Loaded file macros1.fas
;; Loading file macros2.fas ...
;; Loaded file macros2.fas
;; Loading file defs1.fas ...
;; Loaded file defs1.fas
;; Loading file lambdalist.fas ...
;; Loaded file lambdalist.fas
;; Loading file places.fas ...
;; Loaded file places.fas
;; Loading file floatprint.fas ...
;; Loaded file floatprint.fas
;; Loading file defpackage.fas ...
;; Loaded file defpackage.fas
;; Loading file type.fas ...
;;  Loading file subtypep.fas ...
;;  Loaded file subtypep.fas
;; Loaded file type.fas
;; Loading file clos-package.fas ...
;; Loaded file clos-package.fas
;; Loading file clos-macros.fas ...
;; Loaded file clos-macros.fas
;; Loading file clos-class0.fas ...
;; Loaded file clos-class0.fas
;; Loading file clos-metaobject1.fas ...
;; Loaded file clos-metaobject1.fas
;; Loading file clos-slotdef1.fas ...
;; Loaded file clos-slotdef1.fas
;; Loading file clos-stablehash1.fas ...
;; Loaded file clos-stablehash1.fas
;; Loading file clos-specializer1.fas ...
;; Loaded file clos-specializer1.fas
;; Loading file clos-class1.fas ...
;; Loaded file clos-class1.fas
;; Loading file clos-class2.fas ...
;; Loaded file clos-class2.fas
;; Loading file clos-class3.fas ...
;; Loaded file clos-class3.fas
;; Loading file defstruct.fas ...
;; Loaded file defstruct.fas
;; Loading file format.fas ...
;; Loaded file format.fas
;; Loading file international.fas ...
;; Loaded file international.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/room.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/room.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/savemem.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/savemem.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/functions.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/functions.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/trace.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/trace.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/cmacros.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/cmacros.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/compiler.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/compiler.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/defs2.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/defs2.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/loop.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/loop.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos.fas ...
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slots1.fas ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slots1.fas
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method1.fas ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method1.fas
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb1.fas ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb1.fas
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun1.fas ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun1.fas
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun2a.fas ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun2a.fas
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb2.fas ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb2.fas
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun2b.fas ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun2b.fas
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method2.fas ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method2.fas
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun3.fas ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun3.fas
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-dependent.fas ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-dependent.fas
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun4.fas ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun4.fas
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method3.fas ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method3.fas
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb3.fas ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb3.fas
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slots2.fas ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slots2.fas
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slotdef2.fas ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slotdef2.fas
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-stablehash2.fas ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-stablehash2.fas
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-specializer2.fas ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-specializer2.fas
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class4.fas ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class4.fas
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class5.fas ...
WARNING:
DEFGENERIC: redefining function SHARED-INITIALIZE in /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class5.fas, was defined in top-level
WARNING:
DEFGENERIC: redefining function REINITIALIZE-INSTANCE in /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class5.fas, was defined in top-level
WARNING:
DEFGENERIC: redefining function INITIALIZE-INSTANCE in /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class5.fas, was defined in top-level
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class5.fas
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slotdef3.fas ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slotdef3.fas
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-specializer3.fas ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-specializer3.fas
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class6.fas ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class6.fas
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method4.fas ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method4.fas
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb4.fas ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb4.fas
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun5.fas ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun5.fas
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-print.fas ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-print.fas
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-custom.fas ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-custom.fas
;;  Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/documentation.fas ...
;;  Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/documentation.fas
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gray.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gray.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/fill-out.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/fill-out.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/disassem.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/disassem.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/condition.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/condition.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/loadform.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/loadform.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gstream.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gstream.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/xcharin.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/xcharin.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/keyboard.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/keyboard.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/screen.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/screen.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/runprog.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/runprog.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/query.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/query.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/reploop.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/reploop.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/dribble.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/dribble.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/pprint.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/pprint.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/describe.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/describe.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/edit.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/edit.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clhs.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clhs.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/inspect.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/inspect.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/macros3.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/macros3.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/complete.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/complete.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/case-sensitive.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/case-sensitive.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/exporting.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/exporting.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/danish.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/danish.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/german.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/german.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/french.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/french.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/spanish.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/spanish.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/dutch.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/dutch.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/russian.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/russian.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/deprecated.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/deprecated.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/config.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/config.fas
;; Wrote the memory image into lispinit.mem (3,043,184 bytes)
Bye.
ln -s ../ANNOUNCE ANNOUNCE
ln -s ../COPYRIGHT COPYRIGHT
ln -s ../GNU-GPL GNU-GPL
ln -s ../SUMMARY SUMMARY
./txt2c -I'../' < _README > txt.c
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -DCOMPILE_STANDALONE -x none -O0 txt.c -o txt
./txt > README
rm -f txt.c
rm -f txt
./txt2c -I'../' < _README.de > txt.c
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -DCOMPILE_STANDALONE -x none -O0 txt.c -o txt
./txt > README.de
rm -f txt.c
rm -f txt
./txt2c -I'../' < _README.es > txt.c
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -DCOMPILE_STANDALONE -x none -O0 txt.c -o txt
./txt > README.es
rm -f txt.c
rm -f txt
rm -f MAGIC.add
ln -s ../unix/MAGIC.add MAGIC.add
./txt2c -I'../' < ../doc/_clisp.1 > txt.c
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -DCOMPILE_STANDALONE -x none -O0 txt.c -o txt
./txt | grep -v '^ *$' | sed -e "s,@PLATFORM@,x86_64-unknown-linux-gnu,g" > clisp.1
rm -f txt.c
rm -f txt
./txt2c -I'../' < ../doc/_clisp.html > txt.c
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -DCOMPILE_STANDALONE -x none -O0 txt.c -o txt
./txt | sed -e "s,@PLATFORM@,x86_64-unknown-linux-gnu,g" > clisp.html
rm -f txt.c
rm -f txt
ln -s ../doc/LISP-tutorial.txt LISP-tutorial.txt
ln -s ../doc/CLOS-guide.txt CLOS-guide.txt
ln -s ../doc/editors.txt editors.txt
ln -s ../doc/impnotes.html impnotes.html
ln -s ../doc/impnotes.css impnotes.css
ln -s ../doc/clisp.png clisp.png
groff -Tdvi -mandoc  clisp.1 > clisp.dvi
groff: can't find `DESC' file
groff:fatal error: invalid device `dvi' (try installing the `groff' package?)
Makefile:2325: recipe for target 'clisp.dvi' failed
make[1]: [clisp.dvi] Error 3 (ignored)
groff -Tps -mandoc  clisp.1 > clisp.ps
dvipdf clisp.dvi clisp.pdf
dvips: ! unexpected eof on DVI file
ld -r -o lisp.o spvw.o spvwtabf.o spvwtabs.o spvwtabo.o eval.o control.o encoding.o pathname.o stream.o socket.o io.o funarg.o array.o hashtabl.o list.o package.o record.o weak.o sequence.o charstrg.o debug.o error.o misc.o time.o predtype.o symbol.o lisparit.o i18n.o unixaux.o built.o gllib/uniwidth/width.o gllib/uniname/uniname.o gllib/localcharset.o
chmod a-x lisp.o
ar rcv lisp.a lisp.o
a - lisp.o
rm -f lisp.o
ranlib lisp.a
sed -e 's%@with_dynamic_modules@%no%' -e 's%@createsharedlib@%%' -e 's%@LEXE@%.run%' -e 's%@SHREXT@%.so%'< clisp-link.in > clisp-link
chmod a+x clisp-link
rm -f modprep.lisp
ln -s ../utils/modprep.lisp modprep.lisp
rm -rf linkkit
mkdir linkkit
cd linkkit && ln -s ../modules.c modules.c
cd linkkit && ln -s ../clisp.h clisp.h
cd linkkit && ln -s ../modprep.lisp modprep.lisp
(echo 'CC='"'"'gcc'"'" ; echo 'CPPFLAGS='"'"'-I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib'"'" ; echo 'CFLAGS='"'"'-g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I.'"'" ; echo 'CLFLAGS='"'"'-x none'"'" ; echo 'LIBS='"'"'lisp.a -lncurses -ldl   -L/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/lib -lsigsegv -lc'"'" ; echo 'X_LIBS='"'"''"'" ; echo 'RANLIB='"'"'ranlib'"'" ; echo 'FILES='"'"'lisp.a gllib/uniwidth/width.o gllib/uniname/uniname.o gllib/localcharset.o  '"'") > makevars
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -M lispinit.mem -q -c ../utils/modprep.lisp -o ./
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/utils/modprep.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/modprep.fas
0 errors, 0 warnings
./lndir ../modules/i18n i18n
m=`cd ../modules/i18n; pwd`; \
if test -f i18n/configure -a i18n/configure -nt i18n/config.status ; then cd i18n ; \
  ( cache=`echo i18n/ | sed -e 's,[^/][^/]*//*,../,g'`config.cache; \
    if test -f ${cache} ; then . ${cache}; \
      if test "${ac_cv_env_CC_set}" = set; then CC="${ac_cv_env_CC_value}"; export CC; fi; \
      if test "${ac_cv_env_CFLAGS_set}" = set; then CFLAGS="${ac_cv_env_CFLAGS_value}"; export CFLAGS; fi; \
      /bin/bash ./configure --cache-file=${cache} --srcdir=$m --without-readline --with-libsigsegv-prefix=/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp;\
    else /bin/bash ./configure --srcdir=$m --without-readline --with-libsigsegv-prefix=/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp; \
    fi ) ;\
fi
configure: WARNING: Unrecognized options: --without-readline, --with-libsigsegv-prefix
configure: loading cache ../config.cache
configure: [1m** I18N (Common)[m
checking for gcc... (cached) gcc
checking for C compiler default output file name... a.out
checking whether the C compiler works... yes
checking whether we are cross compiling... no
checking for suffix of executables... 
checking for suffix of object files... (cached) o
checking whether we are using the GNU C compiler... (cached) yes
checking whether gcc accepts -g... (cached) yes
checking for gcc option to accept ISO C89... (cached) none needed
checking how to run the C preprocessor... (cached) gcc -E
checking for grep that handles long lines and -e... (cached) /bin/grep
checking for egrep... (cached) /bin/grep -E
checking for ANSI C header files... (cached) yes
checking for sys/types.h... (cached) yes
checking for sys/stat.h... (cached) yes
checking for stdlib.h... (cached) yes
checking for string.h... (cached) yes
checking for memory.h... (cached) yes
checking for strings.h... (cached) yes
checking for inttypes.h... (cached) yes
checking for stdint.h... (cached) yes
checking for unistd.h... (cached) yes
checking for minix/config.h... (cached) no
checking whether it is safe to define __EXTENSIONS__... (cached) yes
checking whether time.h and sys/time.h may both be included... (cached) yes
configure: [1m** I18N (locale)[m
checking langinfo.h usability... yes
checking langinfo.h presence... yes
checking for langinfo.h... yes
checking for nl_langinfo... yes
checking for localeconv... yes
checking for struct lconv.int_p_cs_precedes... yes
checking for struct lconv.int_n_cs_precedes... yes
checking for struct lconv.int_p_sep_by_space... yes
checking for struct lconv.int_n_sep_by_space... yes
checking for struct lconv.int_p_sign_posn... yes
checking for struct lconv.int_n_sign_posn... yes
configure: [1m** I18N (Output)[m
configure: updating cache ../config.cache
configure: creating ./config.status
config.status: creating Makefile
config.status: creating link.sh
config.status: creating config.h
configure: WARNING: Unrecognized options: --without-readline, --with-libsigsegv-prefix
configure: [1m** I18N (Done)[m
CLISP="`pwd`/lisp.run -M `pwd`/lispinit.mem -B `pwd` -N `pwd`/locale -E UTF-8 -Epathname 1:1 -norc" ; cd i18n ; dots=`echo i18n/ | sed -e 's,[^/][^/]*//*,../,g' -e 's,/$,,g'` ; make clisp-module CC="gcc" CPPFLAGS="-I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib" CFLAGS="-g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I." INCLUDES="$dots" CLFLAGS="-x none" LIBS="-lncurses -ldl   -L/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/lib -lsigsegv -lc" RANLIB="ranlib" CLISP="$CLISP -q"
make[2]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/i18n'
/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/lisp.run -M /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/lispinit.mem -B /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src -N /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/locale -E UTF-8 -Epathname 1:1 -norc -q -c i18n.lisp
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/i18n/i18n.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/i18n/i18n.fas
0 errors, 0 warnings
/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/lisp.run -M /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/lispinit.mem -B /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src -N /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/locale -E UTF-8 -Epathname 1:1 -norc -q ../modprep.fas gettext.c
;; MODPREP: "gettext.c" --> #P"gettext.m.c"
;; MODPREP: reading "gettext.c": 19,201 bytes, 450 lines
WARNING: truncated a very long tag (from 7,676 to 2,000) for
          ("(OR INTEGER (MEMBER" ("defined(CODESET)" . ":CODESET")
           ("defined(D_T_FMT)" . ":D_T_FMT") ("defined(D_FMT)" . ":D_FMT")
           ("defined(T_FMT)" . ":T_FMT")
           ("defined(T_FMT_AMPM)" . ":T_FMT_AMPM")
           ("defined(AM_STR)" . ":AM_STR") ("defined(PM_STR)" . ":PM_STR")
           ("defined(DAY_1)" . ":DAY_1") ("defined(DAY_2)" . ":DAY_2")
           ("defined(DAY_3)" . ":DAY_3") ("defined(DAY_4)" . ":DAY_4")
           ("defined(DAY_5)" . ":DAY_5") ("defined(DAY_6)" . ":DAY_6")
           ("defined(DAY_7)" . ":DAY_7") ("defined(ABDAY_1)" . ":ABDAY_1")
           ("defined(ABDAY_2)" . ":ABDAY_2") ("defined(ABDAY_3)" . ":ABDAY_3")
           ("defined(ABDAY_4)" . ":ABDAY_4") ("defined(ABDAY_5)" . ":ABDAY_5")
           ("defined(ABDAY_6)" . ":ABDAY_6") ("defined(ABDAY_7)" . ":ABDAY_7")
           ("defined(MON_1)" . ":MON_1") ("defined(MON_2)" . ":MON_2")
           ("defined(MON_3)" . ":MON_3") ("defined(MON_4)" . ":MON_4")
           ("defined(MON_5)" . ":MON_5") ("defined(MON_6)" . ":MON_6")
           ("defined(MON_7)" . ":MON_7") ("defined(MON_8)" . ":MON_8")
           ("defined(MON_9)" . ":MON_9") ("defined(MON_10)" . ":MON_10")
           ("defined(MON_11)" . ":MON_11") ("defined(MON_12)" . ":MON_12")
           ("defined(ABMON_1)" . ":ABMON_1") ("defined(ABMON_2)" . ":ABMON_2")
           ("defined(ABMON_3)" . ":ABMON_3") ("defined(ABMON_4)" . ":ABMON_4")
           ("defined(ABMON_5)" . ":ABMON_5") ("defined(ABMON_6)" . ":ABMON_6")
           ("defined(ABMON_7)" . ":ABMON_7") ("defined(ABMON_8)" . ":ABMON_8")
           ("defined(ABMON_9)" . ":ABMON_9")
           ("defined(ABMON_10)" . ":ABMON_10")
           ("defined(ABMON_11)" . ":ABMON_11")
           ("defined(ABMON_12)" . ":ABMON_12") ("defined(ERA)" . ":ERA")
           ("defined(ERA_D_FMT)" . ":ERA_D_FMT")
           ("defined(ERA_D_T_FMT)" . ":ERA_D_T_FMT")
           ("defined(ERA_T_FMT)" . ":ERA_T_FMT")
           ("defined(ALT_DIGITS)" . ":ALT_DIGITS")
           ("defined(RADIXCHAR)" . ":RADIXCHAR")
           ("defined(THOUSEP)" . ":THOUSEP") ("defined(YESEXPR)" . ":YESEXPR")
           ("defined(NOEXPR)" . ":NOEXPR") ("defined(YESSTR)" . ":YESSTR")
           ("defined(NOSTR)" . ":NOSTR") ("defined(CRNCYSTR)" . ":CRNCYSTR")
           ("defined(D_MD_ORDER)" . ":D_MD_ORDER")
           ("defined(LOCALE_FONTSIGNATURE)" . ":LOCALE_FONTSIGNATURE")
           ("defined(LOCALE_ICALENDARTYPE)" . ":LOCALE_ICALENDARTYPE")
           ("defined(LOCALE_ICENTURY)" . ":LOCALE_ICENTURY")
           ("defined(LOCALE_ICOUNTRY)" . ":LOCALE_ICOUNTRY")
           ("defined(LOCALE_ICURRDIGITS)" . ":LOCALE_ICURRDIGITS")
           ("defined(LOCALE_ICURRENCY)" . ":LOCALE_ICURRENCY")
           ("defined(LOCALE_IDATE)" . ":LOCALE_IDATE")
           ("defined(LOCALE_IDAYLZERO)" . ":LOCALE_IDAYLZERO")
           ("defined(LOCALE_IDEFAULTANSICODEPAGE)" .
            ":LOCALE_IDEFAULTANSICODEPAGE")
           ("defined(LOCALE_IDEFAULTCODEPAGE)" . ":LOCALE_IDEFAULTCODEPAGE")
           ("defined(LOCALE_IDEFAULTCOUNTRY)" . ":LOCALE_IDEFAULTCOUNTRY")
           ("defined(LOCALE_IDEFAULTEBCDICCODEPAGE)" .
            ":LOCALE_IDEFAULTEBCDICCODEPAGE")
           ("defined(LOCALE_IDEFAULTLANGUAGE)" . ":LOCALE_IDEFAULTLANGUAGE")
           ("defined(LOCALE_IDEFAULTMACCODEPAGE)" .
            ":LOCALE_IDEFAULTMACCODEPAGE")
           ("defined(LOCALE_IDIGITS)" . ":LOCALE_IDIGITS")
           ("defined(LOCALE_IDIGITSUBSTITUTION)" .
            ":LOCALE_IDIGITSUBSTITUTION")
           ("defined(LOCALE_IFIRSTDAYOFWEEK)" . ":LOCALE_IFIRSTDAYOFWEEK")
           ("defined(LOCALE_IFIRSTWEEKOFYEAR)" . ":LOCALE_IFIRSTWEEKOFYEAR")
           ("defined(LOCALE_IINTLCURRDIGITS)" . ":LOCALE_IINTLCURRDIGITS")
           ("defined(LOCALE_ILANGUAGE)" . ":LOCALE_ILANGUAGE")
           ("defined(LOCALE_ILDATE)" . ":LOCALE_ILDATE")
           ("defined(LOCALE_ILZERO)" . ":LOCALE_ILZERO")
           ("defined(LOCALE_IMEASURE)" . ":LOCALE_IMEASURE")
           ("defined(LOCALE_IMONLZERO)" . ":LOCALE_IMONLZERO")
           ("defined(LOCALE_INEGCURR)" . ":LOCALE_INEGCURR")
           ("defined(LOCALE_INEGNUMBER)" . ":LOCALE_INEGNUMBER")
           ("defined(LOCALE_INEGSEPBYSPACE)" . ":LOCALE_INEGSEPBYSPACE")
           ("defined(LOCALE_INEGSIGNPOSN)" . ":LOCALE_INEGSIGNPOSN")
           ("defined(LOCALE_INEGSYMPRECEDES)" . ":LOCALE_INEGSYMPRECEDES")
           ("defined(LOCALE_IOPTIONALCALENDAR)" . ":LOCALE_IOPTIONALCALENDAR")
           ("defined(LOCALE_IPAPERSIZE)" . ":LOCALE_IPAPERSIZE")
           ("defined(LOCALE_IPOSSEPBYSPACE)" . ":LOCALE_IPOSSEPBYSPACE")
           ("defined(LOCALE_IPOSSIGNPOSN)" . ":LOCALE_IPOSSIGNPOSN")
           ("defined(LOCALE_IPOSSYMPRECEDES)" . ":LOCALE_IPOSSYMPRECEDES")
           ("defined(LOCALE_ITIMEMARKPOSN)" . ":LOCALE_ITIMEMARKPOSN")
           ("defined(LOCALE_ITLZERO)" . ":LOCALE_ITLZERO")
           ("defined(LOCALE_S1159)" . ":LOCALE_S1159")
           ("defined(LOCALE_S2359)" . ":LOCALE_S2359")
           ("defined(LOCALE_SABBREVCTRYNAME)" . ":LOCALE_SABBREVCTRYNAME")
           ("defined(LOCALE_SABBREVDAYNAME1)" . ":LOCALE_SABBREVDAYNAME1")
           ("defined(LOCALE_SABBREVDAYNAME2)" . ":LOCALE_SABBREVDAYNAME2")
           ("defined(LOCALE_SABBREVDAYNAME3)" . ":LOCALE_SABBREVDAYNAME3")
           ("defined(LOCALE_SABBREVDAYNAME4)" . ":LOCALE_SABBREVDAYNAME4")
           ("defined(LOCALE_SABBREVDAYNAME5)" . ":LOCALE_SABBREVDAYNAME5")
           ("defined(LOCALE_SABBREVDAYNAME6)" . ":LOCALE_SABBREVDAYNAME6")
           ("defined(LOCALE_SABBREVDAYNAME7)" . ":LOCALE_SABBREVDAYNAME7")
           ("defined(LOCALE_SABBREVLANGNAME)" . ":LOCALE_SABBREVLANGNAME")
           ("defined(LOCALE_SABBREVMONTHNAME1)" . ":LOCALE_SABBREVMONTHNAME1")
           ("defined(LOCALE_SABBREVMONTHNAME2)" . ":LOCALE_SABBREVMONTHNAME2")
           ("defined(LOCALE_SABBREVMONTHNAME3)" . ":LOCALE_SABBREVMONTHNAME3")
           ("defined(LOCALE_SABBREVMONTHNAME4)" . ":LOCALE_SABBREVMONTHNAME4")
           ("defined(LOCALE_SABBREVMONTHNAME5)" . ":LOCALE_SABBREVMONTHNAME5")
           ("defined(LOCALE_SABBREVMONTHNAME6)" . ":LOCALE_SABBREVMONTHNAME6")
           ("defined(LOCALE_SABBREVMONTHNAME7)" . ":LOCALE_SABBREVMONTHNAME7")
           ("defined(LOCALE_SABBREVMONTHNAME8)" . ":LOCALE_SABBREVMONTHNAME8")
           ("defined(LOCALE_SABBREVMONTHNAME9)" . ":LOCALE_SABBREVMONTHNAME9")
           ("defined(LOCALE_SABBREVMONTHNAME10)" .
            ":LOCALE_SABBREVMONTHNAME10")
           ("defined(LOCALE_SABBREVMONTHNAME11)" .
            ":LOCALE_SABBREVMONTHNAME11")
           ("defined(LOCALE_SABBREVMONTHNAME12)" .
            ":LOCALE_SABBREVMONTHNAME12")
           ("defined(LOCALE_SABBREVMONTHNAME13)" .
            ":LOCALE_SABBREVMONTHNAME13")
           ("defined(LOCALE_SCOUNTRY)" . ":LOCALE_SCOUNTRY")
           ("defined(LOCALE_SCURRENCY)" . ":LOCALE_SCURRENCY")
           ("defined(LOCALE_SDATE)" . ":LOCALE_SDATE")
           ("defined(LOCALE_SDAYNAME1)" . ":LOCALE_SDAYNAME1")
           ("defined(LOCALE_SDAYNAME2)" . ":LOCALE_SDAYNAME2")
           ("defined(LOCALE_SDAYNAME3)" . ":LOCALE_SDAYNAME3")
           ("defined(LOCALE_SDAYNAME4)" . ":LOCALE_SDAYNAME4")
           ("defined(LOCALE_SDAYNAME5)" . ":LOCALE_SDAYNAME5")
           ("defined(LOCALE_SDAYNAME6)" . ":LOCALE_SDAYNAME6")
           ("defined(LOCALE_SDAYNAME7)" . ":LOCALE_SDAYNAME7")
           ("defined(LOCALE_SDECIMAL)" . ":LOCALE_SDECIMAL")
           ("defined(LOCALE_SENGCOUNTRY)" . ":LOCALE_SENGCOUNTRY")
           ("defined(LOCALE_SENGCURRNAME)" . ":LOCALE_SENGCURRNAME")
           ("defined(LOCALE_SENGLANGUAGE)" . ":LOCALE_SENGLANGUAGE")
           ("defined(LOCALE_SGROUPING)" . ":LOCALE_SGROUPING")
           ("defined(LOCALE_SINTLSYMBOL)" . ":LOCALE_SINTLSYMBOL")
           ("defined(LOCALE_SISO3166CTRYNAME)" . ":LOCALE_SISO3166CTRYNAME")
           ("defined(LOCALE_SISO639LANGNAME)" . ":LOCALE_SISO639LANGNAME")
           ("defined(LOCALE_SLANGUAGE)" . ":LOCALE_SLANGUAGE")
           ("defined(LOCALE_SLIST)" . ":LOCALE_SLIST")
           ("defined(LOCALE_SLONGDATE)" . ":LOCALE_SLONGDATE")
           ("defined(LOCALE_SMONDECIMALSEP)" . ":LOCALE_SMONDECIMALSEP")
           ("defined(LOCALE_SMONGROUPING)" . ":LOCALE_SMONGROUPING")
           ("defined(LOCALE_SMONTHNAME1)" . ":LOCALE_SMONTHNAME1")
           ("defined(LOCALE_SMONTHNAME2)" . ":LOCALE_SMONTHNAME2")
           ("defined(LOCALE_SMONTHNAME3)" . ":LOCALE_SMONTHNAME3")
           ("defined(LOCALE_SMONTHNAME4)" . ":LOCALE_SMONTHNAME4")
           ("defined(LOCALE_SMONTHNAME5)" . ":LOCALE_SMONTHNAME5")
           ("defined(LOCALE_SMONTHNAME6)" . ":LOCALE_SMONTHNAME6")
           ("defined(LOCALE_SMONTHNAME7)" . ":LOCALE_SMONTHNAME7")
           ("defined(LOCALE_SMONTHNAME8)" . ":LOCALE_SMONTHNAME8")
           ("defined(LOCALE_SMONTHNAME9)" . ":LOCALE_SMONTHNAME9")
           ("defined(LOCALE_SMONTHNAME10)" . ":LOCALE_SMONTHNAME10")
           ("defined(LOCALE_SMONTHNAME11)" . ":LOCALE_SMONTHNAME11")
           ("defined(LOCALE_SMONTHNAME12)" . ":LOCALE_SMONTHNAME12")
           ("defined(LOCALE_SMONTHNAME13)" . ":LOCALE_SMONTHNAME13")
           ("defined(LOCALE_SMONTHOUSANDSEP)" . ":LOCALE_SMONTHOUSANDSEP")
           ("defined(LOCALE_SNATIVECTRYNAME)" . ":LOCALE_SNATIVECTRYNAME")
           ("defined(LOCALE_SNATIVECURRNAME)" . ":LOCALE_SNATIVECURRNAME")
           ("defined(LOCALE_SNATIVEDIGITS)" . ":LOCALE_SNATIVEDIGITS")
           ("defined(LOCALE_SNATIVELANGNAME)" . ":LOCALE_SNATIVELANGNAME")
           ("defined(LOCALE_SNEGATIVESIGN)" . ":LOCALE_SNEGATIVESIGN")
           ("defined(LOCALE_SPOSITIVESIGN)" . ":LOCALE_SPOSITIVESIGN")
           ("defined(LOCALE_SSHORTDATE)" . ":LOCALE_SSHORTDATE")
           ("defined(LOCALE_SSORTNAME)" . ":LOCALE_SSORTNAME")
           ("defined(LOCALE_STHOUSAND)" . ":LOCALE_STHOUSAND")
           ("defined(LOCALE_STIME)" . ":LOCALE_STIME")
           ("defined(LOCALE_STIMEFORMAT)" . ":LOCALE_STIMEFORMAT")
           ("defined(LOCALE_SYEARMONTH)" . ":LOCALE_SYEARMONTH") "))")

;; MODPREP: 183 objects, 9 DEFUNs
;; packages: ("I18N")
MODPREP: wrote gettext.m.c (121,344 bytes)
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -I.. -c gettext.m.c -o gettext.o
gettext.c: In function ‘C_subr_i18n_set_locale’:
gettext.c:212:18: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
       for (; pos < check_locale_category_map.size; pos++) {
                  ^
In file included from gettext.c:13:0:
gettext.c:222:22: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
           for (; pos < check_locale_category_map.size; pos++) {
                      ^
../clisp.h:3930:4324: note: in definition of macro ‘with_string_0_help_’
 #define with_string_0_help_(string,encoding,ascizvar,statement,ascizvar_len,ascizvar_offset,ascizvar_string,ascizvar_bytelen,ascizvar_data,A,NR)  do { uintL ascizvar_len; uintL ascizvar_offset; object ascizvar_string = unpack_string_ro(string,&ascizvar_len,&ascizvar_offset); const chart* ptr1; if ((((ascizvar_string) == (((gcv_object_t)(((UBYTE*)((&symbol_tab_data.S_nil))+((oint)(tint)(( (1UL<<(2)) ))<<48)))))))) { if ((ascizvar_len) > 0) error_nilarray_retrieve(); ptr1= ((void *)0); } else if ((((((Sstring)(((0==0) && ((((oint)(tint)(( (1UL<<(4)) |(1UL<<(2))|(1UL<<(1)) )) << 48) & ~0UL) == 0) ? (void*)(aint)(oint)(ascizvar_string) : (void*)(aint)((void*)((aint)((oint)(ascizvar_string)) & ((aint)0x0000FFFFFFFFFFFFUL | ~~0UL))) ))))->tfl >> 4) & 3) == 2) { ptr1= (const chart*) &((S32string)(((0==0) && ((((oint)(tint)(( (1UL<<(4)) |(1UL<<(2))|(1UL<<(1)) )) << 48) & ~0UL) == 0) ? (void*)(aint)(oint)(ascizvar_string) : (void*)(aint)((void*)((aint)((oint)(ascizvar_string)) & ((aint)0x0000FFFFFFFFFFFFUL | ~~0UL))) )))->data[ascizvar_offset]; } else { chart* _unpacked_ = (chart*)__builtin_alloca((ascizvar_len)*sizeof(chart)); if ((ascizvar_len) > 0) { if ((((((Sstring)(((0==0) && ((((oint)(tint)(( (1UL<<(4)) |(1UL<<(2))|(1UL<<(1)) )) << 48) & ~0UL) == 0) ? (void*)(aint)(oint)(ascizvar_string) : (void*)(aint)((void*)((aint)((oint)(ascizvar_string)) & ((aint)0x0000FFFFFFFFFFFFUL | ~~0UL))) ))))->tfl >> 4) & 3) == 1) copy_16bit_32bit(&((S16string)(((0==0) && ((((oint)(tint)(( (1UL<<(4)) |(1UL<<(2))|(1UL<<(1)) )) << 48) & ~0UL) == 0) ? (void*)(aint)(oint)(ascizvar_string) : (void*)(aint)((void*)((aint)((oint)(ascizvar_string)) & ((aint)0x0000FFFFFFFFFFFFUL | ~~0UL))) )))->data[ascizvar_offset],(cint32*)_unpacked_,ascizvar_len); else if ((((((Sstring)(((0==0) && ((((oint)(tint)(( (1UL<<(4)) |(1UL<<(2))|(1UL<<(1)) )) << 48) & ~0UL) == 0) ? (void*)(aint)(oint)(ascizvar_string) : (void*)(aint)((void*)((aint)((oint)(ascizvar_string)) & ((aint)0x0000FFFFFFFFFFFFUL | ~~0UL))) ))))->tfl >> 4) & 3) == 0) copy_8bit_32bit(&((S8string)(((0==0) && ((((oint)(tint)(( (1UL<<(4)) |(1UL<<(2))|(1UL<<(1)) )) << 48) & ~0UL) == 0) ? (void*)(aint)(oint)(ascizvar_string) : (void*)(aint)((void*)((aint)((oint)(ascizvar_string)) & ((aint)0x0000FFFFFFFFFFFFUL | ~~0UL))) )))->data[ascizvar_offset],(cint32*)_unpacked_,ascizvar_len); else NR; } ptr1= (const chart*) _unpacked_; }; { uintL ascizvar_bytelen = ((uintL (*) (object, const chart*, const chart*)) ((Pseudofun)((void*)(((0==0) && ((((oint)(tint)((0)) << 48) & ~0UL) == 0) ? (void*)(aint)(oint)(((Encoding)(((0==0) && ((((oint)(tint)(( (1UL<<(3))|(1UL<<(2)) )) << 48) & ~0UL) == 0) ? (void*)(aint)(oint)(encoding) : (void*)(aint)((void*)((aint)((oint)(encoding)) & ((aint)0x0000FFFFFFFFFFFFUL | ~~0UL))) )))->enc_wcslen) : (void*)(aint)((void*)((aint)((oint)(((Encoding)(((0==0) && ((((oint)(tint)(( (1UL<<(3))|(1UL<<(2)) )) << 48) & ~0UL) == 0) ? (void*)(aint)(oint)(encoding) : (void*)(aint)((void*)((aint)((oint)(encoding)) & ((aint)0x0000FFFFFFFFFFFFUL | ~~0UL))) )))->enc_wcslen)) & ((aint)0x0000FFFFFFFFFFFFUL | ~~0UL))) )))))(encoding,ptr1,(ptr1)+(ascizvar_len)); uintB ascizvar_data[ascizvar_bytelen+1]; do { const chart* _srcptr = (ptr1); const chart* _srcendptr = _srcptr+(ascizvar_len); uintB* _destptr = (&ascizvar_data[0]); uintB* _destendptr = _destptr+(ascizvar_bytelen); ((void (*) (object, object, const chart**, const chart*, uintB**, uintB*)) ((Pseudofun)((void*)(((0==0) && ((((oint)(tint)((0)) << 48) & ~0UL) == 0) ? (void*)(aint)(oint)(((Encoding)(((0==0) && ((((oint)(tint)(( (1UL<<(3))|(1UL<<(2)) )) << 48) & ~0UL) == 0) ? (void*)(aint)(oint)(encoding) : (void*)(aint)((void*)((aint)((oint)(encoding)) & ((aint)0x0000FFFFFFFFFFFFUL | ~~0UL))) )))->enc_wcstombs) : (void*)(aint)((void*)((aint)((oint)(((Encoding)(((0==0) && ((((oint)(tint)(( (1UL<<(3))|(1UL<<(2)) )) << 48) & ~0UL) == 0) ? (void*)(aint)(oint)(encoding) : (void*)(aint)((void*)((aint)((oint)(encoding)) & ((aint)0x0000FFFFFFFFFFFFUL | ~~0UL))) )))->enc_wcstombs)) & ((aint)0x0000FFFFFFFFFFFFUL | ~~0UL))) )))))(encoding,(gcv_object_t)(((UBYTE*)((0))+((oint)(tint)((0))<<48))),&_srcptr,_srcendptr,&_destptr,_destendptr); A((_srcptr == _srcendptr) && (_destptr == _destendptr)); } while(0); ascizvar_data[ascizvar_bytelen] = '\0'; { char* ascizvar = (char*) &ascizvar_data[0]; statement} ; }} while(0)

gettext.c:221:7: note: in expansion of macro ‘with_string_0’
       with_string_0(*locale,GLO(misc_encoding),loc_z,{
       ^
gettext.c: In function ‘C_subr_i18n_language_information’:
gettext.c:492:16: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     for (; pos < check_nl_item_map.size; pos++) {
                ^
make[2]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/i18n'
./lndir ../modules/syscalls syscalls
m=`cd ../modules/syscalls; pwd`; \
if test -f syscalls/configure -a syscalls/configure -nt syscalls/config.status ; then cd syscalls ; \
  ( cache=`echo syscalls/ | sed -e 's,[^/][^/]*//*,../,g'`config.cache; \
    if test -f ${cache} ; then . ${cache}; \
      if test "${ac_cv_env_CC_set}" = set; then CC="${ac_cv_env_CC_value}"; export CC; fi; \
      if test "${ac_cv_env_CFLAGS_set}" = set; then CFLAGS="${ac_cv_env_CFLAGS_value}"; export CFLAGS; fi; \
      /bin/bash ./configure --cache-file=${cache} --srcdir=$m --without-readline --with-libsigsegv-prefix=/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp;\
    else /bin/bash ./configure --srcdir=$m --without-readline --with-libsigsegv-prefix=/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp; \
    fi ) ;\
fi
configure: WARNING: Unrecognized options: --without-readline, --with-libsigsegv-prefix
configure: loading cache ../config.cache
configure: [1m** System Calls (Common)[m
checking for gcc... (cached) gcc
checking for C compiler default output file name... a.out
checking whether the C compiler works... yes
checking whether we are cross compiling... no
checking for suffix of executables... 
checking for suffix of object files... (cached) o
checking whether we are using the GNU C compiler... (cached) yes
checking whether gcc accepts -g... (cached) yes
checking for gcc option to accept ISO C89... (cached) none needed
checking how to run the C preprocessor... (cached) gcc -E
checking for grep that handles long lines and -e... (cached) /bin/grep
checking for egrep... (cached) /bin/grep -E
checking for ANSI C header files... (cached) yes
checking for sys/types.h... (cached) yes
checking for sys/stat.h... (cached) yes
checking for stdlib.h... (cached) yes
checking for string.h... (cached) yes
checking for memory.h... (cached) yes
checking for strings.h... (cached) yes
checking for inttypes.h... (cached) yes
checking for stdint.h... (cached) yes
checking for unistd.h... (cached) yes
checking for minix/config.h... (cached) no
checking whether it is safe to define __EXTENSIONS__... (cached) yes
checking whether time.h and sys/time.h may both be included... (cached) yes
configure: [1m** System Calls (Headers)[m
checking for sys/utsname.h and struct utsname... (cached) yes
checking errno.h usability... yes
checking errno.h presence... yes
checking for errno.h... yes
checking fcntl.h usability... yes
checking fcntl.h presence... yes
checking for fcntl.h... yes
checking for netdb.h... (cached) yes
checking for sys/resource.h... (cached) yes
checking utime.h usability... yes
checking utime.h presence... yes
checking for utime.h... yes
checking for wchar.h... (cached) yes
checking pwd.h usability... yes
checking pwd.h presence... yes
checking for pwd.h... yes
checking sys/time.h usability... yes
checking sys/time.h presence... yes
checking for sys/time.h... yes
checking sys/unistd.h usability... yes
checking sys/unistd.h presence... yes
checking for sys/unistd.h... yes
checking time.h usability... yes
checking time.h presence... yes
checking for time.h... yes
checking for unistd.h... (cached) yes
checking syslog.h usability... yes
checking syslog.h presence... yes
checking for syslog.h... yes
checking signal.h usability... yes
checking signal.h presence... yes
checking for signal.h... yes
checking grp.h usability... yes
checking grp.h presence... yes
checking for grp.h... yes
checking crypt.h usability... yes
checking crypt.h presence... yes
checking for crypt.h... yes
checking utmpx.h usability... yes
checking utmpx.h presence... yes
checking for utmpx.h... yes
checking for stdlib.h... (cached) yes
checking shlobj.h usability... no
checking shlobj.h presence... no
checking for shlobj.h... no
checking for netinet/in.h... (cached) yes
checking for arpa/inet.h... (cached) yes
checking size of off_t... (cached) 8
checking size of gid_t... 4
checking size of pid_t... 4
checking size of uid_t... 4
checking for struct utmpx.ut_host... yes
configure: [1m** System Calls (Functions)[m
checking for getrlimit... (cached) yes
checking for setrlimit... (cached) yes
checking size of rlim_t... (cached) 8
checking for getrlimit declaration... (cached) 
         extern int getrlimit (enum __rlimit_resource, struct rlimit *);
checking for setrlimit declaration... (cached) 
         extern int setrlimit (enum __rlimit_resource, const struct rlimit *);
checking whether gethostent requires -lnsl... (cached) no
checking whether setsockopt requires -lsocket... (cached) no
checking for library containing crypt... -lcrypt
checking for library containing erf... -lm
checking for clock... yes
checking for getloadavg... yes
checking for confstr... yes
checking for fcntl... yes
checking for gethostent... (cached) yes
checking for sysconf... (cached) yes
checking for uname... yes
checking for getlogin... yes
checking for getpwent... yes
checking for getpwnam... (cached) yes
checking for getpwuid... yes
checking for endpwent... yes
checking for setpwent... yes
checking for getservbyport... yes
checking for getservbyname... yes
checking for getservent... yes
checking for setservent... yes
checking for endservent... yes
checking for openlog... yes
checking for setlogmask... yes
checking for syslog... yes
checking for closelog... yes
checking for strftime... yes
checking for strptime... yes
checking for mktime... yes
checking for getppid... yes
checking for getpgid... yes
checking for getsid... yes
checking for setpgid... (cached) yes
checking for setsid... (cached) yes
checking for kill... yes
checking for pathconf... yes
checking for fpathconf... yes
checking for realpath... (cached) yes
checking for getpgrp... yes
checking for setpgrp... yes
checking for getgrgid... yes
checking for getgrnam... yes
checking for getgrent... yes
checking for endgrent... yes
checking for setgrent... yes
checking for endutxent... yes
checking for getutxent... yes
checking for getutxid... yes
checking for getutxline... yes
checking for pututxline... yes
checking for setutxent... yes
checking for mkfifo... yes
checking for mkdir... yes
checking for creat... yes
checking for mkstemp... yes
checking for tempnam... yes
checking for mkdtemp... yes
checking for getegid... yes
checking for geteuid... yes
checking for getgid... yes
checking for getuid... yes
checking for setegid... yes
checking for seteuid... yes
checking for setgid... yes
checking for setuid... yes
checking for setreuid... yes
checking for setregid... yes
checking for getgroups... yes
checking for setgroups... yes
checking for fchmod... (cached) yes
checking for fchown... yes
checking for fstat... yes
checking for link... yes
checking for stat... yes
checking for symlink... yes
checking for utime... yes
checking for mknod... yes
checking for chmod... yes
checking for umask... yes
checking for fsync... (cached) yes
checking for sync... yes
checking for erf... yes
checking for erfc... yes
checking for lgamma... yes
checking for tgamma... yes
checking for fstatvfs... yes
checking for statvfs... yes
checking for getpriority... yes
checking for setpriority... yes
checking for crypt... yes
checking for encrypt... yes
checking for setkey... yes
checking for GlobalMemoryStatusEx... no
checking for uid_t in sys/types.h... yes
checking for unistd.h... (cached) yes
checking for working chown... yes
checking whether signgam is declared... yes
checking for lstat... (cached) yes
checking for sys/statvfs.h... (cached) yes
checking for sys/statfs.h... (cached) yes
checking for sys/stat.h... (cached) yes
checking whether f_fsid is scalar... yes
checking size of fsblkcnt_t... (cached) 8
checking size of fsfilcnt_t... (cached) 8
checking for struct stat.st_rdev... (cached) yes
checking for struct stat.st_blksize... (cached) yes
checking for struct stat.st_blocks... (cached) yes
checking size of ino_t... (cached) 8
checking size of dev_t... (cached) 8
checking for sys/resource.h... (cached) yes
checking for sys/times.h... (cached) yes
checking for getrusage... (cached) yes
checking for getrusage declaration... (cached) 
         extern int getrusage (int, struct rusage *);
checking whether getrusage works... (cached) yes
checking whether link(2) dereferences a symlink specified with a trailing slash... (cached) no
checking whether setpgrp() is POSIX... yes
configure: [1m** System Calls (output)[m
configure: updating cache ../config.cache
configure: creating ./config.status
config.status: creating Makefile
config.status: creating link.sh
config.status: creating config.h
configure: WARNING: Unrecognized options: --without-readline, --with-libsigsegv-prefix
configure: [1m** System Calls (done)[m
CLISP="`pwd`/lisp.run -M `pwd`/lispinit.mem -B `pwd` -N `pwd`/locale -E UTF-8 -Epathname 1:1 -norc" ; cd syscalls ; dots=`echo syscalls/ | sed -e 's,[^/][^/]*//*,../,g' -e 's,/$,,g'` ; make clisp-module CC="gcc" CPPFLAGS="-I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib" CFLAGS="-g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I." INCLUDES="$dots" CLFLAGS="-x none" LIBS="-lncurses -ldl   -L/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/lib -lsigsegv -lc" RANLIB="ranlib" CLISP="$CLISP -q"
make[2]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/syscalls'
/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/lisp.run -M /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/lispinit.mem -B /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src -N /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/locale -E UTF-8 -Epathname 1:1 -norc -q ../modprep.fas calls.c
;; MODPREP: "calls.c" --> #P"calls.m.c"
;; MODPREP: reading "calls.c": 150,812 bytes, 3,998 lines
WARNING: truncated a very long tag (from 5,768 to 2,000) for
          ("(OR INTEGER (MEMBER"
           ("defined(_SC_AIO_LISTIO_MAX)" . ":AIO-LISTIO-MAX")
           ("defined(_SC_AIO_MAX)" . ":AIO-MAX")
           ("defined(_SC_AIO_PRIO_DELTA_MAX)" . ":AIO-PRIO-DELTA-MAX")
           ("defined(_SC_ARG_MAX)" . ":ARG-MAX")
           ("defined(_SC_ATEXIT_MAX)" . ":ATEXIT-MAX")
           ("defined(_SC_BC_BASE_MAX)" . ":BC-BASE-MAX")
           ("defined(_SC_BC_DIM_MAX)" . ":BC-DIM-MAX")
           ("defined(_SC_BC_SCALE_MAX)" . ":BC-SCALE-MAX")
           ("defined(_SC_BC_STRING_MAX)" . ":BC-STRING-MAX")
           ("defined(_SC_CHILD_MAX)" . ":CHILD-MAX")
           ("defined(_SC_CLK_TCK)" . ":CLK-TCK")
           ("defined(_SC_COLL_WEIGHTS_MAX)" . ":COLL-WEIGHTS-MAX")
           ("defined(_SC_DELAYTIMER_MAX)" . ":DELAYTIMER-MAX")
           ("defined(_SC_EXPR_NEST_MAX)" . ":EXPR-NEST-MAX")
           ("defined(_SC_HOST_NAME_MAX)" . ":HOST-NAME-MAX")
           ("defined(_SC_IOV_MAX)" . ":IOV-MAX")
           ("defined(_SC_LINE_MAX)" . ":LINE-MAX")
           ("defined(_SC_LOGIN_NAME_MAX)" . ":LOGIN-NAME-MAX")
           ("defined(_SC_NGROUPS_MAX)" . ":NGROUPS-MAX")
           ("defined(_SC_GETGR_R_SIZE_MAX)" . ":GETGR-R-SIZE-MAX")
           ("defined(_SC_GETPW_R_SIZE_MAX)" . ":GETPW-R-SIZE-MAX")
           ("defined(_SC_MQ_OPEN_MAX)" . ":MQ-OPEN-MAX")
           ("defined(_SC_MQ_PRIO_MAX)" . ":MQ-PRIO-MAX")
           ("defined(_SC_OPEN_MAX)" . ":OPEN-MAX")
           ("defined(_SC_ADVISORY_INFO)" . ":ADVISORY-INFO")
           ("defined(_SC_BARRIERS)" . ":BARRIERS")
           ("defined(_SC_ASYNCHRONOUS_IO)" . ":ASYNCHRONOUS-IO")
           ("defined(_SC_CLOCK_SELECTION)" . ":CLOCK-SELECTION")
           ("defined(_SC_CPUTIME)" . ":CPUTIME")
           ("defined(_SC_FSYNC)" . ":FSYNC") ("defined(_SC_IPV6)" . ":IPV6")
           ("defined(_SC_JOB_CONTROL)" . ":JOB-CONTROL")
           ("defined(_SC_MAPPED_FILES)" . ":MAPPED-FILES")
           ("defined(_SC_MEMLOCK)" . ":MEMLOCK")
           ("defined(_SC_MEMLOCK_RANGE)" . ":MEMLOCK-RANGE")
           ("defined(_SC_MEMORY_PROTECTION)" . ":MEMORY-PROTECTION")
           ("defined(_SC_MESSAGE_PASSING)" . ":MESSAGE-PASSING")
           ("defined(_SC_MONOTONIC_CLOCK)" . ":MONOTONIC-CLOCK")
           ("defined(_SC_PRIORITIZED_IO)" . ":PRIORITIZED-IO")
           ("defined(_SC_PRIORITY_SCHEDULING)" . ":PRIORITY-SCHEDULING")
           ("defined(_SC_RAW_SOCKETS)" . ":RAW-SOCKETS")
           ("defined(_SC_READER_WRITER_LOCKS)" . ":READER-WRITER-LOCKS")
           ("defined(_SC_REALTIME_SIGNALS)" . ":REALTIME-SIGNALS")
           ("defined(_SC_REGEXP)" . ":REGEXP")
           ("defined(_SC_SAVED_IDS)" . ":SAVED-IDS")
           ("defined(_SC_SEMAPHORES)" . ":SEMAPHORES")
           ("defined(_SC_SHARED_MEMORY_OBJECTS)" . ":SHARED-MEMORY-OBJECTS")
           ("defined(_SC_SHELL)" . ":SHELL") ("defined(_SC_SPAWN)" . ":SPAWN")
           ("defined(_SC_SPIN_LOCKS)" . ":SPIN-LOCKS")
           ("defined(_SC_SPORADIC_SERVER)" . ":SPORADIC-SERVER")
           ("defined(_SC_SS_REPL_MAX)" . ":SS-REPL-MAX")
           ("defined(_SC_SYNCHRONIZED_IO)" . ":SYNCHRONIZED-IO")
           ("defined(_SC_THREAD_ATTR_STACKADDR)" . ":THREAD-ATTR-STACKADDR")
           ("defined(_SC_THREAD_ATTR_STACKSIZE)" . ":THREAD-ATTR-STACKSIZE")
           ("defined(_SC_THREAD_CPUTIME)" . ":THREAD-CPUTIME")
           ("defined(_SC_THREAD_PRIO_INHERIT)" . ":THREAD-PRIO-INHERIT")
           ("defined(_SC_THREAD_PRIO_PROTECT)" . ":THREAD-PRIO-PROTECT")
           ("defined(_SC_THREAD_PRIORITY_SCHEDULING)" .
            ":THREAD-PRIORITY-SCHEDULING")
           ("defined(_SC_THREAD_PROCESS_SHARED)" . ":THREAD-PROCESS-SHARED")
           ("defined(_SC_THREAD_SAFE_FUNCTIONS)" . ":THREAD-SAFE-FUNCTIONS")
           ("defined(_SC_THREAD_SPORADIC_SERVER)" . ":THREAD-SPORADIC-SERVER")
           ("defined(_SC_THREADS)" . ":THREADS")
           ("defined(_SC_TIMEOUTS)" . ":TIMEOUTS")
           ("defined(_SC_TIMERS)" . ":TIMERS")
           ("defined(_SC_TRACE)" . ":TRACE")
           ("defined(_SC_TRACE_EVENT_FILTER)" . ":TRACE-EVENT-FILTER")
           ("defined(_SC_TRACE_EVENT_NAME_MAX)" . ":TRACE-EVENT-NAME-MAX")
           ("defined(_SC_TRACE_INHERIT)" . ":TRACE-INHERIT")
           ("defined(_SC_TRACE_LOG)" . ":TRACE-LOG")
           ("defined(_SC_TRACE_NAME_MAX)" . ":TRACE-NAME-MAX")
           ("defined(_SC_TRACE_SYS_MAX)" . ":TRACE-SYS-MAX")
           ("defined(_SC_TRACE_USER_EVENT_MAX)" . ":TRACE-USER-EVENT-MAX")
           ("defined(_SC_TYPED_MEMORY_OBJECTS)" . ":TYPED-MEMORY-OBJECTS")
           ("defined(_SC_VERSION)" . ":VERSION")
           ("defined(_SC_V6_ILP32_OFF32)" . ":V6-ILP32-OFF32")
           ("defined(_SC_V6_ILP32_OFFBIG)" . ":V6-ILP32-OFFBIG")
           ("defined(_SC_V6_LP64_OFF64)" . ":V6-LP64-OFF64")
           ("defined(_SC_V6_LPBIG_OFFBIG)" . ":V6-LPBIG-OFFBIG")
           ("defined(_SC_2_C_BIND)" . ":2-C-BIND")
           ("defined(_SC_2_C_DEV)" . ":2-C-DEV")
           ("defined(_SC_2_CHAR_TERM)" . ":2-CHAR-TERM")
           ("defined(_SC_2_FORT_DEV)" . ":2-FORT-DEV")
           ("defined(_SC_2_FORT_RUN)" . ":2-FORT-RUN")
           ("defined(_SC_2_LOCALEDEF)" . ":2-LOCALEDEF")
           ("defined(_SC_2_PBS)" . ":2-PBS")
           ("defined(_SC_2_PBS_ACCOUNTING)" . ":2-PBS-ACCOUNTING")
           ("defined(_SC_2_PBS_CHECKPOINT)" . ":2-PBS-CHECKPOINT")
           ("defined(_SC_2_PBS_LOCATE)" . ":2-PBS-LOCATE")
           ("defined(_SC_2_PBS_MESSAGE)" . ":2-PBS-MESSAGE")
           ("defined(_SC_2_PBS_TRACK)" . ":2-PBS-TRACK")
           ("defined(_SC_2_SW_DEV)" . ":2-SW-DEV")
           ("defined(_SC_2_UPE)" . ":2-UPE")
           ("defined(_SC_2_VERSION)" . ":2-VERSION")
           ("defined(_SC_PAGESIZE)" . ":PAGESIZE")
           ("defined(_SC_PHYS_PAGES)" . ":PHYS-PAGES")
           ("defined(_SC_AVPHYS_PAGES)" . ":AVPHYS-PAGES")
           ("defined(_SC_THREAD_DESTRUCTOR_ITERATIONS)" .
            ":THREAD-DESTRUCTOR-ITERATIONS")
           ("defined(_SC_THREAD_KEYS_MAX)" . ":THREAD-KEYS-MAX")
           ("defined(_SC_THREAD_STACK_MIN)" . ":THREAD-STACK-MIN")
           ("defined(_SC_THREAD_THREADS_MAX)" . ":THREAD-THREADS-MAX")
           ("defined(_SC_RE_DUP_MAX)" . ":RE-DUP-MAX")
           ("defined(_SC_RTSIG_MAX)" . ":RTSIG-MAX")
           ("defined(_SC_SEM_NSEMS_MAX)" . ":SEM-NSEMS-MAX")
           ("defined(_SC_SEM_VALUE_MAX)" . ":SEM-VALUE-MAX")
           ("defined(_SC_SIGQUEUE_MAX)" . ":SIGQUEUE-MAX")
           ("defined(_SC_STREAM_MAX)" . ":STREAM-MAX")
           ("defined(_SC_SYMLOOP_MAX)" . ":SYMLOOP-MAX")
           ("defined(_SC_TIMER_MAX)" . ":TIMER-MAX")
           ("defined(_SC_TTY_NAME_MAX)" . ":TTY-NAME-MAX")
           ("defined(_SC_TZNAME_MAX)" . ":TZNAME-MAX")
           ("defined(_SC_XBS5_ILP32_OFF32)" . ":XBS5-ILP32-OFF32")
           ("defined(_SC_XBS5_ILP32_OFFBIG)" . ":XBS5-ILP32-OFFBIG")
           ("defined(_SC_XBS5_LP64_OFF64)" . ":XBS5-LP64-OFF64")
           ("defined(_SC_XBS5_LPBIG_OFFBIG)" . ":XBS5-LPBIG-OFFBIG")
           ("defined(_SC_XOPEN_CRYPT)" . ":XOPEN-CRYPT")
           ("defined(_SC_XOPEN_ENH_I18N)" . ":XOPEN-ENH-I18N")
           ("defined(_SC_XOPEN_LEGACY)" . ":XOPEN-LEGACY")
           ("defined(_SC_XOPEN_REALTIME)" . ":XOPEN-REALTIME")
           ("defined(_SC_XOPEN_REALTIME_THREADS)" . ":XOPEN-REALTIME-THREADS")
           ("defined(_SC_XOPEN_SHM)" . ":XOPEN-SHM")
           ("defined(_SC_XOPEN_STREAMS)" . ":XOPEN-STREAMS")
           ("defined(_SC_XOPEN_UNIX)" . ":XOPEN-UNIX")
           ("defined(_SC_XOPEN_VERSION)" . ":XOPEN-VERSION")
           ("defined(_SC_NPROCESSORS_CONF)" . ":NPROCESSORS-CONF")
           ("defined(_SC_NPROCESSORS_ONLN)" . ":NPROCESSORS-ONLN") "))")

WARNING: truncated a very long tag (from 2,116 to 2,000) for
          ("(OR INTEGER (MEMBER" ("defined(_CS_PATH)" . ":PATH")
           ("defined(_CS_POSIX_V6_ILP32_OFF32_CFLAGS)" .
            ":POSIX-V6-ILP32-OFF32-CFLAGS")
           ("defined(_CS_POSIX_V6_ILP32_OFF32_LDFLAGS)" .
            ":POSIX-V6-ILP32-OFF32-LDFLAGS")
           ("defined(_CS_POSIX_V6_ILP32_OFF32_LIBS)" .
            ":POSIX-V6-ILP32-OFF32-LIBS")
           ("defined(_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS)" .
            ":POSIX-V6-ILP32-OFFBIG-CFLAGS")
           ("defined(_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS)" .
            ":POSIX-V6-ILP32-OFFBIG-LDFLAGS")
           ("defined(_CS_POSIX_V6_ILP32_OFFBIG_LIBS)" .
            ":POSIX-V6-ILP32-OFFBIG-LIBS")
           ("defined(_CS_POSIX_V6_LP64_OFF64_CFLAGS)" .
            ":POSIX-V6-LP64-OFF64-CFLAGS")
           ("defined(_CS_POSIX_V6_LP64_OFF64_LDFLAGS)" .
            ":POSIX-V6-LP64-OFF64-LDFLAGS")
           ("defined(_CS_POSIX_V6_LP64_OFF64_LIBS)" .
            ":POSIX-V6-LP64-OFF64-LIBS")
           ("defined(_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS)" .
            ":POSIX-V6-LPBIG-OFFBIG-CFLAGS")
           ("defined(_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS)" .
            ":POSIX-V6-LPBIG-OFFBIG-LDFLAGS")
           ("defined(_CS_POSIX_V6_LPBIG_OFFBIG_LIBS)" .
            ":POSIX-V6-LPBIG-OFFBIG-LIBS")
           ("defined(_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS)" .
            ":POSIX-V6-WIDTH-RESTRICTED-ENVS")
           ("defined(_CS_XBS5_ILP32_OFF32_CFLAGS)" .
            ":XBS5-ILP32-OFF32-CFLAGS")
           ("defined(_CS_XBS5_ILP32_OFF32_LDFLAGS)" .
            ":XBS5-ILP32-OFF32-LDFLAGS")
           ("defined(_CS_XBS5_ILP32_OFF32_LIBS)" . ":XBS5-ILP32-OFF32-LIBS")
           ("defined(_CS_XBS5_ILP32_OFF32_LINTFLAGS)" .
            ":XBS5-ILP32-OFF32-LINTFLAGS")
           ("defined(_CS_XBS5_ILP32_OFFBIG_CFLAGS)" .
            ":XBS5-ILP32-OFFBIG-CFLAGS")
           ("defined(_CS_XBS5_ILP32_OFFBIG_LDFLAGS)" .
            ":XBS5-ILP32-OFFBIG-LDFLAGS")
           ("defined(_CS_XBS5_ILP32_OFFBIG_LIBS)" . ":XBS5-ILP32-OFFBIG-LIBS")
           ("defined(_CS_XBS5_ILP32_OFFBIG_LINTFLAGS)" .
            ":XBS5-ILP32-OFFBIG-LINTFLAGS")
           ("defined(_CS_XBS5_LP64_OFF64_CFLAGS)" . ":XBS5-LP64-OFF64-CFLAGS")
           ("defined(_CS_XBS5_LP64_OFF64_LDFLAGS)" .
            ":XBS5-LP64-OFF64-LDFLAGS")
           ("defined(_CS_XBS5_LP64_OFF64_LIBS)" . ":XBS5-LP64-OFF64-LIBS")
           ("defined(_CS_XBS5_LP64_OFF64_LINTFLAGS)" .
            ":XBS5-LP64-OFF64-LINTFLAGS")
           ("defined(_CS_XBS5_LPBIG_OFFBIG_CFLAGS)" .
            ":XBS5-LPBIG-OFFBIG-CFLAGS")
           ("defined(_CS_XBS5_LPBIG_OFFBIG_LDFLAGS)" .
            ":XBS5-LPBIG-OFFBIG-LDFLAGS")
           ("defined(_CS_XBS5_LPBIG_OFFBIG_LIBS)" . ":XBS5-LPBIG-OFFBIG-LIBS")
           ("defined(_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS)" .
            ":XBS5-LPBIG-OFFBIG-LINTFLAGS")
           "))")

;; MODPREP: 493 objects, 90 DEFUNs
;; packages: ("OS" "POSIX")
MODPREP: wrote calls.m.c (417,674 bytes)
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -I.. -c calls.m.c -o calls.o
calls.c: In function ‘C_subr_posix_sysconf’:
calls.c:1028:16: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     for (; pos < sysconf_arg_map.size; pos++) {
                ^
/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/lisp.run -M /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/lispinit.mem -B /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src -N /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/locale -E UTF-8 -Epathname 1:1 -norc -q -c posix.lisp
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/syscalls/posix.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/syscalls/posix.fas
The following functions were used but not defined:
 POSIX::%SYSLOG POSIX::CONVERT-MODE POSIX::FILE-STAT POSIX::SYSCONF
 POSIX:MKSTEMP POSIX::MKNOD
0 errors, 0 warnings
make[2]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/syscalls'
./lndir ../modules/regexp regexp
m=`cd ../modules/regexp; pwd`; \
if test -f regexp/configure -a regexp/configure -nt regexp/config.status ; then cd regexp ; \
  ( cache=`echo regexp/ | sed -e 's,[^/][^/]*//*,../,g'`config.cache; \
    if test -f ${cache} ; then . ${cache}; \
      if test "${ac_cv_env_CC_set}" = set; then CC="${ac_cv_env_CC_value}"; export CC; fi; \
      if test "${ac_cv_env_CFLAGS_set}" = set; then CFLAGS="${ac_cv_env_CFLAGS_value}"; export CFLAGS; fi; \
      /bin/bash ./configure --cache-file=${cache} --srcdir=$m --without-readline --with-libsigsegv-prefix=/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp;\
    else /bin/bash ./configure --srcdir=$m --without-readline --with-libsigsegv-prefix=/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp; \
    fi ) ;\
fi
configure: WARNING: Unrecognized options: --without-readline, --with-libsigsegv-prefix
configure: loading cache ../config.cache
configure: [1m** Regexp (Common)[m
checking for gcc... (cached) gcc
checking for C compiler default output file name... a.out
checking whether the C compiler works... yes
checking whether we are cross compiling... no
checking for suffix of executables... 
checking for suffix of object files... (cached) o
checking whether we are using the GNU C compiler... (cached) yes
checking whether gcc accepts -g... (cached) yes
checking for gcc option to accept ISO C89... (cached) none needed
checking how to run the C preprocessor... (cached) gcc -E
checking for grep that handles long lines and -e... (cached) /bin/grep
checking for egrep... (cached) /bin/grep -E
checking for ANSI C header files... (cached) yes
checking for sys/types.h... (cached) yes
checking for sys/stat.h... (cached) yes
checking for stdlib.h... (cached) yes
checking for string.h... (cached) yes
checking for memory.h... (cached) yes
checking for strings.h... (cached) yes
checking for inttypes.h... (cached) yes
checking for stdint.h... (cached) yes
checking for unistd.h... (cached) yes
checking for minix/config.h... (cached) no
checking whether it is safe to define __EXTENSIONS__... (cached) yes
checking whether time.h and sys/time.h may both be included... (cached) yes
checking for string.h... (cached) yes
checking for sys/types.h... (cached) yes
checking whether make sets $(MAKE)... (cached) yes
checking for a BSD-compatible install... (cached) /usr/bin/install -c
checking for a thread-safe mkdir -p... (cached) /bin/mkdir -p
checking whether NLS is requested... yes
checking for msgfmt... (cached) /usr/bin/msgfmt
checking for gmsgfmt... (cached) /usr/bin/msgfmt
checking for xgettext... (cached) /usr/bin/xgettext
checking for msgmerge... (cached) /usr/bin/msgmerge
checking build system type... (cached) x86_64-unknown-linux-gnu
checking host system type... (cached) x86_64-unknown-linux-gnu
checking for ld used by GCC... (cached) /usr/bin/ld -m elf_x86_64
checking if the linker (/usr/bin/ld -m elf_x86_64) is GNU ld... (cached) yes
checking for shared library run path origin... (cached) done
checking for CFPreferencesCopyAppValue... (cached) no
checking for CFLocaleCopyCurrent... (cached) no
checking for GNU gettext in libc... yes
checking whether to use NLS... yes
checking where the gettext function comes from... libc
checking for C/C++ restrict keyword... restrict
configure: [1m** Regexp (Output)[m
configure: updating cache ../config.cache
configure: creating ./config.status
config.status: creating Makefile
config.status: creating link.sh
config.status: creating config.h
config.status: executing po-directories commands
configure: WARNING: Unrecognized options: --without-readline, --with-libsigsegv-prefix
configure: [1m** Regexp (Done)[m
CLISP="`pwd`/lisp.run -M `pwd`/lispinit.mem -B `pwd` -N `pwd`/locale -E UTF-8 -Epathname 1:1 -norc" ; cd regexp ; dots=`echo regexp/ | sed -e 's,[^/][^/]*//*,../,g' -e 's,/$,,g'` ; make clisp-module CC="gcc" CPPFLAGS="-I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib" CFLAGS="-g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I." INCLUDES="$dots" CLFLAGS="-x none" LIBS="-lncurses -ldl   -L/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/lib -lsigsegv -lc" RANLIB="ranlib" CLISP="$CLISP -q"
make[2]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/regexp'
/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/lisp.run -M /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/lispinit.mem -B /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src -N /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/locale -E UTF-8 -Epathname 1:1 -norc -q -c regexp.lisp
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/regexp/regexp.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/regexp/regexp.fas
The following functions were used but not defined:
 REGEXP:REGEXP-COMPILE REGEXP:REGEXP-EXEC
0 errors, 0 warnings
/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/lisp.run -M /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/lispinit.mem -B /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src -N /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/locale -E UTF-8 -Epathname 1:1 -norc -q ../modprep.fas regexi.c
;; MODPREP: "regexi.c" --> #P"regexi.m.c"
;; MODPREP: reading "regexi.c": 4,363 bytes, 127 lines
;; MODPREP: 10 objects, 3 DEFUNs
;; packages: ("REGEXP")
MODPREP: wrote regexi.m.c (8,591 bytes)
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -I.. -c regexi.m.c -o regexi.o
regexi.c: In function ‘C_subr_regexp_regexp_exec’:
regexi.c:118:27: warning: comparison between signed and unsigned integer expressions [-Wsign-compare]
     for (count = 0; count <= re->re_nsub; count++)
                           ^
make[2]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/regexp'
./txt2c -I'../' < _clisp.c > txt.c
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -DCOMPILE_STANDALONE -x none -O0 txt.c -o txt
./txt > clisp.c
rm -f txt.c
rm -f txt
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -x none -DENABLE_RELOCATABLE clisp.c -lncurses -ldl   -L/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/lib -lsigsegv -lc  -o clisp
test -d boot || (mkdir boot && cd boot && for f in lisp.a gllib/uniwidth/width.o gllib/uniname/uniname.o gllib/localcharset.o   modules.h modules.o lisp.run lispinit.mem; do ln -s ../$f .; done && (grep -v '^FILES=' ../makevars; fl=''; for f in lisp.a gllib/uniwidth/width.o gllib/uniname/uniname.o gllib/localcharset.o  ; do fl=$fl' '`basename $f`; done; echo 'FILES='"'"$fl"'") > makevars) || (rm -rf boot ; exit 1)
rm -rf base
CLISP_LINKKIT=. ./clisp-link add-module-sets boot base i18n syscalls regexp || (rm -rf base ; exit 1)
make[2]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/i18n'
make[2]: Nothing to be done for 'clisp-module'.
make[2]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/i18n'
make[2]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/syscalls'
make[2]: Nothing to be done for 'clisp-module'.
make[2]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/syscalls'
make[2]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/regexp'
make[2]: Nothing to be done for 'clisp-module'.
make[2]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/regexp'
gcc -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/include -Igllib -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -I/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src -c modules.c
gcc -g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. -x none modules.o regexi.o regex.o calls.o -lm -lcrypt gettext.o lisp.a -lncurses -ldl -L/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/lib -lsigsegv -lc -o lisp.run
boot/lisp.run -B . -M boot/lispinit.mem -norc -q -i i18n/preload.lisp -i syscalls/preload.lisp -i regexp/preload.lisp -x (saveinitmem "base/lispinit.mem")
;; Loading file i18n/preload.lisp ...
;; Loaded file i18n/preload.lisp
;; Loading file syscalls/preload.lisp ...
;; Loaded file syscalls/preload.lisp
;; Loading file regexp/preload.lisp ...
;; Loaded file regexp/preload.lisp
;; Wrote the memory image into base/lispinit.mem (3,047,440 bytes)
2893040 ;
719180
base/lisp.run -B . -M base/lispinit.mem -norc -q -i i18n/i18n -i syscalls/posix -i regexp/regexp -x (saveinitmem "base/lispinit.mem")
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/i18n/i18n.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/i18n/i18n.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/syscalls/posix.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/syscalls/posix.fas
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/regexp/regexp.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/regexp/regexp.fas
;; Wrote the memory image into base/lispinit.mem (3,361,672 bytes)
3198808 ;
795622
rm -rf full
CLISP_LINKKIT=. ./clisp-link add-module-sets base full  || (rm -rf full ; exit 1)
lisp.run lispinit.mem modules.h modules.o makevars lisp.a width.o uniname.o localcharset.o gettext.o calls.o regexi.o regex.o regexp.dvi
make[1]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
make[1]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
mkdir -p gllib
if test ! -f gllib/Makefile; then sh config.status --file=gllib/Makefile depfiles; fi
cd gllib && make CFLAGS="-g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. "
make[2]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
make[3]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
make[3]: Nothing to be done for 'am--refresh'.
make[3]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
make  all-am
make[3]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
make[4]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
make[4]: Nothing to be done for 'am--refresh'.
make[4]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
make[3]: Nothing to be done for 'all-am'.
make[3]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
make[2]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
cd gllib && make CFLAGS="-g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. "
make[2]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
make[3]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
make[3]: Nothing to be done for 'am--refresh'.
make[3]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
make  all-am
make[3]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
make[4]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
make[4]: Nothing to be done for 'am--refresh'.
make[4]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
make[3]: Nothing to be done for 'all-am'.
make[3]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
make[2]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
cd gllib && make CFLAGS="-g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. "
make[2]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
make[3]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
make[3]: Nothing to be done for 'am--refresh'.
make[3]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
make  all-am
make[3]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
make[4]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
make[4]: Nothing to be done for 'am--refresh'.
make[4]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
make[3]: Nothing to be done for 'all-am'.
make[3]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
make[2]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
cd gllib && make CFLAGS="-g -O2 -W -Wswitch -Wcomment -Wpointer-arith -Wimplicit -Wreturn-type -Wmissing-declarations -O -DUNICODE -DNO_READLINE -I. "
make[2]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
make[3]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
make[3]: Nothing to be done for 'am--refresh'.
make[3]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
make  all-am
make[3]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
make[4]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
make[4]: Nothing to be done for 'am--refresh'.
make[4]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src'
make[3]: Nothing to be done for 'all-am'.
make[3]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
make[2]: Leaving directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gllib'
mkdir stage
cp -p lispinit.mem stage/testinit.mem
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c init.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/init.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/init.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c defseq.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/defseq.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/defseq.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c backquote.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/backquote.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/backquote.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c defmacro.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/defmacro.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/defmacro.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c macros1.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/macros1.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/macros1.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c macros2.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/macros2.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/macros2.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c defs1.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/defs1.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/defs1.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c timezone.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/timezone.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/timezone.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c lambdalist.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/lambdalist.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/lambdalist.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c places.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/places.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/places.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c floatprint.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/floatprint.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/floatprint.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c defpackage.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/defpackage.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/defpackage.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c type.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/type.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/type.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c subtypep.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/subtypep.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/subtypep.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-package.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-package.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-package.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-macros.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-macros.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-macros.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-class0.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class0.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-class0.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-metaobject1.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-metaobject1.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-metaobject1.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-slotdef1.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slotdef1.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-slotdef1.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-stablehash1.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-stablehash1.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-stablehash1.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-specializer1.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-specializer1.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-specializer1.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-class1.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class1.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-class1.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-class2.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class2.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-class2.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-class3.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class3.lisp ...
WARNING: Redefining metaobject class #<STANDARD-CLASS METAOBJECT> has no
         effect.
WARNING: Redefining metaobject class #<STANDARD-CLASS SPECIALIZER> has no
         effect.
WARNING: Redefining metaobject class #<STANDARD-CLASS SUPER-CLASS> has no
         effect.
WARNING: Redefining metaobject class #<STANDARD-CLASS POTENTIAL-CLASS> has no
         effect.
WARNING: Redefining metaobject class #<STANDARD-CLASS BUILT-IN-CLASS> has no
         effect.
WARNING: Redefining metaobject class #<STANDARD-CLASS SLOTTED-CLASS> has no
         effect.
WARNING: Redefining metaobject class #<STANDARD-CLASS SEMI-STANDARD-CLASS> has
         no effect.
WARNING: Redefining metaobject class #<STANDARD-CLASS STANDARD-CLASS> has no
         effect.
WARNING: Redefining metaobject class #<STANDARD-CLASS STRUCTURE-CLASS> has no
         effect.
WARNING: Redefining metaobject class #<STANDARD-CLASS SLOT-DEFINITION> has no
         effect.
WARNING: Redefining metaobject class #<STANDARD-CLASS DIRECT-SLOT-DEFINITION>
         has no effect.
WARNING: Redefining metaobject class
          #<STANDARD-CLASS EFFECTIVE-SLOT-DEFINITION>
         has no effect.
WARNING: Redefining metaobject class
          #<STANDARD-CLASS STANDARD-SLOT-DEFINITION>
         has no effect.
WARNING: Redefining metaobject class
          #<STANDARD-CLASS STANDARD-DIRECT-SLOT-DEFINITION>
         has no effect.
WARNING: Redefining metaobject class
          #<STANDARD-CLASS STANDARD-EFFECTIVE-SLOT-DEFINITION>
         has no effect.
WARNING: Redefining metaobject class
          #<STANDARD-CLASS STRUCTURE-DIRECT-SLOT-DEFINITION>
         has no effect.
WARNING: Redefining metaobject class
          #<STANDARD-CLASS STRUCTURE-EFFECTIVE-SLOT-DEFINITION>
         has no effect.
WARNING: Redefining metaobject class #<STANDARD-CLASS EQL-SPECIALIZER> has no
         effect.
WARNING: Redefining metaobject class
          #<STANDARD-CLASS MISDESIGNED-FORWARD-REFERENCED-CLASS>
         has no effect.
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-class3.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c defstruct.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/defstruct.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/defstruct.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c format.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/format.lisp ...
WARNING in FORMATTER-MAIN-1 in lines 2032..2530 :
variable ADD-FILL is not used.
Misspelled or missing IGNORE declaration?
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/format.fas
0 errors, 1 warning
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c international.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/international.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/international.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c savemem.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/savemem.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/savemem.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c functions.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/functions.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/functions.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c trace.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/trace.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/trace.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c cmacros.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/cmacros.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/cmacros.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c compiler.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/compiler.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/compiler.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c defs2.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/defs2.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/defs2.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c loop.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/loop.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/loop.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-stablehash2.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-stablehash2.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-stablehash2.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-specializer2.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-specializer2.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-specializer2.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-specializer3.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-specializer3.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-specializer3.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-class4.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class4.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-class4.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-class5.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class5.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-class5.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-class6.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-class6.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-class6.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-slotdef2.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slotdef2.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-slotdef2.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-slotdef3.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slotdef3.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-slotdef3.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-slots1.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slots1.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-slots1.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-slots2.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-slots2.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-slots2.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-method1.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method1.lisp ...
WARNING: Redefining metaobject class #<STANDARD-CLASS METHOD> has no effect.
WARNING: Redefining metaobject class #<STANDARD-CLASS STANDARD-METHOD> has no
         effect.
WARNING: Redefining metaobject class
          #<STANDARD-CLASS STANDARD-ACCESSOR-METHOD>
         has no effect.
WARNING: Redefining metaobject class #<STANDARD-CLASS STANDARD-READER-METHOD>
         has no effect.
WARNING: Redefining metaobject class #<STANDARD-CLASS STANDARD-WRITER-METHOD>
         has no effect.
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-method1.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-method2.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method2.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-method2.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-method3.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method3.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-method3.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-method4.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-method4.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-method4.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-methcomb1.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb1.lisp ...
WARNING: Redefining metaobject class #<STANDARD-CLASS METHOD-COMBINATION> has
         no effect.
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-methcomb1.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-methcomb2.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb2.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-methcomb2.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-methcomb3.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb3.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-methcomb3.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-methcomb4.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-methcomb4.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-methcomb4.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-genfun1.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun1.lisp ...
WARNING: Redefining metaobject class
          #<STANDARD-CLASS FUNCALLABLE-STANDARD-CLASS>
         has no effect.
WARNING: Redefining metaobject class
          #<FUNCALLABLE-STANDARD-CLASS GENERIC-FUNCTION>
         has no effect.
WARNING: Redefining metaobject class
          #<FUNCALLABLE-STANDARD-CLASS STANDARD-GENERIC-FUNCTION>
         has no effect.
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-genfun1.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-genfun2a.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun2a.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-genfun2a.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-genfun2b.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun2b.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-genfun2b.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-genfun3.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun3.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-genfun3.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-genfun4.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun4.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-genfun4.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-genfun5.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-genfun5.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-genfun5.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-dependent.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-dependent.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-dependent.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-print.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-print.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-print.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clos-custom.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-custom.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clos-custom.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c documentation.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/documentation.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/documentation.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c fill-out.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/fill-out.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/fill-out.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c disassem.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/disassem.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/disassem.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c condition.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/condition.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/condition.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c loadform.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/loadform.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/loadform.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c gstream.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gstream.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/gstream.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c xcharin.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/xcharin.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/xcharin.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c keyboard.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/keyboard.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/keyboard.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c screen.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/screen.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/screen.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c runprog.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/runprog.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/runprog.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c query.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/query.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/query.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c reploop.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/reploop.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/reploop.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c dribble.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/dribble.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/dribble.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c complete.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/complete.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/complete.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c pprint.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/pprint.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/pprint.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c describe.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/describe.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/describe.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c room.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/room.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/room.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c edit.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/edit.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/edit.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c macros3.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/macros3.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/macros3.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c clhs.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clhs.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/clhs.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c inspect.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/inspect.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/inspect.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c gray.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/gray.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/gray.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c case-sensitive.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/case-sensitive.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/case-sensitive.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c exporting.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/exporting.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/exporting.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c german.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/german.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/german.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c french.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/french.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/french.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c spanish.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/spanish.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/spanish.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c russian.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/russian.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/russian.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c danish.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/danish.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/danish.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c dutch.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/dutch.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/dutch.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c deprecated.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/deprecated.lisp ...
WARNING: DEFINE-COMPILER-MACRO: redefining compiler macro TYPE-EXPAND-1 in
         /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/deprecated.lisp,
         was defined in top-level
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/deprecated.fas
0 errors, 0 warnings
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -m 1MW -M stage/testinit.mem -q -d -c config.lisp -o stage/
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/config.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/stage/config.fas
0 errors, 0 warnings
cmp -s init.fas stage/init.fas  || (echo "Test failed." ; exit 1)
cmp -s defseq.fas stage/defseq.fas  || (echo "Test failed." ; exit 1)
cmp -s backquote.fas stage/backquote.fas  || (echo "Test failed." ; exit 1)
cmp -s defmacro.fas stage/defmacro.fas  || (echo "Test failed." ; exit 1)
cmp -s macros1.fas stage/macros1.fas  || (echo "Test failed." ; exit 1)
cmp -s macros2.fas stage/macros2.fas  || (echo "Test failed." ; exit 1)
cmp -s defs1.fas stage/defs1.fas  || (echo "Test failed." ; exit 1)
cmp -s timezone.fas stage/timezone.fas  || (echo "Test failed." ; exit 1)
cmp -s lambdalist.fas stage/lambdalist.fas  || (echo "Test failed." ; exit 1)
cmp -s places.fas stage/places.fas  || (echo "Test failed." ; exit 1)
cmp -s floatprint.fas stage/floatprint.fas  || (echo "Test failed." ; exit 1)
cmp -s defpackage.fas stage/defpackage.fas  || (echo "Test failed." ; exit 1)
cmp -s type.fas stage/type.fas  || (echo "Test failed." ; exit 1)
cmp -s subtypep.fas stage/subtypep.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-package.fas stage/clos-package.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-macros.fas stage/clos-macros.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-class0.fas stage/clos-class0.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-metaobject1.fas stage/clos-metaobject1.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-slotdef1.fas stage/clos-slotdef1.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-stablehash1.fas stage/clos-stablehash1.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-specializer1.fas stage/clos-specializer1.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-class1.fas stage/clos-class1.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-class2.fas stage/clos-class2.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-class3.fas stage/clos-class3.fas  || (echo "Test failed." ; exit 1)
cmp -s defstruct.fas stage/defstruct.fas  || (echo "Test failed." ; exit 1)
cmp -s format.fas stage/format.fas  || (echo "Test failed." ; exit 1)
cmp -s international.fas stage/international.fas  || (echo "Test failed." ; exit 1)
cmp -s savemem.fas stage/savemem.fas  || (echo "Test failed." ; exit 1)
cmp -s functions.fas stage/functions.fas  || (echo "Test failed." ; exit 1)
cmp -s trace.fas stage/trace.fas  || (echo "Test failed." ; exit 1)
cmp -s cmacros.fas stage/cmacros.fas  || (echo "Test failed." ; exit 1)
cmp -s compiler.fas stage/compiler.fas  || (echo "Test failed." ; exit 1)
cmp -s defs2.fas stage/defs2.fas  || (echo "Test failed." ; exit 1)
cmp -s loop.fas stage/loop.fas  || (echo "Test failed." ; exit 1)
cmp -s clos.fas stage/clos.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-stablehash2.fas stage/clos-stablehash2.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-specializer2.fas stage/clos-specializer2.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-specializer3.fas stage/clos-specializer3.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-class4.fas stage/clos-class4.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-class5.fas stage/clos-class5.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-class6.fas stage/clos-class6.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-slotdef2.fas stage/clos-slotdef2.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-slotdef3.fas stage/clos-slotdef3.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-slots1.fas stage/clos-slots1.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-slots2.fas stage/clos-slots2.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-method1.fas stage/clos-method1.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-method2.fas stage/clos-method2.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-method3.fas stage/clos-method3.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-method4.fas stage/clos-method4.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-methcomb1.fas stage/clos-methcomb1.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-methcomb2.fas stage/clos-methcomb2.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-methcomb3.fas stage/clos-methcomb3.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-methcomb4.fas stage/clos-methcomb4.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-genfun1.fas stage/clos-genfun1.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-genfun2a.fas stage/clos-genfun2a.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-genfun2b.fas stage/clos-genfun2b.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-genfun3.fas stage/clos-genfun3.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-genfun4.fas stage/clos-genfun4.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-genfun5.fas stage/clos-genfun5.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-dependent.fas stage/clos-dependent.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-print.fas stage/clos-print.fas  || (echo "Test failed." ; exit 1)
cmp -s clos-custom.fas stage/clos-custom.fas  || (echo "Test failed." ; exit 1)
cmp -s documentation.fas stage/documentation.fas  || (echo "Test failed." ; exit 1)
cmp -s fill-out.fas stage/fill-out.fas  || (echo "Test failed." ; exit 1)
cmp -s disassem.fas stage/disassem.fas  || (echo "Test failed." ; exit 1)
cmp -s condition.fas stage/condition.fas  || (echo "Test failed." ; exit 1)
cmp -s loadform.fas stage/loadform.fas  || (echo "Test failed." ; exit 1)
cmp -s gstream.fas stage/gstream.fas  || (echo "Test failed." ; exit 1)
cmp -s xcharin.fas stage/xcharin.fas  || (echo "Test failed." ; exit 1)
cmp -s keyboard.fas stage/keyboard.fas  || (echo "Test failed." ; exit 1)
cmp -s screen.fas stage/screen.fas  || (echo "Test failed." ; exit 1)
cmp -s runprog.fas stage/runprog.fas  || (echo "Test failed." ; exit 1)
cmp -s query.fas stage/query.fas  || (echo "Test failed." ; exit 1)
cmp -s reploop.fas stage/reploop.fas  || (echo "Test failed." ; exit 1)
cmp -s dribble.fas stage/dribble.fas  || (echo "Test failed." ; exit 1)
cmp -s complete.fas stage/complete.fas  || (echo "Test failed." ; exit 1)
cmp -s pprint.fas stage/pprint.fas  || (echo "Test failed." ; exit 1)
cmp -s describe.fas stage/describe.fas  || (echo "Test failed." ; exit 1)
cmp -s room.fas stage/room.fas  || (echo "Test failed." ; exit 1)
cmp -s edit.fas stage/edit.fas  || (echo "Test failed." ; exit 1)
cmp -s macros3.fas stage/macros3.fas  || (echo "Test failed." ; exit 1)
cmp -s clhs.fas stage/clhs.fas  || (echo "Test failed." ; exit 1)
cmp -s inspect.fas stage/inspect.fas  || (echo "Test failed." ; exit 1)
cmp -s gray.fas stage/gray.fas  || (echo "Test failed." ; exit 1)
cmp -s case-sensitive.fas stage/case-sensitive.fas  || (echo "Test failed." ; exit 1)
cmp -s exporting.fas stage/exporting.fas  || (echo "Test failed." ; exit 1)
cmp -s german.fas stage/german.fas  || (echo "Test failed." ; exit 1)
cmp -s french.fas stage/french.fas  || (echo "Test failed." ; exit 1)
cmp -s spanish.fas stage/spanish.fas  || (echo "Test failed." ; exit 1)
cmp -s russian.fas stage/russian.fas  || (echo "Test failed." ; exit 1)
cmp -s danish.fas stage/danish.fas  || (echo "Test failed." ; exit 1)
cmp -s dutch.fas stage/dutch.fas  || (echo "Test failed." ; exit 1)
cmp -s deprecated.fas stage/deprecated.fas  || (echo "Test failed." ; exit 1)
cmp -s config.fas stage/config.fas  || (echo "Test failed." ; exit 1)
echo "Test passed."
Test passed.
rm -f fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (dolist (s (quote (*terminal-io* *standard-output* *error-output* *query-io* *debug-io* *trace-output*))) (format t "~S = ~S~%" s (symbol-value s))) (values))' 2>&1 | cat > fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *terminal-io* "~&Line1 to *terminal-io*") (format *terminal-io* "~&Line2 to *terminal-io*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *terminal-io* "~&Line1 to *terminal-io*") (format *standard-output* "~&Line2 to *standard-output*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *terminal-io* "~&Line1 to *terminal-io*") (format *error-output* "~&Line2 to *error-output*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *terminal-io* "~&Line1 to *terminal-io*") (format *query-io* "~&Line2 to *query-io*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *terminal-io* "~&Line1 to *terminal-io*") (format *debug-io* "~&Line2 to *debug-io*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *terminal-io* "~&Line1 to *terminal-io*") (format *trace-output* "~&Line2 to *trace-output*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *standard-output* "~&Line1 to *standard-output*") (format *terminal-io* "~&Line2 to *terminal-io*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *standard-output* "~&Line1 to *standard-output*") (format *standard-output* "~&Line2 to *standard-output*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *standard-output* "~&Line1 to *standard-output*") (format *error-output* "~&Line2 to *error-output*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *standard-output* "~&Line1 to *standard-output*") (format *query-io* "~&Line2 to *query-io*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *standard-output* "~&Line1 to *standard-output*") (format *debug-io* "~&Line2 to *debug-io*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *standard-output* "~&Line1 to *standard-output*") (format *trace-output* "~&Line2 to *trace-output*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *error-output* "~&Line1 to *error-output*") (format *terminal-io* "~&Line2 to *terminal-io*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *error-output* "~&Line1 to *error-output*") (format *standard-output* "~&Line2 to *standard-output*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *error-output* "~&Line1 to *error-output*") (format *error-output* "~&Line2 to *error-output*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *error-output* "~&Line1 to *error-output*") (format *query-io* "~&Line2 to *query-io*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *error-output* "~&Line1 to *error-output*") (format *debug-io* "~&Line2 to *debug-io*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *error-output* "~&Line1 to *error-output*") (format *trace-output* "~&Line2 to *trace-output*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *query-io* "~&Line1 to *query-io*") (format *terminal-io* "~&Line2 to *terminal-io*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *query-io* "~&Line1 to *query-io*") (format *standard-output* "~&Line2 to *standard-output*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *query-io* "~&Line1 to *query-io*") (format *error-output* "~&Line2 to *error-output*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *query-io* "~&Line1 to *query-io*") (format *query-io* "~&Line2 to *query-io*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *query-io* "~&Line1 to *query-io*") (format *debug-io* "~&Line2 to *debug-io*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *query-io* "~&Line1 to *query-io*") (format *trace-output* "~&Line2 to *trace-output*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *debug-io* "~&Line1 to *debug-io*") (format *terminal-io* "~&Line2 to *terminal-io*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *debug-io* "~&Line1 to *debug-io*") (format *standard-output* "~&Line2 to *standard-output*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *debug-io* "~&Line1 to *debug-io*") (format *error-output* "~&Line2 to *error-output*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *debug-io* "~&Line1 to *debug-io*") (format *query-io* "~&Line2 to *query-io*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *debug-io* "~&Line1 to *debug-io*") (format *debug-io* "~&Line2 to *debug-io*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *debug-io* "~&Line1 to *debug-io*") (format *trace-output* "~&Line2 to *trace-output*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *trace-output* "~&Line1 to *trace-output*") (format *terminal-io* "~&Line2 to *terminal-io*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *trace-output* "~&Line1 to *trace-output*") (format *standard-output* "~&Line2 to *standard-output*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *trace-output* "~&Line1 to *trace-output*") (format *error-output* "~&Line2 to *error-output*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *trace-output* "~&Line1 to *trace-output*") (format *query-io* "~&Line2 to *query-io*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *trace-output* "~&Line1 to *trace-output*") (format *debug-io* "~&Line2 to *debug-io*") (values))' 2>&1 | cat >> fresh-line.out
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -x '(progn (format *trace-output* "~&Line1 to *trace-output*") (format *trace-output* "~&Line2 to *trace-output*") (values))' 2>&1 | cat >> fresh-line.out
if grep 'Line1.*Line2' fresh-line.out > /dev/null; then exit 1; fi
rm -f fresh-line.out
test `echo '(print (+ 11 99))' | ./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -q -M lispinit.mem -` = 110 || exit 1
./lisp.run -B . -N locale -E UTF-8 -Epathname 1:1 -norc -M lispinit.mem -x "(saveinitmem \"foo\" :executable t :norc t)"
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.45 (2008-05-15) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2008

Type :h and hit Enter for context help.

;; Wrote the memory image into foo (9,882,864 bytes)
2891008 ;
718772
Bye.
./foo -x "(setq zz 10) (saveinitmem \"foo\")"
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.45 (2008-05-15) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2008

Type :h and hit Enter for context help.

10
;; Wrote the memory image into foo.mem (3,045,384 bytes)
2890944 ;
718706
Bye.
./foo -norc -M foo.mem -x zz
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.45 (2008-05-15) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2008

Type :h and hit Enter for context help.

10
Bye.
ls -l lisp.run lispinit.mem foo foo.mem
-rwxr-xr-x 1 gunter gunter 9882864 Jan 30 23:35 foo
-rw-r--r-- 1 gunter gunter 3045384 Jan 30 23:35 foo.mem
-rw-r--r-- 1 gunter gunter 3043184 Jan 30 23:34 lispinit.mem
-rwxr-xr-x 1 gunter gunter 6837376 Jan 30 23:33 lisp.run
rm -f foo foo.mem
mkdir tests
cd tests && ln -s ../../tests/Makefile .
cd tests && ln -s ../../tests/*.lisp .
cd tests && ln -s ../../tests/*.tst .
cd tests && make SHELL='/bin/bash' LEXE=.run
make[2]: Entering directory '/home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests'
rm -f *.erg
../lisp.run -E utf-8 -norc -B ../ -N ../locale -M ../lispinit.mem -m 30MW -c tests
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.45 (2008-05-15) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2008

Type :h and hit Enter for context help.

;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/tests.lisp ...
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/tests.fas
The following functions were used but are deprecated:
 DELETE-DIR - Use DELETE-DIRECTORY instead.
0 errors, 0 warnings
Bye.
../lisp.run -E utf-8 -norc -B ../ -N ../locale -M ../lispinit.mem -m 30MW -i tests -x "(time (run-all-tests))"
  i i i i i i i       ooooo    o        ooooooo   ooooo   ooooo
  I I I I I I I      8     8   8           8     8     o  8    8
  I  \ `+' /  I      8         8           8     8        8    8
   \  `-+-'  /       8         8           8      ooooo   8oooo
    `-__|__-'        8         8           8           8  8
        |            8     o   8           8     o     8  8
  ------+------       ooooo    8oooooo  ooo8ooo   ooooo   8

Welcome to GNU CLISP 2.45 (2008-05-15) <http://clisp.cons.org/>

Copyright (c) Bruno Haible, Michael Stoll 1992, 1993
Copyright (c) Bruno Haible, Marcus Daniels 1994-1997
Copyright (c) Bruno Haible, Pierpaolo Bernardi, Sam Steingold 1998
Copyright (c) Bruno Haible, Sam Steingold 1999-2000
Copyright (c) Sam Steingold, Bruno Haible 2001-2008

Type :h and hit Enter for context help.

;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/tests.fas ...
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/tests.fas
RUN-TEST: started #<INPUT BUFFERED FILE-STREAM CHARACTER #P"alltest.tst" @1>
((LAMBDA (A B) (+ A (* B 3))) 4 5)
EQL-OK: 19
((LAMBDA (A &OPTIONAL (B 2)) (+ A (* B 3))) 4 5)
EQL-OK: 19
((LAMBDA (&OPTIONAL (A 2 B) (C 3 D) &REST X) (LIST A B C D X)))
EQUAL-OK: (2 NIL 3 NIL NIL)
((LAMBDA (A B &KEY C D) (LIST A B C D)) 1 2)
EQUAL-OK: (1 2 NIL NIL)
((LAMBDA (A &OPTIONAL (B 3) &REST X &KEY C (D A)) (LIST A B C D X)) 1)
EQUAL-OK: (1 3 NIL 1 NIL)
((LAMBDA (X &AUX (A 3) (B 4)) (+ X (* A B))) 2)
EQL-OK: 14
((LAMBDA (X Y &OPTIONAL A B &REST Z &KEY C (D Y) &AUX (U 3) (V 4)) (+ X Y A (* B (CAR Z)) C (* D U) V)) 3 4 5 2 7 :C 6 :D 8)
[SIMPLE-PROGRAM-ERROR]: :LAMBDA: keyword arguments in (7 :C 6 :D 8) should occur pairwise

EQL-OK: ERROR
((LAMBDA (X Y) ((LAMBDA (A B) (LIST A B)) 'U 'V)) 5 6)
EQUAL-OK: (U V)
((LAMBDA (X &ALLOW-OTHER-KEYS) (LIST X Y)) 2 :Y 3)
[SIMPLE-PROGRAM-ERROR]: FUNCTION: Lambda list marker &ALLOW-OTHER-KEYS not allowed here.
EQL-OK: ERROR
LAMBDA-LIST-KEYWORDS
EQUAL-OK: (&OPTIONAL &REST &KEY &ALLOW-OTHER-KEYS &AUX &BODY &WHOLE &ENVIRONMENT)
(LET ((S (PRIN1-TO-STRING LAMBDA-PARAMETERS-LIMIT))) (OR (EQUAL S "65536") (EQUAL S "4294967296") (EQUAL S "4096")))
EQL-OK: T
(TYPEP 'NIL 'NULL)
EQL-OK: T
(TYPEP '(A B C) 'NULL)
EQL-OK: NIL
(TYPEP 'ABC 'SYMBOL)
EQL-OK: T
(TYPEP 4 'ATOM)
EQL-OK: T
(TYPEP 55 'CONS)
EQL-OK: NIL
(TYPEP '(A (B C)) 'LIST)
EQL-OK: T
(TYPEP 5/8 'NUMBER)
EQL-OK: T
(TYPEP -800 'INTEGER)
EQL-OK: T
(TYPEP 5/7 'RATIONAL)
EQL-OK: T
(TYPEP 2.718 'FLOAT)
EQL-OK: T
(TYPEP #C(1.23 3.56) 'FLOAT)
EQL-OK: NIL
(TYPEP #\a 'CHARACTER)
EQL-OK: T
(TYPEP "abc" 'STRING)
EQL-OK: T
(TYPEP '#(1 2 3) 'STRING)
EQL-OK: NIL
(TYPEP '#(A B C) 'BIT-VECTOR)
EQL-OK: NIL
(TYPEP '#(A B C) 'VECTOR)
EQL-OK: T
(TYPEP "abc" 'VECTOR)
EQL-OK: T
(TYPEP '#(1 2 3 4) 'SIMPLE-VECTOR)
EQL-OK: T
(TYPEP 3 'SIMPLE-VECTOR)
EQL-OK: NIL
(TYPEP "a b cd" 'SIMPLE-STRING)
EQL-OK: T
(TYPEP 'ABC 'SIMPLE-STRING)
EQL-OK: NIL
(TYPEP #*1101 'SIMPLE-BIT-VECTOR)
EQL-OK: T
(TYPEP '#(1 0 0 1) 'SIMPLE-BIT-VECTOR)
EQL-OK: NIL
(TYPEP '#2A((A B) (C D)) 'ARRAY)
EQL-OK: T
(SETQ X 7)
EQL-OK: 7
(TYPEP X 'COMPILED-FUNCTION)
EQL-OK: NIL
(TYPEP X 'COMMON)
[SIMPLE-ERROR]: TYPEP: invalid type specification COMMON
EQL-OK: ERROR
(SUBTYPEP 'CHARACTER 'NUMBER)
EQL-OK: NIL
(SUBTYPEP 'NUMBER 'CHARACTER)
EQL-OK: NIL
(SUBTYPEP 'STRING 'NUMBER)
EQL-OK: NIL
(SUBTYPEP 'COMPLEX 'NUMBER)
EQL-OK: T
(SUBTYPEP 'FLOAT 'NUMBER)
EQL-OK: T
(SUBTYPEP 'FIXNUM 'NUMBER)
EQL-OK: T
(SUBTYPEP 'RATIONAL 'NUMBER)
EQL-OK: T
(SUBTYPEP 'FLOAT 'COMPLEX)
EQL-OK: NIL
(SUBTYPEP 'INTEGER 'RATIONAL)
EQL-OK: T
(SUBTYPEP 'NUMBER 'VECTOR)
EQL-OK: NIL
(SUBTYPEP 'VECTOR 'ARRAY)
EQL-OK: T
(SUBTYPEP 'NUMBER 'ARRAY)
EQL-OK: NIL
(NULL 'NIL)
EQL-OK: T
(SYMBOLP *STANDARD-INPUT*)
EQL-OK: NIL
(SYMBOLP 'CAR)
EQL-OK: T
(ATOM 'ABC)
EQL-OK: T
(CONSP (ACONS 'X 'Y 'A))
EQL-OK: T
(LISTP '(((A . B) . C)))
EQL-OK: T
(LISTP 'A)
EQL-OK: NIL
(LISTP NIL)
EQL-OK: T
(LISTP '(A B C))
EQL-OK: T
(NUMBERP #*101)
EQL-OK: NIL
(NUMBERP -5)
EQL-OK: T
(INTEGERP 5)
EQL-OK: T
(INTEGERP #\+)
EQL-OK: NIL
(RATIONALP 0)
EQL-OK: T
(FLOATP -5)
EQL-OK: NIL
(FLOATP (READ-FROM-STRING "1.0e30"))
EQL-OK: T
(FLOATP 123.4)
EQL-OK: T
(COMPLEXP 1/2)
EQL-OK: NIL
(COMPLEXP #C(2 3))
EQL-OK: T
(CHARACTERP #\1)
EQL-OK: T
(STRINGP "abc")
EQL-OK: T
(STRINGP :+*/-)
EQL-OK: NIL
(BIT-VECTOR-P (READ-FROM-STRING "#5*01110"))
EQL-OK: T
(VECTORP "abc")
EQL-OK: T
(SIMPLE-VECTOR-P #*101)
EQL-OK: NIL
(SIMPLE-STRING-P "abc")
EQL-OK: T
(SIMPLE-STRING-P :+*/-)
EQL-OK: NIL
(SIMPLE-BIT-VECTOR-P #*101)
EQL-OK: T
(ARRAYP (READ-FROM-STRING "#7(2 4 3)"))
EQL-OK: T
(ARRAYP '(READ-FROM-STRING "#1a 5.77"))
EQL-OK: NIL
(PACKAGEP (READ-FROM-STRING "#5*01110"))
EQL-OK: NIL
(PACKAGEP *PACKAGE*)
EQL-OK: T
(FUNCTIONP 'ATOM)
EQL-OK: NIL
(COMPILED-FUNCTION-P 'DO)
EQL-OK: NIL
(EQ '(1 2 3 4 5) (COPY-LIST '(1 2 3 4 5)))
EQL-OK: NIL
(SETQ X '((1 . A) (2 . B) (3 . C)))
EQUAL-OK: ((1 . A) (2 . B) (3 . C))
(EQ (CADR X) (CADR (COPY-ALIST X)))
EQL-OK: NIL
(EQ #\A #\A)
EQL-OK: T
(EQ "Foo" "Foo")
EQL-OK: NIL
(EQ "Foo" (COPY-SEQ "Foo"))
EQL-OK: NIL
(EQL #C(3.0 -4.0) #C(3 -4))
EQL-OK: NIL
(EQL (CONS 'A 'B) (CONS 'A 'C))
EQL-OK: NIL
(EQUAL '(1 2 3 4 5) (COPY-LIST '(1 2 3 4 5)))
EQL-OK: T
(EQUAL X (COPY-ALIST X))
EQL-OK: T
(EQUAL 3 3)
EQL-OK: T
(EQUAL 3 3.0)
EQL-OK: NIL
(EQUAL 3.0 3.0)
EQL-OK: T
(EQUAL #C(3 -4) #C(3 -4))
EQL-OK: T
(EQUALP '(1 2 3 4 5) (COPY-LIST '(1 2 3 4 5)))
EQL-OK: T
(EQUALP "            foo" "            FOO")
EQL-OK: T
(EQUALP "            fou" "            FOO")
EQL-OK: NIL
(EQUALP '(0 1) '(#P""))
EQL-OK: NIL
(NOT 1)
EQL-OK: NIL
(NOT NIL)
EQL-OK: T
(AND (EQ 1 2) (EQ 2 3) (EQ 3 4) (EQ 4 4))
EQL-OK: NIL
(AND (EQ 1 2) (EQ 3 3) (EQ 3 4) (EQ 4 4))
EQL-OK: NIL
(OR (EQ 2 2) (EQ 3 3) (EQ 3 4) (EQ 4 4))
EQL-OK: T
(OR (EQ 1 2) (EQ 2 3) (EQ 3 4) (EQ 4 5))
EQL-OK: NIL
(SETQ LI1 '(A (B) ((C) (D))))
EQUAL-OK: (A (B) ((C) (D)))
(SETQ VEC1 '#(0 1 2 3))
EQUALP-OK: #(0 1 2 3)
(SETF (NTH 1 LI1) 'UU)
EQL-OK: UU
(EVAL 'LI1)
EQUAL-OK: (A UU ((C) (D)))
(SETF (ELT LI1 1) 'OO)
EQL-OK: OO
(SETF (ELT VEC1 1) 'OO)
EQL-OK: OO
(EVAL 'LI1)
EQUAL-OK: (A OO ((C) (D)))
(EVAL 'VEC1)
EQUALP-OK: #(0 OO 2 3)
(SETF (REST LI1) '((WW)))
EQUAL-OK: ((WW))
(EVAL 'LI1)
EQUAL-OK: (A (WW))
(SETF (FIRST LI1) 'AA)
EQL-OK: AA
(FIRST LI1)
EQL-OK: AA
(SETF (SECOND LI1) 'BB)
EQL-OK: BB
(EVAL 'LI1)
EQUAL-OK: (AA BB)
(SETF (REST LI1) '(2 3 4 5 6 7 8 9 10))
EQUAL-OK: (2 3 4 5 6 7 8 9 10)
(SETF (SECOND LI1) 22)
EQL-OK: 22
(EVAL 'LI1)
EQUAL-OK: (AA 22 3 4 5 6 7 8 9 10)
(SETF (THIRD LI1) '33)
EQL-OK: 33
(SETF (FOURTH LI1) '44)
EQL-OK: 44
(SETF (FIFTH LI1) '55)
EQL-OK: 55
(SETF (SIXTH LI1) '66)
EQL-OK: 66
(SETF (SEVENTH LI1) '77)
EQL-OK: 77
(SETF (EIGHTH LI1) '88)
EQL-OK: 88
(SETF (NINTH LI1) '99)
EQL-OK: 99
(SETF (TENTH LI1) '1010)
EQL-OK: 1010
(EVAL 'LI1)
EQUAL-OK: (AA 22 33 44 55 66 77 88 99 1010)
(SETF (FIRST LI1) '(((A))))
EQUAL-OK: (((A)))
(SETF (CAAAR LI1) 'UU)
EQL-OK: UU
(CAAAR LI1)
EQL-OK: UU
(CAR LI1)
EQUAL-OK: ((UU))
(SETF (CAAR LI1) 'OO)
EQL-OK: OO
(EVAL 'LI1)
EQUAL-OK: ((OO) 22 33 44 55 66 77 88 99 1010)
(SETF (CAR LI1) 'II)
EQL-OK: II
(EVAL 'LI1)
EQUAL-OK: (II 22 33 44 55 66 77 88 99 1010)
(SETF (CDDDR LI1) 'PP)
EQL-OK: PP
(EVAL 'LI1)
EQUAL-OK: (II 22 33 . PP)
(SETF (CADDR LI1) '333)
EQL-OK: 333
(EVAL 'LI1)
EQUAL-OK: (II 22 333 . PP)
(SETF (SVREF VEC1 2) 'KK)
EQL-OK: KK
(EVAL 'VEC1)
EQUALP-OK: #(0 OO KK 3)
(SETF (GET 'A 'B) 'UU)
EQL-OK: UU
(GET 'A 'B)
EQL-OK: UU
(SETF (GETF (CADR (SETQ XX '(AAA (I1 V1 I2 V2)))) 'I2) 'V222)
EQL-OK: V222
(EVAL 'XX)
EQUAL-OK: (AAA (I1 V1 I2 V222))
(GETF (CADR XX) 'I2)
EQL-OK: V222
(GETF (CADR XX) 'I1)
EQL-OK: V1
(SETF (DOCUMENTATION 'BEISPIEL 'TYP1) "doc 1")
EQUAL-OK: "doc 1"
(SETF (DOCUMENTATION 'BEISPIEL 'TYP2) "doc 2")
EQUAL-OK: "doc 2"
(DOCUMENTATION 'BEISPIEL 'TYP2)
EQUAL-OK: "doc 2"
(SETF (DOCUMENTATION 'BEISPIEL 'TYP2) "doc 3")
EQUAL-OK: "doc 3"
(DOCUMENTATION 'BEISPIEL 'TYP2)
EQUAL-OK: "doc 3"
(SYMBOL-PLIST 'BEISPIEL)
EQUAL-OK: (SYSTEM::DOC (TYP2 "doc 3" TYP1 "doc 1"))
(SETF (SYMBOL-VALUE 'XX) 'VOELLIGNEU)
EQL-OK: VOELLIGNEU
(EVAL 'XX)
EQL-OK: VOELLIGNEU
(LET ((X (LIST 'A 'B 'C))) (RPLACD (LAST X) X) (LIST-LENGTH X))
EQL-OK: NIL
(MAPCAR #'(LAMBDA (X) (LIST X)) '(A B C))
EQUAL-OK: ((A) (B) (C))
(MAPC #'(LAMBDA (X Y Z) (LIST X Y Z)) '(A B C) '(1 2 3) '(U I V))
EQUAL-OK: (A B C)
(MAPL #'(LAMBDA (X Y Z) (LIST X Y Z)) '(A B C) '(1 2 3) '(U I V))
EQUAL-OK: (A B C)
(MAPLIST #'(LAMBDA (X Y Z) (LIST X Y Z)) '(A B C) '(1 2 3) '(U I V))
EQUAL-OK: (((A B C) (1 2 3) (U I V)) ((B C) (2 3) (I V)) ((C) (3) (V)))
(MAPCON #'(LAMBDA (X Y Z) (LIST X Y Z)) '(A B) '(1 2 3) '(U I V))
EQUAL-OK: ((A B) (1 2 3) (U I V) (B) (2 3) (I V))
(MAPCAN #'(LAMBDA (X Y Z) (LIST X Y Z)) '(A B C) '(1 2 3) '(U I V))
EQUAL-OK: (A 1 U B 2 I C 3 V)
(FUNCALL (COMPILE NIL (LAMBDA (X) (FLET ((FOO (Y) (+ Y 1))) (FOO (* 2 X))))) 3)
EQL-OK: 7
(LET ((NOT-A-GLOBALLY-SPECIAL-VAR 3)) (PROGV '(NOT-A-GLOBALLY-SPECIAL-VAR) '(4) (LIST NOT-A-GLOBALLY-SPECIAL-VAR (SYMBOL-VALUE 'NOT-A-GLOBALLY-SPECIAL-VAR))))
EQUAL-OK: (3 4)
(FLET ((CONS (X Y) `(KONS ,X ,Y))) (LET ((CONS (SYMBOL-FUNCTION '+))) (FUNCALL #'CONS (FUNCALL 'CONS 1 2) (FUNCALL CONS 1 2))))
EQUAL-OK: (KONS (1 . 2) 3)
(OR (LET* ((N (MIN LAMBDA-PARAMETERS-LIMIT 1024)) (VARS (LOOP REPEAT N COLLECT (GENSYM)))) (EVAL `(= ,N (FLET ((%F ,VARS (+ ,@VARS))) (%F ,@(LOOP FOR E IN VARS COLLECT 1)))))))
EQL-OK: T
(LET ((LS (LOOP FOR I FROM 1 TO (MIN (1- MULTIPLE-VALUES-LIMIT) 100000) COLLECT I))) (EQUAL LS (MULTIPLE-VALUE-LIST (VALUES-LIST LS))))
EQL-OK: T
(KEYWORDP 36)
EQL-OK: NIL
(KEYWORDP :RENAME)
EQL-OK: T
(ZEROP -456)
EQL-OK: NIL
(ZEROP 0)
EQL-OK: T
(PLUSP 3)
EQL-OK: T
(PLUSP 3453786543987565)
EQL-OK: T
(MINUSP -456)
EQL-OK: T
(ODDP -1)
EQL-OK: T
(ODDP 0)
EQL-OK: NIL
(EVENP -456)
EQL-OK: T
(EVENP -345)
EQL-OK: NIL
(= 5/2 2.5)
EQL-OK: T
(/= 3.0 3)
EQL-OK: NIL
(/= 3.0 #C(3.0 1.0))
EQL-OK: T
(< 3.0 3)
EQL-OK: NIL
(< 3 3.0 3 #C(3.0 0.0))
[SIMPLE-TYPE-ERROR]: <: #1=#C(3.0 0.0) is not a real number

EQL-OK: ERROR
(< -5 -4 -2 0 4 5)
EQL-OK: T
(> 8 7 6 5 4)
EQL-OK: T
(> 3 3.0 3 #C(3.0 0.0))
[SIMPLE-TYPE-ERROR]: >: #1=#C(3.0 0.0) is not a real number

EQL-OK: ERROR
(<= 3.0 3)
EQL-OK: T
(<= 3 3)
EQL-OK: T
(<= 1 3 3 2 5)
EQL-OK: NIL
(<= 5/2 2.5)
EQL-OK: T
(>= -5 -4 -2 0 4 5)
EQL-OK: NIL
(MAX 1 3 2 -7)
EQL-OK: 3
(+ 1 1/2 0.5 #C(3.0 5.5))
EQL-OK: #C(5.0 5.5)
(- 3 0 3 5 -6)
EQL-OK: 1
(- #C(0 6) 1/4 0.5 7)
EQUALP-OK: #C(-7.75 6.0)
(* 7 6 5 4 3 2 1)
EQL-OK: 5040
(* 2 2 2.0 2)
EQL-OK: 16.0
(/ -8)
EQL-OK: -1/8
(/ 4 2)
EQL-OK: 2
(1+ 0)
EQL-OK: 1
(1+ #C(0 1))
EQL-OK: #C(1 1)
(1- 5.0)
EQL-OK: 4.0
(CONJUGATE #C(3/5 4/5))
EQL-OK: #C(3/5 -4/5)
(GCD 91 -49)
EQL-OK: 7
(LCM 14 35)
EQL-OK: 70
(PRIN1-TO-STRING (EXP 1))
EQUAL-OK: "2.7182817"
(EXPT #C(0 1) 2)
EQL-OK: -1
(PRIN1-TO-STRING (EXPT 2 #C(0 1)))
EQUAL-OK: "#C(0.7692389 0.63896126)"
(PRIN1-TO-STRING (LOG -3 10))
EQUAL-OK: "#C(0.47712126 1.3643764)"
(LOG 3 0)
[SIMPLE-DIVISION-BY-ZERO]: LOG: division by zero

EQL-OK: ERROR
(SQRT 9)
EQUALP-OK: 3.0
(SQRT -9.0)
EQUALP-OK: #C(0.0 3.0)
(ISQRT 9)
EQL-OK: 3
(ISQRT 26)
EQL-OK: 5
(ABS 6)
EQL-OK: 6
(ABS -6)
EQL-OK: 6
(SIGNUM 0)
EQL-OK: 0
(SIGNUM -4)
EQL-OK: -1
(SIGNUM 4)
EQL-OK: 1
(PRIN1-TO-STRING (SIN (* 8 (/ PI 2))))
EQUAL-OK: "2.0066230454737344098L-19"
(LET* ((FUDGE 2) (VAL (TAN (/ PI 2))) (REF (COS (/ PI 2))) (REL-ERR (ABS (/ (- (/ VAL) REF) REF)))) (< REL-ERR (* FUDGE LONG-FLOAT-EPSILON)))
EQL-OK: T
(PRIN1-TO-STRING (SIN (EXPT 10 3)))
EQUAL-OK: "0.82687956"
(COS 0)
EQUALP-OK: 1.0
(PRIN1-TO-STRING (COS (/ PI 2)))
EQUAL-OK: "-2.5082788068421680123L-20"
(PRIN1-TO-STRING (TAN 1))
EQUAL-OK: "1.5574077"
(PRIN1-TO-STRING (TAN (/ PI 2)))
EQUAL-OK: "-3.9867976290042641156L19"
(PRIN1-TO-STRING (CIS -1))
EQUAL-OK: "#C(0.5403023 -0.84147096)"
(CIS 2.5)
EQL-OK: #C(-0.8011436 0.5984721)
(PRIN1-TO-STRING (ASIN -1))
EQUAL-OK: "-1.5707964"
(ASIN 0)
EQUALP-OK: 0.0
(ASIN 2)
EQL-OK: #C(1.5707964 -1.316958)
(PRIN1-TO-STRING (ACOS 0))
EQUAL-OK: "1.5707964"
(PRIN1-TO-STRING (ACOS -1))
EQUAL-OK: "3.1415927"
(PRIN1-TO-STRING (ACOS 2))
EQUAL-OK: "#C(0 1.316958)"
(ACOS 1.00001)
EQUALP-OK: #C(0.0 0.0044751023)
(ATAN 1)
EQL-OK: 0.7853981
(PRIN1-TO-STRING PI)
EQUAL-OK: "3.1415926535897932385L0"
(SINH 0)
EQUALP-OK: 0.0
(PRIN1-TO-STRING (SINH #C(5.0 -9.6)))
EQUAL-OK: "#C(-73.06699 12.93681)"
(COSH 0)
EQUALP-OK: 1.0
(PRIN1-TO-STRING (COSH 1))
EQUAL-OK: "1.5430807"
(TANH 50)
EQL-OK: 1.0
(PRIN1-TO-STRING (TANH 0.00753))
EQUAL-OK: "0.0075298576"
(PRIN1-TO-STRING (ASINH 0.5))
EQUAL-OK: "0.48121184"
(PRIN1-TO-STRING (ASINH 3/7))
EQUAL-OK: "0.4164307"
(ACOSH 0)
EQL-OK: #C(0 1.5707964)
(ACOSH 1)
EQL-OK: 0
(ACOSH -1)
EQL-OK: #C(0 3.1415927)
(PRIN1-TO-STRING (ATANH 0.5))
EQUAL-OK: "0.54930615"
(PRIN1-TO-STRING (ATANH 3/7))
EQUAL-OK: "0.4581453"
(= (SIN (* #C(0 1) 5)) (* #C(0 1) (SINH 5)))
EQL-OK: T
(= (COS (* #C(0 1) 5)) (COSH 5))
EQL-OK: T
(= (TAN (* #C(0 1) 5)) (* #C(0 1) (TANH 5)))
EQL-OK: T
(= (SINH (* #C(0 1) 5)) (* #C(0 1) (SIN 5)))
EQL-OK: T
(= (COSH (* #C(0 1) 5)) (COS 5))
EQL-OK: T
(= (TANH (* #C(0 1) 5)) (* #C(0 1) (TAN 5)))
EQL-OK: T
(FLOAT 1)
EQL-OK: 1.0
(FLOAT 0.5)
EQL-OK: 0.5
(RATIONAL 2)
EQL-OK: 2
(RATIONAL 2.0)
EQL-OK: 2
(RATIONAL 2.5)
EQL-OK: 5/2
(RATIONALIZE 2.5)
EQL-OK: 5/2
(RATIONALIZE 7/3)
EQL-OK: 7/3
(RATIONALIZE PI)
EQL-OK: 8717442233/2774848045
(NUMERATOR 5/2)
EQL-OK: 5
(NUMERATOR (/ 8 -6))
EQL-OK: -4
(DENOMINATOR 5/2)
EQL-OK: 2
(DENOMINATOR (/ 8 -6))
EQL-OK: 3
(GCD (NUMERATOR 7/9) (DENOMINATOR 7/9))
EQL-OK: 1
(FLOOR 2.6)
EQL-OK: 2
(FLOOR 2.5)
EQL-OK: 2
(CEILING 2.6)
EQL-OK: 3
(CEILING 2.5)
EQL-OK: 3
(CEILING 2.4)
EQL-OK: 3
(TRUNCATE 2.6)
EQL-OK: 2
(TRUNCATE 2.5)
EQL-OK: 2
(TRUNCATE 2.4)
EQL-OK: 2
(ROUND 2.6)
EQL-OK: 3
(ROUND 2.5)
EQL-OK: 2
(ROUND 2.4)
EQL-OK: 2
(MOD 13 4)
EQL-OK: 1
(MOD -13 4)
EQL-OK: 3
(PRIN1-TO-STRING (REM 13.4 1))
EQUAL-OK: "0.39999962"
(FFLOOR 2.6)
EQUALP-OK: 2
(FFLOOR 2.5)
EQUALP-OK: 2
(FFLOOR 2.4)
EQUALP-OK: 2
(FCEILING -0.3)
EQUALP-OK: 0
(FCEILING -0.7)
EQUALP-OK: 0
(FCEILING -2.4)
EQUALP-OK: -2
(FTRUNCATE 2.5)
EQL-OK: 2.0
(FTRUNCATE 2.4)
EQL-OK: 2.0
(FROUND -0.7)
EQL-OK: -1.0
(FROUND -2.4)
EQL-OK: -2.0
(DECODE-FLOAT 35.0)
EQL-OK: 0.546875
(DECODE-FLOAT 3.5s0)
EQL-OK: 0.875s0
(SCALE-FLOAT 2.5 5)
EQL-OK: 80.0
(SCALE-FLOAT 0.7541 2)
EQL-OK: 3.0164
(FLOAT-RADIX 2.5)
EQL-OK: 2
(FLOAT-RADIX 3.5d0)
EQL-OK: 2
(COMPLEX 1/4 7.3)
EQUALP-OK: #C(0.25 7.3)
(COMPLEX 1 0)
EQL-OK: 1
(REALPART 5)
EQL-OK: 5
(REALPART #C(1.4 0.0))
EQL-OK: 1.4
(IMAGPART 5)
EQL-OK: 0
(IMAGPART #C(1.4 0.0))
EQL-OK: 0.0
(LOGCOUNT 13)
EQL-OK: 3
(LOGCOUNT -13)
EQL-OK: 2
(INTEGER-LENGTH 0)
EQL-OK: 0
(INTEGER-LENGTH 1)
EQL-OK: 1
BOOLE-CLR
EQL-OK: 0
BOOLE-SET
EQL-OK: 15
BOOLE-1
EQL-OK: 10
BOOLE-2
EQL-OK: 12
BOOLE-C1
EQL-OK: 5
BOOLE-C2
EQL-OK: 3
BOOLE-AND
EQL-OK: 8
BOOLE-IOR
EQL-OK: 14
BOOLE-XOR
EQL-OK: 6
BOOLE-EQV
EQL-OK: 9
BOOLE-NAND
EQL-OK: 7
BOOLE-NOR
EQL-OK: 1
BOOLE-ANDC1
EQL-OK: 4
BOOLE-ANDC2
EQL-OK: 2
BOOLE-ORC1
EQL-OK: 13
BOOLE-ORC2
EQL-OK: 11
(LET ((S (PRIN1-TO-STRING MOST-POSITIVE-FIXNUM))) (OR (EQUAL S "16777215") (EQUAL S "33554431") (EQUAL S "67108863") (EQUAL S "4294967295") (EQUAL S "1099511627775") (EQUAL S "281474976710655")))
EQL-OK: T
(LET ((S (PRIN1-TO-STRING MOST-NEGATIVE-FIXNUM))) (OR (EQUAL S "-16777216") (EQUAL S "-33554432") (EQUAL S "-67108864") (EQUAL S "-4294967296") (EQUAL S "-1099511627776") (EQUAL S "-281474976710656")))
EQL-OK: T
(PRIN1-TO-STRING MOST-POSITIVE-SHORT-FLOAT)
EQUAL-OK: "3.4028s38"
(PRIN1-TO-STRING LEAST-POSITIVE-SHORT-FLOAT)
EQUAL-OK: "1.1755s-38"
(PRIN1-TO-STRING LEAST-NEGATIVE-SHORT-FLOAT)
EQUAL-OK: "-1.1755s-38"
(PRIN1-TO-STRING MOST-NEGATIVE-SHORT-FLOAT)
EQUAL-OK: "-3.4028s38"
(LET ((S (PRIN1-TO-STRING MOST-POSITIVE-SINGLE-FLOAT))) (OR (EQUAL S "1.7014117E38") (EQUAL S "3.4028235E38")))
EQL-OK: T
(LET ((S (PRIN1-TO-STRING LEAST-POSITIVE-SINGLE-FLOAT))) (OR (EQUAL S "2.938736E-39") (EQUAL S "1.1754944E-38")))
EQL-OK: T
(LET ((S (PRIN1-TO-STRING LEAST-NEGATIVE-SINGLE-FLOAT))) (OR (EQUAL S "-2.938736E-39") (EQUAL S "-1.1754944E-38")))
EQL-OK: T
(LET ((S (PRIN1-TO-STRING MOST-NEGATIVE-SINGLE-FLOAT))) (OR (EQUAL S "-1.7014117E38") (EQUAL S "-3.4028235E38")))
EQL-OK: T
(LET ((S (PRIN1-TO-STRING MOST-POSITIVE-DOUBLE-FLOAT))) (OR (EQUAL S "8.988465674311579d307") (EQUAL S "1.7976931348623157d308")))
EQL-OK: T
(LET ((S (PRIN1-TO-STRING LEAST-POSITIVE-DOUBLE-FLOAT))) (OR (EQUAL S "5.562684646268004d-309") (EQUAL S "2.2250738585072014d-308")))
EQL-OK: T
(LET ((S (PRIN1-TO-STRING LEAST-NEGATIVE-DOUBLE-FLOAT))) (OR (EQUAL S "-5.562684646268004d-309") (EQUAL S "-2.2250738585072014d-308")))
EQL-OK: T
(LET ((S (PRIN1-TO-STRING MOST-NEGATIVE-DOUBLE-FLOAT))) (OR (EQUAL S "-8.988465674311579d307") (EQUAL S "-1.7976931348623157d308")))
EQL-OK: T
(PRIN1-TO-STRING MOST-POSITIVE-LONG-FLOAT)
EQUAL-OK: "8.8080652584198167656L646456992"
(PRIN1-TO-STRING LEAST-POSITIVE-LONG-FLOAT)
EQUAL-OK: "5.676615526003731344L-646456994"
(PRIN1-TO-STRING LEAST-NEGATIVE-LONG-FLOAT)
EQUAL-OK: "-5.676615526003731344L-646456994"
(PRIN1-TO-STRING MOST-NEGATIVE-LONG-FLOAT)
EQUAL-OK: "-8.8080652584198167656L646456992"
(PRIN1-TO-STRING SHORT-FLOAT-EPSILON)
EQUAL-OK: "7.6295s-6"
(PRIN1-TO-STRING SINGLE-FLOAT-EPSILON)
EQUAL-OK: "5.960465E-8"
(LET ((S (PRIN1-TO-STRING DOUBLE-FLOAT-EPSILON))) (OR (EQUAL S "1.1102230246251568d-16")))
EQL-OK: T
(PRIN1-TO-STRING LONG-FLOAT-EPSILON)
EQUAL-OK: "5.4210108624275221706L-20"
(PRIN1-TO-STRING SHORT-FLOAT-NEGATIVE-EPSILON)
EQUAL-OK: "3.81476s-6"
(PRIN1-TO-STRING SINGLE-FLOAT-NEGATIVE-EPSILON)
EQUAL-OK: "2.9802326E-8"
(LET ((S (PRIN1-TO-STRING DOUBLE-FLOAT-NEGATIVE-EPSILON))) (OR (EQUAL S "5.551115123125784d-17")))
EQL-OK: T
(PRIN1-TO-STRING LONG-FLOAT-NEGATIVE-EPSILON)
EQUAL-OK: "2.7105054312137610853L-20"
(/ 1 0)
[SIMPLE-DIVISION-BY-ZERO]: /: division by zero

EQL-OK: ERROR
(/ 1 0.0s0)
[SIMPLE-DIVISION-BY-ZERO]: /: division by zero

EQL-OK: ERROR
(/ 1 0.0)
[SIMPLE-DIVISION-BY-ZERO]: /: division by zero

EQL-OK: ERROR
(/ 1 0.0d0)
[SIMPLE-DIVISION-BY-ZERO]: /: division by zero

EQL-OK: ERROR
(/ 1 0.0L0)
[SIMPLE-DIVISION-BY-ZERO]: /: division by zero

EQL-OK: ERROR
(EXPT 10.0s0 1000)
[SIMPLE-FLOATING-POINT-OVERFLOW]: EXPT: floating point overflow

EQL-OK: ERROR
(EXPT 10.0 1000)
[SIMPLE-FLOATING-POINT-OVERFLOW]: EXPT: floating point overflow

EQL-OK: ERROR
(EXPT 10.0d0 1000)
[SIMPLE-FLOATING-POINT-OVERFLOW]: EXPT: floating point overflow

EQL-OK: ERROR
(EXPT 10.0L0 1000000000)
[SIMPLE-FLOATING-POINT-OVERFLOW]: EXPT: floating point overflow

EQL-OK: ERROR
(STANDARD-CHAR-P #\a)
EQL-OK: T
(STANDARD-CHAR-P 1)
[SIMPLE-TYPE-ERROR]: STANDARD-CHAR-P: argument 1 is not a character

EQL-OK: ERROR
(GRAPHIC-CHAR-P #\a)
EQL-OK: T
(GRAPHIC-CHAR-P 1)
[SIMPLE-TYPE-ERROR]: GRAPHIC-CHAR-P: argument 1 is not a character

EQL-OK: ERROR
(STRING-CHAR-P #\a)
EQL-OK: T
(STRING-CHAR-P #\1)
EQL-OK: T
(STRING-CHAR-P "")
[SIMPLE-TYPE-ERROR]: STRING-CHAR-P: argument #1="" is not a character

EQL-OK: ERROR
(ALPHA-CHAR-P #\a)
EQL-OK: T
(ALPHA-CHAR-P #\$)
EQL-OK: NIL
(UPPER-CASE-P #\a)
EQL-OK: NIL
(LOWER-CASE-P #\A)
EQL-OK: NIL
(BOTH-CASE-P #\a)
EQL-OK: T
(BOTH-CASE-P #\$)
EQL-OK: NIL
(DIGIT-CHAR-P #\a)
EQL-OK: NIL
(DIGIT-CHAR-P #\5)
EQL-OK: 5
(ALPHANUMERICP #\a)
EQL-OK: T
(ALPHANUMERICP #\$)
EQL-OK: NIL
(CHAR= #\d #\d)
EQL-OK: T
(CHAR/= #\d #\d)
EQL-OK: NIL
(CHAR< #\z #\0)
EQL-OK: NIL
(CHAR-EQUAL #\d #\d)
EQL-OK: T
(CHAR-NOT-EQUAL #\d #\d)
EQL-OK: NIL
(CHAR-LESSP #\d #\x)
EQL-OK: T
(CHAR-LESSP #\d #\d)
EQL-OK: NIL
(CHAR-NOT-GREATERP #\d #\d)
EQL-OK: T
(CHAR-GREATERP #\e #\d)
EQL-OK: T
(CHAR-NOT-LESSP #\e #\d)
EQL-OK: T
(CHAR-UPCASE #\a)
EQL-OK: #\A
(CHAR-UPCASE #\=)
EQL-OK: #\=
(CHAR= (CHAR-DOWNCASE (CHAR-UPCASE #\x)) #\x)
EQL-OK: T
(CHAR-DOWNCASE #\A)
EQL-OK: #\a
(CHAR= (CHAR-UPCASE (CHAR-DOWNCASE #\X)) #\X)
EQL-OK: T
(DIGIT-CHAR 7)
EQL-OK: #\7
(DIGIT-CHAR 12)
EQL-OK: NIL
CHAR-CODE-LIMIT
EQL-OK: 1114112
(ELT (SYMBOL-NAME 'ABC) 0)
EQL-OK: #\A
(SUBSEQ '(A B C D E) 2)
EQUAL-OK: (C D E)
(COPY-SEQ '#(A B C))
EQUALP-OK: #(A B C)
(COPY-SEQ '((A B) C (D E)))
EQUAL-OK: ((A B) C (D E))
(LENGTH '#(A B C D E F))
EQL-OK: 6
(LENGTH '(A B C D E F))
EQL-OK: 6
(NREVERSE '(A (B (C) D)))
EQUAL-OK: ((B (C) D) A)
(REVERSE '(1 2 3 4))
EQUAL-OK: (4 3 2 1)
(MAKE-SEQUENCE 'VECTOR 4 :INITIAL-ELEMENT 'O)
EQUALP-OK: #(O O O O)
(MAKE-SEQUENCE 'LIST 4 :INITIAL-ELEMENT 'O)
EQUAL-OK: (O O O O)
(EQUALP (MAKE-SEQUENCE 'STRING 5 :INITIAL-ELEMENT #\a) (MAKE-STRING 5 :INITIAL-ELEMENT #\a))
EQL-OK: T
(CONCATENATE 'LIST '(A B C) '(1 2))
EQUAL-OK: (A B C 1 2)
(MAP 'LIST 'LIST '(#\a #\b #\c) '(#\1 #\2 #\3))
EQUAL-OK: ((#\a #\1) (#\b #\2) (#\c #\3))
(MAP 'LIST 'LIST '(A B C) '(1 2 3))
EQUAL-OK: ((A 1) (B 2) (C 3))
(MAKE-SEQUENCE '(VECTOR T 5) 5 :INITIAL-ELEMENT 'A)
EQUALP-OK: #(A A A A A)
(MAKE-SEQUENCE '(VECTOR T 5) 6 :INITIAL-ELEMENT 'A)
[SIMPLE-TYPE-ERROR]: MAKE-SEQUENCE: sequence type forces length 5, but result has length 6

EQL-OK: ERROR
(MAKE-SEQUENCE '(OR (VECTOR T 5) (VECTOR T 10)) 5 :INITIAL-ELEMENT 'A)
EQUALP-OK: #(A A A A A)
(MAKE-SEQUENCE '(OR (VECTOR T 5) (VECTOR T 10)) 6 :INITIAL-ELEMENT 'A)
[SIMPLE-TYPE-ERROR]: MAKE-SEQUENCE: the result #1=#(A A A A A A) is not of type #2=(OR (VECTOR T 5) (VECTOR T 10))

EQL-OK: ERROR
(MAKE-SEQUENCE '(VECTOR T 5) 5 :INITIAL-ELEMENT #\A :UPDATE #'(LAMBDA (C) (CODE-CHAR (1+ (CHAR-CODE C)))))
EQUALP-OK: #(#\A #\B #\C #\D #\E)
(MAKE-SEQUENCE '(VECTOR T 5) 6 :INITIAL-ELEMENT #\A :UPDATE #'(LAMBDA (C) (CODE-CHAR (1+ (CHAR-CODE C)))))
[SIMPLE-TYPE-ERROR]: MAKE-SEQUENCE: sequence type forces length 5, but result has length 6

EQL-OK: ERROR
(MAKE-SEQUENCE '(OR (VECTOR T 5) (VECTOR T 10)) 5 :INITIAL-ELEMENT #\A :UPDATE #'(LAMBDA (C) (CODE-CHAR (1+ (CHAR-CODE C)))))
EQUALP-OK: #(#\A #\B #\C #\D #\E)
(MAKE-SEQUENCE '(OR (VECTOR T 5) (VECTOR T 10)) 6 :INITIAL-ELEMENT #\A :UPDATE #'(LAMBDA (C) (CODE-CHAR (1+ (CHAR-CODE C)))))
[SIMPLE-TYPE-ERROR]: MAKE-SEQUENCE: the result #1=#(#\A #\B #\C #\D #\E #\F) is not of type #2=(OR (VECTOR T 5) (VECTOR T 10))

EQL-OK: ERROR
(COERCE #(A B C D E) '(VECTOR T 5))
EQUALP-OK: #(A B C D E)
(COERCE #(A B C D E F) '(VECTOR T 5))
[SIMPLE-TYPE-ERROR]: COERCE: sequence type forces length 5, but result has length 6

EQL-OK: ERROR
(COERCE #(A B C D E) '(OR (VECTOR T 5) (VECTOR T 10)))
EQUALP-OK: #(A B C D E)
(COERCE #(A B C D E F) '(OR (VECTOR T 5) (VECTOR T 10)))
[SIMPLE-TYPE-ERROR]: COERCE: the result #1=#(A B C D E F) is not of type #2=(OR (VECTOR T 5) (VECTOR T 10))

EQL-OK: ERROR
(COERCE '(A B C D E) '(VECTOR T 5))
EQUALP-OK: #(A B C D E)
(COERCE '(A B C D E F) '(VECTOR T 5))
[SIMPLE-TYPE-ERROR]: COERCE: sequence type forces length 5, but result has length 6

EQL-OK: ERROR
(COERCE '(A B C D E) '(OR (VECTOR T 5) (VECTOR T 10)))
EQUALP-OK: #(A B C D E)
(COERCE '(A B C D E F) '(OR (VECTOR T 5) (VECTOR T 10)))
[SIMPLE-TYPE-ERROR]: COERCE: the result #1=#(A B C D E F) is not of type #2=(OR (VECTOR T 5) (VECTOR T 10))

EQL-OK: ERROR
(SYSTEM::COERCED-SUBSEQ #(A B C D E) '(VECTOR T 5))
EQUALP-OK: #(A B C D E)
(SYSTEM::COERCED-SUBSEQ #(A B C D E F) '(VECTOR T 5))
[SIMPLE-TYPE-ERROR]: SYSTEM::COERCED-SUBSEQ: sequence type forces length 5, but result has length 6

EQL-OK: ERROR
(SYSTEM::COERCED-SUBSEQ #(A B C D E) '(OR (VECTOR T 5) (VECTOR T 10)))
EQUALP-OK: #(A B C D E)
(SYSTEM::COERCED-SUBSEQ #(A B C D E F) '(OR (VECTOR T 5) (VECTOR T 10)))
[SIMPLE-TYPE-ERROR]: SYSTEM::COERCED-SUBSEQ: the result #1=#(A B C D E F) is not of type #2=(OR (VECTOR T 5) (VECTOR T 10))

EQL-OK: ERROR
(SYSTEM::COERCED-SUBSEQ '(A B C D E) '(VECTOR T 5))
EQUALP-OK: #(A B C D E)
(SYSTEM::COERCED-SUBSEQ '(A B C D E F) '(VECTOR T 5))
[SIMPLE-TYPE-ERROR]: SYSTEM::COERCED-SUBSEQ: sequence type forces length 5, but result has length 6

EQL-OK: ERROR
(SYSTEM::COERCED-SUBSEQ '(A B C D E) '(OR (VECTOR T 5) (VECTOR T 10)))
EQUALP-OK: #(A B C D E)
(SYSTEM::COERCED-SUBSEQ '(A B C D E F) '(OR (VECTOR T 5) (VECTOR T 10)))
[SIMPLE-TYPE-ERROR]: SYSTEM::COERCED-SUBSEQ: the result #1=#(A B C D E F) is not of type #2=(OR (VECTOR T 5) (VECTOR T 10))

EQL-OK: ERROR
(CONCATENATE '(VECTOR T 5) '(A B C) '(D E))
EQUALP-OK: #(A B C D E)
(CONCATENATE '(VECTOR T 5) '(A B C) '(D E F))
[SIMPLE-TYPE-ERROR]: CONCATENATE: sequence type forces length 5, but result has length 6

EQL-OK: ERROR
(CONCATENATE '(OR (VECTOR T 5) (VECTOR T 10)) '(A B C) '(D E))
EQUALP-OK: #(A B C D E)
(CONCATENATE '(OR (VECTOR T 5) (VECTOR T 10)) '(A B C) '(D E F))
[SIMPLE-TYPE-ERROR]: CONCATENATE: the result #1=#(A B C D E F) is not of type #2=(OR (VECTOR T 5) (VECTOR T 10))

EQL-OK: ERROR
(MAP '(VECTOR T 5) #'IDENTITY '(A B C D E))
EQUALP-OK: #(A B C D E)
(MAP '(VECTOR T 5) #'IDENTITY '(A B C D E F))
[SIMPLE-TYPE-ERROR]: MAP: sequence type forces length 5, but result has length 6

EQL-OK: ERROR
(MAP '(OR (VECTOR T 5) (VECTOR T 10)) #'IDENTITY '(A B C D E))
EQUALP-OK: #(A B C D E)
(MAP '(OR (VECTOR T 5) (VECTOR T 10)) #'IDENTITY '(A B C D E F))
[SIMPLE-TYPE-ERROR]: MAP: the result #1=#(A B C D E F) is not of type #2=(OR (VECTOR T 5) (VECTOR T 10))

EQL-OK: ERROR
(MERGE '(VECTOR T 5) '(A B C D E) 'NIL #'<)
EQUALP-OK: #(A B C D E)
(MERGE '(VECTOR T 5) '(A B C D E F) 'NIL #'<)
[SIMPLE-TYPE-ERROR]: MERGE: sequence type forces length 5, but result has length 6

EQL-OK: ERROR
(MERGE '(OR (VECTOR T 5) (VECTOR T 10)) '(A B C D E) 'NIL #'<)
EQUALP-OK: #(A B C D E)
(MERGE '(OR (VECTOR T 5) (VECTOR T 10)) '(A B C D E F) 'NIL #'<)
[SIMPLE-TYPE-ERROR]: MERGE: the result #1=#(A B C D E F) is not of type #2=(OR (VECTOR T 5) (VECTOR T 10))

EQL-OK: ERROR
(SOME 'NULL '(A B NIL T E))
EQL-OK: T
(EVERY 'ATOM '(A 8 #(A B)))
EQL-OK: T
(NOTANY 'EQ '(A B C D E 4) '(I J K L M 4))
EQL-OK: NIL
(NOTEVERY 'EQ '#(U) '(A X U))
EQL-OK: T
(REDUCE 'LIST '(A) :FROM-END NIL :INITIAL-VALUE NIL)
EQUAL-OK: (NIL A)
(REDUCE 'LIST '(A B C D) :FROM-END NIL :INITIAL-VALUE 'III)
EQUAL-OK: ((((III A) B) C) D)
(REDUCE 'LIST '(A B C D) :FROM-END T)
EQUAL-OK: (A (B (C D)))
(FILL '#(A B C D) 'I :START 1 :END 3)
EQUALP-OK: #(A I I D)
(REPLACE '#(A B C D) '#(I J) :START1 1)
EQUALP-OK: #(A I J D)
(REMOVE 'NUMBERP '#(Y A 4 A C 9 A D 2 3) :COUNT 1 :FROM-END T)
EQUALP-OK: #(Y A 4 A C 9 A D 2 3)
(REMOVE 'A '(A 1 B A 2 A) :START 1)
EQUAL-OK: (A 1 B 2)
(REMOVE-DUPLICATES '(A B C A D A) :START 1)
EQUAL-OK: (A B C D A)
(REMOVE-IF 'NUMBERP '#(Y A 4 A C 9 A D 2 3))
EQUALP-OK: #(Y A A C A D)
(REMOVE-IF-NOT 'NUMBERP '#(Y A 4 A C 9 A D 2 3))
EQUALP-OK: #(4 9 2 3)
(REMOVE-IF-NOT 'NUMBERP '#(Y A 4 A C 9 A D 2 3) :COUNT 2 :FROM-END NIL)
EQUALP-OK: #(4 A C 9 A D 2 3)
(DELETE '(A) '((A B) (C D) (A)) :TEST 'EQUAL)
EQUAL-OK: ((A B) (C D))
(DELETE-IF #'(LAMBDA (X) (EQ (CAR X) 'A)) '((A B) (C D) (A)))
EQUAL-OK: ((C D))
(DELETE-IF-NOT 'NUMBERP '(A 3 B 4))
EQUAL-OK: (3 4)
(NSUBSTITUTE 'NEW '(1 OLD) '((0 OLD) (1 OLD) (2 OLD)) :TEST-NOT 'EQUAL :FROM-END T)
EQUAL-OK: (NEW (1 OLD) NEW)
(NSUBSTITUTE 'NEW 'OLD '(0 OLD 1 OLD 2 OLD) :END 2)
EQUAL-OK: (0 NEW 1 OLD 2 OLD)
(NSUBSTITUTE-IF 'NEW 'NUMBERP '(0 A 1 B 2 C 3 D) :COUNT 2 :END 5)
EQUAL-OK: (NEW A NEW B 2 C 3 D)
(NSUBSTITUTE-IF-NOT 'NEW 'NUMBERP '(0 A 1 B 2 C 3 D) :COUNT 2 :FROM-END T)
EQUAL-OK: (0 A 1 B 2 NEW 3 NEW)
(SUBSTITUTE 'NEW '(2 OLD) '((1 OLD) (2 OLD) (3 OLD) (4 OLD)) :TEST 'EQUAL :START 3)
EQUAL-OK: ((1 OLD) (2 OLD) (3 OLD) (4 OLD))
(SUBSTITUTE-IF 'NEW 'NUMBERP '(A 1 B 2 D 3))
EQUAL-OK: (A NEW B NEW D NEW)
(SUBSTITUTE-IF-NOT 'NEW 'NUMBERP '(A 1 B 2 D 3) :COUNT 2 :FROM-END T)
EQUAL-OK: (A 1 NEW 2 NEW 3)
(FIND '0 '((0 A) (1 A) (2 A) (0 B)) :TEST '= :FROM-END T :KEY 'CAR :START 1)
EQUAL-OK: (0 B)
(FIND-IF 'NUMBERP '((A 0) (B 1) (C 2)) :KEY 'CADR :START 3)
EQL-OK: NIL
(POSITION 'A '((0 A) (1 B) (2 A) (3 B)) :TEST #'(LAMBDA (X Y) (EQ X (CADR Y))) :START 1)
EQL-OK: 2
(POSITION 'A '((0 A) (1 B) (2 A) (3 B)) :KEY 'CADR)
EQL-OK: 0
(POSITION-IF 'NUMBERP '((0 X) (1 7.0) (2 8)) :FROM-END T :START 1 :KEY 'CADR)
EQL-OK: 2
(COUNT '(A) '(A (A) A (A) A B) :TEST-NOT 'EQUAL :KEY #'(LAMBDA (X) (IF (ATOM X) (LIST X))))
EQL-OK: 3
(COUNT-IF-NOT 'NUMBERP '#(A 3 B 5 7 C D) :START 2 :END 5)
EQL-OK: 1
(MISMATCH '(A B C 3 4 5) '(A B X 3 4 B) :START1 1 :START2 5 :END1 2 :TEST-NOT 'EQ)
EQL-OK: 1
(MISMATCH '(A B C 3 4 5) '(U B X 3 4 5) :FROM-END T)
EQL-OK: 3
(SEARCH "ABCD" "0ABIABJBCBC" :END1 3 :START1 1 :START2 0 :FROM-END T)
EQL-OK: 9
(SEARCH '(#\A #\B #\C #\D) "0ABIABJBCBC" :END1 2 :START2 0 :FROM-END T)
EQL-OK: 4
(SEARCH '(A B C D) '(0 A B I A B J B C B C) :END1 2 :START2 2)
EQL-OK: 4
(SORT '((U 3) (I 1) (A 7) (K 3) (C 4) (B 6)) '< :KEY 'CADR)
EQUAL-OK: ((I 1) (U 3) (K 3) (C 4) (B 6) (A 7))
(STABLE-SORT '((B 4) (A 3) (A 2) (B 1) (C 9) (B 2)) 'STRING< :KEY 'CAR)
EQUAL-OK: ((A 3) (A 2) (B 4) (B 1) (B 2) (C 9))
(MERGE 'LIST '(5 1 4 4 7) '(2 3 5 6 8 9) '<)
EQUAL-OK: (2 3 5 1 4 4 5 6 7 8 9)
(MERGE 'LIST '(1 4 4 7) '(2 3 5 6 8 9) '<)
EQUAL-OK: (1 2 3 4 4 5 6 7 8 9)
(CAR '(A B C D E F G))
EQL-OK: A
(CDR '(A B C D E F G))
EQUAL-OK: (B C D E F G)
(CADR '(A B C D E F G))
EQL-OK: B
(CDDR '(A B C D E F G))
EQUAL-OK: (C D E F G)
(CADDR '(A B C D E F G))
EQL-OK: C
(CDDDR '(A B C D E F G))
EQUAL-OK: (D E F G)
(CADDDR '(A B C D E F G))
EQL-OK: D
(CDDDDR '(A B C D E F G))
EQUAL-OK: (E F G)
(CAADR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: ((U V W) X)
(CADAR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: (6 7)
(CDAAR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: (5)
(CDADR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: (Y)
(CDDAR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQL-OK: NIL
(CAAAAR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: (1 2 3)
(CAADAR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQL-OK: 6
(CAADDR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: (Q W E)
(CADAAR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQL-OK: 5
(CADADR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQL-OK: Y
(CADDAR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQL-OK: NIL
(CADDDR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: (A B C)
(CDAAAR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: (4)
(CDAADR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: (X)
(CDADAR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: (7)
(CONS 1 2)
EQUAL-OK: (1 . 2)
(CONS 'A (CONS 'B (CONS 'C 'NIL)))
EQUAL-OK: (A B C)
(CONS 'A '(B C D))
EQUAL-OK: (A B C D)
(TREE-EQUAL 5 (+ 2 3) :TEST #'EQL)
EQL-OK: T
(ENDP 'NIL)
EQL-OK: T
(ENDP '(A . B))
EQL-OK: NIL
(LIST-LENGTH '(A B C D))
EQL-OK: 4
(LET ((X (LIST 'A 'B 'C))) (RPLACD (LAST X) X) (LIST-LENGTH X))
EQL-OK: NIL
(NTH 0 '(A B C D))
EQL-OK: A
(FIRST '(1 2 3 4 5 6 7 8 9 10 11))
EQL-OK: 1
(SECOND '(1 2 3 4 5 6 7 8 9 10 11))
EQL-OK: 2
(THIRD '(1 2 3 4 5 6 7 8 9 10 11))
EQL-OK: 3
(FOURTH '(1 2 3 4 5 6 7 8 9 10 11))
EQL-OK: 4
(FIFTH '(1 2 3 4 5 6 7 8 9 10 11))
EQL-OK: 5
(SIXTH '(1 2 3 4 5 6 7 8 9 10 11))
EQL-OK: 6
(SEVENTH '(1 2 3 4 5 6 7 8 9 10 11))
EQL-OK: 7
(EIGHTH '(1 2 3 4 5 6 7 8 9 10 11))
EQL-OK: 8
(NINTH '(1 2 3 4 5 6 7 8 9 10 11))
EQL-OK: 9
(TENTH '(1 2 3 4 5 6 7 8 9 10 11))
EQL-OK: 10
(REST '(A . B))
EQL-OK: B
(NTHCDR 1 '(A B C D))
EQUAL-OK: (B C D)
(LAST '(1 2 3 4 5))
EQUAL-OK: (5)
(LAST '(1 2 3 . 4))
EQUAL-OK: (3 . 4)
(LIST 'A 'B 'C 'D)
EQUAL-OK: (A B C D)
(LIST* 'A 'B 'C 'D)
EQUAL-OK: (A B C . D)
(MAKE-LIST 4 :INITIAL-ELEMENT 'O)
EQUAL-OK: (O O O O)
(MAKE-LIST 3 :INITIAL-ELEMENT 'RAH)
EQUAL-OK: (RAH RAH RAH)
(APPEND '(A B C) '(D E F) 'NIL '(G))
EQUAL-OK: (A B C D E F G)
(COPY-LIST '(1 2 3 4 5))
EQUAL-OK: (1 2 3 4 5)
(COPY-LIST '(1 2 3 . 4))
EQUAL-OK: (1 2 3 . 4)
(COPY-ALIST '(A B))
EQUAL-OK: (A B)
(COPY-ALIST '((1 . A) (2 . B) (3 . C)))
EQUAL-OK: ((1 . A) (2 . B) (3 . C))
(COPY-ALIST '((A B) C (D E)))
EQUAL-OK: ((A B) C (D E))
(COPY-TREE '(A B (C (D) (E F)) G))
EQUAL-OK: (A B (C (D) (E F)) G)
(REVAPPEND '(A B C) '(D E F))
EQUAL-OK: (C B A D E F)
(REVAPPEND '(A B C) 'I)
EQUAL-OK: (C B A . I)
(NRECONC '(A B C) '(I J))
EQUAL-OK: (C B A I J)
(SETQ AA NIL)
EQL-OK: NIL
(PUSH '1 AA)
EQUAL-OK: (1)
(PUSH '2 AA)
EQUAL-OK: (2 1)
(POP AA)
EQL-OK: 2
(POP AA)
EQL-OK: 1
(POP AA)
EQL-OK: NIL
(SETQ AA '(B A))
EQUAL-OK: (B A)
(PUSHNEW 'A AA)
EQUAL-OK: (B A)
(PUSHNEW 'C AA)
EQUAL-OK: (C B A)
(PUSHNEW 'U (CAR (SETQ XX '(NIL KKK))))
EQUAL-OK: (U)
(PUSHNEW 'U (CAR XX))
EQUAL-OK: (U)
(PUSHNEW 'V (CAR XX))
EQUAL-OK: (V U)
(EVAL 'XX)
EQUAL-OK: ((V U) KKK)
(BUTLAST '(A B C) 2)
EQUAL-OK: (A)
(NBUTLAST '(A B C D) 6)
EQL-OK: NIL
(NBUTLAST '(A B C D) 1)
EQUAL-OK: (A B C)
(LDIFF (SETQ XX '(A B C D E)) (CDDR XX))
EQUAL-OK: (A B)
(LDIFF (SETQ XX '(A B C D . E)) (CDDR XX))
EQUAL-OK: (A B)
(LDIFF '(A B C D . E) 'E)
EQUAL-OK: (A B C D)
(LDIFF '(1 . 2) 3)
EQUAL-OK: (1 . 2)
(LET ((LISTS '#((A B C) (A B C . D))) (LD-RES #(#(NIL (A B) (A B C) (A B C) (A B C) (A B C) (A B C)) #(NIL (A B) (A B C . D) (A B C . D) (A B C . D) (A B C) (A B C . D)))) (TP-RES #(#(T T NIL NIL T NIL NIL) #(T T NIL NIL NIL T NIL)))) (DOTIMES (I (LENGTH LISTS)) (LET* ((LIST (AREF LISTS I)) (L-R (AREF LD-RES I)) (T-R (AREF TP-RES I)) (OBJECTS (VECTOR LIST (CDDR LIST) (COPY-LIST (CDDR LIST)) '(F G H) 'NIL 'D 'X))) (DOTIMES (J (LENGTH OBJECTS)) (LET ((OBJECT (AREF OBJECTS J))) (UNLESS (EQUAL (TAILP OBJECT LIST) (AREF T-R J)) (ERROR "(tailp ~s ~s): ~s; should be: ~s" OBJECT LIST (TAILP OBJECT LIST) (AREF T-R J))) (UNLESS (EQUAL (LDIFF LIST OBJECT) (AREF L-R J)) (ERROR "(ldiff ~s ~s): ~s; should be: ~s" LIST OBJECT (LDIFF LIST OBJECT) (AREF L-R J))))))))
EQL-OK: NIL
(TAILP 10203040506070 (LIST* 'A 'B (1- 10203040506071)))
EQL-OK: T
(NSUBST 'A 'B '(U B (B) C) :TEST-NOT #'(LAMBDA (X Y) (NOT (EQL X Y))))
EQUAL-OK: (U A (A) C)
(NSUBST-IF 'OO 'NUMBERP '(A B C (3 (4) 0)))
EQUAL-OK: (A B C (OO (OO) OO))
(NSUBST-IF-NOT 'OO #'(LAMBDA (X) (OR (LIST X) (SYMBOLP X))) '(A B C (3 (4) 0)))
EQUAL-OK: (A B C (3 (4) 0))
(SUBST 'A 'B '(U B (B) C) :TEST-NOT #'(LAMBDA (X Y) (NOT (EQL X Y))) :KEY #'(LAMBDA (U) (IF (LISTP U) (CAR U))))
EQUAL-OK: (U . A)
(SUBST-IF 'NUMMMER 'NUMBERP '((A (7 (V 6)))))
EQUAL-OK: ((A (NUMMMER (V NUMMMER))))
(SUBST-IF-NOT 'NUMMMER #'(LAMBDA (X) (OR (LISTP X) (NUMBERP X))) '((A (7 (V 6)))))
EQUAL-OK: ((NUMMMER (7 (NUMMMER 6))))
(NSUBLIS '(((A) . UU) (A . II)) '(I (A) A) :TEST #'(LAMBDA (X Y) (IF (LISTP Y) (EQL X (CAR Y)))))
EQUAL-OK: (I (UU) UU)
(SUBLIS '(((A) . UU) (A . II)) '(I (A) A) :TEST #'(LAMBDA (X Y) (IF (LISTP Y) (EQL X (CAR Y)))))
EQUAL-OK: (I (UU) UU)
(MEMBER 'A '((A) (B) (A) (C)) :KEY 'CAR)
EQUAL-OK: ((A) (B) (A) (C))
(MEMBER-IF 'NUMBERP '((A) (B) (3) (C)) :KEY 'CAR)
EQUAL-OK: ((3) (C))
(MEMBER-IF-NOT 'NUMBERP '((8) (A) (B) (3) (C)) :KEY 'CAR)
EQUAL-OK: ((A) (B) (3) (C))
(TAILP (CDDR (SETQ XX '(U I A B))) XX)
EQL-OK: T
(TAILP 'D '(A B C . D))
EQL-OK: T
(ADJOIN 'A '((A) B C) :TEST 'EQUAL)
EQUAL-OK: (A (A) B C)
(NUNION '(A B C D) '(U I B A))
EQUAL-OK: (C D U I B A)
(UNION '(A B C D) '(A D I V))
EQUAL-OK: (B C A D I V)
(INTERSECTION '((A 1) (A 2) (A 3)) '((A 4) (A 2) (B 6) (C 7)) :TEST 'EQUAL)
EQUAL-OK: ((A 2))
(NINTERSECTION '(A B C D) '(C D E F G) :TEST-NOT 'EQL)
EQUAL-OK: (A B C D)
(NSET-DIFFERENCE '(A B C D) '(I J C))
EQUAL-OK: (A B D)
(NSET-EXCLUSIVE-OR '(A B C) '(I A D C))
EQUAL-OK: (B I D)
(SET-DIFFERENCE '(ANTON BERTA AUTO BERLIN) '(AMERILLA) :TEST #'(LAMBDA (X Y) (EQL (ELT (SYMBOL-NAME X) 0) (ELT (SYMBOL-NAME Y) 0))))
EQUAL-OK: (BERTA BERLIN)
(SET-EXCLUSIVE-OR '(ANTON ANNA EMIL) '(BERTA AUTO AUGUST) :TEST #'(LAMBDA (X Y) (EQL (ELT (SYMBOL-NAME X) 0) (ELT (SYMBOL-NAME Y) 0))))
EQUAL-OK: (EMIL BERTA)
(SUBSETP '(A B) '(B A U I C D))
EQL-OK: T
(ACONS 'A 'B '((C . D)))
EQUAL-OK: ((A . B) (C . D))
(ACONS 'A 'B NIL)
EQUAL-OK: ((A . B))
(ASSOC 'A '((B C) A ((A) U) (A I)) :TEST-NOT #'(LAMBDA (X Y) (IF (ATOM Y) (EQL Y X))))
EQUAL-OK: (B C)
(ASSOC-IF 'SYMBOLP '((A . 3) (3 . A)))
EQUAL-OK: (A . 3)
(ASSOC-IF-NOT 'NUMBERP '((A . 3) (3 . A)))
EQUAL-OK: (A . 3)
(PAIRLIS '(A B C) '(1 2 3))
EQUAL-OK: ((C . 3) (B . 2) (A . 1))
(RASSOC 'A '((1 . B) (2 . A)))
EQUAL-OK: (2 . A)
(RASSOC-IF 'SYMBOLP '((1 . 3) (2 . A)))
EQUAL-OK: (2 . A)
(RASSOC-IF-NOT 'SYMBOLP '((1 . 3) (2 . A)))
EQUAL-OK: (1 . 3)
(HASH-TABLE-P (MAKE-HASH-TABLE :TEST #'EQL :REHASH-SIZE 2 :SIZE 20))
EQL-OK: T
(HASH-TABLE-P (MAKE-HASH-TABLE :TEST #'EQL :REHASH-SIZE 1.1 :SIZE 20))
EQL-OK: T
(DEFUN TEST-HASH-TABLE-ITERATOR (HASH-TABLE) (LET ((ALL-ENTRIES 'NIL) (GENERATED-ENTRIES 'NIL) (UNIQUE (LIST NIL))) (MAPHASH #'(LAMBDA (KEY VALUE) (PUSH (LIST KEY VALUE) ALL-ENTRIES)) HASH-TABLE) (WITH-HASH-TABLE-ITERATOR (GENERATOR-FN HASH-TABLE) (LOOP (MULTIPLE-VALUE-BIND (MORE? KEY VALUE) (GENERATOR-FN) (UNLESS MORE? (RETURN)) (UNLESS (EQL VALUE (GETHASH KEY HASH-TABLE UNIQUE)) (ERROR "Key ~S not found for value ~S" KEY VALUE)) (PUSH (LIST KEY VALUE) GENERATED-ENTRIES)))) (UNLESS (= (LENGTH ALL-ENTRIES) (LENGTH GENERATED-ENTRIES) (LENGTH (UNION ALL-ENTRIES GENERATED-ENTRIES :KEY #'CAR :TEST (HASH-TABLE-TEST HASH-TABLE)))) (ERROR "Generated entries and Maphash entries don't correspond")) T))
EQL-OK: TEST-HASH-TABLE-ITERATOR
(LET ((TAB (MAKE-HASH-TABLE :TEST #'EQUAL))) (SETF (GETHASH "Richard" TAB) "Gabriel") (SETF (GETHASH "Bruno" TAB) "Haible") (SETF (GETHASH "Michael" TAB) "Stoll") (SETF (GETHASH "Linus" TAB) "Torvalds") (SETF (GETHASH "Richard" TAB) "Stallman") (TEST-HASH-TABLE-ITERATOR TAB))
EQL-OK: T
(GETHASH "foo" (READ-FROM-STRING (PRIN1-TO-STRING (MAKE-HASH-TABLE :TEST 'EQUALP :INITIAL-CONTENTS '(("FOO" . "bar"))))))
EQUAL-OK: "bar"
(DEFSTRUCT (ICE-CREAM-FACTORY (:CONSTRUCTOR MAKE-FACTORY) (:CONSTRUCTOR FABRICATE-FACTORY (&KEY (CAPACITY 5) LOCATION (LOCAL-FLAVORS (CASE LOCATION ((HAWAII) '(PINEAPPLE MACADAMIA GUAVA)) ((MASSACHUSETTS) '(LOBSTER BAKED-BEAN)) ((CALIFORNIA) '(GINGER LOTUS AVOCADO BEAN-SPROUT GARLIC)) ((TEXAS) '(JALAPENO BARBECUE)))) (FLAVORS (SUBSEQ (APPEND LOCAL-FLAVORS '(VANILLA CHOCOLATE STRAWBERRY PISTACHIO MAPLE-WALNUT PEPPERMINT)) 0 CAPACITY)) ((:OWN OWNER))))) (CAPACITY 3) (FLAVORS '(VANILLA CHOCOLATE STRAWBERRY MANGO)) (OWNER 'ME))
EQL-OK: ICE-CREAM-FACTORY
(LET ((HOUSTON (FABRICATE-FACTORY :CAPACITY 4 :LOCATION 'TEXAS))) (ICE-CREAM-FACTORY-FLAVORS HOUSTON))
EQUAL-OK: (JALAPENO BARBECUE VANILLA CHOCOLATE)
(LET ((CAMBRIDGE (FABRICATE-FACTORY :LOCATION 'MASSACHUSETTS))) (ICE-CREAM-FACTORY-FLAVORS CAMBRIDGE))
EQUAL-OK: (LOBSTER BAKED-BEAN VANILLA CHOCOLATE STRAWBERRY)
(LET ((SEATTLE (FABRICATE-FACTORY :LOCAL-FLAVORS '(SALMON)))) (ICE-CREAM-FACTORY-FLAVORS SEATTLE))
EQUAL-OK: (SALMON VANILLA CHOCOLATE STRAWBERRY PISTACHIO)
(LET ((WHEATON (FABRICATE-FACTORY :CAPACITY 4 :LOCATION 'ILLINOIS))) (ICE-CREAM-FACTORY-FLAVORS WHEATON))
EQUAL-OK: (VANILLA CHOCOLATE STRAWBERRY PISTACHIO)
(LET ((PITTSBURGH (FABRICATE-FACTORY :CAPACITY 4))) (ICE-CREAM-FACTORY-FLAVORS PITTSBURGH))
EQUAL-OK: (VANILLA CHOCOLATE STRAWBERRY PISTACHIO)
(LET ((CLEVELAND (MAKE-FACTORY :CAPACITY 4))) (ICE-CREAM-FACTORY-FLAVORS CLEVELAND))
EQUAL-OK: (VANILLA CHOCOLATE STRAWBERRY MANGO)
(PROGN (DEFVAR *X* 'GLOBAL-X) (LET ((Y 'LOCAL-Y)) (DEFSTRUCT BAZ (*X* 'X-INIT) (Y *X*) (Z Y))))
EQL-OK: BAZ
(MAKE-BAZ)
EQUALP-OK: #S(BAZ :*X* X-INIT :Y GLOBAL-X :Z LOCAL-Y)
(CONSTANTP -5)
EQL-OK: T
(CONSTANTP (READ-FROM-STRING "1.0e30"))
EQL-OK: T
(STREAMP *STANDARD-INPUT*)
EQL-OK: T
(INPUT-STREAM-P *TERMINAL-IO*)
EQL-OK: T
(READTABLEP *READTABLE*)
EQL-OK: T
(READTABLEP 'PROGN)
EQL-OK: NIL
(GET-DISPATCH-MACRO-CHARACTER #\# #\0)
EQL-OK: NIL
(SYSTEM::FIXNUMP 10)
EQL-OK: T
(MODULE-INFO "clisp" T)
EQUAL-OK: "clisp"
(UNINTERN 'X)
EQL-OK: T
RUN-TEST: finished "alltest" (0 errors out of 631 tests)
RUN-TEST: started #<INPUT BUFFERED FILE-STREAM CHARACTER #P"array.tst" @1>
(FORMAT T "~%double-float arrays~%")

double-float arrays
EQL-OK: NIL
(EQUALP (SETQ DA1 (MAKE-ARRAY '(4 2 3) :INITIAL-CONTENTS '(((1.0d0 2.0d0 3.0d0) (4.0d0 5.0d0 6.0d0)) ((7.0d0 8.0d0 9.0d0) (10.0d0 11.0d0 12.0d0)) ((13.0d0 14.0d0 15.0d0) (16.0d0 17.0d0 18.0d0)) ((19.0d0 20.0d0 21.0d0) (22.0d0 23.0d0 24.0d0))) :ELEMENT-TYPE 'DOUBLE-FLOAT)) '#3A(((1.0d0 2.0d0 3.0d0) (4.0d0 5.0d0 6.0d0)) ((7.0d0 8.0d0 9.0d0) (10.0d0 11.0d0 12.0d0)) ((13.0d0 14.0d0 15.0d0) (16.0d0 17.0d0 18.0d0)) ((19.0d0 20.0d0 21.0d0) (22.0d0 23.0d0 24.0d0))))
EQL-OK: T
(AREF DA1 0 0 0)
EQL-OK: 1.0d0
(AREF DA1 0 0 1)
EQL-OK: 2.0d0
(AREF DA1 0 0 2)
EQL-OK: 3.0d0
(AREF DA1 0 1 0)
EQL-OK: 4.0d0
(AREF DA1 0 1 1)
EQL-OK: 5.0d0
(AREF DA1 0 1 2)
EQL-OK: 6.0d0
(AREF DA1 1 0 0)
EQL-OK: 7.0d0
(AREF DA1 1 0 1)
EQL-OK: 8.0d0
(AREF DA1 1 0 2)
EQL-OK: 9.0d0
(AREF DA1 1 1 0)
EQL-OK: 10.0d0
(AREF DA1 1 1 1)
EQL-OK: 11.0d0
(AREF DA1 1 1 2)
EQL-OK: 12.0d0
(AREF DA1 2 0 0)
EQL-OK: 13.0d0
(AREF DA1 2 0 1)
EQL-OK: 14.0d0
(AREF DA1 2 0 2)
EQL-OK: 15.0d0
(AREF DA1 2 1 0)
EQL-OK: 16.0d0
(AREF DA1 2 1 1)
EQL-OK: 17.0d0
(AREF DA1 2 1 2)
EQL-OK: 18.0d0
(AREF DA1 3 0 0)
EQL-OK: 19.0d0
(AREF DA1 3 0 1)
EQL-OK: 20.0d0
(AREF DA1 3 0 2)
EQL-OK: 21.0d0
(AREF DA1 3 1 0)
EQL-OK: 22.0d0
(AREF DA1 3 1 1)
EQL-OK: 23.0d0
(AREF DA1 3 1 1)
EQL-OK: 23.0d0
(FORMAT T "~%single-float arrays~%")

single-float arrays
EQL-OK: NIL
(EQUALP (SETQ FA1 (MAKE-ARRAY '(4 2 3) :INITIAL-CONTENTS '(((1.0 2.0 3.0) (4.0 5.0 6.0)) ((7.0 8.0 9.0) (10.0 11.0 12.0)) ((13.0 14.0 15.0) (16.0 17.0 18.0)) ((19.0 20.0 21.0) (22.0 23.0 24.0))) :ELEMENT-TYPE 'SINGLE-FLOAT)) '#3A(((1.0 2.0 3.0) (4.0 5.0 6.0)) ((7.0 8.0 9.0) (10.0 11.0 12.0)) ((13.0 14.0 15.0) (16.0 17.0 18.0)) ((19.0 20.0 21.0) (22.0 23.0 24.0))))
EQL-OK: T
(AREF FA1 0 0 0)
EQL-OK: 1.0
(AREF FA1 0 0 1)
EQL-OK: 2.0
(AREF FA1 0 0 2)
EQL-OK: 3.0
(AREF FA1 0 1 0)
EQL-OK: 4.0
(AREF FA1 0 1 1)
EQL-OK: 5.0
(AREF FA1 0 1 2)
EQL-OK: 6.0
(AREF FA1 1 0 0)
EQL-OK: 7.0
(AREF FA1 1 0 1)
EQL-OK: 8.0
(AREF FA1 1 0 2)
EQL-OK: 9.0
(AREF FA1 1 1 0)
EQL-OK: 10.0
(AREF FA1 1 1 1)
EQL-OK: 11.0
(AREF FA1 1 1 2)
EQL-OK: 12.0
(AREF FA1 2 0 0)
EQL-OK: 13.0
(AREF FA1 2 0 1)
EQL-OK: 14.0
(AREF FA1 2 0 2)
EQL-OK: 15.0
(AREF FA1 2 1 0)
EQL-OK: 16.0
(AREF FA1 2 1 1)
EQL-OK: 17.0
(AREF FA1 2 1 2)
EQL-OK: 18.0
(AREF FA1 3 0 0)
EQL-OK: 19.0
(AREF FA1 3 0 1)
EQL-OK: 20.0
(AREF FA1 3 0 2)
EQL-OK: 21.0
(AREF FA1 3 1 0)
EQL-OK: 22.0
(AREF FA1 3 1 1)
EQL-OK: 23.0
(AREF FA1 3 1 1)
EQL-OK: 23.0
(FORMAT T "~%array limits~%")

array limits
EQL-OK: NIL
(LET ((S (PRIN1-TO-STRING ARRAY-RANK-LIMIT))) (OR (EQUAL S "4294967296") (EQUAL S "65536") (EQUAL S (PRIN1-TO-STRING LAMBDA-PARAMETERS-LIMIT))))
EQL-OK: T
(LET ((S (PRIN1-TO-STRING ARRAY-DIMENSION-LIMIT))) (OR (EQUAL S "4294967296") (EQUAL S (PRIN1-TO-STRING MOST-POSITIVE-FIXNUM))))
EQL-OK: T
(LET ((S (PRIN1-TO-STRING ARRAY-TOTAL-SIZE-LIMIT))) (OR (EQUAL S "4294967296") (EQUAL S (PRIN1-TO-STRING MOST-POSITIVE-FIXNUM))))
EQL-OK: T
(<= ARRAY-DIMENSION-LIMIT ARRAY-TOTAL-SIZE-LIMIT)
EQL-OK: T
(FORMAT T "~%simple vectors~%")

simple vectors
EQL-OK: NIL
(EQUALP (SETQ SV (VECTOR 'A 'B 'C 1.0s0 3.7d0 4.1)) '#(A B C 1.0s0 3.7d0 4.1))
EQL-OK: T
(SVREF SV 0)
EQL-OK: A
(SVREF SV 1)
EQL-OK: B
(SVREF SV 2)
EQL-OK: C
(SVREF SV 3)
EQL-OK: 1.0s0
(SVREF SV 4)
EQL-OK: 3.7d0
(FORMAT T "~%set elements~%")

set elements
EQL-OK: NIL
(SETF (SVREF SV 0) 'TEST)
EQL-OK: TEST
(EQUALP SV '#(TEST B C 1.0s0 3.7d0 4.1))
EQL-OK: T
(FORMAT T "~%test array-element-type~%")

test array-element-type
EQL-OK: NIL
(ARRAY-ELEMENT-TYPE SV)
EQL-OK: T
(ARRAY-ELEMENT-TYPE DA1)
EQL-OK: T
(FORMAT T "~%test rank~%")

test rank
EQL-OK: NIL
(ARRAY-RANK DA1)
EQL-OK: 3
(ARRAY-RANK FA1)
EQL-OK: 3
(FORMAT T "~%test individual dimensions~%")

test individual dimensions
EQL-OK: NIL
(ARRAY-DIMENSION DA1 0)
EQL-OK: 4
(ARRAY-DIMENSION DA1 1)
EQL-OK: 2
(ARRAY-DIMENSION DA1 2)
EQL-OK: 3
(ARRAY-DIMENSION DA1 3)
[SIMPLE-TYPE-ERROR]: ARRAY-DIMENSION: 3 is not an nonnegative integer less than the rank of #3A(((1.0d0 2.0d0 3.0d0) (4.0d0 5.0d0 6.0d0)) ((7.0d0 8.0d0 9.0d0) (10.0d0 11.0d0 12.0d0)) ((13.0d0 14.0d0 15.0d0) (16.0d0 17.0d0 18.0d0)) ((19.0d0 20.0d0 21.0d0) (22.0d0 23.0d0 24.0d0)))

EQL-OK: ERROR
(FORMAT T "~%0-dim. array pseudo-scalar with contents mod 5~%")

0-dim. array pseudo-scalar with contents mod 5
EQL-OK: NIL
(PROGN (SETQ ZERO (MAKE-ARRAY 'NIL :ELEMENT-TYPE '(MOD 5))) T)
EQL-OK: T
(ARRAY-RANK ZERO)
EQL-OK: 0
(SETF (AREF ZERO) 4)
EQL-OK: 4
(SETF (AREF ZERO) 1.0)
[SIMPLE-TYPE-ERROR]: SYSTEM::STORE: 1.0 does not fit into #0A4, bad type

EQL-OK: ERROR
(FORMAT T "~%3-dim general array~%")

3-dim general array
EQL-OK: NIL
(EQUALP (SETQ A1 (MAKE-ARRAY '(4 2 3) :INITIAL-CONTENTS '(((A B C) (1 2 3)) ((D E F) (3 1 2)) ((G H I) (2 3 1)) ((J K L) (0 0 0))))) '#3A(((A B C) (1 2 3)) ((D E F) (3 1 2)) ((G H I) (2 3 1)) ((J K L) (0 0 0))))
EQL-OK: T
(AREF A1 0 0 0)
EQL-OK: A
(AREF A1 0 0 1)
EQL-OK: B
(AREF A1 0 0 2)
EQL-OK: C
(AREF A1 0 1 0)
EQL-OK: 1
(AREF A1 0 1 1)
EQL-OK: 2
(AREF A1 0 1 2)
EQL-OK: 3
(AREF A1 1 0 0)
EQL-OK: D
(AREF A1 1 0 1)
EQL-OK: E
(AREF A1 1 0 2)
EQL-OK: F
(AREF A1 1 1 0)
EQL-OK: 3
(AREF A1 1 1 1)
EQL-OK: 1
(AREF A1 1 1 2)
EQL-OK: 2
(AREF A1 2 0 0)
EQL-OK: G
(AREF A1 2 0 1)
EQL-OK: H
(AREF A1 2 0 2)
EQL-OK: I
(AREF A1 2 1 0)
EQL-OK: 2
(AREF A1 2 1 1)
EQL-OK: 3
(AREF A1 2 1 2)
EQL-OK: 1
(AREF A1 3 0 0)
EQL-OK: J
(AREF A1 3 0 1)
EQL-OK: K
(AREF A1 3 0 2)
EQL-OK: L
(AREF A1 3 1 0)
EQL-OK: 0
(AREF A1 3 1 1)
EQL-OK: 0
(AREF A1 3 1 1)
EQL-OK: 0
(FORMAT T "~%2-dim adjustable displaced array~%")

2-dim adjustable displaced array
EQL-OK: NIL
(PROGN (SETQ M (MAKE-ARRAY '(4 4) :ADJUSTABLE T :INITIAL-CONTENTS '((ALPHA BETA GAMMA DELTA) (EPSILON ZETA ETA THETA) (IOTA KAPPA LAMBDA MU) (NU XI OMICRON PI)))) T)
EQL-OK: T
(AREF M 0 0)
EQL-OK: ALPHA
(AREF M 0 1)
EQL-OK: BETA
(AREF M 0 2)
EQL-OK: GAMMA
(AREF M 0 3)
EQL-OK: DELTA
(AREF M 1 0)
EQL-OK: EPSILON
(AREF M 1 1)
EQL-OK: ZETA
(AREF M 1 2)
EQL-OK: ETA
(AREF M 1 3)
EQL-OK: THETA
(AREF M 2 0)
EQL-OK: IOTA
(AREF M 2 1)
EQL-OK: KAPPA
(AREF M 2 2)
EQL-OK: LAMBDA
(AREF M 2 3)
EQL-OK: MU
(AREF M 3 0)
EQL-OK: NU
(AREF M 3 1)
EQL-OK: XI
(AREF M 3 2)
EQL-OK: OMICRON
(AREF M 3 3)
EQL-OK: PI
(FORMAT T "~%sisplaced~%")

sisplaced
EQL-OK: NIL
(EQUALP (SETQ MD0 (MAKE-ARRAY 4 :DISPLACED-TO M)) '#(ALPHA BETA GAMMA DELTA))
EQL-OK: T
(EQUALP (SETQ MD1 (MAKE-ARRAY 4 :DISPLACED-TO M :DISPLACED-INDEX-OFFSET 4)) '#(EPSILON ZETA ETA THETA))
EQL-OK: T
(EQUALP (SETQ MD2 (MAKE-ARRAY 4 :DISPLACED-TO M :DISPLACED-INDEX-OFFSET 8)) '#(IOTA KAPPA LAMBDA MU))
EQL-OK: T
(FORMAT T "~%adjust m~%")

adjust m
EQL-OK: NIL
(PROGN (ADJUST-ARRAY M '(3 5) :INITIAL-ELEMENT 'BAZ) T)
EQL-OK: T
(AREF M 0 0)
EQL-OK: ALPHA
(AREF M 0 1)
EQL-OK: BETA
(AREF M 0 2)
EQL-OK: GAMMA
(AREF M 0 3)
EQL-OK: DELTA
(AREF M 0 4)
EQL-OK: BAZ
(AREF M 1 0)
EQL-OK: EPSILON
(AREF M 1 1)
EQL-OK: ZETA
(AREF M 1 2)
EQL-OK: ETA
(AREF M 1 3)
EQL-OK: THETA
(AREF M 1 4)
EQL-OK: BAZ
(AREF M 2 0)
EQL-OK: IOTA
(AREF M 2 1)
EQL-OK: KAPPA
(AREF M 2 2)
EQL-OK: LAMBDA
(FORMAT T "~%Test interaction of the keywords~%")

Test interaction of the keywords
EQL-OK: NIL
(PROGN (SETQ DV (MAKE-ARRAY 10 :ELEMENT-TYPE 'DOUBLE-FLOAT :INITIAL-CONTENTS '(0.0d0 1.0d0 2.0d0 3.0d0 4.0d0 5.0d0 6.0d0 7.0d0 8.0d0 9.0d0))) T)
EQL-OK: T
(AREF DV 0)
EQL-OK: 0.0d0
(AREF DV 1)
EQL-OK: 1.0d0
(AREF DV 2)
EQL-OK: 2.0d0
(AREF DV 3)
EQL-OK: 3.0d0
(AREF DV 4)
EQL-OK: 4.0d0
(AREF DV 5)
EQL-OK: 5.0d0
(AREF DV 6)
EQL-OK: 6.0d0
(AREF DV 7)
EQL-OK: 7.0d0
(AREF DV 8)
EQL-OK: 8.0d0
(AREF DV 9)
EQL-OK: 9.0d0
(SETF (AREF DV 5) -5.0d0)
EQL-OK: -5.0d0
(FORMAT T "~%test indeces~%")

test indeces
EQL-OK: NIL
(DEFUN ARRAY-INDEX-TEST (A &REST SUBS) (UNLESS (APPLY #'ARRAY-IN-BOUNDS-P A SUBS) (RETURN-FROM ARRAY-INDEX-TEST 'ERROR)) (= (APPLY #'ARRAY-ROW-MAJOR-INDEX A SUBS) (APPLY #'+ (MAPLIST #'(LAMBDA (X Y) (* (CAR X) (APPLY #'* (CDR Y)))) SUBS (ARRAY-DIMENSIONS A)))))
EQL-OK: ARRAY-INDEX-TEST
(ARRAY-INDEX-TEST (MAKE-ARRAY '(5 4 3 2 1)) 4 2 2 1 0)
EQL-OK: T
(ARRAY-INDEX-TEST (MAKE-ARRAY '(5 4 3 2 1)) 3 4 2 1 2)
EQL-OK: ERROR
(FORMAT T "~%bitvectors~%")

bitvectors
EQL-OK: NIL
(SETQ BVZERO (MAKE-ARRAY 100 :ELEMENT-TYPE 'BIT :INITIAL-ELEMENT 0))
EQUAL-OK: #*0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
(SETQ BVONE (MAKE-ARRAY 100 :ELEMENT-TYPE 'BIT :INITIAL-ELEMENT 1))
EQUAL-OK: #*1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
(SETQ BV3 (MAKE-ARRAY 100 :ELEMENT-TYPE 'BIT :INITIAL-ELEMENT 0))
EQUAL-OK: #*0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
(SETQ BV2 (MAKE-ARRAY 100 :ELEMENT-TYPE 'BIT :INITIAL-ELEMENT 0))
EQUAL-OK: #*0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
(SETQ BV1 (MAKE-ARRAY 100 :ELEMENT-TYPE 'BIT :INITIAL-ELEMENT 0))
EQUAL-OK: #*0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
(FORMAT T "~%set bitvectors~%")

set bitvectors
EQL-OK: NIL
(DOTIMES (I 50 BV1) (SETF (SBIT BV1 (* I 2)) 1))
EQUAL-OK: #*1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010
(DOTIMES (I 50 BV2) (SETF (BIT BV2 (* I 2)) 1))
EQUAL-OK: #*1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010
(EQUALP BV1 BV2)
EQL-OK: T
(DOTIMES (I 25 BV3) (SETF (SBIT BV3 (* I 4)) 1))
EQUAL-OK: #*1000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000
(BIT-AND BV1 BV3)
EQUAL-OK: #*1000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000
(BIT-IOR BV1 BV3)
EQUAL-OK: #*1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010
(BIT-XOR BV1 BV3)
EQUAL-OK: #*0010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010
(BIT-EQV BV1 BV3)
EQUAL-OK: #*1101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101
(BIT-NAND BV1 BV3)
EQUAL-OK: #*0111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111
(BIT-ANDC1 BV1 BV3)
EQUAL-OK: #*0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
(BIT-ANDC2 BV1 BV3)
EQUAL-OK: #*0010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010
(BIT-ORC1 BV1 BV3)
EQUAL-OK: #*1101110111011101110111011101110111011101110111011101110111011101110111011101110111011101110111011101
(BIT-ORC2 BV1 BV3)
EQUAL-OK: #*1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
(BIT-NOT BV1)
EQUAL-OK: #*0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101
(BIT-NOT BVZERO)
EQUAL-OK: #*1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
(BIT-NOT BVONE)
EQUAL-OK: #*0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
(LET* ((S1 (MAKE-ARRAY NIL :INITIAL-ELEMENT 0 :ELEMENT-TYPE 'BIT)) (S2 (MAKE-ARRAY NIL :INITIAL-ELEMENT 1 :ELEMENT-TYPE 'BIT))) (LIST (BIT-XOR S1 S2) S1 S2))
EQUALP-OK: (#0A1 #0A0 #0A1)
(LET* ((A1 (MAKE-ARRAY '(2 2) :ELEMENT-TYPE 'BIT :INITIAL-CONTENTS '((0 1) (0 1)))) (A2 (MAKE-ARRAY '(2 2) :ELEMENT-TYPE 'BIT :INITIAL-CONTENTS '((0 0) (1 1)))) (RESULT (BIT-AND A1 A2))) (LIST A1 A2 RESULT))
EQUALP-OK: (#2A((0 1) (0 1)) #2A((0 0) (1 1)) #2A((0 0) (0 1)))
(FORMAT T "~%test operations with fill-pointer~%")

test operations with fill-pointer
EQL-OK: NIL
(MAKE-ARRAY '(3 4 5) :FILL-POINTER T)
[SIMPLE-ERROR]: MAKE-ARRAY: :FILL-POINTER may not be specified for an array of rank 3

EQL-OK: ERROR
(EQUALP (MAKE-ARRAY 5 :FILL-POINTER 5) '#(NIL NIL NIL NIL NIL))
EQL-OK: T
(MAKE-ARRAY 5 :FILL-POINTER -5)
[SIMPLE-TYPE-ERROR]: MAKE-ARRAY: fill-pointer -5 should be a nonnegative fixnum

EQL-OK: ERROR
(FORMAT T "~%general vector with fillpointer~%")

general vector with fillpointer
EQL-OK: NIL
(PROGN (SETQ VMF (MAKE-ARRAY 5 :FILL-POINTER 0)) T)
EQL-OK: T
(FILL-POINTER VMF)
EQL-OK: 0
(VECTOR-PUSH 'A VMF)
EQL-OK: 0
(FILL-POINTER VMF)
EQL-OK: 1
(VECTOR-PUSH 'B VMF)
EQL-OK: 1
(VECTOR-PUSH 'C VMF)
EQL-OK: 2
(VECTOR-PUSH 'D VMF)
EQL-OK: 3
(VECTOR-PUSH 'E VMF)
EQL-OK: 4
(VECTOR-PUSH 'VOLL VMF)
EQL-OK: NIL
(VECTOR-POP VMF)
EQL-OK: E
(VECTOR-POP VMF)
EQL-OK: D
(VECTOR-POP VMF)
EQL-OK: C
(VECTOR-POP VMF)
EQL-OK: B
(VECTOR-POP VMF)
EQL-OK: A
(VECTOR-POP VMF)
[SIMPLE-ERROR]: VECTOR-POP: #() has length zero

EQL-OK: ERROR
(FORMAT T "~%adjustable general vector with fillpointer~%")

adjustable general vector with fillpointer
EQL-OK: NIL
(PROGN (SETQ VMFA (MAKE-ARRAY 5 :FILL-POINTER 0 :ADJUSTABLE T)) T)
EQL-OK: T
(FILL-POINTER VMFA)
EQL-OK: 0
(VECTOR-PUSH-EXTEND 'A VMFA)
EQL-OK: 0
(FILL-POINTER VMFA)
EQL-OK: 1
(VECTOR-PUSH-EXTEND 'B VMFA)
EQL-OK: 1
(VECTOR-PUSH-EXTEND 'C VMFA)
EQL-OK: 2
(VECTOR-PUSH-EXTEND 'D VMFA)
EQL-OK: 3
(VECTOR-PUSH-EXTEND 'E VMFA)
EQL-OK: 4
(VECTOR-PUSH-EXTEND 'VOLL VMFA)
EQL-OK: 5
(VECTOR-POP VMFA)
EQL-OK: VOLL
(VECTOR-POP VMFA)
EQL-OK: E
(VECTOR-POP VMFA)
EQL-OK: D
(VECTOR-POP VMFA)
EQL-OK: C
(VECTOR-POP VMFA)
EQL-OK: B
(VECTOR-POP VMFA)
EQL-OK: A
(FORMAT T "~%Doppeltgen. Vector mit Fillpointer ~%")

Doppeltgen. Vector mit Fillpointer 
EQL-OK: NIL
(PROGN (SETQ VMFD (MAKE-ARRAY 5 :FILL-POINTER 0 :ELEMENT-TYPE 'DOUBLE-FLOAT)) T)
EQL-OK: T
(FILL-POINTER VMFD)
EQL-OK: 0
(VECTOR-PUSH 0.0d0 VMFD)
EQL-OK: 0
(FILL-POINTER VMFD)
EQL-OK: 1
(VECTOR-PUSH 1.0d0 VMFD)
EQL-OK: 1
(VECTOR-PUSH 2.0d0 VMFD)
EQL-OK: 2
(VECTOR-PUSH 3.0d0 VMFD)
EQL-OK: 3
(VECTOR-PUSH 4.0d0 VMFD)
EQL-OK: 4
(VECTOR-PUSH 5.0d0 VMFD)
EQL-OK: NIL
(VECTOR-POP VMFD)
EQL-OK: 4.0d0
(VECTOR-POP VMFD)
EQL-OK: 3.0d0
(VECTOR-POP VMFD)
EQL-OK: 2.0d0
(VECTOR-POP VMFD)
EQL-OK: 1.0d0
(VECTOR-POP VMFD)
EQL-OK: 0.0d0
(VECTOR-POP VMFD)
[SIMPLE-ERROR]: VECTOR-POP: #() has length zero

EQL-OK: ERROR
(PROGN (SETQ VMFAD (MAKE-ARRAY 5 :FILL-POINTER 0 :ELEMENT-TYPE 'DOUBLE-FLOAT :ADJUSTABLE T)) T)
EQL-OK: T
(FILL-POINTER VMFAD)
EQL-OK: 0
(VECTOR-PUSH-EXTEND 0.0d0 VMFAD)
EQL-OK: 0
(FILL-POINTER VMFAD)
EQL-OK: 1
(VECTOR-PUSH-EXTEND 1.0d0 VMFAD)
EQL-OK: 1
(VECTOR-PUSH-EXTEND 2.0d0 VMFAD)
EQL-OK: 2
(VECTOR-PUSH-EXTEND 3.0d0 VMFAD)
EQL-OK: 3
(VECTOR-PUSH-EXTEND 4.0d0 VMFAD)
EQL-OK: 4
(VECTOR-PUSH-EXTEND 5.0d0 VMFAD)
EQL-OK: 5
(SETF (FILL-POINTER VMFAD) 3)
EQL-OK: 3
(AREF VMFAD 5)
EQL-OK: 5.0d0
(ELT VMFAD 5)
[SIMPLE-TYPE-ERROR]: ELT: index 5 for #(0.0d0 1.0d0 2.0d0) is out of range

EQL-OK: ERROR
(SETF (FILL-POINTER VMFAD) 6)
EQL-OK: 6
VMFAD
EQUALP-OK: #(0.0d0 1.0d0 2.0d0 3.0d0 4.0d0 5.0d0)
(REVERSE VMFAD)
EQUALP-OK: #(5.0d0 4.0d0 3.0d0 2.0d0 1.0d0 0.0d0)
(NREVERSE VMFAD)
EQUALP-OK: #(5.0d0 4.0d0 3.0d0 2.0d0 1.0d0 0.0d0)
VMFAD
EQUALP-OK: #(5.0d0 4.0d0 3.0d0 2.0d0 1.0d0 0.0d0)
(VECTOR-POP VMFAD)
EQL-OK: 0.0d0
(VECTOR-POP VMFAD)
EQL-OK: 1.0d0
(VECTOR-POP VMFAD)
EQL-OK: 2.0d0
(VECTOR-POP VMFAD)
EQL-OK: 3.0d0
(VECTOR-POP VMFAD)
EQL-OK: 4.0d0
(VECTOR-POP VMFAD)
EQL-OK: 5.0d0
(VECTOR-PUSH-EXTEND 5.0s0 VMFAD)
EQL-OK: 0
(UPGRADED-ARRAY-ELEMENT-TYPE NIL)
EQL-OK: NIL
(ARRAYP (SETQ NIL-ARR (MAKE-ARRAY '(10 20) :ELEMENT-TYPE NIL)))
EQL-OK: T
(ARRAY-ELEMENT-TYPE (SETQ NIL-VEC (MAKE-ARRAY 4 :ELEMENT-TYPE NIL :DISPLACED-TO NIL-ARR :DISPLACED-INDEX-OFFSET 2)))
EQL-OK: NIL
(TYPEP NIL-VEC 'SEQUENCE)
EQL-OK: T
(AREF NIL-ARR 2 2)
[SIMPLE-ERROR]: AREF: cannot retrieve values from an array of element type NIL

EQL-OK: ERROR
(SETF (AREF NIL-VEC 1) 0)
[SIMPLE-TYPE-ERROR]: SYSTEM::STORE: 0 does not fit into #A(NIL (4)), bad type

EQL-OK: ERROR
(FILL NIL-VEC 1)
[SIMPLE-TYPE-ERROR]: FILL: 1 does not fit into #A(NIL (4)), bad type

EQL-OK: ERROR
(REPLACE NIL-VEC #(0 1 0 1))
[SIMPLE-TYPE-ERROR]: REPLACE: 0 cannot be stored in an array of element type NIL

EQL-OK: ERROR
(REPLACE #(0 1 0 1) NIL-VEC)
[SIMPLE-ERROR]: REPLACE: cannot retrieve values from an array of element type NIL

EQL-OK: ERROR
(PROGN (COPY-SEQ NIL-VEC))
EQUAL-OK: #A(NIL (4))
(SETQ NIL-VEC NIL NIL-ARR NIL)
EQL-OK: NIL
(ADJUSTABLE-ARRAY-P (SETQ ADA (ADJUST-ARRAY (MAKE-ARRAY '(2 3) :ADJUSTABLE T :INITIAL-CONTENTS '((A B C) (1 2 3))) '(4 6))))
EQL-OK: T
(ARRAY-DIMENSIONS ADA)
EQUAL-OK: (4 6)
(AREF ADA 1 1)
EQL-OK: 2
(SETQ BETA (MAKE-ARRAY '(2 3) :ADJUSTABLE T))
EQUALP-OK: #2A((NIL NIL NIL) (NIL NIL NIL))
(ADJUST-ARRAY BETA '(4 6) :DISPLACED-TO ADA)
EQUALP-OK: #2A((A B C NIL NIL NIL) (1 2 3 NIL NIL NIL) (NIL NIL NIL NIL NIL NIL) (NIL NIL NIL NIL NIL NIL))
(ARRAY-DIMENSIONS BETA)
EQUAL-OK: (4 6)
(AREF BETA 1 1)
EQL-OK: 2
(ADJUST-ARRAY #2A((ALPHA BETA GAMMA DELTA) (EPSILON ZETA ETA THETA) (IOTA KAPPA LAMBDA MU) (NU XI OMICRON PI)) '(3 5) :INITIAL-ELEMENT 'BAZ)
EQUALP-OK: #2A((ALPHA BETA GAMMA DELTA BAZ) (EPSILON ZETA ETA THETA BAZ) (IOTA KAPPA LAMBDA MU BAZ))
(ADJUST-ARRAY #(1 2 3 4) '(6))
EQUALP-OK: #(1 2 3 4 NIL NIL)
(LET* ((A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS '(A B C D E) :FILL-POINTER 3)) (A2 (ADJUST-ARRAY A1 8 :FILL-POINTER 5 :INITIAL-ELEMENT 'X))) (ASSERT (IF (ADJUSTABLE-ARRAY-P A1) (EQ A1 A2) (EQUAL (ARRAY-DIMENSIONS A1) '(5)))) (ASSERT (NOT (ARRAY-DISPLACEMENT A2))) (LIST (ARRAY-DIMENSIONS A2) (FILL-POINTER A2) A2 (AREF A2 5) (AREF A2 6) (AREF A2 7)))
EQUALP-OK: ((8) 5 #(A B C D E) X X X)
(EQUAL (MAKE-STRING 0) (MAKE-ARRAY 0 :ELEMENT-TYPE NIL))
EQL-OK: T
(EQUALP (MAKE-ARRAY '(1 2 0)) (MAKE-ARRAY '(1 2 0) :ELEMENT-TYPE NIL))
EQL-OK: T
(ROW-MAJOR-AREF "abcd" 3)
EQL-OK: #\d
(SETF (ROW-MAJOR-AREF "abcd" 3) 17)
[SIMPLE-TYPE-ERROR]: SYSTEM::ROW-MAJOR-STORE: 17 does not fit into "abcd", bad type

EQL-OK: ERROR
(LET* ((A1 (MAKE-ARRAY 5 :INITIAL-CONTENTS "abcde" :FILL-POINTER 3 :ADJUSTABLE T :ELEMENT-TYPE 'CHARACTER)) (A2 (ADJUST-ARRAY A1 8 :FILL-POINTER 5 :INITIAL-ELEMENT #\x :ELEMENT-TYPE 'CHARACTER))) (ASSERT (OR (NOT (ADJUSTABLE-ARRAY-P A1)) (EQ A1 A2))) (ASSERT (OR (ADJUSTABLE-ARRAY-P A1) (EQUAL (ARRAY-DIMENSIONS A1) '(5)))) (ASSERT (EQUAL (ARRAY-DIMENSIONS A2) '(8))) (ASSERT (NOT (ARRAY-DISPLACEMENT A2))) (ASSERT (EQUAL (LIST (AREF A2 5) (AREF A2 6) (AREF A2 7)) '(#\x #\x #\x))) (LIST (FILL-POINTER A2) A2))
EQUAL-OK: (5 "abcde")
RUN-TEST: finished "array" (0 errors out of 290 tests)
RUN-TEST: started #<INPUT BUFFERED FILE-STREAM CHARACTER #P"backquot.tst" @1>
(SETF X '(A B C))
EQUAL-OK: (A B C)
`(X ,X ,@X FOO ,(CADR X) BAR ,(CDR X) BAZ ,@(CDR X) ,.X)
EQUAL-OK: (X (A B C) A B C FOO B BAR (B C) BAZ B C A B C)
(READ-FROM-STRING "`,@x")
[SIMPLE-READER-ERROR]: READ: the syntax `,@form is invalid
EQL-OK: ERROR
`(,X . ,X)
EQUAL-OK: ((A B C) A B C)
(READ-FROM-STRING "`(,x . ,@x)")
[SIMPLE-READER-ERROR]: READ: the syntax `( ... . ,@form) is invalid
EQL-OK: ERROR
(READ-FROM-STRING ",x")
[SIMPLE-READER-ERROR]: READ: comma is illegal outside of backquote
EQL-OK: ERROR
(READ-FROM-STRING "`#1A(1 2 ,(+ 2 2) 4)")
[SIMPLE-READER-ERROR]: READ: unquotes may not occur in arrays
EQL-OK: ERROR
(DEFSTRUCT FOO (A B))
EQL-OK: FOO
(READ-FROM-STRING "`#S(FOO :A ,'A :B ,'B)")
[SIMPLE-READER-ERROR]: READ: unquotes may not occur in structures
EQL-OK: ERROR
(READ-FROM-STRING "``(,,,x)")
[SIMPLE-READER-ERROR]: READ: more commas out than backquotes in, is illegal
EQL-OK: ERROR
(LET ((LIST '(A B C D))) `(FOO `(BAR ,@',(MAPCAR #'(LAMBDA (SYM) `(BAZ ',SYM ,SYM)) LIST))))
EQUAL-OK: (FOO '(BAR (BAZ 'A A) (BAZ 'B B) (BAZ 'C C) (BAZ 'D D)))
`#(1 2 3 4)
EQUALP-OK: #(1 2 3 4)
`#(,@X)
EQUALP-OK: #(A B C)
(SETF A 10 B 20 C 30)
EQL-OK: 30
`(,A ,B ,C)
EQUAL-OK: (10 20 30)
(EVAL ``(,,@X))
EQUAL-OK: (10 20 30)
(EVAL ``(,,@(MAPCAR #'(LAMBDA (Z) `(LIST ',Z)) X)))
EQUAL-OK: ((A) (B) (C))
(EVAL ``(,@,@(MAPCAR #'(LAMBDA (Z) `(LIST ',Z)) X)))
EQUAL-OK: (A B C)
(EVAL (EVAL ```(,,@,@(MAPCAR #'(LAMBDA (Z) `(LIST ',Z)) X))))
EQUAL-OK: (10 20 30)
(SETF AA (LIST 10) BB (LIST 20) CC (LIST 30))
EQUAL-OK: (30)
(SETF XX '(AA BB CC))
EQUAL-OK: (AA BB CC)
(EVAL (EVAL ```(,,@,@(MAPCAR #'(LAMBDA (Z) `(LIST ',Z)) XX))))
EQUAL-OK: ((10) (20) (30))
(EVAL (EVAL ```(,@,@,@(MAPCAR #'(LAMBDA (Z) `(LIST ',Z)) XX))))
EQUAL-OK: (10 20 30)
(EVAL (EVAL ```(ALPHA ,@,@,@(MAPCAR #'(LAMBDA (Z) `(LIST ',Z)) XX) OMEGA)))
EQUAL-OK: (ALPHA 10 20 30 OMEGA)
(EVAL (EVAL ```(ALPHA ,.,.,.(MAPCAR #'(LAMBDA (Z) `(LIST ',Z)) XX) OMEGA)))
EQUAL-OK: (ALPHA 10 20 30 OMEGA)
AA
EQUAL-OK: (10 20 30 OMEGA)
BB
EQUAL-OK: (20 30 OMEGA)
CC
EQUAL-OK: (30 OMEGA)
``````````,,,,,,,,,,'X
EQL-OK: X
``````````,',',',',',',',',','X
EQUAL-OK: '''''''''X
(LET ((X 3)) `````(,(,(,(,(,(INCF X)))))) X)
EQL-OK: 4
(FORMAT NIL "~a" ``,,`,3)
EQUAL-OK: "3"
(FORMAT NIL "~a" '``,,`,3)
EQUAL-OK: "``,,`,3"
(FORMAT NIL "~a" '``,(,.ALPHA ,`,`(,@42) . ,OMEGA))
EQUAL-OK: "``,(,.ALPHA ,`,`(,@42) . ,OMEGA)"
`(2 3 . #(,(+ 2 2) ,@(LIST 5)))
EQUALP-OK: (2 3 . #(4 5))
(ARRAY-ELEMENT-TYPE `#(1 2 3))
EQUAL-OK: (UNSIGNED-BYTE 8)
(MACROEXPAND-1 '`(C1))
EQUAL-OK: '(C1)
(MACROEXPAND-1 '`(,(F1)))
EQUAL-OK: (LIST (F1))
(MACROEXPAND-1 '`(,@(F1)))
EQUAL-OK: (F1)
(MACROEXPAND-1 '`(,.(F1)))
EQUAL-OK: (F1)
(MACROEXPAND-1 '`(C1 C2))
EQUAL-OK: '(C1 C2)
(MACROEXPAND-1 '`(,(F1) C2))
EQUAL-OK: (CONS (F1) '(C2))
(MACROEXPAND-1 '`(,@(F1) C2))
EQUAL-OK: (APPEND (F1) '(C2))
(MACROEXPAND-1 '`(,.(F1) C2))
EQUAL-OK: (NCONC (F1) '(C2))
(MACROEXPAND-1 '`(C1 ,(F2)))
EQUAL-OK: (LIST 'C1 (F2))
(MACROEXPAND-1 '`(,(F1) ,(F2)))
EQUAL-OK: (LIST (F1) (F2))
(MACROEXPAND-1 '`(,@(F1) ,(F2)))
EQUAL-OK: (APPEND (F1) (LIST (F2)))
(MACROEXPAND-1 '`(,.(F1) ,(F2)))
EQUAL-OK: (NCONC (F1) (LIST (F2)))
(MACROEXPAND-1 '`(C1 ,@(F2)))
EQUAL-OK: (CONS 'C1 (F2))
(MACROEXPAND-1 '`(,(F1) ,@(F2)))
EQUAL-OK: (CONS (F1) (F2))
(MACROEXPAND-1 '`(,@(F1) ,@(F2)))
EQUAL-OK: (APPEND (F1) (F2))
(MACROEXPAND-1 '`(,.(F1) ,@(F2)))
EQUAL-OK: (NCONC (F1) (F2))
(MACROEXPAND-1 '`(C1 ,.(F2)))
EQUAL-OK: (CONS 'C1 (F2))
(MACROEXPAND-1 '`(,(F1) ,.(F2)))
EQUAL-OK: (CONS (F1) (F2))
(MACROEXPAND-1 '`(,@(F1) ,.(F2)))
EQUAL-OK: (APPEND (F1) (F2))
(MACROEXPAND-1 '`(,.(F1) ,.(F2)))
EQUAL-OK: (NCONC (F1) (F2))
(MACROEXPAND-1 '`(,@(F1) ,@(F2) ,@(F3)))
EQUAL-OK: (APPEND (F1) (F2) (F3))
(MACROEXPAND-1 '`(,(F1) ,@(F2) ,.(F3)))
EQUAL-OK: (CONS (F1) (APPEND (F2) (F3)))
(MACROEXPAND-1 '`(,.(F1) ,.(F2) ,@(F3)))
EQUAL-OK: (NCONC (F1) (F2) (F3))
(MACROEXPAND-1 '``(,.(F1) ,.(F2) ,.,@(F3)))
EQUAL-OK: `(NCONC (F1) (F2) ,@(F3))
(MACROEXPAND-1 '`#(A B))
EQUALP-OK: #(A B)
(MACROEXPAND-1 '`#(,(F1) ,(F2)))
EQUAL-OK: (VECTOR (F1) (F2))
(MACROEXPAND-1 '`#(,(F1) ,@(F2)))
EQUAL-OK: (MULTIPLE-VALUE-CALL #'VECTOR (VALUES (F1)) (VALUES-LIST (F2)))
(MACROEXPAND-1 '`#(A ,(F1) ,@(F2) C D))
EQUAL-OK: (MULTIPLE-VALUE-CALL #'VECTOR 'A (VALUES (F1)) (VALUES-LIST (F2)) 'C 'D)
(MACROEXPAND-1 '``#(,,@(F1) ,,@(F2)))
EQUAL-OK: `(VECTOR ,@(F1) ,@(F2))
(MACROEXPAND-1 '``#(,,.(F1) ,,@(F2)))
EQUAL-OK: `(VECTOR ,.(F1) ,@(F2))
(MACROEXPAND-1 '``#(,.,.(F1) ,.,@(F2) ,@,.(F3) ,@,@(F4)))
EQUAL-OK: `(MULTIPLE-VALUE-CALL #'VECTOR (VALUES-LIST (NCONC ,.(F1))) (VALUES-LIST (NCONC ,@(F2))) (VALUES-LIST (APPEND ,.(F3))) (VALUES-LIST (APPEND ,@(F4))))
(MACROEXPAND-1 '`(,@NIL ,@(F1)))
EQUAL-OK: (F1)
(MACROEXPAND-1 '`(,@(F1) ,@NIL))
EQUAL-OK: (F1)
(MACROEXPAND-1 '`(,.NIL ,.(F1)))
EQUAL-OK: (F1)
(MACROEXPAND-1 '`(,.(F1) ,.NIL))
EQUAL-OK: (F1)
(LET ((Q '(R S)) (R '(3 5)) (S '(4 6))) (FLET ((R (X) (REDUCE #'* X))) (MACROEXPAND-1 ``(,,Q))))
EQUAL-OK: (LIST (R S))
(LET ((Q '(R S)) (R '(3 5)) (S '(4 6))) (FLET ((R (X) (REDUCE #'* X))) (MACROEXPAND-1 ``(,@,Q))))
EQUAL-OK: (R S)
(LET ((Q '(R S)) (R '(3 5)) (S '(4 6))) (FLET ((R (X) (REDUCE #'* X))) (MACROEXPAND-1 ``(,,@Q))))
EQUAL-OK: (LIST R S)
(LET ((Q '(R S)) (R '(3 5)) (S '(4 6))) (FLET ((R (X) (REDUCE #'* X))) (MACROEXPAND-1 ``(,@,@Q))))
EQUAL-OK: (APPEND R S)
(LET ((P '(UNION X Y)) (Q '((UNION X Y) (LIST 'SQRT 9))) (R '(UNION X Y)) (S '((UNION X Y)))) (MACROEXPAND-1 ``(FOO ,,P)))
EQUAL-OK: (LIST 'FOO (UNION X Y))
(LET ((P '(UNION X Y)) (Q '((UNION X Y) (LIST 'SQRT 9))) (R '(UNION X Y)) (S '((UNION X Y)))) (MACROEXPAND-1 ``(FOO ,,@Q)))
EQUAL-OK: (LIST 'FOO (UNION X Y) (LIST 'SQRT 9))
(LET ((P '(UNION X Y)) (Q '((UNION X Y) (LIST 'SQRT 9))) (R '(UNION X Y)) (S '((UNION X Y)))) (MACROEXPAND-1 ``(FOO ,',R)))
EQUAL-OK: '(FOO (UNION X Y))
(LET ((P '(UNION X Y)) (Q '((UNION X Y) (LIST 'SQRT 9))) (R '(UNION X Y)) (S '((UNION X Y)))) (MACROEXPAND-1 ``(FOO ,',@S)))
EQUAL-OK: '(FOO (UNION X Y))
(LET ((P '(UNION X Y)) (Q '((UNION X Y) (LIST 'SQRT 9))) (R '(UNION X Y)) (S '((UNION X Y)))) (MACROEXPAND-1 ``(FOO ,@,P)))
EQUAL-OK: (CONS 'FOO (UNION X Y))
(LET ((P '(UNION X Y)) (Q '((UNION X Y) (LIST 'SQRT 9))) (R '(UNION X Y)) (S '((UNION X Y)))) (MACROEXPAND-1 ``(FOO ,@,@Q)))
EQUAL-OK: (CONS 'FOO (APPEND (UNION X Y) (LIST 'SQRT 9)))
(LET ((P '(UNION X Y)) (Q '((UNION X Y) (LIST 'SQRT 9))) (R '(UNION X Y)) (S '((UNION X Y)))) (MACROEXPAND-1 ``(FOO ,@',R)))
EQUAL-OK: '(FOO UNION X Y)
(LET ((P '(UNION X Y)) (Q '((UNION X Y) (LIST 'SQRT 9))) (R '(UNION X Y)) (S '((UNION X Y)))) (MACROEXPAND-1 ``(FOO ,@',@S)))
EQUAL-OK: (CONS 'FOO '(UNION X Y))
(LET ((O 1)) (DECLARE (SPECIAL O)) (EVAL (LET ((A 2) (B 3)) (DECLARE (SPECIAL A B)) ``(,O ,@',(MAPCAR #'SYMBOL-VALUE '(A B))))))
EQUAL-OK: (1 2 3)
(LET ((O 1)) (DECLARE (SPECIAL O)) (EVAL (LET ((A 2) (B 3)) (DECLARE (SPECIAL A B)) ``(,O ,@',(MAPCAR #'SYMBOL-VALUE '(A B)) FOUR))))
EQUAL-OK: (1 2 3 FOUR)
(LET ((ENV 1)) (EVAL (LET ((GET-CODE '(:A 12 :B 45 :DOUBLE (* %BUFFER 2)))) `(DEFUN GET-MACRO (DISPLAY EVENT-KEY VARIABLE) `(LET ((%BUFFER ,DISPLAY)) (DECLARE (IGNORABLE %BUFFER)) ,(GETF `(:DISPLAY (THE T ,DISPLAY) :EVENT-KEY (THE T ,EVENT-KEY) ,@',(MAPCAR #'(LAMBDA (FORM) (INCF ENV ENV) FORM) GET-CODE)) VARIABLE))))) (LIST (EVAL (GET-MACRO 1234 5678 :DISPLAY)) (EVAL (GET-MACRO 1234 5678 :EVENT-KEY)) (EVAL (GET-MACRO 1234 5678 :A)) (EVAL (GET-MACRO 1234 5678 :DOUBLE)) ENV))
EQUAL-OK: (1234 5678 12 2468 64)
(PROGN (DEFMACRO DEFINE-SETF (VAR &REST VALUES) "define a setf function name (setf <var>) that will
  set the variable `var' to the sum of the given values
  plus the one given when setf'ed." `(DEFSETF ,(INTERN (SYMBOL-NAME VAR)) NIL (VALUE) `(SETF ,',VAR (+ ,VALUE ,@',VALUES)))) (DEFVAR *AVAR* NIL) (DEFINE-SETF *AVAR* 1 2 3) (LIST (SETF (*AVAR*) 4) *AVAR*))
EQUAL-OK: (10 10)
(LET ((A 12)) (MACROLET ((B NIL (LET ((C 19)) ``(,A ,@',@(LIST C))))) (B)))
EQUAL-OK: (12 . 19)
(UNINTERN 'X)
EQL-OK: T
RUN-TEST: finished "backquot" (0 errors out of 89 tests)
RUN-TEST: started #<INPUT BUFFERED FILE-STREAM CHARACTER #P"bin-io.tst" @1>
(DEFUN CLISP-TEST-BIN-I/O (&KEY (NUM 10) (FILE-NAME "./foocl") (TYPE 'UNSIGNED-BYTE) (SIZE 40) (ENDIANNESS :LITTLE) (INT-LIST (ECASE TYPE (UNSIGNED-BYTE (LOOP :WITH MAX = (ASH 1 SIZE) :REPEAT NUM :COLLECT (RANDOM MAX))) (SIGNED-BYTE (LOOP :WITH MAX = (ASH 1 SIZE) :AND TOP = (ASH 1 (1- SIZE)) :REPEAT NUM :COLLECT (- (RANDOM MAX) TOP))))) (FLOAT-LIST (LOOP :REPEAT NUM :COLLECT (RANDOM 1.0d0)))) (LET ((ELTYPE (LIST TYPE SIZE))) (WITH-OPEN-FILE (FOO FILE-NAME :DIRECTION :OUTPUT :ELEMENT-TYPE 'UNSIGNED-BYTE) (DOLIST (NUM INT-LIST) (WRITE-INTEGER NUM FOO ELTYPE ENDIANNESS)) (DOLIST (NUM FLOAT-LIST) (WRITE-FLOAT NUM FOO 'DOUBLE-FLOAT ENDIANNESS))) (UNWIND-PROTECT (WITH-OPEN-FILE (FOO FILE-NAME :DIRECTION :INPUT :ELEMENT-TYPE 'UNSIGNED-BYTE) (LIST (FILE-LENGTH FOO) INT-LIST FLOAT-LIST (LOOP :FOR NUM :IN INT-LIST :FOR NN = (READ-INTEGER FOO ELTYPE ENDIANNESS) :COLLECT NN :UNLESS (= NN NUM) :DO (ERROR "~s/~s: wrote: ~s  read: ~s" ENDIANNESS ELTYPE NUM NN)) (LOOP :FOR NUM :IN FLOAT-LIST :FOR NN = (READ-FLOAT FOO 'DOUBLE-FLOAT ENDIANNESS) :COLLECT NN :UNLESS (= NN NUM) :DO (ERROR "~s: wrote: ~s  read: ~s" ENDIANNESS NUM NN)))) (DELETE-FILE FILE-NAME))))
EQL-OK: CLISP-TEST-BIN-I/O
(DOLIST (E '(:LITTLE :BIG)) (DOLIST (S '(UNSIGNED-BYTE SIGNED-BYTE)) (CLISP-TEST-BIN-I/O :ENDIANNESS E :TYPE S)))
EQL-OK: NIL
(LET ((VEC (MAKE-ARRAY 8 :ELEMENT-TYPE '(UNSIGNED-BYTE 8) :INITIAL-CONTENTS '(63 240 0 0 0 0 0 0)))) (WITH-OPEN-FILE (FOO "./foocl" :DIRECTION :OUTPUT :ELEMENT-TYPE '(UNSIGNED-BYTE 8)) (WRITE-SEQUENCE VEC FOO)) (UNWIND-PROTECT (WITH-OPEN-FILE (FOO "./foocl" :DIRECTION :INPUT :ELEMENT-TYPE '(UNSIGNED-BYTE 8)) (READ-FLOAT FOO 'DOUBLE-FLOAT :BIG)) (DELETE-FILE "./foocl")))
EQL-OK: 1.0d0
(PROGN (DEFCLASS LIST-INPUT-STREAM (FUNDAMENTAL-INPUT-STREAM) ((LIST :INITARG :LIST))) (DEFMETHOD STREAM-ELEMENT-TYPE ((STREAM LIST-INPUT-STREAM)) T) (DEFMETHOD STREAM-READ-CHAR ((STREAM LIST-INPUT-STREAM)) (WITH-SLOTS (LIST) STREAM (IF LIST (LET ((RET (POP LIST))) (TYPECASE RET (INTEGER (CODE-CHAR RET)) (CHARACTER RET) (T (COERCE RET 'CHARACTER)))) :EOF))) (DEFMETHOD STREAM-UNREAD-CHAR ((STREAM LIST-INPUT-STREAM) (CHAR CHARACTER)) (WITH-SLOTS (LIST) STREAM (PUSH CHAR LIST))) (DEFMETHOD STREAM-READ-BYTE ((STREAM LIST-INPUT-STREAM)) (WITH-SLOTS (LIST) STREAM (IF LIST (LET ((RET (POP LIST))) (TYPECASE RET (INTEGER RET) (CHARACTER (CHAR-CODE RET)) (T (COERCE RET 'INTEGER)))) :EOF))) (DEFUN LIST->INTEGER (LIST TYPE ENDIANNESS) (READ-INTEGER (MAKE-INSTANCE 'LIST-INPUT-STREAM :LIST LIST) TYPE ENDIANNESS)) (DEFUN LIST->FLOAT (LIST TYPE ENDIANNESS) (READ-FLOAT (MAKE-INSTANCE 'LIST-INPUT-STREAM :LIST LIST) TYPE ENDIANNESS)))
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION STREAM-ELEMENT-TYPE>
         is being modified, but has already been called.
EQL-OK: LIST->FLOAT
(LIST->FLOAT '(63 240 0 0 0 0 0 0) 'DOUBLE-FLOAT :BIG)
EQL-OK: 1.0d0
(LIST->FLOAT '(0 0 0 0 0 0 240 63) 'DOUBLE-FLOAT :LITTLE)
EQL-OK: 1.0d0
(LIST->INTEGER '(0 1) '(UNSIGNED-BYTE 16) :BIG)
EQL-OK: 1
(LIST->INTEGER '(1 0) '(UNSIGNED-BYTE 16) :BIG)
EQL-OK: 256
(LIST->INTEGER '(1 0) '(UNSIGNED-BYTE 16) :LITTLE)
EQL-OK: 1
(LIST->INTEGER '(0 1) '(UNSIGNED-BYTE 16) :LITTLE)
EQL-OK: 256
(PROGN (DEFCLASS LIST-OUTPUT-STREAM (FUNDAMENTAL-OUTPUT-STREAM) ((LIST :INITFORM NIL))) (DEFMETHOD STREAM-ELEMENT-TYPE ((STREAM LIST-OUTPUT-STREAM)) T) (DEFMETHOD STREAM-WRITE-CHAR ((STREAM LIST-OUTPUT-STREAM) (CHAR CHARACTER)) (WITH-SLOTS (LIST) STREAM (PUSH CHAR LIST))) (DEFMETHOD STREAM-WRITE-BYTE ((STREAM LIST-OUTPUT-STREAM) (BYTE INTEGER)) (WITH-SLOTS (LIST) STREAM (PUSH BYTE LIST))) (DEFUN INTEGER->LIST (INTEGER TYPE ENDIANNESS) (LET ((OUT (MAKE-INSTANCE 'LIST-OUTPUT-STREAM))) (WRITE-INTEGER INTEGER OUT TYPE ENDIANNESS) (WITH-SLOTS (LIST) OUT (REVERSE LIST)))) (DEFUN FLOAT->LIST (FLOAT TYPE ENDIANNESS) (LET ((OUT (MAKE-INSTANCE 'LIST-OUTPUT-STREAM))) (WRITE-FLOAT FLOAT OUT TYPE ENDIANNESS) (WITH-SLOTS (LIST) OUT (REVERSE LIST)))))
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION STREAM-WRITE-CHAR>
         is being modified, but has already been called.
EQL-OK: FLOAT->LIST
(FLOAT->LIST 1.0d0 'DOUBLE-FLOAT :BIG)
EQUAL-OK: (63 240 0 0 0 0 0 0)
(FLOAT->LIST 1.0d0 'DOUBLE-FLOAT :LITTLE)
EQUAL-OK: (0 0 0 0 0 0 240 63)
(INTEGER->LIST 1 '(UNSIGNED-BYTE 16) :BIG)
EQUAL-OK: (0 1)
(INTEGER->LIST 1 '(UNSIGNED-BYTE 16) :LITTLE)
EQUAL-OK: (1 0)
RUN-TEST: finished "bin-io" (0 errors out of 15 tests)
RUN-TEST: started #<INPUT BUFFERED FILE-STREAM CHARACTER #P"characters.tst" @1>
CHAR-CODE-LIMIT
EQL-OK: 1114112
(STANDARD-CHAR-P #\a)
EQL-OK: T
(STANDARD-CHAR-P #\$)
EQL-OK: T
(STANDARD-CHAR-P #\.)
EQL-OK: T
(STANDARD-CHAR-P #\A)
EQL-OK: T
(STANDARD-CHAR-P 1)
[SIMPLE-TYPE-ERROR]: STANDARD-CHAR-P: argument 1 is not a character

EQL-OK: ERROR
(STANDARD-CHAR-P #\\)
EQL-OK: T
(STANDARD-CHAR-P #\5)
EQL-OK: T
(STANDARD-CHAR-P #\))
EQL-OK: T
(STANDARD-CHAR-P #\%)
EQL-OK: T
(STANDARD-CHAR-P #\Backspace)
EQL-OK: NIL
(STANDARD-CHAR-P #\Page)
EQL-OK: NIL
(STANDARD-CHAR-P #\Return)
EQL-OK: NIL
(GRAPHIC-CHAR-P #\a)
EQL-OK: T
(GRAPHIC-CHAR-P #\$)
EQL-OK: T
(GRAPHIC-CHAR-P #\.)
EQL-OK: T
(GRAPHIC-CHAR-P #\A)
EQL-OK: T
(GRAPHIC-CHAR-P 1)
[SIMPLE-TYPE-ERROR]: GRAPHIC-CHAR-P: argument 1 is not a character

EQL-OK: ERROR
(GRAPHIC-CHAR-P #\\)
EQL-OK: T
(GRAPHIC-CHAR-P #\5)
EQL-OK: T
(GRAPHIC-CHAR-P #\))
EQL-OK: T
(GRAPHIC-CHAR-P #\%)
EQL-OK: T
(GRAPHIC-CHAR-P #\Backspace)
EQL-OK: NIL
(GRAPHIC-CHAR-P #\Page)
EQL-OK: NIL
(GRAPHIC-CHAR-P #\Return)
EQL-OK: NIL
(STRING-CHAR-P #\a)
EQL-OK: T
(STRING-CHAR-P #\$)
EQL-OK: T
(STRING-CHAR-P #\.)
EQL-OK: T
(STRING-CHAR-P #\A)
EQL-OK: T
(STRING-CHAR-P 1)
[SIMPLE-TYPE-ERROR]: STRING-CHAR-P: argument 1 is not a character

EQL-OK: ERROR
(STRING-CHAR-P #\\)
EQL-OK: T
(STRING-CHAR-P #\5)
EQL-OK: T
(STRING-CHAR-P #\))
EQL-OK: T
(STRING-CHAR-P #\%)
EQL-OK: T
(STRING-CHAR-P #\Backspace)
EQL-OK: T
(STRING-CHAR-P #\Page)
EQL-OK: T
(STRING-CHAR-P #\Return)
EQL-OK: T
(ALPHA-CHAR-P #\a)
EQL-OK: T
(ALPHA-CHAR-P #\$)
EQL-OK: NIL
(ALPHA-CHAR-P #\.)
EQL-OK: NIL
(ALPHA-CHAR-P #\A)
EQL-OK: T
(ALPHA-CHAR-P 1)
[SIMPLE-TYPE-ERROR]: ALPHA-CHAR-P: argument 1 is not a character

EQL-OK: ERROR
(ALPHA-CHAR-P #\\)
EQL-OK: NIL
(ALPHA-CHAR-P #\5)
EQL-OK: NIL
(ALPHA-CHAR-P #\))
EQL-OK: NIL
(ALPHA-CHAR-P #\%)
EQL-OK: NIL
(ALPHA-CHAR-P #\Backspace)
EQL-OK: NIL
(ALPHA-CHAR-P #\Page)
EQL-OK: NIL
(ALPHA-CHAR-P #\Return)
EQL-OK: NIL
(UPPER-CASE-P #\a)
EQL-OK: NIL
(UPPER-CASE-P #\$)
EQL-OK: NIL
(UPPER-CASE-P #\.)
EQL-OK: NIL
(UPPER-CASE-P #\A)
EQL-OK: T
(UPPER-CASE-P 1)
[SIMPLE-TYPE-ERROR]: UPPER-CASE-P: argument 1 is not a character

EQL-OK: ERROR
(UPPER-CASE-P #\\)
EQL-OK: NIL
(UPPER-CASE-P #\5)
EQL-OK: NIL
(UPPER-CASE-P #\))
EQL-OK: NIL
(UPPER-CASE-P #\%)
EQL-OK: NIL
(UPPER-CASE-P #\Backspace)
EQL-OK: NIL
(UPPER-CASE-P #\Page)
EQL-OK: NIL
(UPPER-CASE-P #\Return)
EQL-OK: NIL
(LOWER-CASE-P #\a)
EQL-OK: T
(LOWER-CASE-P #\$)
EQL-OK: NIL
(LOWER-CASE-P #\.)
EQL-OK: NIL
(LOWER-CASE-P #\A)
EQL-OK: NIL
(LOWER-CASE-P 1)
[SIMPLE-TYPE-ERROR]: LOWER-CASE-P: argument 1 is not a character

EQL-OK: ERROR
(LOWER-CASE-P #\\)
EQL-OK: NIL
(LOWER-CASE-P #\5)
EQL-OK: NIL
(LOWER-CASE-P #\))
EQL-OK: NIL
(LOWER-CASE-P #\%)
EQL-OK: NIL
(LOWER-CASE-P #\Backspace)
EQL-OK: NIL
(LOWER-CASE-P #\Page)
EQL-OK: NIL
(LOWER-CASE-P #\Return)
EQL-OK: NIL
(BOTH-CASE-P #\a)
EQL-OK: T
(BOTH-CASE-P #\$)
EQL-OK: NIL
(BOTH-CASE-P #\.)
EQL-OK: NIL
(BOTH-CASE-P #\A)
EQL-OK: T
(BOTH-CASE-P 1)
[SIMPLE-TYPE-ERROR]: BOTH-CASE-P: argument 1 is not a character

EQL-OK: ERROR
(BOTH-CASE-P #\\)
EQL-OK: NIL
(BOTH-CASE-P #\5)
EQL-OK: NIL
(BOTH-CASE-P #\))
EQL-OK: NIL
(BOTH-CASE-P #\%)
EQL-OK: NIL
(BOTH-CASE-P #\Backspace)
EQL-OK: NIL
(BOTH-CASE-P #\Page)
EQL-OK: NIL
(BOTH-CASE-P #\Return)
EQL-OK: NIL
(DIGIT-CHAR-P #\a)
EQL-OK: NIL
(DIGIT-CHAR-P #\$)
EQL-OK: NIL
(DIGIT-CHAR-P #\.)
EQL-OK: NIL
(DIGIT-CHAR-P #\A)
EQL-OK: NIL
(DIGIT-CHAR-P 1)
[SIMPLE-TYPE-ERROR]: DIGIT-CHAR-P: argument 1 is not a character

EQL-OK: ERROR
(DIGIT-CHAR-P #\\)
EQL-OK: NIL
(DIGIT-CHAR-P #\5)
EQL-OK: 5
(DIGIT-CHAR-P #\))
EQL-OK: NIL
(DIGIT-CHAR-P #\%)
EQL-OK: NIL
(DIGIT-CHAR-P #\Backspace)
EQL-OK: NIL
(DIGIT-CHAR-P #\Page)
EQL-OK: NIL
(DIGIT-CHAR-P #\Return)
EQL-OK: NIL
(DIGIT-CHAR-P #\5 4)
EQL-OK: NIL
(DIGIT-CHAR-P #\5 8)
EQL-OK: 5
(DIGIT-CHAR-P #\E 16)
EQL-OK: 14
(DIGIT-CHAR-P #\R 35)
EQL-OK: 27
(DIGIT-CHAR-P #\5 4)
EQL-OK: NIL
(DIGIT-CHAR-P #\5 5)
EQL-OK: NIL
(DIGIT-CHAR-P #\5 6)
EQL-OK: 5
(DIGIT-CHAR-P #\1 2)
EQL-OK: 1
(ALPHANUMERICP #\a)
EQL-OK: T
(ALPHANUMERICP #\$)
EQL-OK: NIL
(ALPHANUMERICP #\.)
EQL-OK: NIL
(ALPHANUMERICP #\A)
EQL-OK: T
(ALPHANUMERICP 1)
[SIMPLE-TYPE-ERROR]: ALPHANUMERICP: argument 1 is not a character

EQL-OK: ERROR
(ALPHANUMERICP #\\)
EQL-OK: NIL
(ALPHANUMERICP #\5)
EQL-OK: T
(ALPHANUMERICP #\))
EQL-OK: NIL
(ALPHANUMERICP #\%)
EQL-OK: NIL
(ALPHANUMERICP #\Backspace)
EQL-OK: NIL
(ALPHANUMERICP #\Page)
EQL-OK: NIL
(ALPHANUMERICP #\Return)
EQL-OK: NIL
(ALPHANUMERICP #\5 4)
[SIMPLE-SOURCE-PROGRAM-ERROR]: EVAL: too many arguments given to ALPHANUMERICP: #1=(ALPHANUMERICP #\5 4)

EQL-OK: ERROR
(ALPHANUMERICP #\5 8)
[SIMPLE-SOURCE-PROGRAM-ERROR]: EVAL: too many arguments given to ALPHANUMERICP: #1=(ALPHANUMERICP #\5 8)

EQL-OK: ERROR
(ALPHANUMERICP #\E 16)
[SIMPLE-SOURCE-PROGRAM-ERROR]: EVAL: too many arguments given to ALPHANUMERICP: #1=(ALPHANUMERICP #\E 16)

EQL-OK: ERROR
(ALPHANUMERICP #\R 35)
[SIMPLE-SOURCE-PROGRAM-ERROR]: EVAL: too many arguments given to ALPHANUMERICP: #1=(ALPHANUMERICP #\R 35)

EQL-OK: ERROR
(CHAR= #\d #\d)
EQL-OK: T
(CHAR/= #\d #\d)
EQL-OK: NIL
(CHAR= #\d #\x)
EQL-OK: NIL
(CHAR/= #\d #\x)
EQL-OK: T
(CHAR= #\d #\D)
EQL-OK: NIL
(CHAR/= #\d #\D)
EQL-OK: T
(CHAR= #\d #\d #\d #\d)
EQL-OK: T
(CHAR/= #\d #\d #\d #\d)
EQL-OK: NIL
(CHAR= #\d #\d #\x #\d)
EQL-OK: NIL
(CHAR/= #\d #\d #\x #\d)
EQL-OK: NIL
(CHAR= #\d #\y #\x #\c)
EQL-OK: NIL
(CHAR/= #\d #\y #\x #\c)
EQL-OK: T
(CHAR= #\d #\c #\d)
EQL-OK: NIL
(CHAR/= #\d #\c #\d)
EQL-OK: NIL
(CHAR< #\d #\x)
EQL-OK: T
(CHAR<= #\d #\x)
EQL-OK: T
(CHAR< #\d #\d)
EQL-OK: NIL
(CHAR<= #\d #\d)
EQL-OK: T
(CHAR< #\a #\e #\y #\z)
EQL-OK: T
(CHAR<= #\a #\e #\y #\z)
EQL-OK: T
(CHAR< #\a #\e #\e #\y)
EQL-OK: NIL
(CHAR<= #\a #\e #\e #\y)
EQL-OK: T
(CHAR> #\e #\d)
EQL-OK: T
(CHAR>= #\e #\d)
EQL-OK: T
(CHAR> #\d #\c #\b #\a)
EQL-OK: T
(CHAR>= #\d #\c #\b #\a)
EQL-OK: T
(CHAR> #\d #\d #\b #\a)
EQL-OK: NIL
(CHAR>= #\d #\d #\b #\a)
EQL-OK: T
(CHAR> #\e #\d #\b #\c #\a)
EQL-OK: NIL
(CHAR>= #\e #\d #\b #\c #\a)
EQL-OK: NIL
(CHAR> #\z #\A)
EQL-OK: T
(CHAR> #\Z #\a)
EQL-OK: NIL
(CHAR< #\9 #\a)
EQL-OK: T
(CHAR> #\9 #\a)
EQL-OK: NIL
(CHAR> #\z #\0)
EQL-OK: T
(CHAR< #\z #\0)
EQL-OK: NIL
(CHAR-EQUAL #\d #\d)
EQL-OK: T
(CHAR-NOT-EQUAL #\d #\d)
EQL-OK: NIL
(CHAR-EQUAL #\d #\x)
EQL-OK: NIL
(CHAR-NOT-EQUAL #\d #\x)
EQL-OK: T
(CHAR-EQUAL #\d #\D)
EQL-OK: T
(CHAR-NOT-EQUAL #\d #\D)
EQL-OK: NIL
(CHAR-EQUAL #\d #\d #\d #\d)
EQL-OK: T
(CHAR-NOT-EQUAL #\d #\d #\d #\d)
EQL-OK: NIL
(CHAR-EQUAL #\d #\d #\x #\d)
EQL-OK: NIL
(CHAR-NOT-EQUAL #\d #\d #\x #\d)
EQL-OK: NIL
(CHAR-EQUAL #\d #\y #\x #\c)
EQL-OK: NIL
(CHAR-NOT-EQUAL #\d #\y #\x #\c)
EQL-OK: T
(CHAR-EQUAL #\d #\c #\d)
EQL-OK: NIL
(CHAR-NOT-EQUAL #\d #\c #\d)
EQL-OK: NIL
(CHAR-LESSP #\d #\x)
EQL-OK: T
(CHAR-NOT-GREATERP #\d #\x)
EQL-OK: T
(CHAR-LESSP #\d #\d)
EQL-OK: NIL
(CHAR-NOT-GREATERP #\d #\d)
EQL-OK: T
(CHAR-LESSP #\a #\e #\y #\z)
EQL-OK: T
(CHAR-NOT-GREATERP #\a #\e #\y #\z)
EQL-OK: T
(CHAR-LESSP #\a #\e #\e #\y)
EQL-OK: NIL
(CHAR-NOT-GREATERP #\a #\e #\e #\y)
EQL-OK: T
(CHAR-GREATERP #\e #\d)
EQL-OK: T
(CHAR-NOT-LESSP #\e #\d)
EQL-OK: T
(CHAR-GREATERP #\d #\c #\b #\a)
EQL-OK: T
(CHAR-NOT-LESSP #\d #\c #\b #\a)
EQL-OK: T
(CHAR-GREATERP #\d #\d #\b #\a)
EQL-OK: NIL
(CHAR-NOT-LESSP #\d #\d #\b #\a)
EQL-OK: T
(CHAR-GREATERP #\e #\d #\b #\c #\a)
EQL-OK: NIL
(CHAR-NOT-LESSP #\e #\d #\b #\c #\a)
EQL-OK: NIL
(CHAR-GREATERP #\z #\A)
EQL-OK: T
(CHAR-GREATERP #\Z #\a)
EQL-OK: T
(CHAR-LESSP #\9 #\a)
EQL-OK: T
(CHAR-GREATERP #\9 #\a)
EQL-OK: NIL
(CHAR-GREATERP #\z #\0)
EQL-OK: T
(CHAR-LESSP #\z #\0)
EQL-OK: NIL
(CHAR-EQUAL #\A #\a)
EQL-OK: T
(CHAR-UPCASE #\a)
EQL-OK: #\A
(CHAR-UPCASE #\A)
EQL-OK: #\A
(CHAR-UPCASE #\5)
EQL-OK: #\5
(CHAR-UPCASE #\;)
EQL-OK: #\;
(CHAR-UPCASE #\=)
EQL-OK: #\=
(CHAR= (CHAR-DOWNCASE (CHAR-UPCASE #\x)) #\x)
EQL-OK: T
(CHAR-DOWNCASE #\A)
EQL-OK: #\a
(CHAR-DOWNCASE #\a)
EQL-OK: #\a
(CHAR-DOWNCASE #\%)
EQL-OK: #\%
(CHAR-DOWNCASE #\+)
EQL-OK: #\+
(CHAR-DOWNCASE #\-)
EQL-OK: #\-
(CHAR= (CHAR-UPCASE (CHAR-DOWNCASE #\X)) #\X)
EQL-OK: T
(DIGIT-CHAR 7)
EQL-OK: #\7
(DIGIT-CHAR 12)
EQL-OK: NIL
(DIGIT-CHAR 'A)
[SIMPLE-TYPE-ERROR]: DIGIT-CHAR: the weight argument should be an integer, not A

EQL-OK: ERROR
(DIGIT-CHAR 12 16)
EQL-OK: #\C
(DIGIT-CHAR 6 2)
EQL-OK: NIL
(DIGIT-CHAR 1 2)
EQL-OK: #\1
CHAR-CONTROL-BIT
EQL-OK: 1
CHAR-META-BIT
EQL-OK: 2
CHAR-SUPER-BIT
EQL-OK: 4
CHAR-HYPER-BIT
EQL-OK: 8
(CHAR-NAME #\Space)
EQUAL-OK: "Space"
(CHAR-NAME #\Newline)
EQUAL-OK: "Newline"
(LET ((WRONG-CODES NIL)) (DOTIMES (CODE CHAR-CODE-LIMIT) (LET ((C (CODE-CHAR CODE))) (UNLESS (AND (OR (EQL C (NAME-CHAR (CHAR-NAME C))))) (PUSH CODE WRONG-CODES)))) WRONG-CODES)
EQL-OK: NIL
(LOOP :FOR I :FROM 0 :BELOW CHAR-CODE-LIMIT :FOR X = (CODE-CHAR I) :UNLESS (OR (NOT (CHARACTERP X)) (IF (OR (DIGIT-CHAR-P X) (ALPHA-CHAR-P X)) (ALPHANUMERICP X) (NOT (ALPHANUMERICP X)))) :COLLECT (LIST I X :DIGIT (DIGIT-CHAR-P X) :ALPHA (ALPHA-CHAR-P X) :ALPHANUMERICP (ALPHANUMERICP X)))
EQL-OK: NIL
(LOCALLY (DECLARE (COMPILE)) (LOOP :FOR I :FROM 0 :BELOW CHAR-CODE-LIMIT :FOR X = (CODE-CHAR I) :UNLESS (EQ (CHAR-INVERTCASE (CHAR-INVERTCASE X)) X) :COLLECT X))
EQL-OK: NIL
RUN-TEST: finished "characters" (0 errors out of 221 tests)
RUN-TEST: started #<INPUT BUFFERED FILE-STREAM CHARACTER #P"clos.tst" @1>
(USE-PACKAGE "CLOS")
EQL-OK: T
(UNINTERN '<C1>)
EQL-OK: T
(PROGN (DEFCLASS <C1> NIL ((X :INITFORM 0 :ACCESSOR X-VAL :READER GET-X :WRITER SET-X :INITARG :X) (Y :INITFORM 1 :ACCESSOR Y-VAL :READER GET-Y :WRITER SET-Y :INITARG :Y))) NIL)
EQL-OK: NIL
(PROGN (DEFCLASS <C2> (<C1>) ((Z :INITFORM 0 :ACCESSOR Z-VAL :READER GET-Z :WRITER SET-Z :INITARG :Z))) NIL)
EQL-OK: NIL
(DEFPARAMETER A (MAKE-INSTANCE (FIND-CLASS '<C1>) :X 10))
EQL-OK: A
(LET (CACHE) (DEFMETHOD SLOT-MISSING ((CLASS T) (OBJ <C1>) (SLOT-NAME T) (OPERATION T) &OPTIONAL (NEW-VALUE NIL NEW-VALUE-P)) (SETF CACHE (LIST SLOT-NAME OPERATION NEW-VALUE NEW-VALUE-P))) (LIST (SLOT-BOUNDP A 'ABCD) CACHE (SLOT-VALUE A 'ABCD) CACHE))
EQUAL-OK: (T (ABCD SLOT-BOUNDP NIL NIL) (ABCD SLOT-VALUE NIL NIL) (ABCD SLOT-VALUE NIL NIL))
(X-VAL A)
EQL-OK: 10
(Y-VAL A)
EQL-OK: 1
(SETF (X-VAL A) 20)
EQL-OK: 20
(X-VAL A)
EQL-OK: 20
(GET-X A)
EQL-OK: 20
(SET-X 10 A)
EQL-OK: 10
(X-VAL A)
EQL-OK: 10
(WITH-SLOTS (X Y) A (+ X Y))
EQL-OK: 11
(DEFUN FOO (Z) (WITH-SLOTS (X Y) Z (+ X Y)))
EQL-OK: FOO
(FOO A)
EQL-OK: 11
(COMPILE 'FOO)
EQL-OK: FOO
(FOO A)
EQL-OK: 11
(FMAKUNBOUND 'FOO)
EQL-OK: FOO
(X-VAL (REINITIALIZE-INSTANCE A :X 20))
EQL-OK: 20
(X-VAL (REINITIALIZE-INSTANCE A :X 30))
EQL-OK: 30
(X-VAL (REINITIALIZE-INSTANCE A :X 50))
EQL-OK: 50
(X-VAL (REINITIALIZE-INSTANCE A :X 80))
EQL-OK: 80
(X-VAL (REINITIALIZE-INSTANCE A :Y 20))
EQL-OK: 80
(Y-VAL (REINITIALIZE-INSTANCE A :X 30))
EQL-OK: 20
(X-VAL (REINITIALIZE-INSTANCE A :Y 50))
EQL-OK: 30
(Y-VAL (REINITIALIZE-INSTANCE A :X 80))
EQL-OK: 50
(DEFPARAMETER B (MAKE-INSTANCE (FIND-CLASS '<C2>) :X 10 :Y 20 :Z 30))
EQL-OK: B
(X-VAL B)
EQL-OK: 10
(Y-VAL B)
EQL-OK: 20
(Z-VAL B)
EQL-OK: 30
(LET* ((FN (DEFGENERIC F (X Y) (:METHOD ((X T) (Y T)) (LIST X Y)))) (METH1 (DEFMETHOD F ((I INTEGER) (J NUMBER)) (+ I J))) (METH2 (DEFMETHOD F ((S1 STRING) (S2 STRING)) (CONCATENATE 'STRING S1 S2)))) (LAMBDA NIL (DEFMETHOD F ((X LIST) (Y LIST)) (APPEND X Y))) (LIST (EQ METH1 (FIND-METHOD #'F NIL (LIST (FIND-CLASS 'INTEGER) (FIND-CLASS 'NUMBER)))) (EQ METH2 (FIND-METHOD #'F NIL (LIST (FIND-CLASS 'STRING) (FIND-CLASS 'STRING))))))
EQUAL-OK: (T T)
(F T T)
EQUAL-OK: (T T)
(F 2 3)
EQL-OK: 5
(F 2 3.0)
EQL-OK: 5.0
(F 2.0 3)
EQUAL-OK: (2.0 3)
(F "ab" "cd")
EQUAL-OK: "abcd"
(F 1 "abc")
EQUAL-OK: (1 "abc")
(PROGN (DEFGENERIC F (X Y) (:METHOD ((X T) (Y T)) (LIST X Y)) (:METHOD ((I NUMBER) (J INTEGER)) (LIST (CALL-NEXT-METHOD) (- I J))) (:METHOD ((I INTEGER) (J NUMBER)) (LIST (CALL-NEXT-METHOD) (+ I J)))) NIL)
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION F> is being
         modified, but has already been called.

WARNING: Replacing method
          #1=#<STANDARD-METHOD (#2=#<BUILT-IN-CLASS INTEGER> #3=#<BUILT-IN-CLASS NUMBER>)>
         in #<STANDARD-GENERIC-FUNCTION F>
EQL-OK: NIL
(F 'X 'Y)
EQUAL-OK: (X Y)
(F 1 2)
EQUAL-OK: (((1 2) -1) 3)
(F 1 2.0)
EQUAL-OK: ((1 2.0) 3.0)
(F 1.0 2)
EQUAL-OK: ((1.0 2) -1.0)
(PROGN (DEFGENERIC G (X) (:METHOD ((X NULL)) (CONS 'NULL (CALL-NEXT-METHOD))) (:METHOD ((X LIST)) (IF (NEXT-METHOD-P) (CONS 'LIST (CALL-NEXT-METHOD)) '(LIST$))) (:METHOD ((X SYMBOL)) (IF (NEXT-METHOD-P) (CONS 'SYMBOL (CALL-NEXT-METHOD)) '(SYMBOL$)))) NIL)
EQL-OK: NIL
(G 'X)
EQUAL-OK: (SYMBOL$)
(G '(X))
EQUAL-OK: (LIST$)
(G 'NIL)
EQUAL-OK: (NULL SYMBOL LIST$)
(DEFPARAMETER *HL* NIL)
EQL-OK: *HL*
(PROGN (DEFGENERIC HGEN (X) (:METHOD ((X INTEGER)) (SETF *HL* (CONS 'I-PRIMARY-1 *HL*)) (CALL-NEXT-METHOD) (SETF *HL* (CONS 'I-PRIMARY-2 *HL*))) (:METHOD :BEFORE ((X INTEGER)) (SETF *HL* (CONS 'I-BEFORE *HL*))) (:METHOD :AFTER ((X INTEGER)) (SETF *HL* (CONS 'I-AFTER *HL*))) (:METHOD :AROUND ((X INTEGER)) (SETF *HL* (CONS 'I-AROUND-1 *HL*)) (CALL-NEXT-METHOD) (SETF *HL* (CONS 'I-AROUND-2 *HL*))) (:METHOD ((X NUMBER)) (SETF *HL* (CONS 'N-PRIMARY-1 *HL*)) (CALL-NEXT-METHOD) (SETF *HL* (CONS 'N-PRIMARY-2 *HL*))) (:METHOD :BEFORE ((X NUMBER)) (SETF *HL* (CONS 'N-BEFORE *HL*))) (:METHOD :AFTER ((X NUMBER)) (SETF *HL* (CONS 'N-AFTER *HL*))) (:METHOD :AROUND ((X NUMBER)) (SETF *HL* (CONS 'N-AROUND-1 *HL*)) (CALL-NEXT-METHOD) (SETF *HL* (CONS 'N-AROUND-2 *HL*))) (:METHOD ((X T)) (SETF *HL* (CONS 'INNERMOST *HL*)))) (DEFUN H (X) (SETF *HL* 'NIL) (HGEN X) (REVERSE *HL*)))
EQL-OK: H
(H 'ABC)
EQUAL-OK: (INNERMOST)
(H 3.14)
EQUAL-OK: (N-AROUND-1 N-BEFORE N-PRIMARY-1 INNERMOST N-PRIMARY-2 N-AFTER N-AROUND-2)
(H 3)
EQUAL-OK: (I-AROUND-1 N-AROUND-1 I-BEFORE N-BEFORE I-PRIMARY-1 N-PRIMARY-1 INNERMOST N-PRIMARY-2 I-PRIMARY-2 N-AFTER I-AFTER N-AROUND-2 I-AROUND-2)
(PROGN (DEFGENERIC TESTGF00 (&REST ARGS &KEY) (:METHOD (&REST ARGS))) (TESTGF00 'A 'B))
[SIMPLE-KEYWORD-ERROR]: #:COMPILED-FORM-179-1: illegal keyword/value pair A, B in argument list.
The allowed keywords are NIL

EQL-OK: ERROR
(LET ((METHODS NIL)) (DEFGENERIC FOO136 (MODE OBJECT)) (DEFMETHOD FOO136 (MODE (OBJECT T)) (IF (EQ MODE 'STORE) (PUSH #'CALL-NEXT-METHOD METHODS) (IF (EQ MODE 'LIST) (LIST 'T) (CONS (LIST 'T) (FUNCALL MODE))))) (DEFMETHOD FOO136 (MODE (OBJECT NUMBER)) (IF (EQ MODE 'STORE) (PROGN (PUSH #'CALL-NEXT-METHOD METHODS) (CALL-NEXT-METHOD)) (IF (EQ MODE 'LIST) (CONS 'NUMBER (CALL-NEXT-METHOD)) (CONS (CONS 'NUMBER (CALL-NEXT-METHOD 'LIST OBJECT)) (FUNCALL MODE))))) (DEFMETHOD FOO136 (MODE (OBJECT REAL)) (IF (EQ MODE 'STORE) (PROGN (PUSH #'CALL-NEXT-METHOD METHODS) (CALL-NEXT-METHOD)) (IF (EQ MODE 'LIST) (CONS 'REAL (CALL-NEXT-METHOD)) (CONS (CONS 'REAL (CALL-NEXT-METHOD 'LIST OBJECT)) (FUNCALL MODE))))) (DEFMETHOD FOO136 (MODE (OBJECT RATIONAL)) (IF (EQ MODE 'STORE) (PROGN (PUSH #'CALL-NEXT-METHOD METHODS) (CALL-NEXT-METHOD)) (IF (EQ MODE 'LIST) (CONS 'RATIONAL (CALL-NEXT-METHOD)) (CONS (CONS 'RATIONAL (CALL-NEXT-METHOD 'LIST OBJECT)) (FUNCALL MODE))))) (DEFMETHOD FOO136 (MODE (OBJECT INTEGER)) (IF (EQ MODE 'STORE) (PROGN (PUSH #'CALL-NEXT-METHOD METHODS) (CALL-NEXT-METHOD)) (IF (EQ MODE 'LIST) (CONS 'INTEGER (CALL-NEXT-METHOD)) (CONS (CONS 'INTEGER (CALL-NEXT-METHOD 'LIST OBJECT)) (FUNCALL MODE))))) (FOO136 'STORE 3) (MULTIPLE-VALUE-BIND (T-ERROR-METHOD NUMBER-T-METHOD REAL-NUMBER-METHOD RATIONAL-REAL-METHOD INTEGER-RATIONAL-METHOD) (VALUES-LIST METHODS) (FOO136 #'(LAMBDA NIL (FUNCALL NUMBER-T-METHOD #'(LAMBDA NIL (FUNCALL INTEGER-RATIONAL-METHOD #'(LAMBDA NIL (FUNCALL REAL-NUMBER-METHOD #'(LAMBDA NIL NIL) 5)) 5)) 5)) 5)))
EQUAL-OK: ((INTEGER RATIONAL REAL NUMBER T) (T) (RATIONAL REAL NUMBER T) (NUMBER T))
(UNINTERN '<C1>)
EQL-OK: T
(PROGN (DEFCLASS <C1> NIL ((X :INITFORM 0 :ACCESSOR X-VAL :INITARG :X) (Y :INITFORM 1 :ACCESSOR Y-VAL :INITARG :Y))) NIL)
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION X-VAL> is being
         modified, but has already been called.

WARNING: The generic function #<STANDARD-GENERIC-FUNCTION (SETF X-VAL)> is
         being modified, but has already been called.

WARNING: The generic function #<STANDARD-GENERIC-FUNCTION Y-VAL> is being
         modified, but has already been called.
EQL-OK: NIL
(DEFPARAMETER A (MAKE-INSTANCE (FIND-CLASS '<C1>) :X 10))
EQL-OK: A
(DEFPARAMETER B (MAKE-INSTANCE (FIND-CLASS '<C1>) :Y 20 :X 10))
EQL-OK: B
(DEFPARAMETER C (MAKE-INSTANCE (FIND-CLASS '<C1>)))
EQL-OK: C
(X-VAL A)
EQL-OK: 10
(Y-VAL A)
EQL-OK: 1
(X-VAL B)
EQL-OK: 10
(Y-VAL B)
EQL-OK: 20
(X-VAL C)
EQL-OK: 0
(Y-VAL C)
EQL-OK: 1
(UNINTERN '<C1>)
EQL-OK: T
(LET* ((C (DEFCLASS <C1> NIL ((X :INITFORM 0 :ACCESSOR X-VAL :INITARG :X) (Y :INITFORM 1 :ACCESSOR Y-VAL :INITARG :Y)))) (M (DEFMETHOD INITIALIZE-INSTANCE :AFTER ((INSTANCE <C1>) &REST INITVALUES) (IF (= (X-VAL INSTANCE) 0) (SETF (X-VAL INSTANCE) (Y-VAL INSTANCE)))))) (EQ M (FIND-METHOD #'INITIALIZE-INSTANCE '(:AFTER) (LIST C))))
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION X-VAL> is being
         modified, but has already been called.

WARNING: The generic function #<STANDARD-GENERIC-FUNCTION Y-VAL> is being
         modified, but has already been called.
EQL-OK: T
(X-VAL (MAKE-INSTANCE (FIND-CLASS '<C1>)))
EQL-OK: 1
(X-VAL (MAKE-INSTANCE (FIND-CLASS '<C1>) :X 10))
EQL-OK: 10
(X-VAL (MAKE-INSTANCE (FIND-CLASS '<C1>) :Y 20))
EQL-OK: 20
(X-VAL (MAKE-INSTANCE (FIND-CLASS '<C1>) :X 10 :Y 20))
EQL-OK: 10
(LET ((M (DEFMETHOD INITIALIZE-INSTANCE ((INST <C1>) &REST IGNORE) (CALL-NEXT-METHOD) 123))) (EQ M (FIND-METHOD #'INITIALIZE-INSTANCE NIL (LIST (FIND-CLASS '<C1>)))))
EQL-OK: T
(X-VAL (MAKE-INSTANCE (FIND-CLASS '<C1>) :X 101 :Y 120))
EQL-OK: 101
(SETF (FIND-CLASS '<C1>) NIL)
EQL-OK: NIL
(UNINTERN '<C1>)
EQL-OK: T
(EQ (CLASS-OF NIL) (FIND-CLASS 'NULL))
EQL-OK: T
(EQ (CLASS-OF T) (FIND-CLASS 'SYMBOL))
EQL-OK: T
(EQ (CLASS-OF 10) (FIND-CLASS 'INTEGER))
EQL-OK: T
(EQ (CLASS-OF 10.0) (FIND-CLASS 'FLOAT))
EQL-OK: T
(EQ (CLASS-OF '(A B)) (FIND-CLASS 'CONS))
EQL-OK: T
(EQ (CLASS-OF "abc") (FIND-CLASS 'STRING))
EQL-OK: T
(EQ (CLASS-OF '#(1 2)) (FIND-CLASS 'VECTOR))
EQL-OK: T
(EQ (CLASS-OF #'CAR) (FIND-CLASS 'FUNCTION))
EQL-OK: T
(EQ (CLASS-OF #'MAKE-INSTANCE) (FIND-CLASS 'STANDARD-GENERIC-FUNCTION))
EQL-OK: T
(EQ (CLASS-OF '#2A((A) (B))) (FIND-CLASS 'ARRAY))
EQL-OK: T
(EQ (CLASS-OF *STANDARD-INPUT*) (FIND-CLASS 'STREAM))
EQL-OK: NIL
(EQ (CLASS-OF (LAMBDA (X) X)) (FIND-CLASS 'FUNCTION))
EQL-OK: T
(EQ (CLASS-OF (FIND-CLASS 'T)) (FIND-CLASS 'BUILT-IN-CLASS))
EQL-OK: T
(EQ (CLASS-OF (MAKE-ARRAY NIL)) (FIND-CLASS 'ARRAY))
EQL-OK: T
(EQ (CLASS-OF (MAKE-ARRAY NIL :ELEMENT-TYPE NIL)) (FIND-CLASS 'ARRAY))
EQL-OK: T
(EQ (CLASS-OF (MAKE-ARRAY 10 :ELEMENT-TYPE NIL)) (FIND-CLASS 'STRING))
EQL-OK: T
(TYPEP "abc" (FIND-CLASS 'T))
EQL-OK: T
(TYPEP "abc" (FIND-CLASS 'ARRAY))
EQL-OK: T
(TYPEP "abc" (FIND-CLASS 'VECTOR))
EQL-OK: T
(TYPEP "abc" (FIND-CLASS 'STRING))
EQL-OK: T
(TYPEP "abc" (FIND-CLASS 'INTEGER))
EQL-OK: NIL
(TYPEP 3 (FIND-CLASS 'T))
EQL-OK: T
(TYPEP 3 (FIND-CLASS 'NUMBER))
EQL-OK: T
(TYPEP 3 (FIND-CLASS 'FLOAT))
EQL-OK: NIL
(TYPEP 3 (FIND-CLASS 'INTEGER))
EQL-OK: T
(TYPEP 3 (FIND-CLASS 'STRING))
EQL-OK: NIL
(NOT (NOT (TYPEP *STANDARD-INPUT* (FIND-CLASS 'STREAM))))
EQL-OK: T
(DEFUN SUBCLASSP (CLASS1 CLASS2) (CLOS::SUBCLASSP CLASS1 CLASS2))
EQL-OK: SUBCLASSP
(SUBCLASSP (FIND-CLASS 'NUMBER) (FIND-CLASS 'T))
EQL-OK: T
(SUBCLASSP (FIND-CLASS 'INTEGER) (FIND-CLASS 'NUMBER))
EQL-OK: T
(SUBCLASSP (FIND-CLASS 'FLOAT) (FIND-CLASS 'NUMBER))
EQL-OK: T
(DEFUN MLF-TESTER (SYMBOL &OPTIONAL (LISP-FILE "make-load-form-demo.lisp")) (UNWIND-PROTECT (LET (COMPILED-FILE) (WITH-OPEN-FILE (STREAM LISP-FILE :DIRECTION :OUTPUT) (FORMAT STREAM "(in-package ~s)~%(defparameter ~S '#.~S)~%" (PACKAGE-NAME (SYMBOL-PACKAGE SYMBOL)) SYMBOL SYMBOL)) (SETQ COMPILED-FILE (COMPILE-FILE LISP-FILE)) (SETF (SYMBOL-VALUE SYMBOL) NIL) (LOAD COMPILED-FILE) (SYMBOL-VALUE SYMBOL)) (POST-COMPILE-FILE-CLEANUP LISP-FILE)))
EQL-OK: MLF-TESTER
(DEFUN MLF-KILL (TYPE) (LET ((M (FIND-METHOD #'MAKE-LOAD-FORM NIL (LIST (FIND-CLASS TYPE)) NIL))) (WHEN M (REMOVE-METHOD #'MAKE-LOAD-FORM M))) (SETF (FIND-CLASS TYPE) NIL))
EQL-OK: MLF-KILL
(PROGN (DEFCLASS TEST-CLASS1 NIL ((FOO :INITARG :FOO :ACCESSOR FOO :INITFORM 0))) (DEFCLASS TEST-CLASS2 NIL ((FOO :INITARG :FOO :ACCESSOR FOO :INITFORM 0))) (DEFMETHOD MAKE-LOAD-FORM ((OBJ TEST-CLASS1) &OPTIONAL ENVIRONMENT) (DECLARE (IGNORE ENVIRONMENT)) `(MAKE-INSTANCE 'TEST-CLASS1 :FOO ',(FOO OBJ))) (DEFMETHOD MAKE-LOAD-FORM ((OBJ TEST-CLASS2) &OPTIONAL ENVIRONMENT) (DECLARE (IGNORE ENVIRONMENT)) `(MAKE-INSTANCE 'TEST-CLASS2 :FOO ',(FOO OBJ))) (DEFPARAMETER *T-LIST* (LIST (MAKE-INSTANCE 'TEST-CLASS1 :FOO 100) (MAKE-INSTANCE 'TEST-CLASS2 :FOO 200))) (MLF-TESTER '*T-LIST*) (MAPCAR #'FOO *T-LIST*))
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/make-load-form-demo.lisp ...

;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/make-load-form-demo.fas
0 errors, 0 warnings
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/make-load-form-demo.fas ...

;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/make-load-form-demo.fas
EQUAL-OK: (100 200)
(DEFSTRUCT FOO A)
EQL-OK: FOO
(PROGN (DEFMETHOD MAKE-LOAD-FORM ((X FOO) &OPTIONAL ENV) (MAKE-LOAD-FORM-SAVING-SLOTS X :ENVIRONMENT ENV)) (DEFPARAMETER *TMP-FILE* "mlf-tmp.lisp") (WITH-OPEN-FILE (S *TMP-FILE* :DIRECTION :OUTPUT) (FORMAT S "(defparameter *foo* '#S(FOO :A BAR-CONST))~%")) (LOAD (COMPILE-FILE *TMP-FILE*)) *FOO*)
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/mlf-tmp.lisp ...

;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/mlf-tmp.fas
0 errors, 0 warnings
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/mlf-tmp.fas ...

;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/mlf-tmp.fas
EQUALP-OK: #S(FOO :A BAR-CONST)
(PROGN (MAKUNBOUND '*FOO*) (DEFCONSTANT BAR-CONST 1) (UNWIND-PROTECT (PROGN (LOAD (COMPILE-FILE *TMP-FILE*)) *FOO*) (POST-COMPILE-FILE-CLEANUP *TMP-FILE*) (MLF-KILL 'FOO)))
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/mlf-tmp.lisp ...

;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/mlf-tmp.fas
0 errors, 0 warnings
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/mlf-tmp.fas ...

;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/mlf-tmp.fas
EQUALP-OK: #<FOO BAR-CONST>
(PROGN (DEFCLASS POS NIL ((X :INITARG :X :READER POS-X) (Y :INITARG :Y :READER POS-Y) (R :ACCESSOR POS-R))) (DEFMETHOD SHARED-INITIALIZE :AFTER ((SELF POS) IGNORE1 &REST IGNORE2) (DECLARE (IGNORE IGNORE1 IGNORE2)) (UNLESS (SLOT-BOUNDP SELF 'R) (SETF (POS-R SELF) (SQRT (+ (* (POS-X SELF) (POS-X SELF)) (* (POS-Y SELF) (POS-Y SELF))))))) (DEFMETHOD MAKE-LOAD-FORM ((SELF POS) &OPTIONAL ENVIRONMENT) (DECLARE (IGNORE ENVIRONMENT)) `(MAKE-INSTANCE ',(CLASS-NAME (CLASS-OF SELF)) :X ',(POS-X SELF) :Y ',(POS-Y SELF))) (SETQ *FOO* (MAKE-INSTANCE 'POS :X 3.0 :Y 4.0)) (MLF-TESTER '*FOO*) (LIST (POS-X *FOO*) (POS-Y *FOO*) (POS-R *FOO*)))
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/make-load-form-demo.lisp ...

;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/make-load-form-demo.fas
0 errors, 0 warnings
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/make-load-form-demo.fas ...

;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/make-load-form-demo.fas
EQUAL-OK: (3.0 4.0 5.0)
(PROGN (DEFCLASS TREE-WITH-PARENT NIL ((PARENT :ACCESSOR TREE-PARENT) (CHILDREN :INITARG :CHILDREN))) (DEFMETHOD MAKE-LOAD-FORM ((X TREE-WITH-PARENT) &OPTIONAL ENVIRONMENT) (DECLARE (IGNORE ENVIRONMENT)) (VALUES `(MAKE-INSTANCE ',(CLASS-NAME (CLASS-OF X))) `(SETF (TREE-PARENT ',X) ',(SLOT-VALUE X 'PARENT) (SLOT-VALUE ',X 'CHILDREN) ',(SLOT-VALUE X 'CHILDREN)))) (SETQ *FOO* (MAKE-INSTANCE 'TREE-WITH-PARENT :CHILDREN (LIST (MAKE-INSTANCE 'TREE-WITH-PARENT :CHILDREN NIL) (MAKE-INSTANCE 'TREE-WITH-PARENT :CHILDREN NIL)))) (SETF (TREE-PARENT *FOO*) *FOO*) (DOLIST (CH (SLOT-VALUE *FOO* 'CHILDREN)) (SETF (TREE-PARENT CH) *FOO*)) (MLF-TESTER '*FOO*) (LIST (EQ *FOO* (TREE-PARENT *FOO*)) (EVERY (LAMBDA (X) (EQ X *FOO*)) (MAPCAR #'TREE-PARENT (SLOT-VALUE *FOO* 'CHILDREN))) (EVERY #'NULL (MAPCAR (LAMBDA (X) (SLOT-VALUE X 'CHILDREN)) (SLOT-VALUE *FOO* 'CHILDREN)))))
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/make-load-form-demo.lisp ...

;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/make-load-form-demo.fas
0 errors, 0 warnings
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/make-load-form-demo.fas ...

;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/make-load-form-demo.fas
EQUAL-OK: (T T T)
(PROGN (DEFPARAMETER *INITFORM-EXECUTED-COUNTER* 0) (DEFSTRUCT FOO (SLOT-1 (INCF *INITFORM-EXECUTED-COUNTER*))) (DEFPARAMETER *FOO* (MAKE-FOO)))
EQL-OK: *FOO*
*FOO*
EQUALP-OK: #S(FOO :SLOT-1 1)
*INITFORM-EXECUTED-COUNTER*
EQL-OK: 1
(PROGN (MAPC #'EVAL (MULTIPLE-VALUE-LIST (MAKE-LOAD-FORM-SAVING-SLOTS *FOO*))) *INITFORM-EXECUTED-COUNTER*)
EQL-OK: 1
(PROGN (DEFMETHOD PRINT-OBJECT ((F FOO) (O STREAM)) (FORMAT O "~1t<~a>" (FOO-SLOT-1 F))) (PRIN1-TO-STRING (MAKE-FOO)))
EQUAL-OK: " <2>"
(PROGN (MLF-KILL 'FOO) NIL)
EQL-OK: NIL
(DEFSTRUCT FOO SLOT)
EQL-OK: FOO
(LET ((FILE "foo.lisp") C) (UNWIND-PROTECT (PROGN (MAKUNBOUND '*FOO*) (WITH-OPEN-FILE (F FILE :DIRECTION :OUTPUT) (FORMAT F "(eval-when (compile load eval) (defstruct foo slot))~@
                      (defparameter *foo* #.(make-foo))~%")) (LOAD (SETQ C (COMPILE-FILE FILE))) *FOO*) (POST-COMPILE-FILE-CLEANUP FILE)))
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/foo.lisp ...
WARNING: (SETF FIND-CLASS): redefining class FOO in
         /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/foo.lisp,
         was defined in top-level
;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/foo.fas
0 errors, 0 warnings
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/foo.fas ...

;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/foo.fas
EQUALP-OK: #S(FOO :SLOT NIL)
(FLET ((WEAK-LIST-LENGTH (W) (IF W (SYSTEM::%RECORD-REF (SYSTEM::%RECORD-REF W 0) 1) 0))) (LET (OLD1-WEAKPOINTERS-COUNT OLD-SUBCLASSES-COUNT OLD2-WEAKPOINTERS-COUNT NEW-SUBCLASSES-COUNT NEW-WEAKPOINTERS-COUNT) (DEFCLASS FOO64A NIL NIL) (DEFCLASS FOO64B (FOO64A) NIL) (LET ((USYMBOL (GENSYM))) (EVAL `(DEFCLASS ,USYMBOL (FOO64A) NIL)) (SETQ OLD1-WEAKPOINTERS-COUNT (WEAK-LIST-LENGTH (CLOS::CLASS-FINALIZED-DIRECT-SUBCLASSES-TABLE (FIND-CLASS 'FOO64A)))) (SETF (SYMBOL-VALUE USYMBOL) (1- (LENGTH (CLOS::LIST-ALL-FINALIZED-SUBCLASSES (FIND-CLASS 'FOO64A))))) (SETQ OLD2-WEAKPOINTERS-COUNT (WEAK-LIST-LENGTH (CLOS::CLASS-FINALIZED-DIRECT-SUBCLASSES-TABLE (FIND-CLASS 'FOO64A)))) (SETQ OLD-SUBCLASSES-COUNT (SYMBOL-VALUE USYMBOL))) (GC) (SETQ NEW-SUBCLASSES-COUNT (1- (LENGTH (CLOS::LIST-ALL-FINALIZED-SUBCLASSES (FIND-CLASS 'FOO64A))))) (SETQ NEW-WEAKPOINTERS-COUNT (WEAK-LIST-LENGTH (CLOS::CLASS-FINALIZED-DIRECT-SUBCLASSES-TABLE (FIND-CLASS 'FOO64A)))) (LIST OLD1-WEAKPOINTERS-COUNT OLD-SUBCLASSES-COUNT OLD2-WEAKPOINTERS-COUNT NEW-SUBCLASSES-COUNT NEW-WEAKPOINTERS-COUNT)))
EQUAL-OK: (2 2 2 1 1)
(LET (OLD-WEAKPOINTERS-COUNT NEW-WEAKPOINTERS-COUNT) (DEFCLASS FOO64C NIL NIL) (DEFCLASS FOO64D (FOO64C) NIL) (LET ((USYMBOL (GENSYM))) (EVAL `(DEFCLASS ,USYMBOL (FOO64C) NIL)) (SETQ OLD-WEAKPOINTERS-COUNT (LENGTH (CLASS-DIRECT-SUBCLASSES (FIND-CLASS 'FOO64C)))) (SETF (SYMBOL-VALUE USYMBOL) NIL)) (GC) (SETQ NEW-WEAKPOINTERS-COUNT (LENGTH (CLASS-DIRECT-SUBCLASSES (FIND-CLASS 'FOO64C)))) (LIST OLD-WEAKPOINTERS-COUNT NEW-WEAKPOINTERS-COUNT))
EQUAL-OK: (2 1)
(PROGN (DEFCLASS ABSTRACT-POSITION NIL NIL) (DEFCLASS X-Y-POSITION (ABSTRACT-POSITION) ((NAME :INITARG :NAME) (X :INITFORM 0 :INITARG :X) (Y :INITFORM 0 :INITARG :Y))) (DEFCLASS RHO-THETA-POSITION (ABSTRACT-POSITION) ((NAME :INITARG :NAME) (RHO :INITFORM 0) (THETA :INITFORM 0))) (DEFMETHOD UPDATE-INSTANCE-FOR-DIFFERENT-CLASS :BEFORE ((OLD X-Y-POSITION) (NEW RHO-THETA-POSITION) &KEY) (LET ((X (SLOT-VALUE OLD 'X)) (Y (SLOT-VALUE OLD 'Y))) (SETF (SLOT-VALUE NEW 'RHO) (SQRT (+ (* X X) (* Y Y))) (SLOT-VALUE NEW 'THETA) (ATAN Y X)))) (SETQ P1 (MAKE-INSTANCE 'X-Y-POSITION :NAME 'FOO :X 2 :Y 0) P2 (MAKE-INSTANCE 'X-Y-POSITION :NAME 'BAR :X 1 :Y 1)) (CHANGE-CLASS P1 'RHO-THETA-POSITION) (CHANGE-CLASS P2 'RHO-THETA-POSITION) (LIST (SLOT-VALUE P1 'NAME) (SLOT-VALUE P1 'RHO) (SLOT-VALUE P1 'THETA) (SLOT-VALUE P2 'NAME) (SLOT-VALUE P2 'RHO) (SLOT-VALUE P2 'THETA)))
EQUAL-OK: (FOO 2 0 BAR 1.4142135 0.7853981)
(PROGN (DEFCLASS C0 NIL (A B C)) (DEFCLASS C1 NIL (B C A)) (SETQ I (MAKE-INSTANCE 'C0)) (SETF (SLOT-VALUE I 'A) 1 (SLOT-VALUE I 'B) 2 (SLOT-VALUE I 'C) 3) (CHANGE-CLASS I 'C1) (LIST (SLOT-VALUE I 'A) (SLOT-VALUE I 'B) (SLOT-VALUE I 'C)))
EQUAL-OK: (1 2 3)
(PROGN (DEFCLASS C1 NIL NIL) (DEFCLASS C2 NIL NIL) (LIST (LET ((C (MAKE-INSTANCE 'C1))) (LIST (TYPE-OF (CHANGE-CLASS C 'C2)) (TYPE-OF (CHANGE-CLASS C 'C1)))) (LET ((C (MAKE-INSTANCE 'C1))) (LIST (TYPE-OF (CHANGE-CLASS C 'C1)) (TYPE-OF (CHANGE-CLASS C 'C1))))))
WARNING: DEFCLASS: Class C1 (or one of its ancestors) is being redefined,
         instances are obsolete
EQUAL-OK: ((C2 C1) (C1 C1))
(PROGN (DEFCLASS C7 NIL ((NAME :INITARG :NAME))) (DEFCLASS C8 NIL ((PEOPLE :INITARG :PEOPLE) NAME)) (LET ((X (MAKE-INSTANCE 'C7 :NAME 'QUEEN-MARY))) (CHANGE-CLASS X 'C8 :PEOPLE 700) (LIST (SLOT-VALUE X 'NAME) (SLOT-VALUE X 'PEOPLE))))
EQUAL-OK: (QUEEN-MARY 700)
(PROGN (DEFCLASS C3 NIL (A B C)) (DEFCLASS C4 NIL (B C D E)) (LET* ((I (MAKE-INSTANCE 'C3)) (NSLOTS-BEFORE (SYSTEM::%RECORD-LENGTH I))) (CHANGE-CLASS I 'C4) (GC) (< NSLOTS-BEFORE (SYSTEM::%RECORD-LENGTH I))))
EQL-OK: T
(LET (C1 C2) (DEFCLASS FOO60-B NIL NIL) (DEFCLASS FOO60-A (FOO60-B) NIL) (MAKE-INSTANCE 'FOO60-B) (SETQ C1 (FIND-CLASS 'FOO60-A)) (DEFCLASS FOO60-A NIL NIL) (SETQ C2 (FIND-CLASS 'FOO60-A)) (EQ C1 C2))
EQL-OK: T
(LET (C1 C2) (DEFCLASS FOO61-A (FOO61-B) NIL) (SETQ C1 (FIND-CLASS 'FOO61-A)) (DEFCLASS FOO61-A NIL NIL) (SETQ C2 (FIND-CLASS 'FOO61-A)) (EQ C1 C2))
EQL-OK: T
(PROGN (DEFCLASS FOO62-B (FOO62-A) NIL) (DEFCLASS FOO62-C (FOO62-B) NIL) (DEFCLASS FOO62-A NIL NIL) (MAKE-INSTANCE 'FOO62-C) (LIST (SUBTYPEP 'FOO62-B 'FOO62-B) (SUBTYPEP 'FOO62-C 'FOO62-B) (SUBTYPEP 'FOO62-B 'FOO62-C)))
EQUAL-OK: (T T NIL)
(PROGN (DEFCLASS FOO63-B (FOO63-A) NIL) (DEFCLASS FOO63-C (FOO63-B) NIL) (DEFCLASS FOO63-A NIL NIL) (LIST (SUBTYPEP 'FOO63-B 'FOO63-B) (SUBTYPEP 'FOO63-C 'FOO63-B) (SUBTYPEP 'FOO63-B 'FOO63-C)))
EQUAL-OK: (T T NIL)
(LET (FA FB FC) (DEFCLASS FOO65A NIL NIL) (DEFCLASS FOO65B (FOO65A) NIL) (DEFCLASS FOO65C (FOO65B) NIL) (SETQ FA (CLASS-FINALIZED-P (FIND-CLASS 'FOO65A)) FB (CLASS-FINALIZED-P (FIND-CLASS 'FOO65B)) FC (CLASS-FINALIZED-P (FIND-CLASS 'FOO65C))) (DEFCLASS FOO65B (FOO65A FOO65OTHER) NIL) (LIST FA FB FC (CLASS-FINALIZED-P (FIND-CLASS 'FOO65A)) (CLASS-FINALIZED-P (FIND-CLASS 'FOO65B)) (CLASS-FINALIZED-P (FIND-CLASS 'FOO65C))))
EQUAL-OK: (T T T T NIL NIL)
(PROGN (DEFCLASS ABSTRACT-POSITION NIL NIL) (DEFCLASS X-Y-POSITION (ABSTRACT-POSITION) ((X :INITFORM 0 :ACCESSOR POSITION-X) (Y :INITFORM 0 :ACCESSOR POSITION-Y))) (SETF I (MAKE-INSTANCE 'X-Y-POSITION) (POSITION-X I) 1.0d0 (POSITION-Y I) 1.0d0) (TYPE-OF I))
WARNING: DEFCLASS: Class X-Y-POSITION (or one of its ancestors) is being
         redefined, instances are obsolete
EQL-OK: X-Y-POSITION
(PROGN (DEFMETHOD UPDATE-INSTANCE-FOR-REDEFINED-CLASS :BEFORE ((POS X-Y-POSITION) ADDED DELETED PLIST &KEY) (LET ((X (GETF PLIST 'X)) (Y (GETF PLIST 'Y))) (SETF (POSITION-RHO POS) (SQRT (+ (* X X) (* Y Y))) (POSITION-THETA POS) (ATAN Y X)))) (DEFCLASS X-Y-POSITION (ABSTRACT-POSITION) ((RHO :INITFORM 0 :ACCESSOR POSITION-RHO) (THETA :INITFORM 0 :ACCESSOR POSITION-THETA))) (DEFMETHOD POSITION-X ((POS X-Y-POSITION)) (WITH-SLOTS (RHO THETA) POS (* RHO (COS THETA)))) (DEFMETHOD (SETF POSITION-X) (NEW-X (POS X-Y-POSITION)) (WITH-SLOTS (RHO THETA) POS (LET ((Y (POSITION-Y POS))) (SETQ RHO (SQRT (+ (* NEW-X NEW-X) (* Y Y))) THETA (ATAN Y NEW-X)) NEW-X))) (DEFMETHOD POSITION-Y ((POS X-Y-POSITION)) (WITH-SLOTS (RHO THETA) POS (* RHO (SIN THETA)))) (DEFMETHOD (SETF POSITION-Y) (NEW-Y (POS X-Y-POSITION)) (WITH-SLOTS (RHO THETA) POS (LET ((X (POSITION-X POS))) (SETQ RHO (SQRT (+ (* X X) (* NEW-Y NEW-Y))) THETA (ATAN NEW-Y X)) NEW-Y))) (LIST (TYPE-OF I) (POSITION-X I) (POSITION-Y I) (POSITION-RHO I) (POSITION-THETA I)))
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION (SETF POSITION-Y)>
         is being modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-WRITER-METHOD (#2=#<BUILT-IN-CLASS T> #3=#<STANDARD-CLASS X-Y-POSITION :VERSION 1>)>
         in #<STANDARD-GENERIC-FUNCTION (SETF POSITION-Y)>

WARNING: The generic function #<STANDARD-GENERIC-FUNCTION (SETF POSITION-X)>
         is being modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-WRITER-METHOD (#2=#<BUILT-IN-CLASS T> #3=#<STANDARD-CLASS X-Y-POSITION :VERSION 1>)>
         in #<STANDARD-GENERIC-FUNCTION (SETF POSITION-X)>

WARNING: DEFCLASS: Class X-Y-POSITION (or one of its ancestors) is being
         redefined, instances are obsolete
EQUAL-OK: (X-Y-POSITION 1.0000000000000002d0 1.0d0 1.4142135623730951d0 0.7853981633974483d0)
(MULTIPLE-VALUE-BIND (VALUE CONDITION) (IGNORE-ERRORS (DEFCLASS FOO70 NIL NIL) (SETQ I (MAKE-INSTANCE 'FOO70)) (DEFCLASS FOO70 NIL ((SIZE :INITARG :SIZE :INITFORM 1) (OTHER))) (SLOT-VALUE I 'SIZE)) (LIST VALUE (TYPEP CONDITION 'ERROR)))
WARNING: DEFCLASS: Class FOO70 (or one of its ancestors) is being redefined,
         instances are obsolete
EQUAL-OK: (1 NIL)
(MULTIPLE-VALUE-BIND (VALUE CONDITION) (IGNORE-ERRORS (DEFCLASS FOO71 NIL NIL) (SETQ I (MAKE-INSTANCE 'FOO71)) (DEFCLASS FOO71 NIL ((SIZE :INITARG :SIZE :INITFORM 1 :ALLOCATION :CLASS) (OTHER))) (SLOT-VALUE I 'SIZE)) (LIST VALUE (TYPEP CONDITION 'ERROR)))
WARNING: DEFCLASS: Class FOO71 (or one of its ancestors) is being redefined,
         instances are obsolete
EQUAL-OK: (1 NIL)
(MULTIPLE-VALUE-BIND (VALUE CONDITION) (IGNORE-ERRORS (DEFCLASS FOO72 NIL ((SIZE :INITARG :SIZE :INITFORM 1))) (SETQ I (MAKE-INSTANCE 'FOO72 :SIZE 5)) (DEFCLASS FOO72 NIL ((OTHER))) (SLOT-VALUE I 'SIZE)) (LIST VALUE (TYPEP CONDITION 'ERROR)))
WARNING: DEFCLASS: Class FOO72 (or one of its ancestors) is being redefined,
         instances are obsolete
EQUAL-OK: (NIL T)
(MULTIPLE-VALUE-BIND (VALUE CONDITION) (IGNORE-ERRORS (DEFCLASS FOO73 NIL ((SIZE :INITARG :SIZE :INITFORM 1 :ALLOCATION :CLASS))) (SETQ I (MAKE-INSTANCE 'FOO73)) (DEFCLASS FOO73 NIL ((OTHER))) (SLOT-VALUE I 'SIZE)) (LIST VALUE (TYPEP CONDITION 'ERROR)))
WARNING: DEFCLASS: Class FOO73 (or one of its ancestors) is being redefined,
         instances are obsolete
EQUAL-OK: (NIL T)
(MULTIPLE-VALUE-BIND (VALUE CONDITION) (IGNORE-ERRORS (DEFCLASS FOO74 NIL ((SIZE :INITARG :SIZE :INITFORM 1 :ALLOCATION :CLASS))) (SETQ I (MAKE-INSTANCE 'FOO74)) (DEFCLASS FOO74 NIL ((SIZE :INITARG :SIZE :INITFORM 2 :ALLOCATION :CLASS) (OTHER))) (SLOT-VALUE I 'SIZE)) (LIST VALUE (TYPEP CONDITION 'ERROR)))
WARNING: DEFCLASS: Class FOO74 (or one of its ancestors) is being redefined,
         instances are obsolete
EQUAL-OK: (1 NIL)
(MULTIPLE-VALUE-BIND (VALUE CONDITION) (IGNORE-ERRORS (DEFCLASS FOO75 NIL ((SIZE :INITARG :SIZE :INITFORM 1 :ALLOCATION :CLASS))) (SETQ I (MAKE-INSTANCE 'FOO75)) (DEFCLASS FOO75 NIL ((SIZE :INITARG :SIZE :INITFORM 2) (OTHER))) (SLOT-VALUE I 'SIZE)) (LIST VALUE (TYPEP CONDITION 'ERROR)))
WARNING: DEFCLASS: Class FOO75 (or one of its ancestors) is being redefined,
         instances are obsolete
EQUAL-OK: (1 NIL)
(MULTIPLE-VALUE-BIND (VALUE CONDITION) (IGNORE-ERRORS (DEFCLASS FOO76 NIL ((SIZE :INITARG :SIZE :INITFORM 1))) (SETQ I (MAKE-INSTANCE 'FOO76 :SIZE 5)) (DEFCLASS FOO76 NIL ((SIZE :INITARG :SIZE :INITFORM 2) (OTHER))) (SLOT-VALUE I 'SIZE)) (LIST VALUE (TYPEP CONDITION 'ERROR)))
WARNING: DEFCLASS: Class FOO76 (or one of its ancestors) is being redefined,
         instances are obsolete
EQUAL-OK: (5 NIL)
(MULTIPLE-VALUE-BIND (VALUE CONDITION) (IGNORE-ERRORS (DEFCLASS FOO77 NIL ((SIZE :INITARG :SIZE :INITFORM 1))) (SETQ I (MAKE-INSTANCE 'FOO77 :SIZE 5)) (DEFCLASS FOO77 NIL ((SIZE :INITARG :SIZE :INITFORM 2 :ALLOCATION :CLASS) (OTHER))) (SLOT-VALUE I 'SIZE)) (LIST VALUE (TYPEP CONDITION 'ERROR)))
WARNING: DEFCLASS: Class FOO77 (or one of its ancestors) is being redefined,
         instances are obsolete
EQUAL-OK: (2 NIL)
(MULTIPLE-VALUE-BIND (VALUE CONDITION) (IGNORE-ERRORS (DEFCLASS FOO80A NIL NIL) (DEFCLASS FOO80B (FOO80A) NIL) (SETQ I (MAKE-INSTANCE 'FOO80B)) (DEFCLASS FOO80A NIL ((SIZE :INITARG :SIZE :INITFORM 1) (OTHER))) (SLOT-VALUE I 'SIZE)) (LIST VALUE (TYPEP CONDITION 'ERROR)))
WARNING: DEFCLASS: Class FOO80B (or one of its ancestors) is being redefined,
         instances are obsolete
EQUAL-OK: (1 NIL)
(MULTIPLE-VALUE-BIND (VALUE CONDITION) (IGNORE-ERRORS (DEFCLASS FOO81A NIL NIL) (DEFCLASS FOO81B (FOO81A) NIL) (SETQ I (MAKE-INSTANCE 'FOO81B)) (DEFCLASS FOO81A NIL ((SIZE :INITARG :SIZE :INITFORM 1 :ALLOCATION :CLASS) (OTHER))) (SLOT-VALUE I 'SIZE)) (LIST VALUE (TYPEP CONDITION 'ERROR)))
WARNING: DEFCLASS: Class FOO81B (or one of its ancestors) is being redefined,
         instances are obsolete
EQUAL-OK: (1 NIL)
(MULTIPLE-VALUE-BIND (VALUE CONDITION) (IGNORE-ERRORS (DEFCLASS FOO82A NIL ((SIZE :INITARG :SIZE :INITFORM 1))) (DEFCLASS FOO82B (FOO82A) NIL) (SETQ I (MAKE-INSTANCE 'FOO82B :SIZE 5)) (DEFCLASS FOO82A NIL ((OTHER))) (SLOT-VALUE I 'SIZE)) (LIST VALUE (TYPEP CONDITION 'ERROR)))
WARNING: DEFCLASS: Class FOO82B (or one of its ancestors) is being redefined,
         instances are obsolete
EQUAL-OK: (NIL T)
(MULTIPLE-VALUE-BIND (VALUE CONDITION) (IGNORE-ERRORS (DEFCLASS FOO83A NIL ((SIZE :INITARG :SIZE :INITFORM 1 :ALLOCATION :CLASS))) (DEFCLASS FOO83B (FOO83A) NIL) (SETQ I (MAKE-INSTANCE 'FOO83B)) (DEFCLASS FOO83A NIL ((OTHER))) (SLOT-VALUE I 'SIZE)) (LIST VALUE (TYPEP CONDITION 'ERROR)))
WARNING: DEFCLASS: Class FOO83B (or one of its ancestors) is being redefined,
         instances are obsolete
EQUAL-OK: (NIL T)
(MULTIPLE-VALUE-BIND (VALUE CONDITION) (IGNORE-ERRORS (DEFCLASS FOO84A NIL ((SIZE :INITARG :SIZE :INITFORM 1 :ALLOCATION :CLASS))) (DEFCLASS FOO84B (FOO84A) NIL) (SETQ I (MAKE-INSTANCE 'FOO84B)) (DEFCLASS FOO84A NIL ((SIZE :INITARG :SIZE :INITFORM 2 :ALLOCATION :CLASS) (OTHER))) (SLOT-VALUE I 'SIZE)) (LIST VALUE (TYPEP CONDITION 'ERROR)))
WARNING: DEFCLASS: Class FOO84B (or one of its ancestors) is being redefined,
         instances are obsolete
EQUAL-OK: (1 NIL)
(MULTIPLE-VALUE-BIND (VALUE CONDITION) (IGNORE-ERRORS (DEFCLASS FOO85A NIL ((SIZE :INITARG :SIZE :INITFORM 1 :ALLOCATION :CLASS))) (DEFCLASS FOO85B (FOO85A) NIL) (SETQ I (MAKE-INSTANCE 'FOO85B)) (DEFCLASS FOO85A NIL ((SIZE :INITARG :SIZE :INITFORM 2) (OTHER))) (SLOT-VALUE I 'SIZE)) (LIST VALUE (TYPEP CONDITION 'ERROR)))
WARNING: DEFCLASS: Class FOO85B (or one of its ancestors) is being redefined,
         instances are obsolete
EQUAL-OK: (1 NIL)
(MULTIPLE-VALUE-BIND (VALUE CONDITION) (IGNORE-ERRORS (DEFCLASS FOO86A NIL ((SIZE :INITARG :SIZE :INITFORM 1))) (DEFCLASS FOO86B (FOO86A) NIL) (SETQ I (MAKE-INSTANCE 'FOO86B :SIZE 5)) (DEFCLASS FOO86A NIL ((SIZE :INITARG :SIZE :INITFORM 2) (OTHER))) (SLOT-VALUE I 'SIZE)) (LIST VALUE (TYPEP CONDITION 'ERROR)))
WARNING: DEFCLASS: Class FOO86B (or one of its ancestors) is being redefined,
         instances are obsolete
EQUAL-OK: (5 NIL)
(MULTIPLE-VALUE-BIND (VALUE CONDITION) (IGNORE-ERRORS (DEFCLASS FOO87A NIL ((SIZE :INITARG :SIZE :INITFORM 1))) (DEFCLASS FOO87B (FOO87A) NIL) (SETQ I (MAKE-INSTANCE 'FOO87B :SIZE 5)) (DEFCLASS FOO87A NIL ((SIZE :INITARG :SIZE :INITFORM 2 :ALLOCATION :CLASS) (OTHER))) (SLOT-VALUE I 'SIZE)) (LIST VALUE (TYPEP CONDITION 'ERROR)))
WARNING: DEFCLASS: Class FOO87B (or one of its ancestors) is being redefined,
         instances are obsolete
EQUAL-OK: (2 NIL)
(PROGN (DEFCLASS FOO88B (FOO88A) ((S :INITARG :S))) (DEFCLASS FOO88C (B) NIL) (DEFCLASS FOO88A NIL NIL) (LIST (LENGTH (CLOS::LIST-FINALIZED-DIRECT-SUBCLASSES (FIND-CLASS 'FOO88A))) (LENGTH (CLOS::LIST-FINALIZED-DIRECT-SUBCLASSES (FIND-CLASS 'FOO88B))) (LENGTH (CLOS::LIST-FINALIZED-DIRECT-SUBCLASSES (FIND-CLASS 'FOO88C)))))
EQUAL-OK: (0 0 0)
(PROGN (DEFCLASS FOO89B (FOO89A) ((S :INITARG :S))) (DEFCLASS FOO89C (B) NIL) (DEFCLASS FOO89A NIL NIL) (LET ((X (MAKE-INSTANCE 'FOO89B :S 5))) (LIST (LENGTH (CLOS::LIST-FINALIZED-DIRECT-SUBCLASSES (FIND-CLASS 'FOO89A))) (LENGTH (CLOS::LIST-FINALIZED-DIRECT-SUBCLASSES (FIND-CLASS 'FOO89B))) (LENGTH (CLOS::LIST-FINALIZED-DIRECT-SUBCLASSES (FIND-CLASS 'FOO89C))))))
EQUAL-OK: (1 0 0)
(PROGN (DEFCLASS FOO90B (FOO90A) ((S :INITARG :S))) (DEFCLASS FOO90C (FOO90B) NIL) (DEFCLASS FOO90A NIL NIL) (LET ((X (MAKE-INSTANCE 'FOO90B :S 5))) (DEFCLASS FOO90B NIL (S)) (LIST (LENGTH (CLOS::LIST-FINALIZED-DIRECT-SUBCLASSES (FIND-CLASS 'FOO90A))) (LENGTH (CLOS::LIST-FINALIZED-DIRECT-SUBCLASSES (FIND-CLASS 'FOO90B))) (LENGTH (CLOS::LIST-FINALIZED-DIRECT-SUBCLASSES (FIND-CLASS 'FOO90C))))))
WARNING: DEFCLASS: Class FOO90B (or one of its ancestors) is being redefined,
         instances are obsolete
EQUAL-OK: (0 0 0)
(PROGN (DEFCLASS FOO91A NIL NIL) (DEFCLASS FOO91B (FOO91A) NIL) (DEFCLASS FOO91C (FOO91B) NIL) (DEFCLASS FOO91B (FOO91A FOO91OTHER) NIL) (LIST (LENGTH (CLOS::LIST-FINALIZED-DIRECT-SUBCLASSES (FIND-CLASS 'FOO91A))) (LENGTH (CLOS::LIST-FINALIZED-DIRECT-SUBCLASSES (FIND-CLASS 'FOO91B))) (LENGTH (CLOS::LIST-FINALIZED-DIRECT-SUBCLASSES (FIND-CLASS 'FOO91C)))))
EQUAL-OK: (0 0 0)
(PROGN (DEFCLASS FOO92B (FOO92A) ((S :INITARG :S))) (DEFCLASS FOO92A NIL NIL) (LET ((X (MAKE-INSTANCE 'FOO92B :S 5)) (UPDATE-COUNTER 0)) (DEFCLASS FOO92B (FOO92A) ((S) (S1) (S2))) (SLOT-VALUE X 'S) (DEFMETHOD UPDATE-INSTANCE-FOR-REDEFINED-CLASS ((OBJECT FOO92B) ADDED-SLOTS DISCARDED-SLOTS PROPERTY-LIST &REST INITARGS) (INCF UPDATE-COUNTER)) (MAKE-INSTANCES-OBSOLETE 'FOO92A) (SLOT-VALUE X 'S) UPDATE-COUNTER))
WARNING: DEFCLASS: Class FOO92B (or one of its ancestors) is being redefined,
         instances are obsolete

WARNING: MAKE-INSTANCES-OBSOLETE: instances of class FOO92B are made obsolete
EQL-OK: 1
(PROGN (DEFCLASS FOO93B (FOO93A) ((S :INITARG :S))) (DEFCLASS FOO93A NIL NIL) (LET ((X (MAKE-INSTANCE 'FOO93B :S 5)) (UPDATE-COUNTER 0)) (DEFCLASS FOO93B NIL ((S) (S1) (S2))) (SLOT-VALUE X 'S) (DEFMETHOD UPDATE-INSTANCE-FOR-REDEFINED-CLASS ((OBJECT FOO93B) ADDED-SLOTS DISCARDED-SLOTS PROPERTY-LIST &REST INITARGS) (INCF UPDATE-COUNTER)) (MAKE-INSTANCES-OBSOLETE 'FOO93A) (SLOT-VALUE X 'S) UPDATE-COUNTER))
WARNING: DEFCLASS: Class FOO93B (or one of its ancestors) is being redefined,
         instances are obsolete
EQL-OK: 0
(PROGN (DEFCLASS FOO94 NIL ((A :READER FOO94-GET-A :WRITER FOO94-SET-A) (B :READER FOO94-GET-B :WRITER FOO94-SET-B) (C :ACCESSOR FOO94-C) (D :ACCESSOR FOO94-D) (E :ACCESSOR FOO94-E))) (LIST* (NOT (NULL (FIND-METHOD #'FOO94-GET-A 'NIL (LIST (FIND-CLASS 'FOO94)) NIL))) (NOT (NULL (FIND-METHOD #'FOO94-SET-A 'NIL (LIST (FIND-CLASS 'T) (FIND-CLASS 'FOO94)) NIL))) (NOT (NULL (FIND-METHOD #'FOO94-GET-B 'NIL (LIST (FIND-CLASS 'FOO94)) NIL))) (NOT (NULL (FIND-METHOD #'FOO94-SET-B 'NIL (LIST (FIND-CLASS 'T) (FIND-CLASS 'FOO94)) NIL))) (NOT (NULL (FIND-METHOD #'FOO94-C 'NIL (LIST (FIND-CLASS 'FOO94)) NIL))) (NOT (NULL (FIND-METHOD #'(SETF FOO94-C) 'NIL (LIST (FIND-CLASS 'T) (FIND-CLASS 'FOO94)) NIL))) (NOT (NULL (FIND-METHOD #'FOO94-D 'NIL (LIST (FIND-CLASS 'FOO94)) NIL))) (NOT (NULL (FIND-METHOD #'(SETF FOO94-D) 'NIL (LIST (FIND-CLASS 'T) (FIND-CLASS 'FOO94)) NIL))) (NOT (NULL (FIND-METHOD #'FOO94-E 'NIL (LIST (FIND-CLASS 'FOO94)) NIL))) (NOT (NULL (FIND-METHOD #'(SETF FOO94-E) 'NIL (LIST (FIND-CLASS 'T) (FIND-CLASS 'FOO94)) NIL))) (PROGN (DEFCLASS FOO94 NIL ((A :READER FOO94-GET-A :WRITER FOO94-SET-A) (B) (C :ACCESSOR FOO94-C) (E :ACCESSOR FOO94-OTHER-E))) (LIST (NOT (NULL (FIND-METHOD #'FOO94-GET-A 'NIL (LIST (FIND-CLASS 'FOO94)) NIL))) (NOT (NULL (FIND-METHOD #'FOO94-SET-A 'NIL (LIST (FIND-CLASS 'T) (FIND-CLASS 'FOO94)) NIL))) (NOT (NULL (FIND-METHOD #'FOO94-GET-B 'NIL (LIST (FIND-CLASS 'FOO94)) NIL))) (NOT (NULL (FIND-METHOD #'FOO94-SET-B 'NIL (LIST (FIND-CLASS 'T) (FIND-CLASS 'FOO94)) NIL))) (NOT (NULL (FIND-METHOD #'FOO94-C 'NIL (LIST (FIND-CLASS 'FOO94)) NIL))) (NOT (NULL (FIND-METHOD #'(SETF FOO94-C) 'NIL (LIST (FIND-CLASS 'T) (FIND-CLASS 'FOO94)) NIL))) (NOT (NULL (FIND-METHOD #'FOO94-D 'NIL (LIST (FIND-CLASS 'FOO94)) NIL))) (NOT (NULL (FIND-METHOD #'(SETF FOO94-D) 'NIL (LIST (FIND-CLASS 'T) (FIND-CLASS 'FOO94)) NIL))) (NOT (NULL (FIND-METHOD #'FOO94-E 'NIL (LIST (FIND-CLASS 'FOO94)) NIL))) (NOT (NULL (FIND-METHOD #'(SETF FOO94-E) 'NIL (LIST (FIND-CLASS 'T) (FIND-CLASS 'FOO94)) NIL)))))))
EQUAL-OK: (T T T T T T T T T T T T NIL NIL T T NIL NIL NIL NIL)
(PROGN (DEFCLASS FOO95B NIL ((S :INITARG :S :ACCESSOR FOO95B-S))) (DEFCLASS FOO95B (FOO95A) ((S :ACCESSOR FOO95B-S))) T)
EQL-OK: T
(LET ((NOTES 'NIL)) (FLET ((NOTE (O) (SETQ NOTES (APPEND NOTES (LIST O))))) (DEFCLASS FOO96B NIL ((S :INITARG :S :ACCESSOR FOO96B-S))) (LET ((X (MAKE-INSTANCE 'FOO96B :S 5))) (NOTE (FOO96B-S X)) (NOTE (TYPEP (SECOND (MULTIPLE-VALUE-LIST (IGNORE-ERRORS (DEFCLASS FOO96B (FOO96A) ((S :ACCESSOR FOO96B-S)))))) 'ERROR)) (NOTE (FOO96B-S X)) (NOTE (SLOT-VALUE X 'S)) (DEFCLASS FOO96A NIL ((R :ACCESSOR FOO96B-R))) (NOTE (FOO96B-S X)) (NOTE (SLOT-VALUE X 'S)) (NOTE (SUBTYPEP 'FOO96B 'FOO96A)) NOTES)))
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION FOO96B-S> is being
         modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-READER-METHOD (#2=#<STANDARD-CLASS FOO96B>)>
         in #<STANDARD-GENERIC-FUNCTION FOO96B-S>

WARNING: DEFCLASS: Class FOO96B (or one of its ancestors) is being redefined,
         instances are obsolete
EQUAL-OK: (5 T 5 5 5 5 NIL)
(LET ((NOTES 'NIL)) (FLET ((NOTE (O) (SETQ NOTES (APPEND NOTES (LIST O))))) (DEFCLASS FOO97B NIL ((S :INITARG :S :ACCESSOR FOO97B-S))) (LET ((X (MAKE-INSTANCE 'FOO97B :S 5))) (NOTE (FOO97B-S X)) (NOTE (TYPEP (SECOND (MULTIPLE-VALUE-LIST (IGNORE-ERRORS (DEFCLASS FOO97B (FOO97A) ((S :ACCESSOR FOO97B-S)))))) 'ERROR)) (NOTE (FOO97B-S X)) (NOTE (SLOT-VALUE X 'S)) (DEFCLASS FOO97A NIL ((R :ACCESSOR FOO97B-R))) (NOTE (FOO97B-S X)) (NOTE (SLOT-VALUE X 'S)) (NOTE (SUBTYPEP 'FOO97B 'FOO97A)) NOTES)))
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION FOO97B-S> is being
         modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-READER-METHOD (#2=#<STANDARD-CLASS FOO97B>)>
         in #<STANDARD-GENERIC-FUNCTION FOO97B-S>

WARNING: DEFCLASS: Class FOO97B (or one of its ancestors) is being redefined,
         instances are obsolete
EQUAL-OK: (5 T 5 5 5 5 NIL)
(PROGN (DEFCLASS FOO100 NIL (A B C) (:FIXED-SLOT-LOCATIONS T)) (MAPCAR #'(LAMBDA (NAME) (LET ((SLOT (FIND NAME (CLASS-SLOTS (FIND-CLASS 'FOO100)) :KEY #'SLOT-DEFINITION-NAME))) (SLOT-DEFINITION-LOCATION SLOT))) '(A B C)))
EQUAL-OK: (1 2 3)
(PROGN (DEFCLASS FOO101A NIL (A B C) (:FIXED-SLOT-LOCATIONS T)) (DEFCLASS FOO101B (FOO101A) (D E F) (:FIXED-SLOT-LOCATIONS T)) (MAPCAR #'(LAMBDA (NAME) (LET ((SLOT (FIND NAME (CLASS-SLOTS (FIND-CLASS 'FOO101B)) :KEY #'SLOT-DEFINITION-NAME))) (SLOT-DEFINITION-LOCATION SLOT))) '(A B C D E F)))
EQUAL-OK: (1 2 3 4 5 6)
(PROGN (DEFCLASS FOO102A NIL (A B C) (:FIXED-SLOT-LOCATIONS T)) (DEFCLASS FOO102B NIL (D E F)) (DEFCLASS FOO102C (FOO102A FOO102B) (G H I)) (MAPCAR #'(LAMBDA (NAME) (LET ((SLOT (FIND NAME (CLASS-SLOTS (FIND-CLASS 'FOO102C)) :KEY #'SLOT-DEFINITION-NAME))) (SLOT-DEFINITION-LOCATION SLOT))) '(A B C D E F G H I)))
EQUAL-OK: (1 2 3 4 5 6 7 8 9)
(PROGN (DEFCLASS FOO103A NIL (A B C)) (DEFCLASS FOO103B NIL (D E F) (:FIXED-SLOT-LOCATIONS T)) (DEFCLASS FOO103C (FOO103A FOO103B) (G H I)) (MAPCAR #'(LAMBDA (NAME) (LET ((SLOT (FIND NAME (CLASS-SLOTS (FIND-CLASS 'FOO103C)) :KEY #'SLOT-DEFINITION-NAME))) (SLOT-DEFINITION-LOCATION SLOT))) '(A B C D E F G H I)))
EQUAL-OK: (4 5 6 1 2 3 7 8 9)
(PROGN (DEFCLASS FOO104A NIL (A B C) (:FIXED-SLOT-LOCATIONS T)) (DEFCLASS FOO104B NIL (D E F) (:FIXED-SLOT-LOCATIONS T)) (DEFCLASS FOO104C (FOO104A FOO104B) (G H I)) T)
[SIMPLE-ERROR]: In class FOO104C, the slots D and A are constrained from the superclasses to both be located at offset 1.
EQL-OK: ERROR
(PROGN (DEFCLASS FOO105A NIL (A B C) (:FIXED-SLOT-LOCATIONS T)) (DEFCLASS FOO105B NIL NIL (:FIXED-SLOT-LOCATIONS T)) (DEFCLASS FOO105C (FOO105A FOO105B) (G H I)) (MAPCAR #'(LAMBDA (NAME) (LET ((SLOT (FIND NAME (CLASS-SLOTS (FIND-CLASS 'FOO105C)) :KEY #'SLOT-DEFINITION-NAME))) (SLOT-DEFINITION-LOCATION SLOT))) '(A B C G H I)))
EQUAL-OK: (1 2 3 4 5 6)
(PROGN (DEFCLASS FOO106A NIL NIL (:FIXED-SLOT-LOCATIONS T)) (DEFCLASS FOO106B NIL (D E F) (:FIXED-SLOT-LOCATIONS T)) (DEFCLASS FOO106C (FOO106A FOO106B) (G H I)) (MAPCAR #'(LAMBDA (NAME) (LET ((SLOT (FIND NAME (CLASS-SLOTS (FIND-CLASS 'FOO106C)) :KEY #'SLOT-DEFINITION-NAME))) (SLOT-DEFINITION-LOCATION SLOT))) '(D E F G H I)))
EQUAL-OK: (1 2 3 4 5 6)
(PROGN (DEFCLASS FOO107A NIL ((A :ALLOCATION :INSTANCE) (B :ALLOCATION :INSTANCE) (C :ALLOCATION :CLASS) (D :ALLOCATION :CLASS) (E :ALLOCATION :CLASS)) (:FIXED-SLOT-LOCATIONS T)) (DEFCLASS FOO107B (FOO107A) ((B :ALLOCATION :CLASS))) T)
[SIMPLE-ERROR]: In class FOO107B, non-local slot B is constrained to be a local slot at offset 2.
EQL-OK: ERROR
(PROGN (DEFCLASS FOO108A NIL ((A :ALLOCATION :INSTANCE) (B :ALLOCATION :INSTANCE) (C :ALLOCATION :CLASS) (D :ALLOCATION :CLASS) (E :ALLOCATION :CLASS)) (:FIXED-SLOT-LOCATIONS T)) (DEFCLASS FOO108B (FOO108A) ((C :ALLOCATION :INSTANCE) (D :ALLOCATION :CLASS) (F :ALLOCATION :INSTANCE) (G :ALLOCATION :CLASS))) (MAPCAR #'(LAMBDA (NAME) (LET ((SLOT (FIND NAME (CLASS-SLOTS (FIND-CLASS 'FOO108B)) :KEY #'SLOT-DEFINITION-NAME))) (LET ((LOCATION (SLOT-DEFINITION-LOCATION SLOT))) (IF (CONSP LOCATION) (CLASS-NAME (CLOS::CV-NEWEST-CLASS (CAR LOCATION))) LOCATION)))) '(A B C D E F G)))
EQUAL-OK: (1 2 3 FOO108B FOO108A 4 FOO108B)
(LET ((CLASS1 (DEFCLASS FOO109 NIL NIL (:DOCUMENTATION "first")))) (CONS (DOCUMENTATION CLASS1 'T) (PROGN (SETF (FIND-CLASS 'FOO109) NIL) (LET ((CLASS2 (DEFCLASS FOO109 NIL NIL (:DOCUMENTATION "second")))) (LIST (DOCUMENTATION CLASS1 'T) (DOCUMENTATION CLASS2 'T))))))
EQUAL-OK: ("first" "first" "second")
(DEFCLASS FOO116 NIL NIL (:NAME BAR))
[SIMPLE-SOURCE-PROGRAM-ERROR]: DEFCLASS FOO116: invalid option #1=(:NAME BAR)
EQL-OK: ERROR
(DEFCLASS FOO117 NIL NIL (:DIRECT-SUPERCLASSES BAZ))
[SIMPLE-SOURCE-PROGRAM-ERROR]: DEFCLASS FOO117: invalid option #1=(:DIRECT-SUPERCLASSES BAZ)
EQL-OK: ERROR
(DEFCLASS FOO118 NIL NIL (:DIRECT-SLOTS X))
[SIMPLE-SOURCE-PROGRAM-ERROR]: DEFCLASS FOO118: invalid option #1=(:DIRECT-SLOTS X)
EQL-OK: ERROR
(DEFCLASS FOO119 NIL NIL (:DIRECT-DEFAULT-INITARGS (:X 5)))
[SIMPLE-SOURCE-PROGRAM-ERROR]: DEFCLASS FOO119: invalid option #1=(:DIRECT-DEFAULT-INITARGS (:X 5))
EQL-OK: ERROR
(DEFCLASS FOO120 NIL NIL (:OTHER-OPTION BLABLA))
[SIMPLE-SOURCE-PROGRAM-ERROR]: DEFCLASS FOO120: invalid option #1=(:OTHER-OPTION BLABLA)
EQL-OK: ERROR
(DEFCLASS FOO121 NIL ((X :NAME BAR)))
[SIMPLE-SOURCE-PROGRAM-ERROR]: DEFCLASS FOO121, slot option for slot X: :NAME is not a valid slot option
EQL-OK: ERROR
(DEFCLASS FOO122 NIL ((X :READERS (BAR))))
[SIMPLE-SOURCE-PROGRAM-ERROR]: DEFCLASS FOO122, slot option for slot X: :READERS is not a valid slot option
EQL-OK: ERROR
(DEFCLASS FOO123 NIL ((X :WRITERS (BAR))))
[SIMPLE-SOURCE-PROGRAM-ERROR]: DEFCLASS FOO123, slot option for slot X: :WRITERS is not a valid slot option
EQL-OK: ERROR
(DEFCLASS FOO124 NIL ((X :INITARGS (BAR))))
[SIMPLE-SOURCE-PROGRAM-ERROR]: DEFCLASS FOO124, slot option for slot X: :INITARGS is not a valid slot option
EQL-OK: ERROR
(DEFCLASS FOO125 NIL ((X :INITFORM 17 :INITFUNCTION (LAMBDA NIL 42))))
[SIMPLE-SOURCE-PROGRAM-ERROR]: DEFCLASS FOO125, slot option for slot X: :INITFUNCTION is not a valid slot option
EQL-OK: ERROR
(PROGN (DEFCLASS TESTCLASS31A NIL NIL) (DEFCLASS TESTCLASS31B (TESTCLASS31A) NIL) (DEFCLASS TESTCLASS31C (TESTCLASS31B) NIL) (LET ((*P* (MAKE-INSTANCE 'TESTCLASS31C))) (DEFGENERIC TESTGF37 (X)) (DEFMETHOD TESTGF37 ((X TESTCLASS31A)) (LIST 'A)) (DEFMETHOD TESTGF37 ((X TESTCLASS31B)) (CONS 'B (CALL-NEXT-METHOD))) (DEFMETHOD TESTGF37 ((X TESTCLASS31C)) (CONS 'C (CALL-NEXT-METHOD))) (DEFMETHOD TESTGF37 ((X (EQL *P*))) (CONS '*P* (CALL-NEXT-METHOD))) (LIST (TESTGF37 *P*) (PROGN (CHANGE-CLASS *P* 'TESTCLASS31B) (TESTGF37 *P*)))))
EQUAL-OK: ((*P* C B A) (*P* B A))
(PROGN (DEFCLASS TESTCLASS40A NIL NIL) (DEFCLASS TESTCLASS40B NIL NIL) (DEFCLASS TESTCLASS40C (TESTCLASS40B) NIL) (DEFGENERIC TESTGF40 (X) (:METHOD-COMBINATION LIST)) (DEFMETHOD TESTGF40 LIST ((X STANDARD-OBJECT)) 0) (DEFMETHOD TESTGF40 LIST ((X TESTCLASS40A)) 'A) (LET ((INST (MAKE-INSTANCE 'TESTCLASS40C))) (LIST (TESTGF40 INST) (PROGN (DEFCLASS TESTCLASS40B (TESTCLASS40A) NIL) (TESTGF40 INST)))))
WARNING: DEFCLASS: Class TESTCLASS40C (or one of its ancestors) is being
         redefined, instances are obsolete
EQUAL-OK: ((0) (A 0))
(PROGN (DEFCLASS TESTCLASS41A NIL NIL) (DEFCLASS TESTCLASS41B (TESTCLASS41A) NIL) (DEFCLASS TESTCLASS41C (TESTCLASS41B) NIL) (DEFGENERIC TESTGF41 (X) (:METHOD-COMBINATION LIST)) (DEFMETHOD TESTGF41 LIST ((X STANDARD-OBJECT)) 0) (DEFMETHOD TESTGF41 LIST ((X TESTCLASS41A)) 'A) (LET ((INST (MAKE-INSTANCE 'TESTCLASS41C))) (LIST (TESTGF41 INST) (PROGN (DEFCLASS TESTCLASS41B NIL NIL) (TESTGF41 INST)))))
WARNING: DEFCLASS: Class TESTCLASS41C (or one of its ancestors) is being
         redefined, instances are obsolete
EQUAL-OK: ((A 0) (0))
(PROGN (DEFCLASS TESTCLASS42A NIL NIL) (DEFCLASS TESTCLASS42B NIL NIL) (DEFCLASS TESTCLASS42C (TESTCLASS42A TESTCLASS42B) NIL) (DEFGENERIC TESTGF42 (X)) (DEFMETHOD TESTGF42 ((X TESTCLASS42A)) 'A) (DEFMETHOD TESTGF42 ((X TESTCLASS42B)) 'B) (LET ((INST (MAKE-INSTANCE 'TESTCLASS42C))) (LIST (TESTGF42 INST) (PROGN (DEFCLASS TESTCLASS42C (TESTCLASS42B TESTCLASS42A) NIL) (TESTGF42 INST)))))
WARNING: DEFCLASS: Class TESTCLASS42C (or one of its ancestors) is being
         redefined, instances are obsolete
EQUAL-OK: (A B)
(PROGN (DEFCLASS TESTCLASS45A NIL NIL) (DEFCLASS TESTCLASS45B NIL NIL) (DEFCLASS TESTCLASS45C (TESTCLASS45B) NIL) (LET ((INST (MAKE-INSTANCE 'TESTCLASS45C))) (DEFGENERIC TESTGF45 (X) (:METHOD-COMBINATION LIST)) (DEFMETHOD TESTGF45 LIST ((X TESTCLASS45A)) 'A) (DEFMETHOD TESTGF45 LIST ((X (EQL INST))) 'INST) (LIST (TESTGF45 INST) (PROGN (DEFCLASS TESTCLASS45B (TESTCLASS45A) NIL) (TESTGF45 INST)))))
WARNING: DEFCLASS: Class TESTCLASS45C (or one of its ancestors) is being
         redefined, instances are obsolete
EQUAL-OK: ((INST) (INST A))
(PROGN (DEFCLASS TESTCLASS46A NIL NIL) (DEFCLASS TESTCLASS46B (TESTCLASS46A) NIL) (DEFCLASS TESTCLASS46C (TESTCLASS46B) NIL) (LET ((INST (MAKE-INSTANCE 'TESTCLASS46C))) (DEFGENERIC TESTGF46 (X) (:METHOD-COMBINATION LIST)) (DEFMETHOD TESTGF46 LIST ((X TESTCLASS46A)) 'A) (DEFMETHOD TESTGF46 LIST ((X (EQL INST))) 'INST) (LIST (TESTGF46 INST) (PROGN (DEFCLASS TESTCLASS46B NIL NIL) (TESTGF46 INST)))))
WARNING: DEFCLASS: Class TESTCLASS46C (or one of its ancestors) is being
         redefined, instances are obsolete
EQUAL-OK: ((INST A) (INST))
(PROGN (DEFCLASS TESTCLASS47A NIL NIL) (DEFCLASS TESTCLASS47B NIL NIL) (DEFCLASS TESTCLASS47C (TESTCLASS47A TESTCLASS47B) NIL) (LET ((INST (MAKE-INSTANCE 'TESTCLASS47C))) (DEFGENERIC TESTGF47 (X)) (DEFMETHOD TESTGF47 ((X TESTCLASS47A)) 'A) (DEFMETHOD TESTGF47 ((X TESTCLASS47B)) 'B) (DEFMETHOD TESTGF47 ((X (EQL INST))) (LIST 'INST (CALL-NEXT-METHOD))) (LIST (TESTGF47 INST) (PROGN (DEFCLASS TESTCLASS47C (TESTCLASS47B TESTCLASS47A) NIL) (TESTGF47 INST)))))
WARNING: DEFCLASS: Class TESTCLASS47C (or one of its ancestors) is being
         redefined, instances are obsolete
EQUAL-OK: ((INST A) (INST B))
(PROGN (DEFCLASS TESTCLASS48A NIL NIL) (DEFCLASS TESTCLASS48B NIL NIL) (DEFCLASS TESTCLASS48C (TESTCLASS48B) NIL) (LET ((INST (MAKE-INSTANCE 'STANDARD-OBJECT))) (DEFGENERIC TESTGF48 (X) (:METHOD-COMBINATION LIST)) (DEFMETHOD TESTGF48 LIST ((X TESTCLASS48A)) 'A) (DEFMETHOD TESTGF48 LIST ((X (EQL INST))) 'INST) (CHANGE-CLASS INST 'TESTCLASS48C) (LIST (TESTGF48 INST) (PROGN (DEFCLASS TESTCLASS48B (TESTCLASS48A) NIL) (TESTGF48 INST)))))
WARNING: DEFCLASS: Class TESTCLASS48C (or one of its ancestors) is being
         redefined, instances are obsolete
EQUAL-OK: ((INST) (INST A))
(PROGN (DEFCLASS TESTCLASS49A NIL NIL) (DEFCLASS TESTCLASS49B (TESTCLASS49A) NIL) (DEFCLASS TESTCLASS49C (TESTCLASS49B) NIL) (LET ((INST (MAKE-INSTANCE 'STANDARD-OBJECT))) (DEFGENERIC TESTGF49 (X) (:METHOD-COMBINATION LIST)) (DEFMETHOD TESTGF49 LIST ((X TESTCLASS49A)) 'A) (DEFMETHOD TESTGF49 LIST ((X (EQL INST))) 'INST) (CHANGE-CLASS INST 'TESTCLASS49C) (LIST (TESTGF49 INST) (PROGN (DEFCLASS TESTCLASS49B NIL NIL) (TESTGF49 INST)))))
WARNING: DEFCLASS: Class TESTCLASS49C (or one of its ancestors) is being
         redefined, instances are obsolete
EQUAL-OK: ((INST A) (INST))
(PROGN (DEFCLASS TESTCLASS50A NIL NIL) (DEFCLASS TESTCLASS50B NIL NIL) (DEFCLASS TESTCLASS50C (TESTCLASS50A TESTCLASS50B) NIL) (LET ((INST (MAKE-INSTANCE 'STANDARD-OBJECT))) (DEFGENERIC TESTGF50 (X)) (DEFMETHOD TESTGF50 ((X TESTCLASS50A)) 'A) (DEFMETHOD TESTGF50 ((X TESTCLASS50B)) 'B) (DEFMETHOD TESTGF50 ((X (EQL INST))) (LIST 'INST (CALL-NEXT-METHOD))) (CHANGE-CLASS INST 'TESTCLASS50C) (LIST (TESTGF50 INST) (PROGN (DEFCLASS TESTCLASS50C (TESTCLASS50B TESTCLASS50A) NIL) (TESTGF50 INST)))))
WARNING: DEFCLASS: Class TESTCLASS50C (or one of its ancestors) is being
         redefined, instances are obsolete
EQUAL-OK: ((INST A) (INST B))
(ENSURE-GENERIC-FUNCTION 'CAR)
[SIMPLE-PROGRAM-ERROR]: ENSURE-GENERIC-FUNCTION: CAR does not name a generic function
EQL-OK: ERROR
(ENSURE-GENERIC-FUNCTION 'DEFCLASS)
[SIMPLE-PROGRAM-ERROR]: ENSURE-GENERIC-FUNCTION: DEFCLASS does not name a generic function
EQL-OK: ERROR
(ENSURE-GENERIC-FUNCTION 'TAGBODY)
[SIMPLE-PROGRAM-ERROR]: ENSURE-GENERIC-FUNCTION: TAGBODY does not name a generic function
EQL-OK: ERROR
(LET ((F 'EGF-FUN)) (WHEN (FBOUNDP F) (FMAKUNBOUND F)) (LIST (FBOUNDP F) (TYPEP (ENSURE-GENERIC-FUNCTION F) 'GENERIC-FUNCTION) (TYPEP (ENSURE-GENERIC-FUNCTION F) 'GENERIC-FUNCTION) (TYPEP (SYMBOL-FUNCTION F) 'GENERIC-FUNCTION)))
EQUAL-OK: (NIL T T T)
(LET ((F 'EGF-FUN)) (WHEN (FBOUNDP F) (FMAKUNBOUND F)) (LIST (FBOUNDP F) (TYPEP (ENSURE-GENERIC-FUNCTION F :LAMBDA-LIST '(A B C)) 'GENERIC-FUNCTION) (TYPEP (ENSURE-GENERIC-FUNCTION F :LAMBDA-LIST '(X Y)) 'GENERIC-FUNCTION) (TYPEP (SYMBOL-FUNCTION F) 'GENERIC-FUNCTION)))
EQUAL-OK: (NIL T T T)
(LET ((F 'EGF-FUN)) (WHEN (FBOUNDP F) (FMAKUNBOUND F)) (LIST (FBOUNDP F) (TYPEP (ENSURE-GENERIC-FUNCTION F :LAMBDA-LIST '(A B C)) 'GENERIC-FUNCTION) (TYPEP (EVAL `(DEFMETHOD ,F ((A T) (B T) (C T)) (LIST A B C))) 'STANDARD-METHOD)))
EQUAL-OK: (NIL T T)
(ENSURE-GENERIC-FUNCTION 'EGF-FUN :LAMBDA-LIST '(X Y))
[SIMPLE-ERROR]: #1=#<STANDARD-METHOD (#2=#<BUILT-IN-CLASS T> #2# #2#)> has 3, but #3=#<STANDARD-GENERIC-FUNCTION EGF-FUN> has 2 required parameters
EQL-OK: ERROR
(LET ((C1 (GENSYM)) (C2 (GENSYM))) (LET ((CLASS1 (EVAL `(DEFCLASS ,C1 (,C2) NIL)))) (IF (NOT (TYPEP CLASS1 'CLASS)) 1 (LET ((CLASS2 (EVAL `(DEFCLASS ,C2 NIL NIL)))) (IF (NOT (TYPEP CLASS2 'CLASS)) 2 (LET ((I1 (MAKE-INSTANCE C1)) (I2 (MAKE-INSTANCE C2))) (COND ((NOT (TYPEP I1 C1)) 3) ((NOT (TYPEP I1 CLASS1)) 4) ((NOT (TYPEP I1 C2)) 5) ((NOT (TYPEP I1 CLASS2)) 6) ((TYPEP I2 C1) 7) ((TYPEP I2 CLASS1) 8) ((NOT (TYPEP I2 C2)) 9) ((NOT (TYPEP I2 CLASS2)) 10) (T 'GOOD))))))))
EQL-OK: GOOD
(LET ((C1 (GENSYM)) (C2 (GENSYM)) (C3 (GENSYM))) (LET ((CLASS1 (EVAL `(DEFCLASS ,C1 (,C2 ,C3) NIL)))) (IF (NOT (TYPEP CLASS1 'CLASS)) 1 (LET ((CLASS2 (EVAL `(DEFCLASS ,C2 NIL NIL)))) (IF (NOT (TYPEP CLASS2 'CLASS)) 2 (LET ((CLASS3 (EVAL `(DEFCLASS ,C3 NIL NIL)))) (IF (NOT (TYPEP CLASS3 'CLASS)) 3 (LET ((I1 (MAKE-INSTANCE C1)) (I2 (MAKE-INSTANCE C2)) (I3 (MAKE-INSTANCE C3))) (COND ((NOT (TYPEP I1 C1)) 4) ((NOT (TYPEP I1 CLASS1)) 5) ((NOT (TYPEP I1 C2)) 6) ((NOT (TYPEP I1 CLASS2)) 7) ((NOT (TYPEP I1 C3)) 8) ((NOT (TYPEP I1 CLASS3)) 9) ((TYPEP I2 C1) 10) ((TYPEP I2 CLASS1) 11) ((TYPEP I3 C1) 12) ((TYPEP I3 CLASS1) 13) ((NOT (TYPEP I2 C2)) 14) ((NOT (TYPEP I2 CLASS2)) 15) ((NOT (TYPEP I3 C3)) 16) ((NOT (TYPEP I3 CLASS3)) 17) ((TYPEP I2 C3) 18) ((TYPEP I2 CLASS3) 19) ((TYPEP I3 C2) 20) ((TYPEP I3 CLASS2) 21) (T 'GOOD))))))))))
EQL-OK: GOOD
(LET ((C1 (GENSYM)) (C2 (GENSYM)) (C3 (GENSYM))) (LET ((CLASS1 (EVAL `(DEFCLASS ,C1 (,C2) NIL)))) (IF (NOT (TYPEP CLASS1 'CLASS)) 1 (LET ((CLASS2 (EVAL `(DEFCLASS ,C2 (,C3) NIL)))) (IF (NOT (TYPEP CLASS2 'CLASS)) 2 (LET ((CLASS3 (EVAL `(DEFCLASS ,C3 NIL NIL)))) (IF (NOT (TYPEP CLASS3 'CLASS)) 3 (LET ((I1 (MAKE-INSTANCE C1)) (I2 (MAKE-INSTANCE C2)) (I3 (MAKE-INSTANCE C3))) (COND ((NOT (TYPEP I1 C1)) 4) ((NOT (TYPEP I1 CLASS1)) 5) ((NOT (TYPEP I1 C2)) 6) ((NOT (TYPEP I1 CLASS2)) 7) ((NOT (TYPEP I1 C3)) 8) ((NOT (TYPEP I1 CLASS3)) 9) ((TYPEP I2 C1) 10) ((TYPEP I2 CLASS1) 11) ((TYPEP I3 C1) 12) ((TYPEP I3 CLASS1) 13) ((NOT (TYPEP I2 C2)) 14) ((NOT (TYPEP I2 CLASS2)) 15) ((NOT (TYPEP I3 C3)) 16) ((NOT (TYPEP I3 CLASS3)) 17) ((NOT (TYPEP I2 C3)) 18) ((NOT (TYPEP I2 CLASS3)) 19) ((TYPEP I3 C2) 20) ((TYPEP I3 CLASS2) 21) (T 'GOOD))))))))))
EQL-OK: GOOD
(BLOCK NIL (LET ((C1 (GENSYM)) (C2 (GENSYM)) (C3 (GENSYM)) (C4 (GENSYM)) (C5 (GENSYM))) (UNLESS (TYPEP (EVAL `(DEFCLASS ,C4 NIL NIL)) 'CLASS) (RETURN 1)) (UNLESS (TYPEP (EVAL `(DEFCLASS ,C5 NIL NIL)) 'CLASS) (RETURN 2)) (UNLESS (TYPEP (EVAL `(DEFCLASS ,C1 (,C2 ,C3) NIL)) 'CLASS) (RETURN 3)) (UNLESS (TYPEP (EVAL `(DEFCLASS ,C2 (,C4 ,C5) NIL)) 'CLASS) (RETURN 4)) (EVAL `(PROGN (DEFCLASS ,C3 (,C5 ,C4) NIL) (MAKE-INSTANCE ',C1)))))
[SIMPLE-ERROR]: DEFCLASS #1=#:G9128: inconsistent precedence graph, cycle (#2=#<STANDARD-CLASS #:G9131> #3=#<STANDARD-CLASS #:G9132>)
EQL-OK: ERROR
(PROGN (DEFCLASS CLASS-0203 NIL ((A :ALLOCATION :CLASS) (B :ALLOCATION :INSTANCE))) (DEFCLASS CLASS-0204 (CLASS-0203) (C D)) (LET ((C1 (MAKE-INSTANCE 'CLASS-0203)) (C2 (MAKE-INSTANCE 'CLASS-0204))) (LIST :BOUND (SLOT-BOUNDP C1 'A) (SLOT-BOUNDP C1 'B) (SLOT-BOUNDP C2 'A) (SLOT-BOUNDP C2 'B) (SLOT-BOUNDP C2 'C) (SLOT-BOUNDP C2 'D) (SETF (SLOT-VALUE C1 'A) 'X) :BOUND (SLOT-BOUNDP C1 'A) (SLOT-BOUNDP C1 'B) (SLOT-BOUNDP C2 'A) (SLOT-BOUNDP C2 'B) (SLOT-BOUNDP C2 'C) (SLOT-BOUNDP C2 'D) (SLOT-VALUE C1 'A) (SLOT-VALUE C2 'A) (EQ (SLOT-MAKUNBOUND C1 'A) C1) :BOUND (SLOT-BOUNDP C1 'A) (SLOT-BOUNDP C1 'B) (SLOT-BOUNDP C2 'A) (SLOT-BOUNDP C2 'B) (SLOT-BOUNDP C2 'C) (SLOT-BOUNDP C2 'D))))
EQUAL-OK: (:BOUND NIL NIL NIL NIL NIL NIL X :BOUND T NIL T NIL NIL NIL X X T :BOUND NIL NIL NIL NIL NIL NIL)
(PROGN (DEFCLASS CLASS-0206A NIL ((A :ALLOCATION :INSTANCE) (B :ALLOCATION :CLASS))) (DEFCLASS CLASS-0206B (CLASS-0206A) ((A :ALLOCATION :CLASS) (B :ALLOCATION :INSTANCE))) (LET ((C1 (MAKE-INSTANCE 'CLASS-0206A)) (C2 (MAKE-INSTANCE 'CLASS-0206B))) (LIST :BOUND (SLOT-BOUNDP C1 'A) (SLOT-BOUNDP C1 'B) (SLOT-BOUNDP C2 'A) (SLOT-BOUNDP C2 'B) (SETF (SLOT-VALUE C1 'A) 'X) (SETF (SLOT-VALUE C1 'B) 'Y) :BOUND (SLOT-BOUNDP C1 'A) (SLOT-BOUNDP C1 'B) (SLOT-BOUNDP C2 'A) (SLOT-BOUNDP C2 'B) :VALUE-1 (SLOT-VALUE C1 'A) (SLOT-VALUE C1 'B) (PROGN (SLOT-MAKUNBOUND C1 'A) (SLOT-MAKUNBOUND C1 'B) (SETF (SLOT-VALUE C2 'A) 'X)) (SETF (SLOT-VALUE C2 'B) 'Y) :BOUND (SLOT-BOUNDP C1 'A) (SLOT-BOUNDP C1 'B) (SLOT-BOUNDP C2 'A) (SLOT-BOUNDP C2 'B) :VALUE-2 (SLOT-VALUE C2 'A) (SLOT-VALUE C2 'B) (PROGN (SLOT-MAKUNBOUND C2 'A) (SLOT-MAKUNBOUND C2 'B) NIL))))
EQUAL-OK: (:BOUND NIL NIL NIL NIL X Y :BOUND T T NIL NIL :VALUE-1 X Y X Y :BOUND NIL NIL T T :VALUE-2 X Y NIL)
(LET* ((C (DEFCLASS REINIT-CLASS-01 NIL ((A :INITARG :A) (B :INITARG :B)))) (M (DEFMETHOD REINITIALIZE-INSTANCE :AFTER ((INSTANCE REINIT-CLASS-01) &REST INITARGS &KEY (X NIL X-P)) (DECLARE (IGNORE INITARGS)) (WHEN X-P (SETF (SLOT-VALUE INSTANCE 'A) X)) INSTANCE))) (EQ M (FIND-METHOD #'REINITIALIZE-INSTANCE '(:AFTER) (LIST C))))
EQL-OK: T
(LET* ((OBJ (MAKE-INSTANCE 'REINIT-CLASS-01)) (OBJ2 (REINITIALIZE-INSTANCE OBJ :A 1 :B 3))) (LIST (EQ OBJ OBJ2) (SLOT-VALUE OBJ2 'A) (SLOT-VALUE OBJ2 'B)))
EQUAL-OK: (T 1 3)
(LET* ((OBJ (MAKE-INSTANCE 'REINIT-CLASS-01 :A 10 :B 20)) (OBJ2 (REINITIALIZE-INSTANCE OBJ :X 3))) (LIST (EQ OBJ OBJ2) (SLOT-VALUE OBJ2 'A) (SLOT-VALUE OBJ2 'B)))
EQUAL-OK: (T 3 20)
(LET* ((OBJ (MAKE-INSTANCE 'REINIT-CLASS-01 :A 10 :B 20)) (OBJ2 (REINITIALIZE-INSTANCE OBJ :X 3 :X 100))) (LIST (EQ OBJ OBJ2) (SLOT-VALUE OBJ2 'A) (SLOT-VALUE OBJ2 'B)))
EQUAL-OK: (T 3 20)
(LET* ((OBJ (MAKE-INSTANCE 'REINIT-CLASS-01 :A 10 :B 20)) (OBJ2 (REINITIALIZE-INSTANCE OBJ :X 3 :GARBAGE 100))) (LIST (EQ OBJ OBJ2) (SLOT-VALUE OBJ2 'A) (SLOT-VALUE OBJ2 'B)))
[SIMPLE-KEYWORD-ERROR]: REINITIALIZE-INSTANCE: illegal keyword/value pair :GARBAGE, 100 in argument list.
The allowed keywords are #1=(:A :B :X)

EQL-OK: ERROR
(DEFGENERIC FOO126 (X Y) (:LAMBDA-LIST X))
[SIMPLE-SOURCE-PROGRAM-ERROR]: DEFGENERIC FOO126: invalid DEFGENERIC option #1=(:LAMBDA-LIST X)
EQL-OK: ERROR
(DEFGENERIC FOO127 (X Y) (:DECLARATIONS (OPTIMIZE (SPEED 3))))
[SIMPLE-SOURCE-PROGRAM-ERROR]: DEFGENERIC FOO127: invalid DEFGENERIC option #1=(:DECLARATIONS (OPTIMIZE (SPEED 3)))
EQL-OK: ERROR
(LET ((GF1 (DEFGENERIC NO-APP-METH-GF-01 NIL)) (GF2 (DEFGENERIC NO-APP-METH-GF-02 (X))) (GF3 (DEFGENERIC NO-APP-METH-GF-03 (X Y)))) (DEFMETHOD NO-APPLICABLE-METHOD ((X (EQL GF1)) &REST ARGS) (LIST 'NO-APPLICABLE-METHOD ARGS)) (DEFMETHOD NO-APPLICABLE-METHOD ((X (EQL GF2)) &REST ARGS) (LIST 'NO-APPLICABLE-METHOD ARGS)) (DEFMETHOD NO-APPLICABLE-METHOD ((X (EQL GF3)) &REST ARGS) (LIST 'NO-APPLICABLE-METHOD ARGS)) (LIST (NO-APP-METH-GF-01) (NO-APP-METH-GF-02 (CONS 'A 'B)) (NO-APP-METH-GF-03 (CONS 'A 'B) (CONS 'C 'D))))
EQUAL-OK: ((NO-APPLICABLE-METHOD NIL) (NO-APPLICABLE-METHOD ((A . B))) (NO-APPLICABLE-METHOD ((A . B) (C . D))))
(LET ((GF1 (DEFGENERIC NO-PRIM-METH-GF-01 NIL)) (GF2 (DEFGENERIC NO-PRIM-METH-GF-02 (X))) (GF3 (DEFGENERIC NO-PRIM-METH-GF-03 (X Y)))) (DEFMETHOD NO-PRIM-METH-GF-01 :AROUND NIL (LIST :AROUND (CALL-NEXT-METHOD))) (DEFMETHOD NO-PRIMARY-METHOD ((X (EQL GF1)) &REST ARGS) (LIST 'NO-PRIMARY-METHOD ARGS)) (DEFMETHOD NO-PRIM-METH-GF-02 :AROUND ((X T)) (LIST :AROUND X (CALL-NEXT-METHOD))) (DEFMETHOD NO-PRIMARY-METHOD ((X (EQL GF2)) &REST ARGS) (LIST 'NO-PRIMARY-METHOD ARGS)) (DEFMETHOD NO-PRIM-METH-GF-03 :AROUND ((X T) (Y T)) (LIST :AROUND X Y (CALL-NEXT-METHOD))) (DEFMETHOD NO-PRIMARY-METHOD ((X (EQL GF3)) &REST ARGS) (LIST 'NO-PRIMARY-METHOD ARGS)) (LIST (NO-PRIM-METH-GF-01) (NO-PRIM-METH-GF-02 (CONS 'A 'B)) (NO-PRIM-METH-GF-03 (CONS 'A 'B) (CONS 'C 'D))))
EQUAL-OK: ((NO-PRIMARY-METHOD NIL) (NO-PRIMARY-METHOD ((A . B))) (NO-PRIMARY-METHOD ((A . B) (C . D))))
(PROGN (DEFGENERIC TEST-MC-STANDARD (X) (:METHOD ((X STRING)) (CONS 'STRING (CALL-NEXT-METHOD))) (:METHOD ((X T)) X)) (LIST (TEST-MC-STANDARD 1) (TEST-MC-STANDARD "a")))
EQUAL-OK: (1 (STRING . "a"))
(PROGN (DEFGENERIC TEST-MC-STANDARD-BAD-QUALIFIERS (X Y)) (DEFMETHOD TEST-MC-STANDARD-BAD-QUALIFIERS ((X INTEGER) (Y INTEGER)) (+ X Y)) (DEFMETHOD TEST-MC-STANDARD-BAD-QUALIFIERS ((X FLOAT) (Y FLOAT)) (+ X Y)) (DEFMETHOD TEST-MC-STANDARD-BAD-QUALIFIERS :BEFFOR ((X FLOAT) (Y FLOAT)) (FORMAT T "x = ~S, y = ~S~%" X Y)) T)
[SIMPLE-PROGRAM-ERROR]: STANDARD method combination, used by #1=#<STANDARD-GENERIC-FUNCTION TEST-MC-STANDARD-BAD-QUALIFIERS>, allows no method qualifiers except (:BEFORE :AFTER :AROUND): #<STANDARD-METHOD :BEFFOR (#2=#<BUILT-IN-CLASS FLOAT> #2#)>
EQL-OK: ERROR
(PROGN (DEFGENERIC TEST-MC-STANDARD-BAD1 (X Y)) (DEFMETHOD TEST-MC-STANDARD-BAD1 ((X REAL) (Y REAL)) (+ X Y)) (DEFMETHOD TEST-MC-STANDARD-BAD1 :AFTER :BEFORE ((X INTEGER) (Y INTEGER)) (* X Y)) T)
[SIMPLE-PROGRAM-ERROR]: STANDARD method combination, used by #1=#<STANDARD-GENERIC-FUNCTION TEST-MC-STANDARD-BAD1>, does not allow more than one method qualifier on a method: #<STANDARD-METHOD :AFTER :BEFORE (#2=#<BUILT-IN-CLASS INTEGER> #2#)>
EQL-OK: ERROR
(PROGN (DEFGENERIC TEST-MC-STANDARD-BAD2 (X Y)) (DEFMETHOD TEST-MC-STANDARD-BAD2 ((X REAL) (Y REAL)) (+ X Y)) (DEFMETHOD TEST-MC-STANDARD-BAD2 :BEFORE ((X INTEGER) (Y INTEGER)) (FLOOR (CALL-NEXT-METHOD))) (TEST-MC-STANDARD-BAD2 3 4))
[SIMPLE-PROGRAM-ERROR]: #1=#<STANDARD-GENERIC-FUNCTION TEST-MC-STANDARD-BAD2>: CALL-NEXT-METHOD is invalid within :BEFORE methods
EQL-OK: ERROR
(PROGN (DEFGENERIC TEST-MC-STANDARD-BAD3 (X Y)) (DEFMETHOD TEST-MC-STANDARD-BAD3 ((X REAL) (Y REAL)) (+ X Y)) (DEFMETHOD TEST-MC-STANDARD-BAD3 :AFTER ((X INTEGER) (Y INTEGER)) (FLOOR (CALL-NEXT-METHOD))) (TEST-MC-STANDARD-BAD3 3 4))
[SIMPLE-PROGRAM-ERROR]: #1=#<STANDARD-GENERIC-FUNCTION TEST-MC-STANDARD-BAD3>: CALL-NEXT-METHOD is invalid within :AFTER methods
EQL-OK: ERROR
(PROGN (DEFGENERIC TEST-MC-STANDARD-BAD4 (X Y) (:METHOD-COMBINATION STANDARD :MOST-SPECIFIC-LAST)))
[SIMPLE-PROGRAM-ERROR]: DEFGENERIC TEST-MC-STANDARD-BAD4: The STANDARD method combination permits no options: (:MOST-SPECIFIC-LAST)
EQL-OK: ERROR
(PROGN (DEFGENERIC TEST-MC-PROGN (X S) (:METHOD-COMBINATION PROGN) (:METHOD PROGN ((X STRING) S) (VECTOR-PUSH-EXTEND 'STRING S)) (:METHOD PROGN ((X T) S) (VECTOR-PUSH-EXTEND 'T S)) (:METHOD :AROUND ((X NUMBER) S) (VECTOR-PUSH-EXTEND 'NUMBER S) (CALL-NEXT-METHOD))) (LIST (LET ((S (MAKE-ARRAY 10 :ADJUSTABLE T :FILL-POINTER 0))) (TEST-MC-PROGN 1 S) S) (LET ((S (MAKE-ARRAY 10 :ADJUSTABLE T :FILL-POINTER 0))) (TEST-MC-PROGN "a" S) S)))
EQUALP-OK: (#(NUMBER T) #(STRING T))
(PROGN (DEFGENERIC TEST-MC-APPEND-1 (X) (:METHOD-COMBINATION APPEND) (:METHOD ((X STRING)) (LIST (LENGTH X))) (:METHOD ((X VECTOR)) (LIST (ARRAY-ELEMENT-TYPE X)))) T)
[SIMPLE-PROGRAM-ERROR]: APPEND method combination, used by #<STANDARD-GENERIC-FUNCTION TEST-MC-APPEND-1>, does not allow less than one method qualifier on a method: #<STANDARD-METHOD (#1=#<BUILT-IN-CLASS STRING>)>
EQL-OK: ERROR
(PROGN (DEFGENERIC TEST-MC-APPEND-2 (X) (:METHOD-COMBINATION APPEND) (:METHOD APPEND ((X STRING)) (LIST (LENGTH X))) (:METHOD APPEND ((X VECTOR)) (LIST (TYPE-OF (AREF X 0)))) (:METHOD :AROUND ((X STRING)) (LIST #\" (CALL-NEXT-METHOD) #\")) (:METHOD :AROUND ((X VECTOR)) (COERCE (CALL-NEXT-METHOD) 'VECTOR))) (TEST-MC-APPEND-2 "abc"))
EQUALP-OK: (#\" #(3 STANDARD-CHAR) #\")
(PROGN (DEFGENERIC TEST-MC-APPEND-3 (X) (:METHOD-COMBINATION APPEND :MOST-SPECIFIC-LAST) (:METHOD APPEND ((X STRING)) (LIST (LENGTH X))) (:METHOD APPEND ((X VECTOR)) (LIST (TYPE-OF (AREF X 0)))) (:METHOD :AROUND ((X STRING)) (LIST #\" (CALL-NEXT-METHOD) #\")) (:METHOD :AROUND ((X VECTOR)) (COERCE (CALL-NEXT-METHOD) 'VECTOR))) (TEST-MC-APPEND-3 "abc"))
EQUALP-OK: (#\" #(STANDARD-CHAR 3) #\")
(DEFINE-METHOD-COMBINATION MC01 :DOCUMENTATION :OPERATOR)
[SIMPLE-SOURCE-PROGRAM-ERROR]: DEFINE-METHOD-COMBINATION MC01: :OPERATOR is not a string
EQL-OK: ERROR
(DEFINE-METHOD-COMBINATION MC02 :DOCUMENTATION NIL)
[SIMPLE-SOURCE-PROGRAM-ERROR]: DEFINE-METHOD-COMBINATION MC02: NIL is not a string
EQL-OK: ERROR
(DEFINE-METHOD-COMBINATION MC03 :DOCUMENTATION "foo" :DOCUMENTATION "bar")
[SIMPLE-SOURCE-PROGRAM-ERROR]: DEFINE-METHOD-COMBINATION MC03: option :DOCUMENTATION may only be given once
EQL-OK: ERROR
(DEFINE-METHOD-COMBINATION MC04 :IDENTITY-WITH-ONE-ARGUMENT NIL :OPERATOR LIST :DOCUMENTATION)
[SIMPLE-SOURCE-PROGRAM-ERROR]: DEFINE-METHOD-COMBINATION MC04: options must come in pairs
EQL-OK: ERROR
(DEFINE-METHOD-COMBINATION MC05 :IDENTITY-WITH-ONE-ARGUMENT NIL :OPERATOR LIST :DOCUMENTATION "test")
EQL-OK: MC05
(PROGN (DEFGENERIC TEST-MC05-1 (X) (:METHOD MC05 ((X REAL)) 'REAL) (:METHOD MC05 ((X INTEGER)) 'INTEGER) (:METHOD MC05 ((X NUMBER)) 'NUMBER) (:METHOD-COMBINATION MC05)) (TEST-MC05-1 3))
EQUAL-OK: (INTEGER REAL NUMBER)
(PROGN (DEFGENERIC TEST-MC05-2 (X) (:METHOD MC05 ((X REAL)) 'REAL) (:METHOD MC05 ((X INTEGER)) 'INTEGER) (:METHOD MC05 ((X NUMBER)) 'NUMBER) (:METHOD-COMBINATION MC05 (INTERN "MOST-SPECIFIC-LAST" "KEYWORD"))) (TEST-MC05-2 3))
[SIMPLE-PROGRAM-ERROR]: DEFGENERIC TEST-MC05-2: Invalid method-combination options (#1=(INTERN "MOST-SPECIFIC-LAST" "KEYWORD")) for #<METHOD-COMBINATION MC05 #x000333D07230>: The value of CLOS::ORDER is #1#, should be :MOST-SPECIFIC-FIRST or :MOST-SPECIFIC-LAST.
EQL-OK: ERROR
(PROGN (DEFGENERIC TEST-MC05-3 (X) (:METHOD MC05 ((X REAL)) 'REAL) (:METHOD MC05 ((X INTEGER)) 'INTEGER) (:METHOD MC05 ((X NUMBER)) 'NUMBER) (:METHOD-COMBINATION MC05 :MOST-SPECIFIC-LAST)) (TEST-MC05-3 3))
EQUAL-OK: (NUMBER REAL INTEGER)
(PROGN (DEFGENERIC TEST-MC05-4 (X) (:METHOD MC05 ((X REAL)) 'REAL) (:METHOD-COMBINATION MC05 :MOST-SPECIFIC-LAST)) (TEST-MC05-4 3))
EQUAL-OK: (REAL)
(PROGN (DEFGENERIC TEST-MC05-5 (X) (:METHOD MC05 ((X REAL)) 'REAL) (:METHOD-COMBINATION MC05 NIL)))
[SIMPLE-PROGRAM-ERROR]: DEFGENERIC TEST-MC05-5: Invalid method-combination options (NIL) for #<METHOD-COMBINATION MC05 #x000333D07230>: The value of CLOS::ORDER is NIL, should be :MOST-SPECIFIC-FIRST or :MOST-SPECIFIC-LAST.
EQL-OK: ERROR
(PROGN (DEFGENERIC TEST-MC05-6 (X) (:METHOD MC05 ((X REAL)) 'REAL) (:METHOD-COMBINATION MC05 :MOST-SPECIFIC-FIRST JUNK)))
[SIMPLE-PROGRAM-ERROR]: DEFGENERIC TEST-MC05-6: Invalid method-combination options (:MOST-SPECIFIC-FIRST JUNK) for #<METHOD-COMBINATION MC05 #x000333CD0FE8>: APPLY: too many arguments given to #<COMPILED-FUNCTION CLOS::METHOD-COMBINATION-OPTION-CHECKER>

EQL-OK: ERROR
(DEFINE-METHOD-COMBINATION MC06 :IDENTITY-WITH-ONE-ARGUMENT T :OPERATOR LIST :DOCUMENTATION "test")
EQL-OK: MC06
(PROGN (DEFGENERIC TEST-MC06-1 (X) (:METHOD MC06 ((X REAL)) 'REAL) (:METHOD-COMBINATION MC06 :MOST-SPECIFIC-LAST)) (TEST-MC06-1 3))
EQL-OK: REAL
(PROGN (DEFUN POSITIVE-INTEGER-QUALIFIER-P (METHOD-QUALIFIERS) (AND (= (LENGTH METHOD-QUALIFIERS) 1) (TYPEP (FIRST METHOD-QUALIFIERS) '(INTEGER 0 *)))) (DEFINE-METHOD-COMBINATION EXAMPLE-METHOD-COMBINATION NIL ((METHOD-LIST POSITIVE-INTEGER-QUALIFIER-P)) `(PROGN ,@(MAPCAR #'(LAMBDA (METHOD) `(CALL-METHOD ,METHOD)) (STABLE-SORT METHOD-LIST #'< :KEY #'(LAMBDA (METHOD) (FIRST (METHOD-QUALIFIERS METHOD))))))) (DEFGENERIC MC-TEST-PIQ (P1 P2 S) (:METHOD-COMBINATION EXAMPLE-METHOD-COMBINATION) (:METHOD 1 ((P1 T) (P2 T) S) (VECTOR-PUSH-EXTEND (LIST 1 P1 P2) S)) (:METHOD 4 ((P1 T) (P2 T) S) (VECTOR-PUSH-EXTEND (LIST 4 P1 P2) S)) (:METHOD 2 ((P1 T) (P2 T) S) (VECTOR-PUSH-EXTEND (LIST 2 P1 P2) S)) (:METHOD 3 ((P1 T) (P2 T) S) (VECTOR-PUSH-EXTEND (LIST 3 P1 P2) S))) (LET ((S (MAKE-ARRAY 10 :ADJUSTABLE T :FILL-POINTER 0))) (MC-TEST-PIQ 1 2 S) S))
[SIMPLE-ERROR]: For function #1=#<STANDARD-GENERIC-FUNCTION MC-TEST-PIQ> applied to argument list NIL:
While computing the effective method through #<METHOD-COMBINATION EXAMPLE-METHOD-COMBINATION #x000333D163B8>:
Impossible to combine the methods:
Method #2=#<STANDARD-METHOD 1 (#3=#<BUILT-IN-CLASS T> #3# #3#)> has the same specializers and different qualifiers than other methods in method group METHOD-LIST, and is actually used in the effective method.
EQL-OK: ERROR
(PROGN (DEFINE-METHOD-COMBINATION W-ARGS NIL ((METHOD-LIST *)) (:ARGUMENTS ARG1 ARG2 &AUX (EXTRA :EXTRA)) `(PROGN ,@(MAPCAR #'(LAMBDA (METHOD) `(CALL-METHOD ,METHOD)) METHOD-LIST))) (DEFGENERIC MC-TEST-W-ARGS (P1 P2 S) (:METHOD-COMBINATION W-ARGS) (:METHOD ((P1 NUMBER) (P2 T) S) (VECTOR-PUSH-EXTEND (LIST 'NUMBER P1 P2) S)) (:METHOD ((P1 STRING) (P2 T) S) (VECTOR-PUSH-EXTEND (LIST 'STRING P1 P2) S)) (:METHOD ((P1 T) (P2 T) S) (VECTOR-PUSH-EXTEND (LIST T P1 P2) S))) (LET ((S (MAKE-ARRAY 10 :ADJUSTABLE T :FILL-POINTER 0))) (MC-TEST-W-ARGS 1 2 S) S))
WARNING in #:COMPILED-FORM-467-1 :
variable ARG1 is not used.
Misspelled or missing IGNORE declaration?

WARNING in #:COMPILED-FORM-467-1 :
variable ARG2 is not used.
Misspelled or missing IGNORE declaration?

WARNING in #:COMPILED-FORM-467-1 :
variable EXTRA is not used.
Misspelled or missing IGNORE declaration?
EQUALP-OK: #((NUMBER 1 2) (T 1 2))
(DEFINE-METHOD-COMBINATION MC11 NIL)
[SIMPLE-SOURCE-PROGRAM-ERROR]: DEFINE-METHOD-COMBINATION MC11: invalid syntax for long form: #1=(DEFINE-METHOD-COMBINATION MC11 . #2=(NIL))
EQL-OK: ERROR
(DEFINE-METHOD-COMBINATION MC12 NIL NIL)
EQL-OK: MC12
(DEFINE-METHOD-COMBINATION MC13 NIL NIL (:ARGUMENTS ORDER &AUX &KEY))
[SIMPLE-SOURCE-PROGRAM-ERROR]: DEFINE-METHOD-COMBINATION MC13: invalid :ARGUMENTS lambda-list: Lambda list marker &KEY not allowed here.
EQL-OK: ERROR
(DEFINE-METHOD-COMBINATION MC14 NIL NIL (:ARGUMENTS &WHOLE))
[SIMPLE-SOURCE-PROGRAM-ERROR]: DEFINE-METHOD-COMBINATION MC14: invalid :ARGUMENTS lambda-list: Missing &WHOLE parameter in lambda list (&WHOLE)
EQL-OK: ERROR
(DEFINE-METHOD-COMBINATION MC15 NIL NIL (:ARGUMENTS ORDER))
EQL-OK: MC15
(DEFINE-METHOD-COMBINATION MC16 NIL NIL (:GENERIC-FUNCTION))
[SIMPLE-SOURCE-PROGRAM-ERROR]: DEFINE-METHOD-COMBINATION MC16: Invalid syntax for :GENERIC-FUNCTION option: #1=(:GENERIC-FUNCTION)
EQL-OK: ERROR
(DEFINE-METHOD-COMBINATION MC17 NIL NIL (:GENERIC-FUNCTION GF1 GF2))
[SIMPLE-SOURCE-PROGRAM-ERROR]: DEFINE-METHOD-COMBINATION MC17: Invalid syntax for :GENERIC-FUNCTION option: #1=(:GENERIC-FUNCTION GF1 GF2)
EQL-OK: ERROR
(DEFINE-METHOD-COMBINATION MC18 NIL NIL (:GENERIC-FUNCTION (GF)))
[SIMPLE-SOURCE-PROGRAM-ERROR]: DEFINE-METHOD-COMBINATION MC18: Invalid syntax for :GENERIC-FUNCTION option: #1=(:GENERIC-FUNCTION (GF))
EQL-OK: ERROR
(DEFINE-METHOD-COMBINATION MC19 NIL NIL (:GENERIC-FUNCTION GF))
EQL-OK: MC19
(DEFINE-METHOD-COMBINATION MC20 NIL (A))
[SIMPLE-SOURCE-PROGRAM-ERROR]: DEFINE-METHOD-COMBINATION MC20: invalid method group specifier A: Not a list of length at least 2
EQL-OK: ERROR
(DEFINE-METHOD-COMBINATION MC21 NIL ((3)))
[SIMPLE-SOURCE-PROGRAM-ERROR]: DEFINE-METHOD-COMBINATION MC21: invalid method group specifier #1=(3): Not a list of length at least 2
EQL-OK: ERROR
(DEFINE-METHOD-COMBINATION MC22 NIL ((A)))
[SIMPLE-SOURCE-PROGRAM-ERROR]: DEFINE-METHOD-COMBINATION MC22: invalid method group specifier #1=(A): Not a list of length at least 2
EQL-OK: ERROR
(DEFINE-METHOD-COMBINATION MC23 NIL ((A *)))
EQL-OK: MC23
(DEFINE-METHOD-COMBINATION MC24 NIL ((A *) (B *)) `(PROGN (CALL-METHOD ,(FIRST A)) (CALL-METHOD ,(FIRST B))))
EQL-OK: MC24
(PROGN (DEFINE-METHOD-COMBINATION MC25 NIL ((ALL NIL)) `(LIST 'RESULT ,@(MAPCAR #'(LAMBDA (METHOD) `(CALL-METHOD ,METHOD)) ALL))) (DEFGENERIC TEST-MC25 (X) (:METHOD-COMBINATION MC25)) (TEST-MC25 7))
[METHOD-CALL-ERROR]: NO-APPLICABLE-METHOD: When calling #1=#<STANDARD-GENERIC-FUNCTION TEST-MC25> with arguments #2=(7), no method is applicable.
EQL-OK: ERROR
(PROGN (DEFINE-METHOD-COMBINATION MC26 NIL ((NORMAL NIL) (IGNORED (:IGNORE))) `(LIST 'RESULT ,@(MAPCAR #'(LAMBDA (METHOD) `(CALL-METHOD ,METHOD)) NORMAL))) (DEFGENERIC TEST-MC26 (X) (:METHOD-COMBINATION MC26) (:METHOD :IGNORE ((X NUMBER)) (/ 0))) (TEST-MC26 7))
EQUAL-OK: (RESULT)
(PROGN (DEFINE-METHOD-COMBINATION MC27 NIL ((NORMAL NIL) (IGNORED (:IGNORE :UNUSED))) `(LIST 'RESULT ,@(MAPCAR #'(LAMBDA (METHOD) `(CALL-METHOD ,METHOD)) NORMAL))) (DEFGENERIC TEST-MC27 (X) (:METHOD-COMBINATION MC27) (:METHOD :IGNORE ((X NUMBER)) (/ 0))) (TEST-MC27 7))
[SIMPLE-PROGRAM-ERROR]: MC27 method combination, used by #<STANDARD-GENERIC-FUNCTION TEST-MC27>, does not allow the method qualifiers #1=(:IGNORE): #<STANDARD-METHOD :IGNORE (#2=#<BUILT-IN-CLASS NUMBER>)>
EQL-OK: ERROR
(PROGN (DEFINE-METHOD-COMBINATION MC28 NIL ((NORMAL NIL) (IGNORED (:IGNORE) (:UNUSED))) `(LIST 'RESULT ,@(MAPCAR #'(LAMBDA (METHOD) `(CALL-METHOD ,METHOD)) NORMAL))) (DEFGENERIC TEST-MC28 (X) (:METHOD-COMBINATION MC28) (:METHOD :IGNORE ((X NUMBER)) (/ 0))) (TEST-MC28 7))
EQUAL-OK: (RESULT)
(PROGN (DEFINE-METHOD-COMBINATION MC29 NIL ((IGNORED (:IGNORE) (:UNUSED)) (OTHER *)) `(LIST 'RESULT ,@(MAPCAR #'(LAMBDA (METHOD) `(CALL-METHOD ,METHOD)) OTHER))) (DEFGENERIC TEST-MC29 (X) (:METHOD-COMBINATION MC29) (:METHOD :IGNORE ((X NUMBER)) (/ 0))) (TEST-MC29 7))
EQUAL-OK: (RESULT)
(DEFINE-METHOD-COMBINATION MC50 (OPT1 OPT2) ((ALL *)) (:ARGUMENTS &WHOLE WHOLE ARG1 ARG2 &REST MORE-ARGS) `(LIST ',OPT1 ',OPT2 'RESULT ,WHOLE ,ARG1 ,ARG2 ,MORE-ARGS))
EQL-OK: MC50
(DEFGENERIC TEST-MC50-1 (X) (:METHOD-COMBINATION MC50 XYZ))
[SIMPLE-PROGRAM-ERROR]: DEFGENERIC TEST-MC50-1: Invalid method-combination options (XYZ) for #<METHOD-COMBINATION MC50 #x000333D1B498>: EVAL/APPLY: too few arguments given to CLOS::METHOD-COMBINATION-OPTION-CHECKER

EQL-OK: ERROR
(PROGN (DEFGENERIC TEST-MC50-2 (X) (:METHOD-COMBINATION MC50 XYZ "foo") (:METHOD ((X INTEGER)) (/ 0))) (TEST-MC50-2 7))
EQUAL-OK: (XYZ "foo" RESULT (7) 7 NIL NIL)
(PROGN (DEFGENERIC TEST-MC50-3 (X Y Z) (:METHOD-COMBINATION MC50 XYZ "bar") (:METHOD ((X T) (Y T) (Z T)) (/ 0))) (TEST-MC50-3 'A 'B 'C))
EQUAL-OK: (XYZ "bar" RESULT (A B C) A B NIL)
(DEFINE-METHOD-COMBINATION MC51 (OPT1 &OPTIONAL OPT2 &REST MORE-OPTS) ((ALL *)) (:ARGUMENTS &WHOLE WHOLE ARG1 &KEY TEST TEST-NOT) `(LIST ',OPT1 ',OPT2 ',MORE-OPTS 'RESULT ,WHOLE ,ARG1 ,TEST ,TEST-NOT))
EQL-OK: MC51
(DEFGENERIC TEST-MC51-1 (X) (:METHOD-COMBINATION MC51))
[SIMPLE-PROGRAM-ERROR]: DEFGENERIC TEST-MC51-1: Invalid method-combination options NIL for #<METHOD-COMBINATION MC51 #x000333D54178>: EVAL/APPLY: too few arguments given to CLOS::METHOD-COMBINATION-OPTION-CHECKER

EQL-OK: ERROR
(PROGN (DEFGENERIC TEST-MC51-2 (X) (:METHOD-COMBINATION MC51 "xyz") (:METHOD ((X INTEGER)) (/ 0))) (TEST-MC51-2 7))
EQUAL-OK: ("xyz" NIL NIL RESULT (7) 7 NIL NIL)
(PROGN (DEFGENERIC TEST-MC51-3 (X) (:METHOD-COMBINATION MC51 "xyz" "uvw") (:METHOD ((X INTEGER)) (/ 0))) (TEST-MC51-3 7))
EQUAL-OK: ("xyz" "uvw" NIL RESULT (7) 7 NIL NIL)
(PROGN (DEFGENERIC TEST-MC51-4 (X) (:METHOD-COMBINATION MC51 "xyz" "uvw" :FOO :BAR) (:METHOD ((X INTEGER)) (/ 0))) (TEST-MC51-4 7))
EQUAL-OK: ("xyz" "uvw" (:FOO :BAR) RESULT (7) 7 NIL NIL)
(PROGN (DEFGENERIC TEST-MC51-5 (X &KEY TEST TEST-NOT KEY PREDICATE) (:METHOD-COMBINATION MC51 "xyz" "uvw" :FOO :BAR) (:METHOD ((X INTEGER) &KEY PREDICATE TEST TEST-NOT KEY) (/ 0))) (TEST-MC51-5 7 :KEY 'FIRST :TEST-NOT 'EQUAL))
EQUAL-OK: ("xyz" "uvw" (:FOO :BAR) RESULT (7 :KEY FIRST :TEST-NOT EQUAL) 7 NIL EQUAL)
(DEFINE-METHOD-COMBINATION MC60 (OPT1 &OPTIONAL (OPT2 "def")) ((ALL *)) (:ARGUMENTS) `(LIST ',OPT1 ',OPT2 'RESULT (CALL-METHOD ,(FIRST ALL))))
EQL-OK: MC60
(PROGN (DEFGENERIC TEST-MC60-1 NIL (:METHOD-COMBINATION MC60 "xyz") (:METHOD NIL 'NIL)) (TEST-MC60-1))
EQUAL-OK: ("xyz" "def" RESULT NIL)
(PROGN (DEFGENERIC TEST-MC60-2 (X Y) (:METHOD-COMBINATION MC60 "xyz") (:METHOD (X Y) (LIST X Y))) (TEST-MC60-2 'A 'B))
EQUAL-OK: ("xyz" "def" RESULT (A B))
(PROGN (DEFGENERIC TEST-MC60-3 (&OPTIONAL X Y) (:METHOD-COMBINATION MC60 "xyz") (:METHOD (&OPTIONAL X Y) (LIST X Y))) (TEST-MC60-3 'A))
EQUAL-OK: ("xyz" "def" RESULT (A NIL))
(PROGN (DEFGENERIC TEST-MC60-4 (&REST X) (:METHOD-COMBINATION MC60 "xyz") (:METHOD (&REST X) X)) (TEST-MC60-4 'A 'B))
EQUAL-OK: ("xyz" "def" RESULT (A B))
(DEFINE-METHOD-COMBINATION MC61 (OPT1 &OPTIONAL (OPT2 "def")) ((ALL *)) (:ARGUMENTS A1 A2) `(LIST ',OPT1 ',OPT2 'RESULT ,A1 ,A2 (CALL-METHOD ,(FIRST ALL))))
EQL-OK: MC61
(PROGN (DEFGENERIC TEST-MC61-1 (X) (:METHOD-COMBINATION MC61 "xyz") (:METHOD (X) (LIST X))) (TEST-MC61-1 'A))
EQUAL-OK: ("xyz" "def" RESULT A NIL (A))
(PROGN (DEFGENERIC TEST-MC61-2 (X Y) (:METHOD-COMBINATION MC61 "xyz") (:METHOD (X Y) (LIST X Y))) (TEST-MC61-2 'A 'B))
EQUAL-OK: ("xyz" "def" RESULT A B (A B))
(PROGN (DEFGENERIC TEST-MC61-3 (X Y Z) (:METHOD-COMBINATION MC61 "xyz") (:METHOD (X Y Z) (LIST X Y Z))) (TEST-MC61-3 'A 'B 'C))
EQUAL-OK: ("xyz" "def" RESULT A B (A B C))
(PROGN (DEFGENERIC TEST-MC61-4 (X &OPTIONAL Y Z) (:METHOD-COMBINATION MC61 "xyz") (:METHOD (X &OPTIONAL Y Z) (LIST X Y Z))) (LIST (TEST-MC61-4 'A) (TEST-MC61-4 'A 'B) (TEST-MC61-4 'A 'B 'C)))
EQUAL-OK: (("xyz" "def" RESULT A NIL (A NIL NIL)) ("xyz" "def" RESULT A NIL (A B NIL)) ("xyz" "def" RESULT A NIL (A B C)))
(PROGN (DEFGENERIC TEST-MC61-5 (X Y &OPTIONAL Z U) (:METHOD-COMBINATION MC61 "xyz") (:METHOD (X Y &OPTIONAL Z U) (LIST X Y Z U))) (LIST (TEST-MC61-5 'A 'B) (TEST-MC61-5 'A 'B 'C) (TEST-MC61-5 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT A B (A B NIL NIL)) ("xyz" "def" RESULT A B (A B C NIL)) ("xyz" "def" RESULT A B (A B C D)))
(PROGN (DEFGENERIC TEST-MC61-6 (X Y Z &OPTIONAL U V) (:METHOD-COMBINATION MC61 "xyz") (:METHOD (X Y Z &OPTIONAL U V) (LIST X Y Z U V))) (LIST (TEST-MC61-6 'A 'B 'C) (TEST-MC61-6 'A 'B 'C 'D) (TEST-MC61-6 'A 'B 'C 'D 'E)))
EQUAL-OK: (("xyz" "def" RESULT A B (A B C NIL NIL)) ("xyz" "def" RESULT A B (A B C D NIL)) ("xyz" "def" RESULT A B (A B C D E)))
(PROGN (DEFGENERIC TEST-MC61-7 (X &REST Y) (:METHOD-COMBINATION MC61 "xyz") (:METHOD (X &REST Y) (LIST* X Y))) (LIST (TEST-MC61-7 'A) (TEST-MC61-7 'A 'B) (TEST-MC61-7 'A 'B 'C)))
EQUAL-OK: (("xyz" "def" RESULT A NIL (A)) ("xyz" "def" RESULT A NIL (A B)) ("xyz" "def" RESULT A NIL (A B C)))
(PROGN (DEFGENERIC TEST-MC61-8 (X Y &REST Z) (:METHOD-COMBINATION MC61 "xyz") (:METHOD (X Y &REST Z) (LIST* X Y Z))) (LIST (TEST-MC61-8 'A 'B) (TEST-MC61-8 'A 'B 'C) (TEST-MC61-8 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT A B (A B)) ("xyz" "def" RESULT A B (A B C)) ("xyz" "def" RESULT A B (A B C D)))
(PROGN (DEFGENERIC TEST-MC61-9 (X Y Z &REST U) (:METHOD-COMBINATION MC61 "xyz") (:METHOD (X Y Z &REST U) (LIST* X Y Z U))) (LIST (TEST-MC61-9 'A 'B 'C) (TEST-MC61-9 'A 'B 'C 'D) (TEST-MC61-9 'A 'B 'C 'D 'E)))
EQUAL-OK: (("xyz" "def" RESULT A B (A B C)) ("xyz" "def" RESULT A B (A B C D)) ("xyz" "def" RESULT A B (A B C D E)))
(DEFINE-METHOD-COMBINATION MC62 (OPT1 &OPTIONAL (OPT2 "def")) ((ALL *)) (:ARGUMENTS &OPTIONAL (O1 'DEF1) (O2 'DEF2)) `(LIST ',OPT1 ',OPT2 'RESULT ,O1 ,O2 (CALL-METHOD ,(FIRST ALL))))
EQL-OK: MC62
(PROGN (DEFGENERIC TEST-MC62-1 (X) (:METHOD-COMBINATION MC62 "xyz") (:METHOD (X) (LIST X))) (TEST-MC62-1 'A))
EQUAL-OK: ("xyz" "def" RESULT DEF1 DEF2 (A))
(PROGN (DEFGENERIC TEST-MC62-2 (X &OPTIONAL Y) (:METHOD-COMBINATION MC62 "xyz") (:METHOD (X &OPTIONAL Y) (LIST X Y))) (LIST (TEST-MC62-2 'A) (TEST-MC62-2 'A 'B)))
EQUAL-OK: (("xyz" "def" RESULT DEF1 DEF2 (A NIL)) ("xyz" "def" RESULT B DEF2 (A B)))
(PROGN (DEFGENERIC TEST-MC62-3 (X &OPTIONAL Y Z) (:METHOD-COMBINATION MC62 "xyz") (:METHOD (X &OPTIONAL Y Z) (LIST X Y Z))) (LIST (TEST-MC62-3 'A) (TEST-MC62-3 'A 'B) (TEST-MC62-3 'A 'B 'C)))
EQUAL-OK: (("xyz" "def" RESULT DEF1 DEF2 (A NIL NIL)) ("xyz" "def" RESULT B DEF2 (A B NIL)) ("xyz" "def" RESULT B C (A B C)))
(PROGN (DEFGENERIC TEST-MC62-4 (X &OPTIONAL Y Z U) (:METHOD-COMBINATION MC62 "xyz") (:METHOD (X &OPTIONAL Y Z U) (LIST X Y Z U))) (LIST (TEST-MC62-4 'A) (TEST-MC62-4 'A 'B) (TEST-MC62-4 'A 'B 'C) (TEST-MC62-4 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT DEF1 DEF2 (A NIL NIL NIL)) ("xyz" "def" RESULT B DEF2 (A B NIL NIL)) ("xyz" "def" RESULT B C (A B C NIL)) ("xyz" "def" RESULT B C (A B C D)))
(PROGN (DEFGENERIC TEST-MC62-5 (X &REST Y) (:METHOD-COMBINATION MC62 "xyz") (:METHOD (X &REST Y) (LIST* X Y))) (LIST (TEST-MC62-5 'A) (TEST-MC62-5 'A 'B) (TEST-MC62-5 'A 'B 'C)))
EQUAL-OK: (("xyz" "def" RESULT DEF1 DEF2 (A)) ("xyz" "def" RESULT DEF1 DEF2 (A B)) ("xyz" "def" RESULT DEF1 DEF2 (A B C)))
(PROGN (DEFGENERIC TEST-MC62-6 (X &OPTIONAL Y &REST Z) (:METHOD-COMBINATION MC62 "xyz") (:METHOD (X &OPTIONAL Y &REST Z) (LIST* X Y Z))) (LIST (TEST-MC62-6 'A) (TEST-MC62-6 'A 'B) (TEST-MC62-6 'A 'B 'C)))
EQUAL-OK: (("xyz" "def" RESULT DEF1 DEF2 (A NIL)) ("xyz" "def" RESULT B DEF2 (A B)) ("xyz" "def" RESULT B DEF2 (A B C)))
(PROGN (DEFGENERIC TEST-MC62-7 (X &OPTIONAL Y Z &REST U) (:METHOD-COMBINATION MC62 "xyz") (:METHOD (X &OPTIONAL Y Z &REST U) (LIST* X Y Z U))) (LIST (TEST-MC62-7 'A) (TEST-MC62-7 'A 'B) (TEST-MC62-7 'A 'B 'C) (TEST-MC62-7 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT DEF1 DEF2 (A NIL NIL)) ("xyz" "def" RESULT B DEF2 (A B NIL)) ("xyz" "def" RESULT B C (A B C)) ("xyz" "def" RESULT B C (A B C D)))
(DEFINE-METHOD-COMBINATION MC63 (OPT1 &OPTIONAL (OPT2 "def")) ((ALL *)) (:ARGUMENTS &REST R) `(LIST ',OPT1 ',OPT2 'RESULT ,R (CALL-METHOD ,(FIRST ALL))))
EQL-OK: MC63
(PROGN (DEFGENERIC TEST-MC63-1 NIL (:METHOD-COMBINATION MC63 "xyz") (:METHOD NIL 'NIL)) (TEST-MC63-1))
EQUAL-OK: ("xyz" "def" RESULT NIL NIL)
(PROGN (DEFGENERIC TEST-MC63-2 (X Y) (:METHOD-COMBINATION MC63 "xyz") (:METHOD (X Y) (LIST X Y))) (TEST-MC63-2 'A 'B))
EQUAL-OK: ("xyz" "def" RESULT NIL (A B))
(PROGN (DEFGENERIC TEST-MC63-3 (&OPTIONAL X Y) (:METHOD-COMBINATION MC63 "xyz") (:METHOD (&OPTIONAL X Y) (LIST X Y))) (TEST-MC63-3 'A))
EQUAL-OK: ("xyz" "def" RESULT NIL (A NIL))
(PROGN (DEFGENERIC TEST-MC63-4 (&REST X) (:METHOD-COMBINATION MC63 "xyz") (:METHOD (&REST X) X)) (TEST-MC63-4 'A 'B))
EQUAL-OK: ("xyz" "def" RESULT (A B) (A B))
(DEFINE-METHOD-COMBINATION MC64 (OPT1 &OPTIONAL (OPT2 "def")) ((ALL *)) (:ARGUMENTS A1 A2 &OPTIONAL (O1 'DEF1) (O2 'DEF2)) `(LIST ',OPT1 ',OPT2 'RESULT ,A1 ,A2 ,O1 ,O2 (CALL-METHOD ,(FIRST ALL))))
EQL-OK: MC64
(PROGN (DEFGENERIC TEST-MC64-1 NIL (:METHOD-COMBINATION MC64 "xyz") (:METHOD NIL 'NIL)) (TEST-MC64-1))
EQUAL-OK: ("xyz" "def" RESULT NIL NIL DEF1 DEF2 NIL)
(PROGN (DEFGENERIC TEST-MC64-2 (X) (:METHOD-COMBINATION MC64 "xyz") (:METHOD (X) (LIST X))) (TEST-MC64-2 'A))
EQUAL-OK: ("xyz" "def" RESULT A NIL DEF1 DEF2 (A))
(PROGN (DEFGENERIC TEST-MC64-3 (X Y) (:METHOD-COMBINATION MC64 "xyz") (:METHOD (X Y) (LIST X Y))) (TEST-MC64-3 'A 'B))
EQUAL-OK: ("xyz" "def" RESULT A B DEF1 DEF2 (A B))
(PROGN (DEFGENERIC TEST-MC64-4 (X Y Z) (:METHOD-COMBINATION MC64 "xyz") (:METHOD (X Y Z) (LIST X Y Z))) (TEST-MC64-4 'A 'B 'C))
EQUAL-OK: ("xyz" "def" RESULT A B DEF1 DEF2 (A B C))
(PROGN (DEFGENERIC TEST-MC64-5 (X &OPTIONAL Y) (:METHOD-COMBINATION MC64 "xyz") (:METHOD (X &OPTIONAL Y) (LIST X Y))) (LIST (TEST-MC64-5 'A) (TEST-MC64-5 'A 'B)))
EQUAL-OK: (("xyz" "def" RESULT A NIL DEF1 DEF2 (A NIL)) ("xyz" "def" RESULT A NIL B DEF2 (A B)))
(PROGN (DEFGENERIC TEST-MC64-6 (X Y &OPTIONAL Z) (:METHOD-COMBINATION MC64 "xyz") (:METHOD (X Y &OPTIONAL Z) (LIST X Y Z))) (LIST (TEST-MC64-6 'A 'B) (TEST-MC64-6 'A 'B 'C)))
EQUAL-OK: (("xyz" "def" RESULT A B DEF1 DEF2 (A B NIL)) ("xyz" "def" RESULT A B C DEF2 (A B C)))
(PROGN (DEFGENERIC TEST-MC64-7 (X Y Z &OPTIONAL U) (:METHOD-COMBINATION MC64 "xyz") (:METHOD (X Y Z &OPTIONAL U) (LIST X Y Z U))) (LIST (TEST-MC64-7 'A 'B 'C) (TEST-MC64-7 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT A B DEF1 DEF2 (A B C NIL)) ("xyz" "def" RESULT A B D DEF2 (A B C D)))
(PROGN (DEFGENERIC TEST-MC64-8 (X &OPTIONAL Y Z) (:METHOD-COMBINATION MC64 "xyz") (:METHOD (X &OPTIONAL Y Z) (LIST X Y Z))) (LIST (TEST-MC64-8 'A) (TEST-MC64-8 'A 'B) (TEST-MC64-8 'A 'B 'C)))
EQUAL-OK: (("xyz" "def" RESULT A NIL DEF1 DEF2 (A NIL NIL)) ("xyz" "def" RESULT A NIL B DEF2 (A B NIL)) ("xyz" "def" RESULT A NIL B C (A B C)))
(PROGN (DEFGENERIC TEST-MC64-9 (X Y &OPTIONAL Z U) (:METHOD-COMBINATION MC64 "xyz") (:METHOD (X Y &OPTIONAL Z U) (LIST X Y Z U))) (LIST (TEST-MC64-9 'A 'B) (TEST-MC64-9 'A 'B 'C) (TEST-MC64-9 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT A B DEF1 DEF2 (A B NIL NIL)) ("xyz" "def" RESULT A B C DEF2 (A B C NIL)) ("xyz" "def" RESULT A B C D (A B C D)))
(PROGN (DEFGENERIC TEST-MC64-10 (X Y Z &OPTIONAL U V) (:METHOD-COMBINATION MC64 "xyz") (:METHOD (X Y Z &OPTIONAL U V) (LIST X Y Z U V))) (LIST (TEST-MC64-10 'A 'B 'C) (TEST-MC64-10 'A 'B 'C 'D) (TEST-MC64-10 'A 'B 'C 'D 'E)))
EQUAL-OK: (("xyz" "def" RESULT A B DEF1 DEF2 (A B C NIL NIL)) ("xyz" "def" RESULT A B D DEF2 (A B C D NIL)) ("xyz" "def" RESULT A B D E (A B C D E)))
(PROGN (DEFGENERIC TEST-MC64-11 (X &OPTIONAL Y Z U) (:METHOD-COMBINATION MC64 "xyz") (:METHOD (X &OPTIONAL Y Z U) (LIST X Y Z U))) (LIST (TEST-MC64-11 'A) (TEST-MC64-11 'A 'B) (TEST-MC64-11 'A 'B 'C) (TEST-MC64-11 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT A NIL DEF1 DEF2 (A NIL NIL NIL)) ("xyz" "def" RESULT A NIL B DEF2 (A B NIL NIL)) ("xyz" "def" RESULT A NIL B C (A B C NIL)) ("xyz" "def" RESULT A NIL B C (A B C D)))
(PROGN (DEFGENERIC TEST-MC64-12 (X Y &OPTIONAL Z U V) (:METHOD-COMBINATION MC64 "xyz") (:METHOD (X Y &OPTIONAL Z U V) (LIST X Y Z U V))) (LIST (TEST-MC64-12 'A 'B) (TEST-MC64-12 'A 'B 'C) (TEST-MC64-12 'A 'B 'C 'D) (TEST-MC64-12 'A 'B 'C 'D 'E)))
EQUAL-OK: (("xyz" "def" RESULT A B DEF1 DEF2 (A B NIL NIL NIL)) ("xyz" "def" RESULT A B C DEF2 (A B C NIL NIL)) ("xyz" "def" RESULT A B C D (A B C D NIL)) ("xyz" "def" RESULT A B C D (A B C D E)))
(PROGN (DEFGENERIC TEST-MC64-13 (X Y Z &OPTIONAL U V W) (:METHOD-COMBINATION MC64 "xyz") (:METHOD (X Y Z &OPTIONAL U V W) (LIST X Y Z U V W))) (LIST (TEST-MC64-13 'A 'B 'C) (TEST-MC64-13 'A 'B 'C 'D) (TEST-MC64-13 'A 'B 'C 'D 'E) (TEST-MC64-13 'A 'B 'C 'D 'E 'F)))
EQUAL-OK: (("xyz" "def" RESULT A B DEF1 DEF2 (A B C NIL NIL NIL)) ("xyz" "def" RESULT A B D DEF2 (A B C D NIL NIL)) ("xyz" "def" RESULT A B D E (A B C D E NIL)) ("xyz" "def" RESULT A B D E (A B C D E F)))
(PROGN (DEFGENERIC TEST-MC64-14 (X &REST Y) (:METHOD-COMBINATION MC64 "xyz") (:METHOD (X &REST Y) (LIST* X Y))) (LIST (TEST-MC64-14 'A) (TEST-MC64-14 'A 'B) (TEST-MC64-14 'A 'B 'C)))
EQUAL-OK: (("xyz" "def" RESULT A NIL DEF1 DEF2 (A)) ("xyz" "def" RESULT A NIL DEF1 DEF2 (A B)) ("xyz" "def" RESULT A NIL DEF1 DEF2 (A B C)))
(PROGN (DEFGENERIC TEST-MC64-15 (X Y &REST Z) (:METHOD-COMBINATION MC64 "xyz") (:METHOD (X Y &REST Z) (LIST* X Y Z))) (LIST (TEST-MC64-15 'A 'B) (TEST-MC64-15 'A 'B 'C) (TEST-MC64-15 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT A B DEF1 DEF2 (A B)) ("xyz" "def" RESULT A B DEF1 DEF2 (A B C)) ("xyz" "def" RESULT A B DEF1 DEF2 (A B C D)))
(PROGN (DEFGENERIC TEST-MC64-16 (X Y Z &REST U) (:METHOD-COMBINATION MC64 "xyz") (:METHOD (X Y Z &REST U) (LIST* X Y Z U))) (LIST (TEST-MC64-16 'A 'B 'C) (TEST-MC64-16 'A 'B 'C 'D) (TEST-MC64-16 'A 'B 'C 'D 'E)))
EQUAL-OK: (("xyz" "def" RESULT A B DEF1 DEF2 (A B C)) ("xyz" "def" RESULT A B DEF1 DEF2 (A B C D)) ("xyz" "def" RESULT A B DEF1 DEF2 (A B C D E)))
(PROGN (DEFGENERIC TEST-MC64-17 (X &OPTIONAL Y &REST Z) (:METHOD-COMBINATION MC64 "xyz") (:METHOD (X &OPTIONAL Y &REST Z) (LIST* X Y Z))) (LIST (TEST-MC64-17 'A) (TEST-MC64-17 'A 'B) (TEST-MC64-17 'A 'B 'C) (TEST-MC64-17 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT A NIL DEF1 DEF2 (A NIL)) ("xyz" "def" RESULT A NIL B DEF2 (A B)) ("xyz" "def" RESULT A NIL B DEF2 (A B C)) ("xyz" "def" RESULT A NIL B DEF2 (A B C D)))
(PROGN (DEFGENERIC TEST-MC64-18 (X &OPTIONAL Y Z &REST U) (:METHOD-COMBINATION MC64 "xyz") (:METHOD (X &OPTIONAL Y Z &REST U) (LIST* X Y Z U))) (LIST (TEST-MC64-18 'A) (TEST-MC64-18 'A 'B) (TEST-MC64-18 'A 'B 'C) (TEST-MC64-18 'A 'B 'C 'D) (TEST-MC64-18 'A 'B 'C 'D 'E)))
EQUAL-OK: (("xyz" "def" RESULT A NIL DEF1 DEF2 (A NIL NIL)) ("xyz" "def" RESULT A NIL B DEF2 (A B NIL)) ("xyz" "def" RESULT A NIL B C (A B C)) ("xyz" "def" RESULT A NIL B C (A B C D)) ("xyz" "def" RESULT A NIL B C (A B C D E)))
(PROGN (DEFGENERIC TEST-MC64-19 (X &OPTIONAL Y Z U &REST V) (:METHOD-COMBINATION MC64 "xyz") (:METHOD (X &OPTIONAL Y Z U &REST V) (LIST* X Y Z U V))) (LIST (TEST-MC64-19 'A) (TEST-MC64-19 'A 'B) (TEST-MC64-19 'A 'B 'C) (TEST-MC64-19 'A 'B 'C 'D) (TEST-MC64-19 'A 'B 'C 'D 'E) (TEST-MC64-19 'A 'B 'C 'D 'E 'F)))
EQUAL-OK: (("xyz" "def" RESULT A NIL DEF1 DEF2 (A NIL NIL NIL)) ("xyz" "def" RESULT A NIL B DEF2 (A B NIL NIL)) ("xyz" "def" RESULT A NIL B C (A B C NIL)) ("xyz" "def" RESULT A NIL B C (A B C D)) ("xyz" "def" RESULT A NIL B C (A B C D E)) ("xyz" "def" RESULT A NIL B C (A B C D E F)))
(DEFINE-METHOD-COMBINATION MC65 (OPT1 &OPTIONAL (OPT2 "def")) ((ALL *)) (:ARGUMENTS A1 A2 &REST R) `(LIST ',OPT1 ',OPT2 'RESULT ,A1 ,A2 ,R (CALL-METHOD ,(FIRST ALL))))
EQL-OK: MC65
(PROGN (DEFGENERIC TEST-MC65-1 NIL (:METHOD-COMBINATION MC65 "xyz") (:METHOD NIL 'NIL)) (TEST-MC65-1))
EQUAL-OK: ("xyz" "def" RESULT NIL NIL NIL NIL)
(PROGN (DEFGENERIC TEST-MC65-2 (X) (:METHOD-COMBINATION MC65 "xyz") (:METHOD (X) (LIST X))) (TEST-MC65-2 'A))
EQUAL-OK: ("xyz" "def" RESULT A NIL NIL (A))
(PROGN (DEFGENERIC TEST-MC65-3 (X Y) (:METHOD-COMBINATION MC65 "xyz") (:METHOD (X Y) (LIST X Y))) (TEST-MC65-3 'A 'B))
EQUAL-OK: ("xyz" "def" RESULT A B NIL (A B))
(PROGN (DEFGENERIC TEST-MC65-4 (X Y Z) (:METHOD-COMBINATION MC65 "xyz") (:METHOD (X Y Z) (LIST X Y Z))) (TEST-MC65-4 'A 'B 'C))
EQUAL-OK: ("xyz" "def" RESULT A B NIL (A B C))
(PROGN (DEFGENERIC TEST-MC65-5 (X &OPTIONAL Y) (:METHOD-COMBINATION MC65 "xyz") (:METHOD (X &OPTIONAL Y) (LIST X Y))) (LIST (TEST-MC65-5 'A) (TEST-MC65-5 'A 'B)))
EQUAL-OK: (("xyz" "def" RESULT A NIL NIL (A NIL)) ("xyz" "def" RESULT A NIL NIL (A B)))
(PROGN (DEFGENERIC TEST-MC65-6 (X Y &OPTIONAL Z) (:METHOD-COMBINATION MC65 "xyz") (:METHOD (X Y &OPTIONAL Z) (LIST X Y Z))) (LIST (TEST-MC65-6 'A 'B) (TEST-MC65-6 'A 'B 'C)))
EQUAL-OK: (("xyz" "def" RESULT A B NIL (A B NIL)) ("xyz" "def" RESULT A B NIL (A B C)))
(PROGN (DEFGENERIC TEST-MC65-7 (X Y Z &OPTIONAL U) (:METHOD-COMBINATION MC65 "xyz") (:METHOD (X Y Z &OPTIONAL U) (LIST X Y Z U))) (LIST (TEST-MC65-7 'A 'B 'C) (TEST-MC65-7 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT A B NIL (A B C NIL)) ("xyz" "def" RESULT A B NIL (A B C D)))
(PROGN (DEFGENERIC TEST-MC65-8 (X &OPTIONAL Y Z) (:METHOD-COMBINATION MC65 "xyz") (:METHOD (X &OPTIONAL Y Z) (LIST X Y Z))) (LIST (TEST-MC65-8 'A) (TEST-MC65-8 'A 'B) (TEST-MC65-8 'A 'B 'C)))
EQUAL-OK: (("xyz" "def" RESULT A NIL NIL (A NIL NIL)) ("xyz" "def" RESULT A NIL NIL (A B NIL)) ("xyz" "def" RESULT A NIL NIL (A B C)))
(PROGN (DEFGENERIC TEST-MC65-9 (X Y &OPTIONAL Z U) (:METHOD-COMBINATION MC65 "xyz") (:METHOD (X Y &OPTIONAL Z U) (LIST X Y Z U))) (LIST (TEST-MC65-9 'A 'B) (TEST-MC65-9 'A 'B 'C) (TEST-MC65-9 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT A B NIL (A B NIL NIL)) ("xyz" "def" RESULT A B NIL (A B C NIL)) ("xyz" "def" RESULT A B NIL (A B C D)))
(PROGN (DEFGENERIC TEST-MC65-10 (X Y Z &OPTIONAL U V) (:METHOD-COMBINATION MC65 "xyz") (:METHOD (X Y Z &OPTIONAL U V) (LIST X Y Z U V))) (LIST (TEST-MC65-10 'A 'B 'C) (TEST-MC65-10 'A 'B 'C 'D) (TEST-MC65-10 'A 'B 'C 'D 'E)))
EQUAL-OK: (("xyz" "def" RESULT A B NIL (A B C NIL NIL)) ("xyz" "def" RESULT A B NIL (A B C D NIL)) ("xyz" "def" RESULT A B NIL (A B C D E)))
(PROGN (DEFGENERIC TEST-MC65-11 (X &OPTIONAL Y Z U) (:METHOD-COMBINATION MC65 "xyz") (:METHOD (X &OPTIONAL Y Z U) (LIST X Y Z U))) (LIST (TEST-MC65-11 'A) (TEST-MC65-11 'A 'B) (TEST-MC65-11 'A 'B 'C) (TEST-MC65-11 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT A NIL NIL (A NIL NIL NIL)) ("xyz" "def" RESULT A NIL NIL (A B NIL NIL)) ("xyz" "def" RESULT A NIL NIL (A B C NIL)) ("xyz" "def" RESULT A NIL NIL (A B C D)))
(PROGN (DEFGENERIC TEST-MC65-12 (X Y &OPTIONAL Z U V) (:METHOD-COMBINATION MC65 "xyz") (:METHOD (X Y &OPTIONAL Z U V) (LIST X Y Z U V))) (LIST (TEST-MC65-12 'A 'B) (TEST-MC65-12 'A 'B 'C) (TEST-MC65-12 'A 'B 'C 'D) (TEST-MC65-12 'A 'B 'C 'D 'E)))
EQUAL-OK: (("xyz" "def" RESULT A B NIL (A B NIL NIL NIL)) ("xyz" "def" RESULT A B NIL (A B C NIL NIL)) ("xyz" "def" RESULT A B NIL (A B C D NIL)) ("xyz" "def" RESULT A B NIL (A B C D E)))
(PROGN (DEFGENERIC TEST-MC65-13 (X Y Z &OPTIONAL U V W) (:METHOD-COMBINATION MC65 "xyz") (:METHOD (X Y Z &OPTIONAL U V W) (LIST X Y Z U V W))) (LIST (TEST-MC65-13 'A 'B 'C) (TEST-MC65-13 'A 'B 'C 'D) (TEST-MC65-13 'A 'B 'C 'D 'E) (TEST-MC65-13 'A 'B 'C 'D 'E 'F)))
EQUAL-OK: (("xyz" "def" RESULT A B NIL (A B C NIL NIL NIL)) ("xyz" "def" RESULT A B NIL (A B C D NIL NIL)) ("xyz" "def" RESULT A B NIL (A B C D E NIL)) ("xyz" "def" RESULT A B NIL (A B C D E F)))
(PROGN (DEFGENERIC TEST-MC65-14 (X &REST Y) (:METHOD-COMBINATION MC65 "xyz") (:METHOD (X &REST Y) (LIST* X Y))) (LIST (TEST-MC65-14 'A) (TEST-MC65-14 'A 'B) (TEST-MC65-14 'A 'B 'C)))
EQUAL-OK: (("xyz" "def" RESULT A NIL NIL (A)) ("xyz" "def" RESULT A NIL (B) (A B)) ("xyz" "def" RESULT A NIL (B C) (A B C)))
(PROGN (DEFGENERIC TEST-MC65-15 (X Y &REST Z) (:METHOD-COMBINATION MC65 "xyz") (:METHOD (X Y &REST Z) (LIST* X Y Z))) (LIST (TEST-MC65-15 'A 'B) (TEST-MC65-15 'A 'B 'C) (TEST-MC65-15 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT A B NIL (A B)) ("xyz" "def" RESULT A B (C) (A B C)) ("xyz" "def" RESULT A B (C D) (A B C D)))
(PROGN (DEFGENERIC TEST-MC65-16 (X Y Z &REST U) (:METHOD-COMBINATION MC65 "xyz") (:METHOD (X Y Z &REST U) (LIST* X Y Z U))) (LIST (TEST-MC65-16 'A 'B 'C) (TEST-MC65-16 'A 'B 'C 'D) (TEST-MC65-16 'A 'B 'C 'D 'E)))
EQUAL-OK: (("xyz" "def" RESULT A B NIL (A B C)) ("xyz" "def" RESULT A B (D) (A B C D)) ("xyz" "def" RESULT A B (D E) (A B C D E)))
(PROGN (DEFGENERIC TEST-MC65-17 (X &OPTIONAL Y &REST Z) (:METHOD-COMBINATION MC65 "xyz") (:METHOD (X &OPTIONAL Y &REST Z) (LIST* X Y Z))) (LIST (TEST-MC65-17 'A) (TEST-MC65-17 'A 'B) (TEST-MC65-17 'A 'B 'C) (TEST-MC65-17 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT A NIL NIL (A NIL)) ("xyz" "def" RESULT A NIL NIL (A B)) ("xyz" "def" RESULT A NIL (C) (A B C)) ("xyz" "def" RESULT A NIL (C D) (A B C D)))
(PROGN (DEFGENERIC TEST-MC65-18 (X &OPTIONAL Y Z &REST U) (:METHOD-COMBINATION MC65 "xyz") (:METHOD (X &OPTIONAL Y Z &REST U) (LIST* X Y Z U))) (LIST (TEST-MC65-18 'A) (TEST-MC65-18 'A 'B) (TEST-MC65-18 'A 'B 'C) (TEST-MC65-18 'A 'B 'C 'D) (TEST-MC65-18 'A 'B 'C 'D 'E)))
EQUAL-OK: (("xyz" "def" RESULT A NIL NIL (A NIL NIL)) ("xyz" "def" RESULT A NIL NIL (A B NIL)) ("xyz" "def" RESULT A NIL NIL (A B C)) ("xyz" "def" RESULT A NIL (D) (A B C D)) ("xyz" "def" RESULT A NIL (D E) (A B C D E)))
(PROGN (DEFGENERIC TEST-MC65-19 (X &OPTIONAL Y Z U &REST V) (:METHOD-COMBINATION MC65 "xyz") (:METHOD (X &OPTIONAL Y Z U &REST V) (LIST* X Y Z U V))) (LIST (TEST-MC65-19 'A) (TEST-MC65-19 'A 'B) (TEST-MC65-19 'A 'B 'C) (TEST-MC65-19 'A 'B 'C 'D) (TEST-MC65-19 'A 'B 'C 'D 'E) (TEST-MC65-19 'A 'B 'C 'D 'E 'F)))
EQUAL-OK: (("xyz" "def" RESULT A NIL NIL (A NIL NIL NIL)) ("xyz" "def" RESULT A NIL NIL (A B NIL NIL)) ("xyz" "def" RESULT A NIL NIL (A B C NIL)) ("xyz" "def" RESULT A NIL NIL (A B C D)) ("xyz" "def" RESULT A NIL (E) (A B C D E)) ("xyz" "def" RESULT A NIL (E F) (A B C D E F)))
(DEFINE-METHOD-COMBINATION MC66 (OPT1 &OPTIONAL (OPT2 "def")) ((ALL *)) (:ARGUMENTS &OPTIONAL (O1 'DEF1) (O2 'DEF2) &REST R) `(LIST ',OPT1 ',OPT2 'RESULT ,O1 ,O2 ,R (CALL-METHOD ,(FIRST ALL))))
EQL-OK: MC66
(PROGN (DEFGENERIC TEST-MC66-1 NIL (:METHOD-COMBINATION MC66 "xyz") (:METHOD NIL 'NIL)) (TEST-MC66-1))
EQUAL-OK: ("xyz" "def" RESULT DEF1 DEF2 NIL NIL)
(PROGN (DEFGENERIC TEST-MC66-2 (X) (:METHOD-COMBINATION MC66 "xyz") (:METHOD (X) (LIST X))) (TEST-MC66-2 'A))
EQUAL-OK: ("xyz" "def" RESULT DEF1 DEF2 NIL (A))
(PROGN (DEFGENERIC TEST-MC66-3 (X Y) (:METHOD-COMBINATION MC66 "xyz") (:METHOD (X Y) (LIST X Y))) (TEST-MC66-3 'A 'B))
EQUAL-OK: ("xyz" "def" RESULT DEF1 DEF2 NIL (A B))
(PROGN (DEFGENERIC TEST-MC66-4 (X Y Z) (:METHOD-COMBINATION MC66 "xyz") (:METHOD (X Y Z) (LIST X Y Z))) (TEST-MC66-4 'A 'B 'C))
EQUAL-OK: ("xyz" "def" RESULT DEF1 DEF2 NIL (A B C))
(PROGN (DEFGENERIC TEST-MC66-5 (X &OPTIONAL Y) (:METHOD-COMBINATION MC66 "xyz") (:METHOD (X &OPTIONAL Y) (LIST X Y))) (LIST (TEST-MC66-5 'A) (TEST-MC66-5 'A 'B)))
EQUAL-OK: (("xyz" "def" RESULT DEF1 DEF2 NIL (A NIL)) ("xyz" "def" RESULT B DEF2 NIL (A B)))
(PROGN (DEFGENERIC TEST-MC66-6 (X Y &OPTIONAL Z) (:METHOD-COMBINATION MC66 "xyz") (:METHOD (X Y &OPTIONAL Z) (LIST X Y Z))) (LIST (TEST-MC66-6 'A 'B) (TEST-MC66-6 'A 'B 'C)))
EQUAL-OK: (("xyz" "def" RESULT DEF1 DEF2 NIL (A B NIL)) ("xyz" "def" RESULT C DEF2 NIL (A B C)))
(PROGN (DEFGENERIC TEST-MC66-7 (X Y Z &OPTIONAL U) (:METHOD-COMBINATION MC66 "xyz") (:METHOD (X Y Z &OPTIONAL U) (LIST X Y Z U))) (LIST (TEST-MC66-7 'A 'B 'C) (TEST-MC66-7 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT DEF1 DEF2 NIL (A B C NIL)) ("xyz" "def" RESULT D DEF2 NIL (A B C D)))
(PROGN (DEFGENERIC TEST-MC66-8 (X &OPTIONAL Y Z) (:METHOD-COMBINATION MC66 "xyz") (:METHOD (X &OPTIONAL Y Z) (LIST X Y Z))) (LIST (TEST-MC66-8 'A) (TEST-MC66-8 'A 'B) (TEST-MC66-8 'A 'B 'C)))
EQUAL-OK: (("xyz" "def" RESULT DEF1 DEF2 NIL (A NIL NIL)) ("xyz" "def" RESULT B DEF2 NIL (A B NIL)) ("xyz" "def" RESULT B C NIL (A B C)))
(PROGN (DEFGENERIC TEST-MC66-9 (X Y &OPTIONAL Z U) (:METHOD-COMBINATION MC66 "xyz") (:METHOD (X Y &OPTIONAL Z U) (LIST X Y Z U))) (LIST (TEST-MC66-9 'A 'B) (TEST-MC66-9 'A 'B 'C) (TEST-MC66-9 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT DEF1 DEF2 NIL (A B NIL NIL)) ("xyz" "def" RESULT C DEF2 NIL (A B C NIL)) ("xyz" "def" RESULT C D NIL (A B C D)))
(PROGN (DEFGENERIC TEST-MC66-10 (X Y Z &OPTIONAL U V) (:METHOD-COMBINATION MC66 "xyz") (:METHOD (X Y Z &OPTIONAL U V) (LIST X Y Z U V))) (LIST (TEST-MC66-10 'A 'B 'C) (TEST-MC66-10 'A 'B 'C 'D) (TEST-MC66-10 'A 'B 'C 'D 'E)))
EQUAL-OK: (("xyz" "def" RESULT DEF1 DEF2 NIL (A B C NIL NIL)) ("xyz" "def" RESULT D DEF2 NIL (A B C D NIL)) ("xyz" "def" RESULT D E NIL (A B C D E)))
(PROGN (DEFGENERIC TEST-MC66-11 (X &OPTIONAL Y Z U) (:METHOD-COMBINATION MC66 "xyz") (:METHOD (X &OPTIONAL Y Z U) (LIST X Y Z U))) (LIST (TEST-MC66-11 'A) (TEST-MC66-11 'A 'B) (TEST-MC66-11 'A 'B 'C) (TEST-MC66-11 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT DEF1 DEF2 NIL (A NIL NIL NIL)) ("xyz" "def" RESULT B DEF2 NIL (A B NIL NIL)) ("xyz" "def" RESULT B C NIL (A B C NIL)) ("xyz" "def" RESULT B C NIL (A B C D)))
(PROGN (DEFGENERIC TEST-MC66-12 (X Y &OPTIONAL Z U V) (:METHOD-COMBINATION MC66 "xyz") (:METHOD (X Y &OPTIONAL Z U V) (LIST X Y Z U V))) (LIST (TEST-MC66-12 'A 'B) (TEST-MC66-12 'A 'B 'C) (TEST-MC66-12 'A 'B 'C 'D) (TEST-MC66-12 'A 'B 'C 'D 'E)))
EQUAL-OK: (("xyz" "def" RESULT DEF1 DEF2 NIL (A B NIL NIL NIL)) ("xyz" "def" RESULT C DEF2 NIL (A B C NIL NIL)) ("xyz" "def" RESULT C D NIL (A B C D NIL)) ("xyz" "def" RESULT C D NIL (A B C D E)))
(PROGN (DEFGENERIC TEST-MC66-13 (X Y Z &OPTIONAL U V W) (:METHOD-COMBINATION MC66 "xyz") (:METHOD (X Y Z &OPTIONAL U V W) (LIST X Y Z U V W))) (LIST (TEST-MC66-13 'A 'B 'C) (TEST-MC66-13 'A 'B 'C 'D) (TEST-MC66-13 'A 'B 'C 'D 'E) (TEST-MC66-13 'A 'B 'C 'D 'E 'F)))
EQUAL-OK: (("xyz" "def" RESULT DEF1 DEF2 NIL (A B C NIL NIL NIL)) ("xyz" "def" RESULT D DEF2 NIL (A B C D NIL NIL)) ("xyz" "def" RESULT D E NIL (A B C D E NIL)) ("xyz" "def" RESULT D E NIL (A B C D E F)))
(PROGN (DEFGENERIC TEST-MC66-14 (X &REST Y) (:METHOD-COMBINATION MC66 "xyz") (:METHOD (X &REST Y) (LIST* X Y))) (LIST (TEST-MC66-14 'A) (TEST-MC66-14 'A 'B) (TEST-MC66-14 'A 'B 'C)))
EQUAL-OK: (("xyz" "def" RESULT DEF1 DEF2 NIL (A)) ("xyz" "def" RESULT DEF1 DEF2 (B) (A B)) ("xyz" "def" RESULT DEF1 DEF2 (B C) (A B C)))
(PROGN (DEFGENERIC TEST-MC66-15 (X Y &REST Z) (:METHOD-COMBINATION MC66 "xyz") (:METHOD (X Y &REST Z) (LIST* X Y Z))) (LIST (TEST-MC66-15 'A 'B) (TEST-MC66-15 'A 'B 'C) (TEST-MC66-15 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT DEF1 DEF2 NIL (A B)) ("xyz" "def" RESULT DEF1 DEF2 (C) (A B C)) ("xyz" "def" RESULT DEF1 DEF2 (C D) (A B C D)))
(PROGN (DEFGENERIC TEST-MC66-16 (X Y Z &REST U) (:METHOD-COMBINATION MC66 "xyz") (:METHOD (X Y Z &REST U) (LIST* X Y Z U))) (LIST (TEST-MC66-16 'A 'B 'C) (TEST-MC66-16 'A 'B 'C 'D) (TEST-MC66-16 'A 'B 'C 'D 'E)))
EQUAL-OK: (("xyz" "def" RESULT DEF1 DEF2 NIL (A B C)) ("xyz" "def" RESULT DEF1 DEF2 (D) (A B C D)) ("xyz" "def" RESULT DEF1 DEF2 (D E) (A B C D E)))
(PROGN (DEFGENERIC TEST-MC66-17 (X &OPTIONAL Y &REST Z) (:METHOD-COMBINATION MC66 "xyz") (:METHOD (X &OPTIONAL Y &REST Z) (LIST* X Y Z))) (LIST (TEST-MC66-17 'A) (TEST-MC66-17 'A 'B) (TEST-MC66-17 'A 'B 'C) (TEST-MC66-17 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT DEF1 DEF2 NIL (A NIL)) ("xyz" "def" RESULT B DEF2 NIL (A B)) ("xyz" "def" RESULT B DEF2 (C) (A B C)) ("xyz" "def" RESULT B DEF2 (C D) (A B C D)))
(PROGN (DEFGENERIC TEST-MC66-18 (X &OPTIONAL Y Z &REST U) (:METHOD-COMBINATION MC66 "xyz") (:METHOD (X &OPTIONAL Y Z &REST U) (LIST* X Y Z U))) (LIST (TEST-MC66-18 'A) (TEST-MC66-18 'A 'B) (TEST-MC66-18 'A 'B 'C) (TEST-MC66-18 'A 'B 'C 'D) (TEST-MC66-18 'A 'B 'C 'D 'E)))
EQUAL-OK: (("xyz" "def" RESULT DEF1 DEF2 NIL (A NIL NIL)) ("xyz" "def" RESULT B DEF2 NIL (A B NIL)) ("xyz" "def" RESULT B C NIL (A B C)) ("xyz" "def" RESULT B C (D) (A B C D)) ("xyz" "def" RESULT B C (D E) (A B C D E)))
(PROGN (DEFGENERIC TEST-MC66-19 (X &OPTIONAL Y Z U &REST V) (:METHOD-COMBINATION MC66 "xyz") (:METHOD (X &OPTIONAL Y Z U &REST V) (LIST* X Y Z U V))) (LIST (TEST-MC66-19 'A) (TEST-MC66-19 'A 'B) (TEST-MC66-19 'A 'B 'C) (TEST-MC66-19 'A 'B 'C 'D) (TEST-MC66-19 'A 'B 'C 'D 'E) (TEST-MC66-19 'A 'B 'C 'D 'E 'F)))
EQUAL-OK: (("xyz" "def" RESULT DEF1 DEF2 NIL (A NIL NIL NIL)) ("xyz" "def" RESULT B DEF2 NIL (A B NIL NIL)) ("xyz" "def" RESULT B C NIL (A B C NIL)) ("xyz" "def" RESULT B C NIL (A B C D)) ("xyz" "def" RESULT B C (E) (A B C D E)) ("xyz" "def" RESULT B C (E F) (A B C D E F)))
(DEFINE-METHOD-COMBINATION MC67 (OPT1 &OPTIONAL (OPT2 "def")) ((ALL *)) (:ARGUMENTS A1 A2 &OPTIONAL (O1 'DEF1) (O2 'DEF2) &REST R) `(LIST ',OPT1 ',OPT2 'RESULT ,A1 ,A2 ,O1 ,O2 ,R (CALL-METHOD ,(FIRST ALL))))
EQL-OK: MC67
(PROGN (DEFGENERIC TEST-MC67-1 NIL (:METHOD-COMBINATION MC67 "xyz") (:METHOD NIL 'NIL)) (TEST-MC67-1))
EQUAL-OK: ("xyz" "def" RESULT NIL NIL DEF1 DEF2 NIL NIL)
(PROGN (DEFGENERIC TEST-MC67-2 (X) (:METHOD-COMBINATION MC67 "xyz") (:METHOD (X) (LIST X))) (TEST-MC67-2 'A))
EQUAL-OK: ("xyz" "def" RESULT A NIL DEF1 DEF2 NIL (A))
(PROGN (DEFGENERIC TEST-MC67-3 (X Y) (:METHOD-COMBINATION MC67 "xyz") (:METHOD (X Y) (LIST X Y))) (TEST-MC67-3 'A 'B))
EQUAL-OK: ("xyz" "def" RESULT A B DEF1 DEF2 NIL (A B))
(PROGN (DEFGENERIC TEST-MC67-4 (X Y Z) (:METHOD-COMBINATION MC67 "xyz") (:METHOD (X Y Z) (LIST X Y Z))) (TEST-MC67-4 'A 'B 'C))
EQUAL-OK: ("xyz" "def" RESULT A B DEF1 DEF2 NIL (A B C))
(PROGN (DEFGENERIC TEST-MC67-5 (X &OPTIONAL Y) (:METHOD-COMBINATION MC67 "xyz") (:METHOD (X &OPTIONAL Y) (LIST X Y))) (LIST (TEST-MC67-5 'A) (TEST-MC67-5 'A 'B)))
EQUAL-OK: (("xyz" "def" RESULT A NIL DEF1 DEF2 NIL (A NIL)) ("xyz" "def" RESULT A NIL B DEF2 NIL (A B)))
(PROGN (DEFGENERIC TEST-MC67-6 (X Y &OPTIONAL Z) (:METHOD-COMBINATION MC67 "xyz") (:METHOD (X Y &OPTIONAL Z) (LIST X Y Z))) (LIST (TEST-MC67-6 'A 'B) (TEST-MC67-6 'A 'B 'C)))
EQUAL-OK: (("xyz" "def" RESULT A B DEF1 DEF2 NIL (A B NIL)) ("xyz" "def" RESULT A B C DEF2 NIL (A B C)))
(PROGN (DEFGENERIC TEST-MC67-7 (X Y Z &OPTIONAL U) (:METHOD-COMBINATION MC67 "xyz") (:METHOD (X Y Z &OPTIONAL U) (LIST X Y Z U))) (LIST (TEST-MC67-7 'A 'B 'C) (TEST-MC67-7 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT A B DEF1 DEF2 NIL (A B C NIL)) ("xyz" "def" RESULT A B D DEF2 NIL (A B C D)))
(PROGN (DEFGENERIC TEST-MC67-8 (X &OPTIONAL Y Z) (:METHOD-COMBINATION MC67 "xyz") (:METHOD (X &OPTIONAL Y Z) (LIST X Y Z))) (LIST (TEST-MC67-8 'A) (TEST-MC67-8 'A 'B) (TEST-MC67-8 'A 'B 'C)))
EQUAL-OK: (("xyz" "def" RESULT A NIL DEF1 DEF2 NIL (A NIL NIL)) ("xyz" "def" RESULT A NIL B DEF2 NIL (A B NIL)) ("xyz" "def" RESULT A NIL B C NIL (A B C)))
(PROGN (DEFGENERIC TEST-MC67-9 (X Y &OPTIONAL Z U) (:METHOD-COMBINATION MC67 "xyz") (:METHOD (X Y &OPTIONAL Z U) (LIST X Y Z U))) (LIST (TEST-MC67-9 'A 'B) (TEST-MC67-9 'A 'B 'C) (TEST-MC67-9 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT A B DEF1 DEF2 NIL (A B NIL NIL)) ("xyz" "def" RESULT A B C DEF2 NIL (A B C NIL)) ("xyz" "def" RESULT A B C D NIL (A B C D)))
(PROGN (DEFGENERIC TEST-MC67-10 (X Y Z &OPTIONAL U V) (:METHOD-COMBINATION MC67 "xyz") (:METHOD (X Y Z &OPTIONAL U V) (LIST X Y Z U V))) (LIST (TEST-MC67-10 'A 'B 'C) (TEST-MC67-10 'A 'B 'C 'D) (TEST-MC67-10 'A 'B 'C 'D 'E)))
EQUAL-OK: (("xyz" "def" RESULT A B DEF1 DEF2 NIL (A B C NIL NIL)) ("xyz" "def" RESULT A B D DEF2 NIL (A B C D NIL)) ("xyz" "def" RESULT A B D E NIL (A B C D E)))
(PROGN (DEFGENERIC TEST-MC67-11 (X &OPTIONAL Y Z U) (:METHOD-COMBINATION MC67 "xyz") (:METHOD (X &OPTIONAL Y Z U) (LIST X Y Z U))) (LIST (TEST-MC67-11 'A) (TEST-MC67-11 'A 'B) (TEST-MC67-11 'A 'B 'C) (TEST-MC67-11 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT A NIL DEF1 DEF2 NIL (A NIL NIL NIL)) ("xyz" "def" RESULT A NIL B DEF2 NIL (A B NIL NIL)) ("xyz" "def" RESULT A NIL B C NIL (A B C NIL)) ("xyz" "def" RESULT A NIL B C NIL (A B C D)))
(PROGN (DEFGENERIC TEST-MC67-12 (X Y &OPTIONAL Z U V) (:METHOD-COMBINATION MC67 "xyz") (:METHOD (X Y &OPTIONAL Z U V) (LIST X Y Z U V))) (LIST (TEST-MC67-12 'A 'B) (TEST-MC67-12 'A 'B 'C) (TEST-MC67-12 'A 'B 'C 'D) (TEST-MC67-12 'A 'B 'C 'D 'E)))
EQUAL-OK: (("xyz" "def" RESULT A B DEF1 DEF2 NIL (A B NIL NIL NIL)) ("xyz" "def" RESULT A B C DEF2 NIL (A B C NIL NIL)) ("xyz" "def" RESULT A B C D NIL (A B C D NIL)) ("xyz" "def" RESULT A B C D NIL (A B C D E)))
(PROGN (DEFGENERIC TEST-MC67-13 (X Y Z &OPTIONAL U V W) (:METHOD-COMBINATION MC67 "xyz") (:METHOD (X Y Z &OPTIONAL U V W) (LIST X Y Z U V W))) (LIST (TEST-MC67-13 'A 'B 'C) (TEST-MC67-13 'A 'B 'C 'D) (TEST-MC67-13 'A 'B 'C 'D 'E) (TEST-MC67-13 'A 'B 'C 'D 'E 'F)))
EQUAL-OK: (("xyz" "def" RESULT A B DEF1 DEF2 NIL (A B C NIL NIL NIL)) ("xyz" "def" RESULT A B D DEF2 NIL (A B C D NIL NIL)) ("xyz" "def" RESULT A B D E NIL (A B C D E NIL)) ("xyz" "def" RESULT A B D E NIL (A B C D E F)))
(PROGN (DEFGENERIC TEST-MC67-14 (X &REST Y) (:METHOD-COMBINATION MC67 "xyz") (:METHOD (X &REST Y) (LIST* X Y))) (LIST (TEST-MC67-14 'A) (TEST-MC67-14 'A 'B) (TEST-MC67-14 'A 'B 'C)))
EQUAL-OK: (("xyz" "def" RESULT A NIL DEF1 DEF2 NIL (A)) ("xyz" "def" RESULT A NIL DEF1 DEF2 (B) (A B)) ("xyz" "def" RESULT A NIL DEF1 DEF2 (B C) (A B C)))
(PROGN (DEFGENERIC TEST-MC67-15 (X Y &REST Z) (:METHOD-COMBINATION MC67 "xyz") (:METHOD (X Y &REST Z) (LIST* X Y Z))) (LIST (TEST-MC67-15 'A 'B) (TEST-MC67-15 'A 'B 'C) (TEST-MC67-15 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT A B DEF1 DEF2 NIL (A B)) ("xyz" "def" RESULT A B DEF1 DEF2 (C) (A B C)) ("xyz" "def" RESULT A B DEF1 DEF2 (C D) (A B C D)))
(PROGN (DEFGENERIC TEST-MC67-16 (X Y Z &REST U) (:METHOD-COMBINATION MC67 "xyz") (:METHOD (X Y Z &REST U) (LIST* X Y Z U))) (LIST (TEST-MC67-16 'A 'B 'C) (TEST-MC67-16 'A 'B 'C 'D) (TEST-MC67-16 'A 'B 'C 'D 'E)))
EQUAL-OK: (("xyz" "def" RESULT A B DEF1 DEF2 NIL (A B C)) ("xyz" "def" RESULT A B DEF1 DEF2 (D) (A B C D)) ("xyz" "def" RESULT A B DEF1 DEF2 (D E) (A B C D E)))
(PROGN (DEFGENERIC TEST-MC67-17 (X &OPTIONAL Y &REST Z) (:METHOD-COMBINATION MC67 "xyz") (:METHOD (X &OPTIONAL Y &REST Z) (LIST* X Y Z))) (LIST (TEST-MC67-17 'A) (TEST-MC67-17 'A 'B) (TEST-MC67-17 'A 'B 'C) (TEST-MC67-17 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT A NIL DEF1 DEF2 NIL (A NIL)) ("xyz" "def" RESULT A NIL B DEF2 NIL (A B)) ("xyz" "def" RESULT A NIL B DEF2 (C) (A B C)) ("xyz" "def" RESULT A NIL B DEF2 (C D) (A B C D)))
(PROGN (DEFGENERIC TEST-MC67-18 (X &OPTIONAL Y Z &REST U) (:METHOD-COMBINATION MC67 "xyz") (:METHOD (X &OPTIONAL Y Z &REST U) (LIST* X Y Z U))) (LIST (TEST-MC67-18 'A) (TEST-MC67-18 'A 'B) (TEST-MC67-18 'A 'B 'C) (TEST-MC67-18 'A 'B 'C 'D) (TEST-MC67-18 'A 'B 'C 'D 'E)))
EQUAL-OK: (("xyz" "def" RESULT A NIL DEF1 DEF2 NIL (A NIL NIL)) ("xyz" "def" RESULT A NIL B DEF2 NIL (A B NIL)) ("xyz" "def" RESULT A NIL B C NIL (A B C)) ("xyz" "def" RESULT A NIL B C (D) (A B C D)) ("xyz" "def" RESULT A NIL B C (D E) (A B C D E)))
(PROGN (DEFGENERIC TEST-MC67-19 (X &OPTIONAL Y Z U &REST V) (:METHOD-COMBINATION MC67 "xyz") (:METHOD (X &OPTIONAL Y Z U &REST V) (LIST* X Y Z U V))) (LIST (TEST-MC67-19 'A) (TEST-MC67-19 'A 'B) (TEST-MC67-19 'A 'B 'C) (TEST-MC67-19 'A 'B 'C 'D) (TEST-MC67-19 'A 'B 'C 'D 'E) (TEST-MC67-19 'A 'B 'C 'D 'E 'F)))
EQUAL-OK: (("xyz" "def" RESULT A NIL DEF1 DEF2 NIL (A NIL NIL NIL)) ("xyz" "def" RESULT A NIL B DEF2 NIL (A B NIL NIL)) ("xyz" "def" RESULT A NIL B C NIL (A B C NIL)) ("xyz" "def" RESULT A NIL B C NIL (A B C D)) ("xyz" "def" RESULT A NIL B C (E) (A B C D E)) ("xyz" "def" RESULT A NIL B C (E F) (A B C D E F)))
(DEFINE-METHOD-COMBINATION MC68 (OPT1 &OPTIONAL (OPT2 "def")) ((ALL *)) (:ARGUMENTS A1 A2 &OPTIONAL (O1 'DEF1) (O2 'DEF2) &KEY (TEST 'EQ) (TEST-NOT 'NEQ)) `(LIST ',OPT1 ',OPT2 'RESULT ,A1 ,A2 ,O1 ,O2 ,TEST ,TEST-NOT (CALL-METHOD ,(FIRST ALL))))
EQL-OK: MC68
(PROGN (DEFGENERIC TEST-MC68-1 (X &OPTIONAL Y) (:METHOD-COMBINATION MC68 "xyz") (:METHOD (X &OPTIONAL Y) (LIST X Y))) (LIST (TEST-MC68-1 'A) (TEST-MC68-1 'A 'B)))
EQUAL-OK: (("xyz" "def" RESULT A NIL DEF1 DEF2 EQ NEQ (A NIL)) ("xyz" "def" RESULT A NIL B DEF2 EQ NEQ (A B)))
(PROGN (DEFGENERIC TEST-MC68-2 (X Y Z &OPTIONAL U V W) (:METHOD-COMBINATION MC68 "xyz") (:METHOD (X Y Z &OPTIONAL U V W) (LIST X Y Z U V W))) (LIST (TEST-MC68-2 'A 'B 'C) (TEST-MC68-2 'A 'B 'C 'D) (TEST-MC68-2 'A 'B 'C 'D 'E) (TEST-MC68-2 'A 'B 'C 'D 'E 'F)))
EQUAL-OK: (("xyz" "def" RESULT A B DEF1 DEF2 EQ NEQ (A B C NIL NIL NIL)) ("xyz" "def" RESULT A B D DEF2 EQ NEQ (A B C D NIL NIL)) ("xyz" "def" RESULT A B D E EQ NEQ (A B C D E NIL)) ("xyz" "def" RESULT A B D E EQ NEQ (A B C D E F)))
(PROGN (DEFGENERIC TEST-MC68-3 (X &REST Y) (:METHOD-COMBINATION MC68 "xyz") (:METHOD (X &REST Y) (LIST* X Y))) (LIST (TEST-MC68-3 'A) (TEST-MC68-3 'A 'B 'C) (TEST-MC68-3 'A :TEST-NOT 'NEQUAL :TEST 'EQL :TEST-NOT 'NEQUALP)))
EQUAL-OK: (("xyz" "def" RESULT A NIL DEF1 DEF2 EQ NEQ (A)) ("xyz" "def" RESULT A NIL DEF1 DEF2 EQ NEQ (A B C)) ("xyz" "def" RESULT A NIL DEF1 DEF2 EQL NEQUAL (A :TEST-NOT NEQUAL :TEST EQL :TEST-NOT NEQUALP)))
(PROGN (DEFGENERIC TEST-MC68-4 (X &REST Y) (:METHOD-COMBINATION MC68 "xyz") (:METHOD (X &REST Y) (LIST* X Y))) (TEST-MC68-4 'A 'B))
[SIMPLE-PROGRAM-ERROR]: #:COMPILED-FORM-694-1-1: keyword arguments in (B) should occur pairwise

EQL-OK: ERROR
(PROGN (DEFGENERIC TEST-MC68-5 (X Y Z &REST U) (:METHOD-COMBINATION MC68 "xyz") (:METHOD (X Y Z &REST U) (LIST* X Y Z U))) (LIST (TEST-MC68-5 'A :TEST 'EQ) (TEST-MC68-5 'A :TEST 'EQ 'D 'E) (TEST-MC68-5 'A :TEST 'EQ :TEST-NOT 'NEQUAL :TEST 'EQL :TEST-NOT 'NEQUALP)))
EQUAL-OK: (("xyz" "def" RESULT A :TEST DEF1 DEF2 EQ NEQ (A :TEST EQ)) ("xyz" "def" RESULT A :TEST DEF1 DEF2 EQ NEQ (A :TEST EQ D E)) ("xyz" "def" RESULT A :TEST DEF1 DEF2 EQL NEQUAL (A :TEST EQ :TEST-NOT NEQUAL :TEST EQL :TEST-NOT NEQUALP)))
(PROGN (DEFGENERIC TEST-MC68-6 (X &OPTIONAL Y Z U &REST V) (:METHOD-COMBINATION MC68 "xyz") (:METHOD (X &OPTIONAL Y Z U &REST V) (LIST* X Y Z U V))) (LIST (TEST-MC68-6 'A) (TEST-MC68-6 'A 'B 'C) (TEST-MC68-6 'A :TEST 'EQ 'D :TEST-NOT 'NEQUAL :TEST 'EQL :TEST-NOT 'NEQUALP)))
EQUAL-OK: (("xyz" "def" RESULT A NIL DEF1 DEF2 EQ NEQ (A NIL NIL NIL)) ("xyz" "def" RESULT A NIL B C EQ NEQ (A B C NIL)) ("xyz" "def" RESULT A NIL :TEST EQ EQL NEQUAL (A :TEST EQ D :TEST-NOT NEQUAL :TEST EQL :TEST-NOT NEQUALP)))
(DEFINE-METHOD-COMBINATION MC69 (OPT1 &OPTIONAL (OPT2 "def")) ((ALL *)) (:ARGUMENTS &WHOLE WHOLE) `(LIST ',OPT1 ',OPT2 'RESULT ,WHOLE (CALL-METHOD ,(FIRST ALL))))
EQL-OK: MC69
(PROGN (DEFGENERIC TEST-MC69-1 NIL (:METHOD-COMBINATION MC69 "xyz") (:METHOD NIL 'NIL)) (TEST-MC69-1))
EQUAL-OK: ("xyz" "def" RESULT NIL NIL)
(PROGN (DEFGENERIC TEST-MC69-2 (X) (:METHOD-COMBINATION MC69 "xyz") (:METHOD (X) (LIST X))) (TEST-MC69-2 'A))
EQUAL-OK: ("xyz" "def" RESULT (A) (A))
(PROGN (DEFGENERIC TEST-MC69-3 (X Y) (:METHOD-COMBINATION MC69 "xyz") (:METHOD (X Y) (LIST X Y))) (TEST-MC69-3 'A 'B))
EQUAL-OK: ("xyz" "def" RESULT (A B) (A B))
(PROGN (DEFGENERIC TEST-MC69-4 (X Y Z) (:METHOD-COMBINATION MC69 "xyz") (:METHOD (X Y Z) (LIST X Y Z))) (TEST-MC69-4 'A 'B 'C))
EQUAL-OK: ("xyz" "def" RESULT (A B C) (A B C))
(PROGN (DEFGENERIC TEST-MC69-5 (X &OPTIONAL Y) (:METHOD-COMBINATION MC69 "xyz") (:METHOD (X &OPTIONAL Y) (LIST X Y))) (LIST (TEST-MC69-5 'A) (TEST-MC69-5 'A 'B)))
EQUAL-OK: (("xyz" "def" RESULT (A) (A NIL)) ("xyz" "def" RESULT (A B) (A B)))
(PROGN (DEFGENERIC TEST-MC69-6 (X Y &OPTIONAL Z) (:METHOD-COMBINATION MC69 "xyz") (:METHOD (X Y &OPTIONAL Z) (LIST X Y Z))) (LIST (TEST-MC69-6 'A 'B) (TEST-MC69-6 'A 'B 'C)))
EQUAL-OK: (("xyz" "def" RESULT (A B) (A B NIL)) ("xyz" "def" RESULT (A B C) (A B C)))
(PROGN (DEFGENERIC TEST-MC69-7 (X Y Z &OPTIONAL U) (:METHOD-COMBINATION MC69 "xyz") (:METHOD (X Y Z &OPTIONAL U) (LIST X Y Z U))) (LIST (TEST-MC69-7 'A 'B 'C) (TEST-MC69-7 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT (A B C) (A B C NIL)) ("xyz" "def" RESULT (A B C D) (A B C D)))
(PROGN (DEFGENERIC TEST-MC69-8 (X &OPTIONAL Y Z) (:METHOD-COMBINATION MC69 "xyz") (:METHOD (X &OPTIONAL Y Z) (LIST X Y Z))) (LIST (TEST-MC69-8 'A) (TEST-MC69-8 'A 'B) (TEST-MC69-8 'A 'B 'C)))
EQUAL-OK: (("xyz" "def" RESULT (A) (A NIL NIL)) ("xyz" "def" RESULT (A B) (A B NIL)) ("xyz" "def" RESULT (A B C) (A B C)))
(PROGN (DEFGENERIC TEST-MC69-9 (X Y &OPTIONAL Z U) (:METHOD-COMBINATION MC69 "xyz") (:METHOD (X Y &OPTIONAL Z U) (LIST X Y Z U))) (LIST (TEST-MC69-9 'A 'B) (TEST-MC69-9 'A 'B 'C) (TEST-MC69-9 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT (A B) (A B NIL NIL)) ("xyz" "def" RESULT (A B C) (A B C NIL)) ("xyz" "def" RESULT (A B C D) (A B C D)))
(PROGN (DEFGENERIC TEST-MC69-10 (X Y Z &OPTIONAL U V) (:METHOD-COMBINATION MC69 "xyz") (:METHOD (X Y Z &OPTIONAL U V) (LIST X Y Z U V))) (LIST (TEST-MC69-10 'A 'B 'C) (TEST-MC69-10 'A 'B 'C 'D) (TEST-MC69-10 'A 'B 'C 'D 'E)))
EQUAL-OK: (("xyz" "def" RESULT (A B C) (A B C NIL NIL)) ("xyz" "def" RESULT (A B C D) (A B C D NIL)) ("xyz" "def" RESULT (A B C D E) (A B C D E)))
(PROGN (DEFGENERIC TEST-MC69-11 (X &OPTIONAL Y Z U) (:METHOD-COMBINATION MC69 "xyz") (:METHOD (X &OPTIONAL Y Z U) (LIST X Y Z U))) (LIST (TEST-MC69-11 'A) (TEST-MC69-11 'A 'B) (TEST-MC69-11 'A 'B 'C) (TEST-MC69-11 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT (A) (A NIL NIL NIL)) ("xyz" "def" RESULT (A B) (A B NIL NIL)) ("xyz" "def" RESULT (A B C) (A B C NIL)) ("xyz" "def" RESULT (A B C D) (A B C D)))
(PROGN (DEFGENERIC TEST-MC69-12 (X Y &OPTIONAL Z U V) (:METHOD-COMBINATION MC69 "xyz") (:METHOD (X Y &OPTIONAL Z U V) (LIST X Y Z U V))) (LIST (TEST-MC69-12 'A 'B) (TEST-MC69-12 'A 'B 'C) (TEST-MC69-12 'A 'B 'C 'D) (TEST-MC69-12 'A 'B 'C 'D 'E)))
EQUAL-OK: (("xyz" "def" RESULT (A B) (A B NIL NIL NIL)) ("xyz" "def" RESULT (A B C) (A B C NIL NIL)) ("xyz" "def" RESULT (A B C D) (A B C D NIL)) ("xyz" "def" RESULT (A B C D E) (A B C D E)))
(PROGN (DEFGENERIC TEST-MC69-13 (X Y Z &OPTIONAL U V W) (:METHOD-COMBINATION MC69 "xyz") (:METHOD (X Y Z &OPTIONAL U V W) (LIST X Y Z U V W))) (LIST (TEST-MC69-13 'A 'B 'C) (TEST-MC69-13 'A 'B 'C 'D) (TEST-MC69-13 'A 'B 'C 'D 'E) (TEST-MC69-13 'A 'B 'C 'D 'E 'F)))
EQUAL-OK: (("xyz" "def" RESULT (A B C) (A B C NIL NIL NIL)) ("xyz" "def" RESULT (A B C D) (A B C D NIL NIL)) ("xyz" "def" RESULT (A B C D E) (A B C D E NIL)) ("xyz" "def" RESULT (A B C D E F) (A B C D E F)))
(PROGN (DEFGENERIC TEST-MC69-14 (X &REST Y) (:METHOD-COMBINATION MC69 "xyz") (:METHOD (X &REST Y) (LIST* X Y))) (LIST (TEST-MC69-14 'A) (TEST-MC69-14 'A 'B) (TEST-MC69-14 'A 'B 'C)))
EQUAL-OK: (("xyz" "def" RESULT (A) (A)) ("xyz" "def" RESULT (A B) (A B)) ("xyz" "def" RESULT (A B C) (A B C)))
(PROGN (DEFGENERIC TEST-MC69-15 (X Y &REST Z) (:METHOD-COMBINATION MC69 "xyz") (:METHOD (X Y &REST Z) (LIST* X Y Z))) (LIST (TEST-MC69-15 'A 'B) (TEST-MC69-15 'A 'B 'C) (TEST-MC69-15 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT (A B) (A B)) ("xyz" "def" RESULT (A B C) (A B C)) ("xyz" "def" RESULT (A B C D) (A B C D)))
(PROGN (DEFGENERIC TEST-MC69-16 (X Y Z &REST U) (:METHOD-COMBINATION MC69 "xyz") (:METHOD (X Y Z &REST U) (LIST* X Y Z U))) (LIST (TEST-MC69-16 'A 'B 'C) (TEST-MC69-16 'A 'B 'C 'D) (TEST-MC69-16 'A 'B 'C 'D 'E)))
EQUAL-OK: (("xyz" "def" RESULT (A B C) (A B C)) ("xyz" "def" RESULT (A B C D) (A B C D)) ("xyz" "def" RESULT (A B C D E) (A B C D E)))
(PROGN (DEFGENERIC TEST-MC69-17 (X &OPTIONAL Y &REST Z) (:METHOD-COMBINATION MC69 "xyz") (:METHOD (X &OPTIONAL Y &REST Z) (LIST* X Y Z))) (LIST (TEST-MC69-17 'A) (TEST-MC69-17 'A 'B) (TEST-MC69-17 'A 'B 'C) (TEST-MC69-17 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT (A) (A NIL)) ("xyz" "def" RESULT (A B) (A B)) ("xyz" "def" RESULT (A B C) (A B C)) ("xyz" "def" RESULT (A B C D) (A B C D)))
(PROGN (DEFGENERIC TEST-MC69-18 (X &OPTIONAL Y Z &REST U) (:METHOD-COMBINATION MC69 "xyz") (:METHOD (X &OPTIONAL Y Z &REST U) (LIST* X Y Z U))) (LIST (TEST-MC69-18 'A) (TEST-MC69-18 'A 'B) (TEST-MC69-18 'A 'B 'C) (TEST-MC69-18 'A 'B 'C 'D) (TEST-MC69-18 'A 'B 'C 'D 'E)))
EQUAL-OK: (("xyz" "def" RESULT (A) (A NIL NIL)) ("xyz" "def" RESULT (A B) (A B NIL)) ("xyz" "def" RESULT (A B C) (A B C)) ("xyz" "def" RESULT (A B C D) (A B C D)) ("xyz" "def" RESULT (A B C D E) (A B C D E)))
(PROGN (DEFGENERIC TEST-MC69-19 (X &OPTIONAL Y Z U &REST V) (:METHOD-COMBINATION MC69 "xyz") (:METHOD (X &OPTIONAL Y Z U &REST V) (LIST* X Y Z U V))) (LIST (TEST-MC69-19 'A) (TEST-MC69-19 'A 'B) (TEST-MC69-19 'A 'B 'C) (TEST-MC69-19 'A 'B 'C 'D) (TEST-MC69-19 'A 'B 'C 'D 'E) (TEST-MC69-19 'A 'B 'C 'D 'E 'F)))
EQUAL-OK: (("xyz" "def" RESULT (A) (A NIL NIL NIL)) ("xyz" "def" RESULT (A B) (A B NIL NIL)) ("xyz" "def" RESULT (A B C) (A B C NIL)) ("xyz" "def" RESULT (A B C D) (A B C D)) ("xyz" "def" RESULT (A B C D E) (A B C D E)) ("xyz" "def" RESULT (A B C D E F) (A B C D E F)))
(DEFINE-METHOD-COMBINATION MC70 (OPT1 &OPTIONAL (OPT2 "def")) ((ALL *)) (:ARGUMENTS &WHOLE WHOLE A1 A2 &OPTIONAL (O1 'DEF1) (O2 'DEF2) &REST R) `(LIST ',OPT1 ',OPT2 'RESULT ,WHOLE ,A1 ,A2 ,O1 ,O2 ,R (CALL-METHOD ,(FIRST ALL))))
EQL-OK: MC70
(PROGN (DEFGENERIC TEST-MC70-1 NIL (:METHOD-COMBINATION MC70 "xyz") (:METHOD NIL 'NIL)) (TEST-MC70-1))
EQUAL-OK: ("xyz" "def" RESULT NIL NIL NIL DEF1 DEF2 NIL NIL)
(PROGN (DEFGENERIC TEST-MC70-2 (X) (:METHOD-COMBINATION MC70 "xyz") (:METHOD (X) (LIST X))) (TEST-MC70-2 'A))
EQUAL-OK: ("xyz" "def" RESULT (A) A NIL DEF1 DEF2 NIL (A))
(PROGN (DEFGENERIC TEST-MC70-3 (X Y) (:METHOD-COMBINATION MC70 "xyz") (:METHOD (X Y) (LIST X Y))) (TEST-MC70-3 'A 'B))
EQUAL-OK: ("xyz" "def" RESULT (A B) A B DEF1 DEF2 NIL (A B))
(PROGN (DEFGENERIC TEST-MC70-4 (X Y Z) (:METHOD-COMBINATION MC70 "xyz") (:METHOD (X Y Z) (LIST X Y Z))) (TEST-MC70-4 'A 'B 'C))
EQUAL-OK: ("xyz" "def" RESULT (A B C) A B DEF1 DEF2 NIL (A B C))
(PROGN (DEFGENERIC TEST-MC70-5 (X &OPTIONAL Y) (:METHOD-COMBINATION MC70 "xyz") (:METHOD (X &OPTIONAL Y) (LIST X Y))) (LIST (TEST-MC70-5 'A) (TEST-MC70-5 'A 'B)))
EQUAL-OK: (("xyz" "def" RESULT (A) A NIL DEF1 DEF2 NIL (A NIL)) ("xyz" "def" RESULT (A B) A NIL B DEF2 NIL (A B)))
(PROGN (DEFGENERIC TEST-MC70-6 (X Y &OPTIONAL Z) (:METHOD-COMBINATION MC70 "xyz") (:METHOD (X Y &OPTIONAL Z) (LIST X Y Z))) (LIST (TEST-MC70-6 'A 'B) (TEST-MC70-6 'A 'B 'C)))
EQUAL-OK: (("xyz" "def" RESULT (A B) A B DEF1 DEF2 NIL (A B NIL)) ("xyz" "def" RESULT (A B C) A B C DEF2 NIL (A B C)))
(PROGN (DEFGENERIC TEST-MC70-7 (X Y Z &OPTIONAL U) (:METHOD-COMBINATION MC70 "xyz") (:METHOD (X Y Z &OPTIONAL U) (LIST X Y Z U))) (LIST (TEST-MC70-7 'A 'B 'C) (TEST-MC70-7 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT (A B C) A B DEF1 DEF2 NIL (A B C NIL)) ("xyz" "def" RESULT (A B C D) A B D DEF2 NIL (A B C D)))
(PROGN (DEFGENERIC TEST-MC70-8 (X &OPTIONAL Y Z) (:METHOD-COMBINATION MC70 "xyz") (:METHOD (X &OPTIONAL Y Z) (LIST X Y Z))) (LIST (TEST-MC70-8 'A) (TEST-MC70-8 'A 'B) (TEST-MC70-8 'A 'B 'C)))
EQUAL-OK: (("xyz" "def" RESULT (A) A NIL DEF1 DEF2 NIL (A NIL NIL)) ("xyz" "def" RESULT (A B) A NIL B DEF2 NIL (A B NIL)) ("xyz" "def" RESULT (A B C) A NIL B C NIL (A B C)))
(PROGN (DEFGENERIC TEST-MC70-9 (X Y &OPTIONAL Z U) (:METHOD-COMBINATION MC70 "xyz") (:METHOD (X Y &OPTIONAL Z U) (LIST X Y Z U))) (LIST (TEST-MC70-9 'A 'B) (TEST-MC70-9 'A 'B 'C) (TEST-MC70-9 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT (A B) A B DEF1 DEF2 NIL (A B NIL NIL)) ("xyz" "def" RESULT (A B C) A B C DEF2 NIL (A B C NIL)) ("xyz" "def" RESULT (A B C D) A B C D NIL (A B C D)))
(PROGN (DEFGENERIC TEST-MC70-10 (X Y Z &OPTIONAL U V) (:METHOD-COMBINATION MC70 "xyz") (:METHOD (X Y Z &OPTIONAL U V) (LIST X Y Z U V))) (LIST (TEST-MC70-10 'A 'B 'C) (TEST-MC70-10 'A 'B 'C 'D) (TEST-MC70-10 'A 'B 'C 'D 'E)))
EQUAL-OK: (("xyz" "def" RESULT (A B C) A B DEF1 DEF2 NIL (A B C NIL NIL)) ("xyz" "def" RESULT (A B C D) A B D DEF2 NIL (A B C D NIL)) ("xyz" "def" RESULT (A B C D E) A B D E NIL (A B C D E)))
(PROGN (DEFGENERIC TEST-MC70-11 (X &OPTIONAL Y Z U) (:METHOD-COMBINATION MC70 "xyz") (:METHOD (X &OPTIONAL Y Z U) (LIST X Y Z U))) (LIST (TEST-MC70-11 'A) (TEST-MC70-11 'A 'B) (TEST-MC70-11 'A 'B 'C) (TEST-MC70-11 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT (A) A NIL DEF1 DEF2 NIL (A NIL NIL NIL)) ("xyz" "def" RESULT (A B) A NIL B DEF2 NIL (A B NIL NIL)) ("xyz" "def" RESULT (A B C) A NIL B C NIL (A B C NIL)) ("xyz" "def" RESULT (A B C D) A NIL B C NIL (A B C D)))
(PROGN (DEFGENERIC TEST-MC70-12 (X Y &OPTIONAL Z U V) (:METHOD-COMBINATION MC70 "xyz") (:METHOD (X Y &OPTIONAL Z U V) (LIST X Y Z U V))) (LIST (TEST-MC70-12 'A 'B) (TEST-MC70-12 'A 'B 'C) (TEST-MC70-12 'A 'B 'C 'D) (TEST-MC70-12 'A 'B 'C 'D 'E)))
EQUAL-OK: (("xyz" "def" RESULT (A B) A B DEF1 DEF2 NIL (A B NIL NIL NIL)) ("xyz" "def" RESULT (A B C) A B C DEF2 NIL (A B C NIL NIL)) ("xyz" "def" RESULT (A B C D) A B C D NIL (A B C D NIL)) ("xyz" "def" RESULT (A B C D E) A B C D NIL (A B C D E)))
(PROGN (DEFGENERIC TEST-MC70-13 (X Y Z &OPTIONAL U V W) (:METHOD-COMBINATION MC70 "xyz") (:METHOD (X Y Z &OPTIONAL U V W) (LIST X Y Z U V W))) (LIST (TEST-MC70-13 'A 'B 'C) (TEST-MC70-13 'A 'B 'C 'D) (TEST-MC70-13 'A 'B 'C 'D 'E) (TEST-MC70-13 'A 'B 'C 'D 'E 'F)))
EQUAL-OK: (("xyz" "def" RESULT (A B C) A B DEF1 DEF2 NIL (A B C NIL NIL NIL)) ("xyz" "def" RESULT (A B C D) A B D DEF2 NIL (A B C D NIL NIL)) ("xyz" "def" RESULT (A B C D E) A B D E NIL (A B C D E NIL)) ("xyz" "def" RESULT (A B C D E F) A B D E NIL (A B C D E F)))
(PROGN (DEFGENERIC TEST-MC70-14 (X &REST Y) (:METHOD-COMBINATION MC70 "xyz") (:METHOD (X &REST Y) (LIST* X Y))) (LIST (TEST-MC70-14 'A) (TEST-MC70-14 'A 'B) (TEST-MC70-14 'A 'B 'C)))
EQUAL-OK: (("xyz" "def" RESULT (A) A NIL DEF1 DEF2 NIL (A)) ("xyz" "def" RESULT (A B) A NIL DEF1 DEF2 (B) (A B)) ("xyz" "def" RESULT (A B C) A NIL DEF1 DEF2 (B C) (A B C)))
(PROGN (DEFGENERIC TEST-MC70-15 (X Y &REST Z) (:METHOD-COMBINATION MC70 "xyz") (:METHOD (X Y &REST Z) (LIST* X Y Z))) (LIST (TEST-MC70-15 'A 'B) (TEST-MC70-15 'A 'B 'C) (TEST-MC70-15 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT (A B) A B DEF1 DEF2 NIL (A B)) ("xyz" "def" RESULT (A B C) A B DEF1 DEF2 (C) (A B C)) ("xyz" "def" RESULT (A B C D) A B DEF1 DEF2 (C D) (A B C D)))
(PROGN (DEFGENERIC TEST-MC70-16 (X Y Z &REST U) (:METHOD-COMBINATION MC70 "xyz") (:METHOD (X Y Z &REST U) (LIST* X Y Z U))) (LIST (TEST-MC70-16 'A 'B 'C) (TEST-MC70-16 'A 'B 'C 'D) (TEST-MC70-16 'A 'B 'C 'D 'E)))
EQUAL-OK: (("xyz" "def" RESULT (A B C) A B DEF1 DEF2 NIL (A B C)) ("xyz" "def" RESULT (A B C D) A B DEF1 DEF2 (D) (A B C D)) ("xyz" "def" RESULT (A B C D E) A B DEF1 DEF2 (D E) (A B C D E)))
(PROGN (DEFGENERIC TEST-MC70-17 (X &OPTIONAL Y &REST Z) (:METHOD-COMBINATION MC70 "xyz") (:METHOD (X &OPTIONAL Y &REST Z) (LIST* X Y Z))) (LIST (TEST-MC70-17 'A) (TEST-MC70-17 'A 'B) (TEST-MC70-17 'A 'B 'C) (TEST-MC70-17 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT (A) A NIL DEF1 DEF2 NIL (A NIL)) ("xyz" "def" RESULT (A B) A NIL B DEF2 NIL (A B)) ("xyz" "def" RESULT (A B C) A NIL B DEF2 (C) (A B C)) ("xyz" "def" RESULT (A B C D) A NIL B DEF2 (C D) (A B C D)))
(PROGN (DEFGENERIC TEST-MC70-18 (X &OPTIONAL Y Z &REST U) (:METHOD-COMBINATION MC70 "xyz") (:METHOD (X &OPTIONAL Y Z &REST U) (LIST* X Y Z U))) (LIST (TEST-MC70-18 'A) (TEST-MC70-18 'A 'B) (TEST-MC70-18 'A 'B 'C) (TEST-MC70-18 'A 'B 'C 'D) (TEST-MC70-18 'A 'B 'C 'D 'E)))
EQUAL-OK: (("xyz" "def" RESULT (A) A NIL DEF1 DEF2 NIL (A NIL NIL)) ("xyz" "def" RESULT (A B) A NIL B DEF2 NIL (A B NIL)) ("xyz" "def" RESULT (A B C) A NIL B C NIL (A B C)) ("xyz" "def" RESULT (A B C D) A NIL B C (D) (A B C D)) ("xyz" "def" RESULT (A B C D E) A NIL B C (D E) (A B C D E)))
(PROGN (DEFGENERIC TEST-MC70-19 (X &OPTIONAL Y Z U &REST V) (:METHOD-COMBINATION MC70 "xyz") (:METHOD (X &OPTIONAL Y Z U &REST V) (LIST* X Y Z U V))) (LIST (TEST-MC70-19 'A) (TEST-MC70-19 'A 'B) (TEST-MC70-19 'A 'B 'C) (TEST-MC70-19 'A 'B 'C 'D) (TEST-MC70-19 'A 'B 'C 'D 'E) (TEST-MC70-19 'A 'B 'C 'D 'E 'F)))
EQUAL-OK: (("xyz" "def" RESULT (A) A NIL DEF1 DEF2 NIL (A NIL NIL NIL)) ("xyz" "def" RESULT (A B) A NIL B DEF2 NIL (A B NIL NIL)) ("xyz" "def" RESULT (A B C) A NIL B C NIL (A B C NIL)) ("xyz" "def" RESULT (A B C D) A NIL B C NIL (A B C D)) ("xyz" "def" RESULT (A B C D E) A NIL B C (E) (A B C D E)) ("xyz" "def" RESULT (A B C D E F) A NIL B C (E F) (A B C D E F)))
(DEFINE-METHOD-COMBINATION MC71 (OPT1 &OPTIONAL (OPT2 "def")) ((ALL *)) (:ARGUMENTS &OPTIONAL (O1 'DEF1 OS1) (O2 'DEF2 OS2)) `(LIST ',OPT1 ',OPT2 'RESULT ,O1 ,O2 ,OS1 ,OS2 (CALL-METHOD ,(FIRST ALL))))
EQL-OK: MC71
(PROGN (DEFGENERIC TEST-MC71-1 (X) (:METHOD-COMBINATION MC71 "xyz") (:METHOD (X) (LIST X))) (TEST-MC71-1 'A))
EQUAL-OK: ("xyz" "def" RESULT DEF1 DEF2 NIL NIL (A))
(PROGN (DEFGENERIC TEST-MC71-2 (X &OPTIONAL Y) (:METHOD-COMBINATION MC71 "xyz") (:METHOD (X &OPTIONAL Y) (LIST X Y))) (LIST (TEST-MC71-2 'A) (TEST-MC71-2 'A 'B)))
EQUAL-OK: (("xyz" "def" RESULT DEF1 DEF2 NIL NIL (A NIL)) ("xyz" "def" RESULT B DEF2 T NIL (A B)))
(PROGN (DEFGENERIC TEST-MC71-3 (X &OPTIONAL Y Z) (:METHOD-COMBINATION MC71 "xyz") (:METHOD (X &OPTIONAL Y Z) (LIST X Y Z))) (LIST (TEST-MC71-3 'A) (TEST-MC71-3 'A 'B) (TEST-MC71-3 'A 'B 'C)))
EQUAL-OK: (("xyz" "def" RESULT DEF1 DEF2 NIL NIL (A NIL NIL)) ("xyz" "def" RESULT B DEF2 T NIL (A B NIL)) ("xyz" "def" RESULT B C T T (A B C)))
(PROGN (DEFGENERIC TEST-MC71-4 (X &OPTIONAL Y Z U) (:METHOD-COMBINATION MC71 "xyz") (:METHOD (X &OPTIONAL Y Z U) (LIST X Y Z U))) (LIST (TEST-MC71-4 'A) (TEST-MC71-4 'A 'B) (TEST-MC71-4 'A 'B 'C) (TEST-MC71-4 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT DEF1 DEF2 NIL NIL (A NIL NIL NIL)) ("xyz" "def" RESULT B DEF2 T NIL (A B NIL NIL)) ("xyz" "def" RESULT B C T T (A B C NIL)) ("xyz" "def" RESULT B C T T (A B C D)))
(PROGN (DEFGENERIC TEST-MC71-5 (X &REST Y) (:METHOD-COMBINATION MC71 "xyz") (:METHOD (X &REST Y) (LIST* X Y))) (LIST (TEST-MC71-5 'A) (TEST-MC71-5 'A 'B) (TEST-MC71-5 'A 'B 'C)))
EQUAL-OK: (("xyz" "def" RESULT DEF1 DEF2 NIL NIL (A)) ("xyz" "def" RESULT DEF1 DEF2 NIL NIL (A B)) ("xyz" "def" RESULT DEF1 DEF2 NIL NIL (A B C)))
(PROGN (DEFGENERIC TEST-MC71-6 (X &OPTIONAL Y &REST Z) (:METHOD-COMBINATION MC71 "xyz") (:METHOD (X &OPTIONAL Y &REST Z) (LIST* X Y Z))) (LIST (TEST-MC71-6 'A) (TEST-MC71-6 'A 'B) (TEST-MC71-6 'A 'B 'C)))
EQUAL-OK: (("xyz" "def" RESULT DEF1 DEF2 NIL NIL (A NIL)) ("xyz" "def" RESULT B DEF2 T NIL (A B)) ("xyz" "def" RESULT B DEF2 T NIL (A B C)))
(PROGN (DEFGENERIC TEST-MC71-7 (X &OPTIONAL Y Z &REST U) (:METHOD-COMBINATION MC71 "xyz") (:METHOD (X &OPTIONAL Y Z &REST U) (LIST* X Y Z U))) (LIST (TEST-MC71-7 'A) (TEST-MC71-7 'A 'B) (TEST-MC71-7 'A 'B 'C) (TEST-MC71-7 'A 'B 'C 'D)))
EQUAL-OK: (("xyz" "def" RESULT DEF1 DEF2 NIL NIL (A NIL NIL)) ("xyz" "def" RESULT B DEF2 T NIL (A B NIL)) ("xyz" "def" RESULT B C T T (A B C)) ("xyz" "def" RESULT B C T T (A B C D)))
(DEFINE-METHOD-COMBINATION MC72 (OPT1 &OPTIONAL (OPT2 "def")) ((ALL *)) (:ARGUMENTS A1 A2 &OPTIONAL (O1 'DEF1) (O2 'DEF2) &KEY (TEST 'EQ TEST-P) (TEST-NOT 'NEQ TEST-NOT-P)) `(LIST ',OPT1 ',OPT2 'RESULT ,A1 ,A2 ,O1 ,O2 ,TEST ,TEST-NOT ,TEST-P ,TEST-NOT-P (CALL-METHOD ,(FIRST ALL))))
EQL-OK: MC72
(PROGN (DEFGENERIC TEST-MC72-1 (X &OPTIONAL Y) (:METHOD-COMBINATION MC72 "xyz") (:METHOD (X &OPTIONAL Y) (LIST X Y))) (LIST (TEST-MC72-1 'A) (TEST-MC72-1 'A 'B)))
EQUAL-OK: (("xyz" "def" RESULT A NIL DEF1 DEF2 EQ NEQ NIL NIL (A NIL)) ("xyz" "def" RESULT A NIL B DEF2 EQ NEQ NIL NIL (A B)))
(PROGN (DEFGENERIC TEST-MC72-2 (X Y Z &OPTIONAL U V W) (:METHOD-COMBINATION MC72 "xyz") (:METHOD (X Y Z &OPTIONAL U V W) (LIST X Y Z U V W))) (LIST (TEST-MC72-2 'A 'B 'C) (TEST-MC72-2 'A 'B 'C 'D) (TEST-MC72-2 'A 'B 'C 'D 'E) (TEST-MC72-2 'A 'B 'C 'D 'E 'F)))
EQUAL-OK: (("xyz" "def" RESULT A B DEF1 DEF2 EQ NEQ NIL NIL (A B C NIL NIL NIL)) ("xyz" "def" RESULT A B D DEF2 EQ NEQ NIL NIL (A B C D NIL NIL)) ("xyz" "def" RESULT A B D E EQ NEQ NIL NIL (A B C D E NIL)) ("xyz" "def" RESULT A B D E EQ NEQ NIL NIL (A B C D E F)))
(PROGN (DEFGENERIC TEST-MC72-3 (X &REST Y) (:METHOD-COMBINATION MC72 "xyz") (:METHOD (X &REST Y) (LIST* X Y))) (LIST (TEST-MC72-3 'A) (TEST-MC72-3 'A 'B 'C) (TEST-MC72-3 'A :TEST-NOT 'NEQUAL) (TEST-MC72-3 'A :TEST 'EQ :TEST-NOT 'NEQUAL) (TEST-MC72-3 'A :TEST-NOT 'NEQUAL :TEST 'EQL :TEST-NOT 'NEQUALP)))
EQUAL-OK: (("xyz" "def" RESULT A NIL DEF1 DEF2 EQ NEQ NIL NIL (A)) ("xyz" "def" RESULT A NIL DEF1 DEF2 EQ NEQ NIL NIL (A B C)) ("xyz" "def" RESULT A NIL DEF1 DEF2 EQ NEQUAL NIL T (A :TEST-NOT NEQUAL)) ("xyz" "def" RESULT A NIL DEF1 DEF2 EQ NEQUAL T T (A :TEST EQ :TEST-NOT NEQUAL)) ("xyz" "def" RESULT A NIL DEF1 DEF2 EQL NEQUAL T T (A :TEST-NOT NEQUAL :TEST EQL :TEST-NOT NEQUALP)))
(PROGN (DEFGENERIC TEST-MC72-4 (X &REST Y) (:METHOD-COMBINATION MC72 "xyz") (:METHOD (X &REST Y) (LIST* X Y))) (TEST-MC72-4 'A 'B))
[SIMPLE-PROGRAM-ERROR]: #:COMPILED-FORM-796-1-1: keyword arguments in (B) should occur pairwise

EQL-OK: ERROR
(PROGN (DEFGENERIC TEST-MC72-5 (X Y Z &REST U) (:METHOD-COMBINATION MC72 "xyz") (:METHOD (X Y Z &REST U) (LIST* X Y Z U))) (LIST (TEST-MC72-5 'A :TEST 'EQ) (TEST-MC72-5 'A :TEST 'EQ 'D 'E) (TEST-MC72-5 'A :TEST 'EQ :TEST-NOT 'NEQUAL) (TEST-MC72-5 'A :TEST 'EQ :TEST 'EQ :TEST-NOT 'NEQUAL) (TEST-MC72-5 'A :TEST 'EQ :TEST-NOT 'NEQUAL :TEST 'EQL :TEST-NOT 'NEQUALP)))
EQUAL-OK: (("xyz" "def" RESULT A :TEST DEF1 DEF2 EQ NEQ NIL NIL (A :TEST EQ)) ("xyz" "def" RESULT A :TEST DEF1 DEF2 EQ NEQ NIL NIL (A :TEST EQ D E)) ("xyz" "def" RESULT A :TEST DEF1 DEF2 EQ NEQUAL NIL T (A :TEST EQ :TEST-NOT NEQUAL)) ("xyz" "def" RESULT A :TEST DEF1 DEF2 EQ NEQUAL T T (A :TEST EQ :TEST EQ :TEST-NOT NEQUAL)) ("xyz" "def" RESULT A :TEST DEF1 DEF2 EQL NEQUAL T T (A :TEST EQ :TEST-NOT NEQUAL :TEST EQL :TEST-NOT NEQUALP)))
(PROGN (DEFGENERIC TEST-MC72-6 (X &OPTIONAL Y Z U &REST V) (:METHOD-COMBINATION MC72 "xyz") (:METHOD (X &OPTIONAL Y Z U &REST V) (LIST* X Y Z U V))) (LIST (TEST-MC72-6 'A) (TEST-MC72-6 'A 'B 'C) (TEST-MC72-6 'A :TEST 'EQ 'D :TEST-NOT 'NEQUAL) (TEST-MC72-6 'A :TEST 'EQ 'D :TEST 'EQ :TEST-NOT 'NEQUAL) (TEST-MC72-6 'A :TEST 'EQ 'D :TEST-NOT 'NEQUAL :TEST 'EQL :TEST-NOT 'NEQUALP)))
EQUAL-OK: (("xyz" "def" RESULT A NIL DEF1 DEF2 EQ NEQ NIL NIL (A NIL NIL NIL)) ("xyz" "def" RESULT A NIL B C EQ NEQ NIL NIL (A B C NIL)) ("xyz" "def" RESULT A NIL :TEST EQ EQ NEQUAL NIL T (A :TEST EQ D :TEST-NOT NEQUAL)) ("xyz" "def" RESULT A NIL :TEST EQ EQ NEQUAL T T (A :TEST EQ D :TEST EQ :TEST-NOT NEQUAL)) ("xyz" "def" RESULT A NIL :TEST EQ EQL NEQUAL T T (A :TEST EQ D :TEST-NOT NEQUAL :TEST EQL :TEST-NOT NEQUALP)))
(PROGN (DEFUN PROMPT-FOR-NEW-VALUES NIL (FORMAT *DEBUG-IO* "~&New values: ") (LIST (READ *DEBUG-IO*))) (DEFUN ADD-METHOD-RESTARTS (FORM METHOD) (LET ((BLOCK (GENSYM)) (TAG (GENSYM))) `(BLOCK ,BLOCK (TAGBODY ,TAG (RETURN-FROM ,BLOCK (RESTART-CASE ,FORM (METHOD-REDO NIL :REPORT (LAMBDA (STREAM) (FORMAT STREAM "Try calling ~S again." ,METHOD)) (GO ,TAG)) (METHOD-RETURN (L) :REPORT (LAMBDA (STREAM) (FORMAT STREAM "Specify return values for ~S call." ,METHOD)) :INTERACTIVE (LAMBDA NIL (PROMPT-FOR-NEW-VALUES)) (RETURN-FROM ,BLOCK (VALUES-LIST L))))))))) (DEFUN CONVERT-EFFECTIVE-METHOD (EFM) (IF (CONSP EFM) (IF (EQ (CAR EFM) 'CALL-METHOD) (LET ((METHOD-LIST (THIRD EFM))) (IF (OR (TYPEP (FIRST METHOD-LIST) 'METHOD) (REST METHOD-LIST)) (CONVERT-EFFECTIVE-METHOD `(CALL-METHOD ,(SECOND EFM) ((MAKE-METHOD (CALL-METHOD ,(FIRST METHOD-LIST) ,(REST METHOD-LIST)))))) (IF (TYPEP (SECOND EFM) 'METHOD) (ADD-METHOD-RESTARTS (CONS (CONVERT-EFFECTIVE-METHOD (CAR EFM)) (CONVERT-EFFECTIVE-METHOD (CDR EFM))) (SECOND EFM)) (CONS (CONVERT-EFFECTIVE-METHOD (CAR EFM)) (CONVERT-EFFECTIVE-METHOD (CDR EFM)))))) (CONS (CONVERT-EFFECTIVE-METHOD (CAR EFM)) (CONVERT-EFFECTIVE-METHOD (CDR EFM)))) EFM)) (DEFINE-METHOD-COMBINATION STANDARD-WITH-RESTARTS NIL ((AROUND (:AROUND)) (BEFORE (:BEFORE)) (PRIMARY NIL :REQUIRED T) (AFTER (:AFTER))) (FLET ((CALL-METHODS-SEQUENTIALLY (METHODS) (MAPCAR #'(LAMBDA (METHOD) `(CALL-METHOD ,METHOD)) METHODS))) (LET ((FORM (IF (OR BEFORE AFTER (REST PRIMARY)) `(MULTIPLE-VALUE-PROG1 (PROGN ,@(CALL-METHODS-SEQUENTIALLY BEFORE) (CALL-METHOD ,(FIRST PRIMARY) ,(REST PRIMARY))) ,@(CALL-METHODS-SEQUENTIALLY (REVERSE AFTER))) `(CALL-METHOD ,(FIRST PRIMARY))))) (WHEN AROUND (SETQ FORM `(CALL-METHOD ,(FIRST AROUND) (,@(REST AROUND) (MAKE-METHOD ,FORM))))) (CONVERT-EFFECTIVE-METHOD FORM)))) (DEFGENERIC TESTGF16 (X) (:METHOD-COMBINATION STANDARD-WITH-RESTARTS)) (DEFCLASS TESTCLASS16A NIL NIL) (DEFCLASS TESTCLASS16B (TESTCLASS16A) NIL) (DEFCLASS TESTCLASS16C (TESTCLASS16A) NIL) (DEFCLASS TESTCLASS16D (TESTCLASS16B TESTCLASS16C) NIL) (DEFMETHOD TESTGF16 ((X TESTCLASS16A)) (LIST 'A (NOT (NULL (FIND-RESTART 'METHOD-REDO))) (NOT (NULL (FIND-RESTART 'METHOD-RETURN))))) (DEFMETHOD TESTGF16 ((X TESTCLASS16B)) (CONS 'B (CALL-NEXT-METHOD))) (DEFMETHOD TESTGF16 ((X TESTCLASS16C)) (CONS 'C (CALL-NEXT-METHOD))) (DEFMETHOD TESTGF16 ((X TESTCLASS16D)) (CONS 'D (CALL-NEXT-METHOD))) (TESTGF16 (MAKE-INSTANCE 'TESTCLASS16D)))
EQUAL-OK: (D B C A T T)
(PROGN (DEFCLASS USER-METHOD (STANDARD-METHOD) (MYSLOT)) T)
EQL-OK: T
(DEFMACRO DEF-USER-METHOD (NAME &REST REST) (LET* ((LAMBDALIST-POSITION (POSITION-IF #'LISTP REST)) (QUALIFIERS (SUBSEQ REST 0 LAMBDALIST-POSITION)) (LAMBDALIST (ELT REST LAMBDALIST-POSITION)) (BODY (SUBSEQ REST (+ LAMBDALIST-POSITION 1))) (REQUIRED-PART (SUBSEQ LAMBDALIST 0 (OR (POSITION-IF #'(LAMBDA (X) (MEMBER X LAMBDA-LIST-KEYWORDS)) LAMBDALIST) (LENGTH LAMBDALIST)))) (SPECIALIZERS (MAPCAR #'FIND-CLASS (MAPCAR #'(LAMBDA (X) (IF (CONSP X) (SECOND X) 'T)) REQUIRED-PART))) (UNSPECIALIZED-REQUIRED-PART (MAPCAR #'(LAMBDA (X) (IF (CONSP X) (FIRST X) X)) REQUIRED-PART)) (UNSPECIALIZED-LAMBDALIST (APPEND UNSPECIALIZED-REQUIRED-PART (SUBSEQ LAMBDALIST (LENGTH REQUIRED-PART))))) `(PROGN (ADD-METHOD #',NAME (MAKE-INSTANCE 'USER-METHOD :QUALIFIERS ',QUALIFIERS :LAMBDA-LIST ',UNSPECIALIZED-LAMBDALIST :SPECIALIZERS ',SPECIALIZERS :FUNCTION #'(LAMBDA (ARGUMENTS NEXT-METHODS-LIST) (FLET ((NEXT-METHOD-P NIL NEXT-METHODS-LIST) (CALL-NEXT-METHOD (&REST NEW-ARGUMENTS) (UNLESS NEW-ARGUMENTS (SETQ NEW-ARGUMENTS ARGUMENTS)) (IF (NULL NEXT-METHODS-LIST) (ERROR "no next method for arguments ~:S" ARGUMENTS) (FUNCALL (METHOD-FUNCTION (FIRST NEXT-METHODS-LIST)) NEW-ARGUMENTS (REST NEXT-METHODS-LIST))))) (APPLY #'(LAMBDA ,UNSPECIALIZED-LAMBDALIST ,@BODY) ARGUMENTS))))) ',NAME)))
EQL-OK: DEF-USER-METHOD
(PROGN (DEFGENERIC TEST-UM01 (X Y)) (DEF-USER-METHOD TEST-UM01 ((X SYMBOL) (Y SYMBOL)) (LIST X Y (NEXT-METHOD-P))) (TEST-UM01 'A 'B))
EQUAL-OK: (A B NIL)
(PROGN (DEFGENERIC TEST-UM02 (X)) (DEF-USER-METHOD TEST-UM02 ((X INTEGER)) (LIST* 'INTEGER X (NOT (NULL (NEXT-METHOD-P))) (CALL-NEXT-METHOD))) (DEFMETHOD TEST-UM02 ((X RATIONAL)) (LIST* 'RATIONAL X (NOT (NULL (NEXT-METHOD-P))) (CALL-NEXT-METHOD))) (DEFMETHOD TEST-UM02 ((X REAL)) (LIST 'REAL X (NOT (NULL (NEXT-METHOD-P))))) (TEST-UM02 17))
EQUAL-OK: (INTEGER 17 T RATIONAL 17 T REAL 17 NIL)
(PROGN (DEFGENERIC TEST-UM03 (X)) (DEFMETHOD TEST-UM03 ((X INTEGER)) (LIST* 'INTEGER X (NOT (NULL (NEXT-METHOD-P))) (CALL-NEXT-METHOD))) (DEF-USER-METHOD TEST-UM03 ((X RATIONAL)) (LIST* 'RATIONAL X (NOT (NULL (NEXT-METHOD-P))) (CALL-NEXT-METHOD))) (DEFMETHOD TEST-UM03 ((X REAL)) (LIST 'REAL X (NOT (NULL (NEXT-METHOD-P))))) (TEST-UM03 17))
EQUAL-OK: (INTEGER 17 T RATIONAL 17 T REAL 17 NIL)
(PROGN (DEFGENERIC TEST-UM04 (X)) (DEFMETHOD TEST-UM04 ((X INTEGER)) (LIST* 'INTEGER X (NOT (NULL (NEXT-METHOD-P))) (CALL-NEXT-METHOD))) (DEFMETHOD TEST-UM04 ((X RATIONAL)) (LIST* 'RATIONAL X (NOT (NULL (NEXT-METHOD-P))) (CALL-NEXT-METHOD))) (DEF-USER-METHOD TEST-UM04 ((X REAL)) (LIST 'REAL X (NOT (NULL (NEXT-METHOD-P))))) (TEST-UM04 17))
EQUAL-OK: (INTEGER 17 T RATIONAL 17 T REAL 17 NIL)
(LET ((RESULTS NIL)) (DEFGENERIC TEST-UM05 (X)) (DEFMETHOD TEST-UM05 (X) (PUSH 'PRIMARY RESULTS) (PUSH X RESULTS)) (DEF-USER-METHOD TEST-UM05 :BEFORE ((X INTEGER)) (PUSH 'BEFORE-INTEGER RESULTS) (PUSH X RESULTS)) (DEFMETHOD TEST-UM05 :BEFORE ((X REAL)) (PUSH 'BEFORE-REAL RESULTS) (PUSH X RESULTS)) (TEST-UM05 17) (NREVERSE RESULTS))
EQUAL-OK: (BEFORE-INTEGER 17 BEFORE-REAL 17 PRIMARY 17)
(LET ((RESULTS NIL)) (DEFGENERIC TEST-UM06 (X)) (DEFMETHOD TEST-UM06 (X) (PUSH 'PRIMARY RESULTS) (PUSH X RESULTS)) (DEFMETHOD TEST-UM06 :BEFORE ((X INTEGER)) (PUSH 'BEFORE-INTEGER RESULTS) (PUSH X RESULTS)) (DEF-USER-METHOD TEST-UM06 :BEFORE ((X REAL)) (PUSH 'BEFORE-REAL RESULTS) (PUSH X RESULTS)) (TEST-UM06 17) (NREVERSE RESULTS))
EQUAL-OK: (BEFORE-INTEGER 17 BEFORE-REAL 17 PRIMARY 17)
(LET ((RESULTS NIL)) (DEFGENERIC TEST-UM07 (X)) (DEFMETHOD TEST-UM07 (X) (PUSH 'PRIMARY RESULTS) (PUSH X RESULTS)) (DEFMETHOD TEST-UM07 :AFTER ((X INTEGER)) (PUSH 'AFTER-INTEGER RESULTS) (PUSH X RESULTS)) (DEF-USER-METHOD TEST-UM07 :AFTER ((X REAL)) (PUSH 'AFTER-REAL RESULTS) (PUSH X RESULTS)) (TEST-UM07 17) (NREVERSE RESULTS))
EQUAL-OK: (PRIMARY 17 AFTER-REAL 17 AFTER-INTEGER 17)
(LET ((RESULTS NIL)) (DEFGENERIC TEST-UM08 (X)) (DEFMETHOD TEST-UM08 (X) (PUSH 'PRIMARY RESULTS) (PUSH X RESULTS)) (DEF-USER-METHOD TEST-UM08 :AFTER ((X INTEGER)) (PUSH 'AFTER-INTEGER RESULTS) (PUSH X RESULTS)) (DEFMETHOD TEST-UM08 :AFTER ((X REAL)) (PUSH 'AFTER-REAL RESULTS) (PUSH X RESULTS)) (TEST-UM08 17) (NREVERSE RESULTS))
EQUAL-OK: (PRIMARY 17 AFTER-REAL 17 AFTER-INTEGER 17)
(PROGN (DEFGENERIC TEST-UM10 (X)) (DEFMETHOD TEST-UM10 ((X INTEGER)) (LIST* 'INTEGER X (NOT (NULL (NEXT-METHOD-P))) (CALL-NEXT-METHOD))) (DEFMETHOD TEST-UM10 ((X RATIONAL)) (LIST* 'RATIONAL X (NOT (NULL (NEXT-METHOD-P))) (CALL-NEXT-METHOD))) (DEFMETHOD TEST-UM10 ((X REAL)) (LIST 'REAL X (NOT (NULL (NEXT-METHOD-P))))) (DEFMETHOD TEST-UM10 :AFTER ((X REAL))) (DEF-USER-METHOD TEST-UM10 :AROUND ((X INTEGER)) (LIST* 'AROUND-INTEGER X (NOT (NULL (NEXT-METHOD-P))) (CALL-NEXT-METHOD))) (DEFMETHOD TEST-UM10 :AROUND ((X RATIONAL)) (LIST* 'AROUND-RATIONAL X (NOT (NULL (NEXT-METHOD-P))) (CALL-NEXT-METHOD))) (DEFMETHOD TEST-UM10 :AROUND ((X REAL)) (LIST* 'AROUND-REAL X (NOT (NULL (NEXT-METHOD-P))) (CALL-NEXT-METHOD))) (TEST-UM10 17))
EQUAL-OK: (AROUND-INTEGER 17 T AROUND-RATIONAL 17 T AROUND-REAL 17 T INTEGER 17 T RATIONAL 17 T REAL 17 NIL)
(PROGN (DEFGENERIC TEST-UM11 (X)) (DEFMETHOD TEST-UM11 ((X INTEGER)) (LIST* 'INTEGER X (NOT (NULL (NEXT-METHOD-P))) (CALL-NEXT-METHOD))) (DEFMETHOD TEST-UM11 ((X RATIONAL)) (LIST* 'RATIONAL X (NOT (NULL (NEXT-METHOD-P))) (CALL-NEXT-METHOD))) (DEFMETHOD TEST-UM11 ((X REAL)) (LIST 'REAL X (NOT (NULL (NEXT-METHOD-P))))) (DEFMETHOD TEST-UM11 :AFTER ((X REAL))) (DEFMETHOD TEST-UM11 :AROUND ((X INTEGER)) (LIST* 'AROUND-INTEGER X (NOT (NULL (NEXT-METHOD-P))) (CALL-NEXT-METHOD))) (DEF-USER-METHOD TEST-UM11 :AROUND ((X RATIONAL)) (LIST* 'AROUND-RATIONAL X (NOT (NULL (NEXT-METHOD-P))) (CALL-NEXT-METHOD))) (DEFMETHOD TEST-UM11 :AROUND ((X REAL)) (LIST* 'AROUND-REAL X (NOT (NULL (NEXT-METHOD-P))) (CALL-NEXT-METHOD))) (TEST-UM11 17))
EQUAL-OK: (AROUND-INTEGER 17 T AROUND-RATIONAL 17 T AROUND-REAL 17 T INTEGER 17 T RATIONAL 17 T REAL 17 NIL)
(PROGN (DEFGENERIC TEST-UM12 (X)) (DEFMETHOD TEST-UM12 ((X INTEGER)) (LIST* 'INTEGER X (NOT (NULL (NEXT-METHOD-P))) (CALL-NEXT-METHOD))) (DEFMETHOD TEST-UM12 ((X RATIONAL)) (LIST* 'RATIONAL X (NOT (NULL (NEXT-METHOD-P))) (CALL-NEXT-METHOD))) (DEFMETHOD TEST-UM12 ((X REAL)) (LIST 'REAL X (NOT (NULL (NEXT-METHOD-P))))) (DEFMETHOD TEST-UM12 :AFTER ((X REAL))) (DEFMETHOD TEST-UM12 :AROUND ((X INTEGER)) (LIST* 'AROUND-INTEGER X (NOT (NULL (NEXT-METHOD-P))) (CALL-NEXT-METHOD))) (DEFMETHOD TEST-UM12 :AROUND ((X RATIONAL)) (LIST* 'AROUND-RATIONAL X (NOT (NULL (NEXT-METHOD-P))) (CALL-NEXT-METHOD))) (DEF-USER-METHOD TEST-UM12 :AROUND ((X REAL)) (LIST* 'AROUND-REAL X (NOT (NULL (NEXT-METHOD-P))) (CALL-NEXT-METHOD))) (TEST-UM12 17))
EQUAL-OK: (AROUND-INTEGER 17 T AROUND-RATIONAL 17 T AROUND-REAL 17 T INTEGER 17 T RATIONAL 17 T REAL 17 NIL)
(PROGN (DEFGENERIC TEST-UM13 (X)) (DEFMETHOD TEST-UM13 ((X INTEGER)) (LIST* 'INTEGER X (NOT (NULL (NEXT-METHOD-P))) (CALL-NEXT-METHOD))) (DEF-USER-METHOD TEST-UM13 ((X RATIONAL)) (LIST* 'RATIONAL X (NOT (NULL (NEXT-METHOD-P))) (CALL-NEXT-METHOD))) (DEFMETHOD TEST-UM13 ((X REAL)) (LIST 'REAL X (NOT (NULL (NEXT-METHOD-P))))) (DEFMETHOD TEST-UM13 :AFTER ((X REAL))) (DEFMETHOD TEST-UM13 :AROUND ((X INTEGER)) (LIST* 'AROUND-INTEGER X (NOT (NULL (NEXT-METHOD-P))) (CALL-NEXT-METHOD))) (DEF-USER-METHOD TEST-UM13 :AROUND ((X RATIONAL)) (LIST* 'AROUND-RATIONAL X (NOT (NULL (NEXT-METHOD-P))) (CALL-NEXT-METHOD))) (DEFMETHOD TEST-UM13 :AROUND ((X REAL)) (LIST* 'AROUND-REAL X (NOT (NULL (NEXT-METHOD-P))) (CALL-NEXT-METHOD))) (TEST-UM13 17))
EQUAL-OK: (AROUND-INTEGER 17 T AROUND-RATIONAL 17 T AROUND-REAL 17 T INTEGER 17 T RATIONAL 17 T REAL 17 NIL)
(PROGN (DEFCLASS FOO129 NIL ((X :INITARG :X))) (DEFPARAMETER *FOO129-COUNTER* 0) (DEFMETHOD INITIALIZE-INSTANCE ((INSTANCE FOO129) &REST INITARGS &KEY (X 'NIL)) (INCF *FOO129-COUNTER*) (APPLY #'CALL-NEXT-METHOD INSTANCE :X (CONS 'A X) INITARGS)) (MAKE-INSTANCE 'FOO129) *FOO129-COUNTER*)
EQL-OK: 1
(PROGN (DEFCLASS FOO130 NIL ((X :INITARG :X))) (DEFPARAMETER *FOO130-COUNTER* 0) (LOCALLY (DECLARE (COMPILE)) (DEFMETHOD INITIALIZE-INSTANCE ((INSTANCE FOO130) &REST INITARGS &KEY (X 'NIL)) (INCF *FOO130-COUNTER*) (APPLY #'CALL-NEXT-METHOD INSTANCE :X (CONS 'A X) INITARGS))) (MAKE-INSTANCE 'FOO130) *FOO130-COUNTER*)
EQL-OK: 1
(PROGN (SETQ *FORWARD-REFERENCED-CLASS-MISDESIGN* T) (DEFCLASS FOO131 (FORWARDCLASS01) NIL) T)
WARNING: (SETF FIND-CLASS): redefining class CLASS in top-level, was defined
         in
         /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-custom.fas

WARNING: (SETF FIND-CLASS): redefining class FORWARD-REFERENCED-CLASS in
         top-level, was defined in
         /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/clos-custom.fas
EQL-OK: T
(FIND-CLASS 'FORWARDCLASS01)
[SIMPLE-ERROR]: FIND-CLASS: FORWARDCLASS01 does not name a class

EQL-OK: ERROR
(FIND-CLASS 'FORWARDCLASS01 NIL)
EQL-OK: NIL
(TYPEP 1 'FORWARDCLASS01)
[SIMPLE-ERROR]: TYPEP: invalid type specification FORWARDCLASS01
EQL-OK: ERROR
(LOCALLY (DECLARE (COMPILE)) (TYPEP 1 'FORWARDCLASS01))
[SIMPLE-ERROR]: TYPEP: invalid type specification FORWARDCLASS01
EQL-OK: ERROR
(TYPE-EXPAND 'FORWARDCLASS01)
[SIMPLE-ERROR]: TYPE-EXPAND: invalid type specification FORWARDCLASS01
EQL-OK: ERROR
(SUBTYPEP 'FORWARDCLASS01 'T)
[SIMPLE-ERROR]: SUBTYPEP: invalid type specification FORWARDCLASS01
EQL-OK: ERROR
(SUBTYPEP 'NIL 'FORWARDCLASS01)
[SIMPLE-ERROR]: SUBTYPEP: invalid type specification FORWARDCLASS01
EQL-OK: ERROR
(SYSTEM::SUBTYPE-INTEGER 'FORWARDCLASS01)
EQL-OK: NIL
(SYSTEM::SUBTYPE-SEQUENCE 'FORWARDCLASS01)
EQL-OK: NIL
(DEFSTRUCT (FOO131A (:INCLUDE FORWARDCLASS01)))
[SIMPLE-SOURCE-PROGRAM-ERROR]: DEFSTRUCT FOO131A: included structure FORWARDCLASS01 has not been defined.
EQL-OK: ERROR
(DEFMETHOD FOO131B ((X FORWARDCLASS01)))
[SIMPLE-ERROR]: FIND-CLASS: FORWARDCLASS01 does not name a class

EQL-OK: ERROR
(PROGN (SETQ *FORWARD-REFERENCED-CLASS-MISDESIGN* NIL) (DEFCLASS FOO132 (FORWARDCLASS02) NIL) T)
EQL-OK: T
(FIND-CLASS 'FORWARDCLASS02)
[SIMPLE-ERROR]: FIND-CLASS: FORWARDCLASS02 does not name a class

EQL-OK: ERROR
(FIND-CLASS 'FORWARDCLASS02 NIL)
EQL-OK: NIL
(TYPEP 1 'FORWARDCLASS02)
[SIMPLE-ERROR]: TYPEP: invalid type specification FORWARDCLASS02
EQL-OK: ERROR
(LOCALLY (DECLARE (COMPILE)) (TYPEP 1 'FORWARDCLASS02))
[SIMPLE-ERROR]: TYPEP: invalid type specification FORWARDCLASS02
EQL-OK: ERROR
(TYPE-EXPAND 'FORWARDCLASS02)
[SIMPLE-ERROR]: TYPE-EXPAND: invalid type specification FORWARDCLASS02
EQL-OK: ERROR
(SUBTYPEP 'FORWARDCLASS02 'T)
[SIMPLE-ERROR]: SUBTYPEP: invalid type specification FORWARDCLASS02
EQL-OK: ERROR
(SUBTYPEP 'NIL 'FORWARDCLASS02)
[SIMPLE-ERROR]: SUBTYPEP: invalid type specification FORWARDCLASS02
EQL-OK: ERROR
(SYSTEM::SUBTYPE-INTEGER 'FORWARDCLASS02)
EQL-OK: NIL
(SYSTEM::SUBTYPE-SEQUENCE 'FORWARDCLASS02)
EQL-OK: NIL
(DEFSTRUCT (FOO132A (:INCLUDE FORWARDCLASS02)))
[SIMPLE-SOURCE-PROGRAM-ERROR]: DEFSTRUCT FOO132A: included structure FORWARDCLASS02 has not been defined.
EQL-OK: ERROR
(DEFMETHOD FOO132B ((X FORWARDCLASS02)))
[SIMPLE-ERROR]: FIND-CLASS: FORWARDCLASS02 does not name a class

EQL-OK: ERROR
(PROGN (DEFCLASS INCOMPLETE147 (UNDEFINED147) NIL) T)
EQL-OK: T
(FIND-CLASS 'UNDEFINED147)
[SIMPLE-ERROR]: FIND-CLASS: UNDEFINED147 does not name a class

EQL-OK: ERROR
(TYPEP 42 'UNDEFINED147)
[SIMPLE-ERROR]: TYPEP: invalid type specification UNDEFINED147
EQL-OK: ERROR
(SUBTYPEP 'UNDEFINED147 'NUMBER)
[SIMPLE-ERROR]: SUBTYPEP: invalid type specification UNDEFINED147
EQL-OK: ERROR
(SUBTYPEP 'UNDEFINED147 'STANDARD-OBJECT)
[SIMPLE-ERROR]: SUBTYPEP: invalid type specification UNDEFINED147
EQL-OK: ERROR
(NULL (FIND-CLASS 'INCOMPLETE147))
EQL-OK: NIL
(TYPEP 42 'INCOMPLETE147)
EQL-OK: NIL
(MULTIPLE-VALUE-LIST (SUBTYPEP 'INCOMPLETE147 'NUMBER))
EQUAL-OK: (NIL T)
(MULTIPLE-VALUE-LIST (SUBTYPEP 'INCOMPLETE147 'STANDARD-OBJECT))
EQUAL-OK: (NIL T)
(LET ((RET 'NIL)) (DEFCLASS MIXIN-FOO-144 NIL NIL) (DEFCLASS CLASS-FOO-144 (MIXIN-FOO-144) NIL) (DEFGENERIC FUN-144 (X)) (DEFMETHOD FUN-144 ((X CLASS-FOO-144)) (PUSH 'CLASS-FOO-144 RET)) (DEFCLASS CLASS-BAR-144 NIL NIL) (DEFMETHOD FUN-144 :AFTER ((X CLASS-BAR-144)) (PUSH 'CLASS-BAR-144-AFTER RET)) (DEFCLASS MIXIN-FOO-144 (CLASS-BAR-144) NIL) (FUN-144 (MAKE-INSTANCE 'CLASS-FOO-144)) (NREVERSE RET))
EQUAL-OK: (CLASS-FOO-144 CLASS-BAR-144-AFTER)
(LET ((RET NIL)) (DEFCLASS MIXIN-FOO-145 NIL NIL) (DEFCLASS CLASS-FOO-145 (MIXIN-FOO-145) NIL) (DEFGENERIC FUN-145 (X)) (DEFMETHOD FUN-145 ((X CLASS-FOO-145)) (PUSH 'CLASS-FOO-145 RET)) (DEFCLASS CLASS-BAR-145 NIL NIL) (DEFMETHOD FUN-145 :AFTER ((X CLASS-BAR-145)) (PUSH 'CLASS-BAR-145-AFTER RET)) (LET ((INST (MAKE-INSTANCE 'CLASS-FOO-145))) (FUN-145 INST) (SETQ RET 'NIL) (DEFCLASS MIXIN-FOO-145 (CLASS-BAR-145) NIL) (FUN-145 INST) (NREVERSE RET)))
WARNING: DEFCLASS: Class CLASS-FOO-145 (or one of its ancestors) is being
         redefined, instances are obsolete
EQUAL-OK: (CLASS-FOO-145 CLASS-BAR-145-AFTER)
(PROGN (DEFCLASS FOO146 NIL (SLOT1)) (MAKE-INSTANCE 'FOO146) (DEFCLASS FOO146 NIL ((SLOT1 :INITARG :FOO))) (MAKE-INSTANCE 'FOO146 :FOO 'ANY) T)
WARNING: DEFCLASS: Class FOO146 (or one of its ancestors) is being redefined,
         instances are obsolete
EQL-OK: T
(PROGN (DEFCLASS FOO147 NIL (SLOT1)) (DEFCLASS FOOSUB147 (FOO147) (SLOT2)) (MAKE-INSTANCE 'FOOSUB147) (DEFCLASS FOO147 NIL ((SLOT1 :INITARG :FOO))) (MAKE-INSTANCE 'FOOSUB147 :FOO 'ANY) T)
WARNING: DEFCLASS: Class FOOSUB147 (or one of its ancestors) is being
         redefined, instances are obsolete
EQL-OK: T
(PROGN (LOAD (MAKE-PATHNAME :NAME "listeners" :TYPE NIL :DEFAULTS *RUN-TEST-TRUENAME*)) (WITH-OPEN-STREAM (S1 (MAKE-STRING-INPUT-STREAM "(")) (WITH-OPEN-STREAM (S2 (MAKE-STRING-INPUT-STREAM "())")) (WITH-OPEN-STREAM (L (MAKE-INSTANCE 'LISTENER-INPUT-STREAM :STREAM S2)) (WITH-OPEN-STREAM (C (MAKE-CONCATENATED-STREAM S1 L)) (READ C))))))
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/tests/listeners.lisp ...
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION CLOSE> is being
         modified, but has already been called.
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/tests/listeners.lisp
EQUAL-OK: (NIL)
(MAKE-INSTANCE (MAKE-INSTANCE 'STANDARD-CLASS :NAME 3))
[SIMPLE-SOURCE-PROGRAM-ERROR]: (SETF CLASS-NAME): 3 is not a symbol

EQL-OK: ERROR
(DECLAIM (NOTSPECIAL A B C))
EQL-OK: NIL
RUN-TEST: finished "clos" (0 errors out of 495 tests)
RUN-TEST: started #<INPUT BUFFERED FILE-STREAM CHARACTER #P"defhash.tst" @1>
(DEFINE-HASH-TABLE-TEST STRING-EQ STRING= SXHASH)
EQL-OK: STRING-EQ
(LET ((H (MAKE-HASH-TABLE :TEST 'STRING-EQ))) (LIST (SETF (GETHASH "foo" H) 10) (GETHASH "zot" H) (GETHASH "foo" H) (GETHASH "FOO" H)))
EQUAL-OK: (10 NIL 10 NIL)
(LET ((H (MAKE-HASH-TABLE :TEST '(STRING= . SXHASH)))) (LIST (SETF (GETHASH "foo" H) 10) (GETHASH "zot" H) (GETHASH "foo" H) (GETHASH "FOO" H)))
EQUAL-OK: (10 NIL 10 NIL)
(LET ((H (MAKE-HASH-TABLE :TEST `(,(LAMBDA (A B) (PRINT (LIST '= A B)) (= A B)) . ,(LAMBDA (X) (LET ((Z (SXHASH (COERCE X 'DOUBLE-FLOAT)))) (PRINT (LIST X Z)) Z)))))) (LIST (SETF (GETHASH 100 H) "foo") (GETHASH 10 H) (SETF (GETHASH 10 H) "bar") (GETHASH 100 H) (GETHASH 100.0d0 H) (GETHASH 10.0 H)))

(100 1079574528) 
(10 1076101120) 
(10 1076101120) 
(10 1076101120) 
(100 1079574528) 
(100 1079574528) 
(= 100 100) 
(100.0d0 1079574528) 
(= 100 100.0d0) 
(10.0 1076101120) 
(= 10 10.0) 
EQUAL-OK: ("foo" NIL "bar" "foo" "foo" "bar")
(LET ((H (MAKE-HASH-TABLE :TEST `(= . ,(LAMBDA (X) (SXHASH (COERCE X 'SHORT-FLOAT))))))) (LOOP :FOR I :FROM 0 :TO 1000 :DO (SETF (GETHASH I H) (FORMAT NIL "~r" I))) (LOOP :FOR I :FROM 0 :TO 1000 :UNLESS (STRING= (GETHASH (FLOAT I 1.0d0) H) (GETHASH (FLOAT I 1.0s0) H)) :COLLECT I))
EQL-OK: NIL
(LET ((H (MAKE-HASH-TABLE :TEST `(,(LAMBDA (A B) (LIST (LIST '= A B)) (= A B)) . ,(LAMBDA (X) (LET ((Z (SXHASH (COERCE X 'DOUBLE-FLOAT)))) (LIST `((HASH ,X) => ,Z)) Z)))))) (LOOP :FOR I :FROM 0 :TO 1000 :DO (SETF (GETHASH I H) (FORMAT NIL "~r" I))) (LOOP :FOR I :FROM 0 :TO 1000 :UNLESS (STRING= (GETHASH (FLOAT I 1.0d0) H) (GETHASH (FLOAT I 1.0s0) H)) :COLLECT I))
EQL-OK: NIL
RUN-TEST: finished "defhash" (0 errors out of 6 tests)
RUN-TEST: started #<INPUT BUFFERED FILE-STREAM CHARACTER #P"encoding.tst" @1>
(STRING= (CONVERT-STRING-FROM-BYTES '#(0 65 0 13) CHARSET:UCS-2) (MAP 'STRING #'CODE-CHAR '(65 13)))
EQL-OK: T
(CONVERT-STRING-FROM-BYTES '#(0 65 0) (MAKE-ENCODING :CHARSET CHARSET:UCS-2 :INPUT-ERROR-ACTION :ERROR))
[SIMPLE-ERROR]: incomplete byte sequence at end of buffer for CHARSET:UNICODE-16-BIG-ENDIAN

EQL-OK: ERROR
(CONVERT-STRING-FROM-BYTES '#(0 65 0) (MAKE-ENCODING :CHARSET CHARSET:UCS-2 :INPUT-ERROR-ACTION #\Z))
EQUAL-OK: "AZ"
(STRING= (CONVERT-STRING-FROM-BYTES '#(0 0 0 65 0 0 0 13) CHARSET:UCS-4) (MAP 'STRING #'CODE-CHAR '(65 13)))
EQL-OK: T
(CONVERT-STRING-FROM-BYTES '#(0 0 0 65 0 0) (MAKE-ENCODING :CHARSET CHARSET:UCS-4 :INPUT-ERROR-ACTION :ERROR))
[SIMPLE-ERROR]: incomplete byte sequence at end of buffer for CHARSET:UNICODE-32-BIG-ENDIAN

EQL-OK: ERROR
(CONVERT-STRING-FROM-BYTES '#(0 0 0 65 0 0 0) (MAKE-ENCODING :CHARSET CHARSET:UCS-4 :INPUT-ERROR-ACTION #\Z))
EQUAL-OK: "AZ"
(DEFPARAMETER *NO-ICONV-P* (WITH-IGNORED-ERRORS (NOT (MAKE-ENCODING :CHARSET "utf-16"))))
EQL-OK: *NO-ICONV-P*
(IF *NO-ICONV-P* T (STRING= (CONVERT-STRING-FROM-BYTES '#(255 254 65 0 13 0) (MAKE-ENCODING :CHARSET "utf-16")) (MAP 'STRING #'CODE-CHAR '(65 13))))
EQL-OK: T
(CONVERT-STRING-FROM-BYTES '#(255 254 65 0 13) (MAKE-ENCODING :CHARSET "utf-16" :INPUT-ERROR-ACTION :ERROR))
[SIMPLE-OS-ERROR]: UNIX error 84 (EILSEQ): Invalid multibyte or wide character

EQL-OK: ERROR
(IF *NO-ICONV-P* "AZ" (CONVERT-STRING-FROM-BYTES '#(255 254 65 0 13) (MAKE-ENCODING :CHARSET "utf-16" :INPUT-ERROR-ACTION #\Z)))
EQUAL-OK: "AZ"
(IF *NO-ICONV-P* #(65) (CONVERT-STRING-TO-BYTES (MAP 'STRING #'CODE-CHAR '(129 65)) (MAKE-ENCODING :CHARSET "cp1252" :OUTPUT-ERROR-ACTION :IGNORE)))
EQUALP-OK: #(65)
(LET ((Z (COERCE #(97 98 99) '(VECTOR (UNSIGNED-BYTE 8))))) (LIST (CONVERT-STRING-FROM-BYTES Z CHARSET:ASCII :START 0 :END 2) (CONVERT-STRING-FROM-BYTES Z CHARSET:ASCII :START 0 :END 3) (CONVERT-STRING-FROM-BYTES Z CHARSET:ASCII :START 1 :END 3) (CONVERT-STRING-FROM-BYTES Z CHARSET:ASCII :START 1 :END 2)))
EQUAL-OK: ("ab" "abc" "bc" "b")
(LET ((Z "abc")) (LIST (CONVERT-STRING-TO-BYTES Z CHARSET:ASCII :START 0 :END 2) (CONVERT-STRING-TO-BYTES Z CHARSET:ASCII :START 0 :END 3) (CONVERT-STRING-TO-BYTES Z CHARSET:ASCII :START 1 :END 3) (CONVERT-STRING-TO-BYTES Z CHARSET:ASCII :START 1 :END 2)))
EQUALP-OK: (#(97 98) #(97 98 99) #(98 99) #(98))
(LET ((VEC (MAKE-ARRAY 1000 :ADJUSTABLE T :FILL-POINTER 0 :ELEMENT-TYPE '(UNSIGNED-BYTE 8)))) (MAP-INTO VEC 'IDENTITY (CONVERT-STRING-TO-BYTES "Hello" CHARSET:UTF-8)) (CONVERT-STRING-FROM-BYTES VEC CHARSET:UTF-8))
EQUAL-OK: "Hello"
(MAPCAR (LAMBDA (S) (CONVERT-STRING-TO-BYTES (STRING (CODE-CHAR S)) CHARSET:UTF-8)) '(128 2047 2048 65533 1114111))
EQUALP-OK: (#(194 128) #(223 191) #(224 160 128) #(239 191 189) #(244 143 191 191))
(LOOP FOR I BELOW 55296 AS C = (CODE-CHAR I) AS S = (CONVERT-STRING-TO-BYTES (STRING C) CHARSET:UTF-8) AS LP = 1 THEN L AS L = (LENGTH S) ALWAYS (<= 1 LP L 4))
EQL-OK: T
(LOOP FOR I FROM 57344 BELOW CHAR-CODE-LIMIT AS C = (CODE-CHAR I) AS S = (CONVERT-STRING-TO-BYTES (STRING C) CHARSET:UTF-8) AS LP = 3 THEN L AS L = (LENGTH S) ALWAYS (<= 3 LP L 4))
EQL-OK: T
(LIST (SYSTEM::CHARSET-RANGE CHARSET:BASE64 #\+ #\+ 2) (SYSTEM::CHARSET-RANGE CHARSET:BASE64 #\+ #\/ 10) (SYSTEM::CHARSET-RANGE CHARSET:BASE64 #\A #\Z 2) (SYSTEM::CHARSET-RANGE CHARSET:BASE64 (CODE-CHAR 0) (CODE-CHAR 10000) 1000))
EQUAL-OK: ("++" "++//" "AZ" "++/9AZaz")
(LET ((LIST NIL)) (DO-EXTERNAL-SYMBOLS (SYM (FIND-PACKAGE "CHARSET")) (PUSH (LIST SYM (ASH (LENGTH (SYSTEM::GET-CHARSET-RANGE (ENCODING-CHARSET (SYMBOL-VALUE SYM)))) -1)) LIST)) (SETQ LIST (SORT LIST #'< :KEY #'SECOND)) (FORMAT T "~& ~:D encoding~:P:~%~:{~25@A: ~5:D~%~}" (LENGTH LIST) LIST))
 118 encodings:
                    UCS-2:     1
                    UCS-4:     1
                     JAVA:     1
    UNICODE-32-BIG-ENDIAN:     1
 UNICODE-16-LITTLE-ENDIAN:     1
               UNICODE-16:     1
 UNICODE-32-LITTLE-ENDIAN:     1
               UNICODE-32:     1
    UNICODE-16-BIG-ENDIAN:     1
               ISO-8859-1:     1
                    UTF-8:     1
                    UTF-7:     1
                    ASCII:     1
                   UTF-16:     2
                   BASE64:     4
                  TIS-620:     4
                JIS_X0201:     6
               ISO-8859-9:     8
               ISO-8859-5:     8
               ISO-8859-6:     8
               ISO-8859-8:     9
                CP874-IBM:     9
                    CP874:    10
                ARMSCII-8:    10
                  GB18030:    12
              ISO-8859-15:    12
                HP-ROMAN8:    17
                   CP1252:    18
               ISO-8859-7:    18
             WINDOWS-1252:    18
                 MAC-THAI:    18
                 NEXTSTEP:    20
         GEORGIAN-ACADEMY:    21
              GEORGIAN-PS:    21
                   CP1254:    23
                   CP1133:    23
                   CP1253:    23
             WINDOWS-1253:    23
             WINDOWS-1254:    23
                   CP1251:    24
             WINDOWS-1251:    24
               MAC-HEBREW:    25
              ISO-8859-14:    25
                   VISCII:    26
               ISO-8859-3:    29
              MAC-DINGBAT:    30
             MAC-CYRILLIC:    31
              MAC-UKRAINE:    31
                    CP850:    31
                   KOI8-R:    32
                   CP1255:    34
                    CP737:    34
              ISO-8859-16:    34
             WINDOWS-1255:    34
                    CP866:    34
                    CP857:    35
              MAC-ICELAND:    35
              ISO-8859-10:    36
               MAC-ARABIC:    37
                    CP855:    38
                MAC-GREEK:    39
                CP869-IBM:    40
               ISO-8859-4:    40
              ISO-8859-13:    40
                MAC-ROMAN:    41
                MACINTOSH:    41
              MAC-TURKISH:    41
                    CP869:    42
                   KOI8-U:    43
                   CP1256:    44
             WINDOWS-1256:    44
               ISO-8859-2:    45
             MAC-CROATIAN:    45
              MAC-ROMANIA:    46
                   CP1257:    47
             WINDOWS-1257:    47
                     TCVN:    52
                   CP1250:    55
             WINDOWS-1250:    55
                CP860-IBM:    57
                CP862-IBM:    57
                    CP862:    57
                    CP860:    57
       MAC-CENTRAL-EUROPE:    59
                CP437-IBM:    59
                    CP437:    59
                    CP865:    60
                CP865-IBM:    60
                    CP863:    60
                   CP1258:    61
             WINDOWS-1258:    61
                CP863-IBM:    62
               MAC-SYMBOL:    64
                CP861-IBM:    64
                    CP861:    64
                    CP775:    69
                    CP852:    73
                CP852-IBM:    74
                    CP864:    82
                CP864-IBM:    82
                      GBK:   140
                    CP936:   140
                    CP949: 3,389
                    JOHAB: 3,391
                   EUC-CN: 3,632
                    CP950: 3,806
                     BIG5: 3,806
              ISO-2022-CN: 3,906
              ISO-2022-JP: 4,125
                SHIFT-JIS: 4,127
                    CP932: 4,253
                   EUC-JP: 4,315
               BIG5-HKSCS: 4,978
              ISO-2022-KR: 5,001
                   EUC-KR: 5,002
            ISO-2022-JP-2: 5,848
          ISO-2022-CN-EXT: 6,450
                   EUC-TW: 6,690
EQL-OK: NIL
(CONVERT-STRING-FROM-BYTES #(97) CHARSET:BASE64)
EQUAL-OK: "YQ=="
(CONVERT-STRING-TO-BYTES "YQ==" CHARSET:BASE64)
EQUALP-OK: #(97)
(CONVERT-STRING-FROM-BYTES #(97 98) CHARSET:BASE64)
EQUAL-OK: "YWI="
(CONVERT-STRING-TO-BYTES "YWI=" CHARSET:BASE64)
EQUALP-OK: #(97 98)
(CONVERT-STRING-FROM-BYTES #(97 98 99) CHARSET:BASE64)
EQUAL-OK: "YWJj"
(CONVERT-STRING-TO-BYTES "YWJj" CHARSET:BASE64)
EQUALP-OK: #(97 98 99)
(CONVERT-STRING-FROM-BYTES #(108 105 115 112 32 115 116 114 105 110 103) CHARSET:BASE64)
EQUAL-OK: "bGlzcCBzdHJpbmc="
(CONVERT-STRING-TO-BYTES "bGlzcCBzdHJpbmc=" CHARSET:BASE64)
EQUALP-OK: #(108 105 115 112 32 115 116 114 105 110 103)
(CONVERT-STRING-FROM-BYTES #(108 105 115 112 32 115 116 114 105 110 103 115) CHARSET:BASE64)
EQUAL-OK: "bGlzcCBzdHJpbmdz"
(CONVERT-STRING-TO-BYTES "bGlzcCBzdHJpbmdz" CHARSET:BASE64)
EQUALP-OK: #(108 105 115 112 32 115 116 114 105 110 103 115)
(CONVERT-STRING-FROM-BYTES #(99 108 105 115 112 32 115 116 114 105 110 103 115) CHARSET:BASE64)
EQUAL-OK: "Y2xpc3Agc3RyaW5ncw=="
(CONVERT-STRING-TO-BYTES "Y2xpc3Agc3RyaW5ncw==" CHARSET:BASE64)
EQUALP-OK: #(99 108 105 115 112 32 115 116 114 105 110 103 115)
(LOOP :WITH S :AND V2 :REPEAT 1000 :FOR V1 = (MAKE-ARRAY (RANDOM 300)) :DO (LOOP :FOR I :FROM 0 :BELOW (LENGTH V1) :DO (SETF (AREF V1 I) (RANDOM 256))) (SETQ S (CONVERT-STRING-FROM-BYTES V1 CHARSET:BASE64) V2 (CONVERT-STRING-TO-BYTES S CHARSET:BASE64)) :UNLESS (EQUALP V1 V2) :COLLECT (LIST V1 S V2))
EQL-OK: NIL
(LOOP :FOR I :FROM 0 :TO CHAR-CODE-LIMIT :FOR C = (CODE-CHAR I) :ALWAYS (OR (NOT (TYPEP C CHARSET:ISO-8859-1)) (EQUALP (CONVERT-STRING-TO-BYTES (STRING C) CHARSET:ISO-8859-1) (VECTOR I))))
EQL-OK: T
(LET ((FILE "foo")) (UNWIND-PROTECT (PROGN (WITH-OPEN-FILE (OUT FILE :DIRECTION :OUTPUT :ELEMENT-TYPE '(UNSIGNED-BYTE 8)) (WRITE-SEQUENCE (CONVERT-STRING-TO-BYTES (CONCATENATE 'STRING "foo" (STRING #\Newline) "bar" (STRING #\Return) (STRING #\Newline)) CHARSET:ASCII) OUT)) (WITH-OPEN-FILE (IN FILE :DIRECTION :INPUT :ELEMENT-TYPE 'CHARACTER :EXTERNAL-FORMAT :DOS) (LIST (READ-LINE IN NIL :EOF) (READ-LINE IN NIL :EOF) (READ-LINE IN NIL :EOF)))) (DELETE-FILE FILE)))
EQUAL-OK: ("foo" "bar" :EOF)
(LET* ((F "crlf-test-file") (L1 "line1") (L2 "line2") (ALL (LIST F L1 L2))) (UNWIND-PROTECT (LOOP :FOR S :BEING :EACH :EXTERNAL-SYMBOL :IN "CHARSET" :FOR E-DOS = (MAKE-ENCODING :CHARSET S :LINE-TERMINATOR :DOS) :FOR E-UNIX = (MAKE-ENCODING :CHARSET S :LINE-TERMINATOR :UNIX) :FOR E-MAC = (MAKE-ENCODING :CHARSET S :LINE-TERMINATOR :MAC) :WHEN (IGNORE-ERRORS (WITH-OPEN-FILE (O F :DIRECTION :OUTPUT :EXTERNAL-FORMAT E-DOS) (WRITE-LINE F O) (SETF (STREAM-EXTERNAL-FORMAT O) E-MAC) (WRITE-LINE L1 O) (SETF (STREAM-EXTERNAL-FORMAT O) E-UNIX) (WRITE-LINE L2 O))) :NCONC (LOOP :FOR B :IN '(NIL T) :NCONC (WITH-OPEN-FILE (I F :DIRECTION :INPUT :EXTERNAL-FORMAT E-DOS :BUFFERED B) (DOLIST (LL ALL) (HANDLER-CASE (LET ((L (READ-LINE I))) (IF (STRING= LL L) NIL (LIST (LIST S B 'READ-LINE LL L)))) (ERROR (C) (LIST (LIST S B 'READ-LINE LL (PRINC-TO-STRING C)))))) (HANDLER-CASE (LET ((C (READ-CHAR I NIL NIL))) (AND C (LIST (LIST S B 'READ-CHAR C)))) (ERROR (C) (LIST (LIST S B 'READ-CHAR (PRINC-TO-STRING C)))))))) (DELETE-FILE F)))
EQL-OK: NIL
(CONVERT-STRING-FROM-BYTES #(195) CHARSET:UTF-8)
[SIMPLE-ERROR]: incomplete byte sequence at end of buffer for CHARSET:UTF-8

EQL-OK: ERROR
RUN-TEST: finished "encoding" (0 errors out of 36 tests)
RUN-TEST: started #<INPUT BUFFERED FILE-STREAM CHARACTER #P"eval20.tst" @1>
(EVAL (LIST 'CDR (CAR '('(A . B) C))))
EQL-OK: B
(MAKUNBOUND 'X)
EQL-OK: X
(EVAL 'X)
[SIMPLE-UNBOUND-VARIABLE]: EVAL: variable X has no value

EQL-OK: ERROR
(SETF X 3)
EQL-OK: 3
(EVAL 'X)
EQL-OK: 3
(LET ((FF "eval-when-test.lisp")) (WITH-OPEN-FILE (FOO FF :DIRECTION :OUTPUT) (FORMAT FOO "~%(eval-when (compile eval)
  ;; note that LAMBDA is not externalizable
  (defvar *junk* #.(lambda (x) (+ 15 x))))~%")) (UNWIND-PROTECT (COMPILE-FILE FF) (POST-COMPILE-FILE-CLEANUP FF)) NIL)
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/eval-when-test.lisp ...

;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/eval-when-test.fas
0 errors, 0 warnings
EQL-OK: NIL
(DEFVAR *COLLECTOR*)
EQL-OK: *COLLECTOR*
(LET ((FORMS NIL) ALL (FF "eval-when-test.lisp")) (DOLIST (C '(NIL (:COMPILE-TOPLEVEL))) (DOLIST (L '(NIL (:LOAD-TOPLEVEL))) (DOLIST (X '(NIL (:EXECUTE))) (PUSH `(EVAL-WHEN (,@C ,@L ,@X) (PUSH '(,@C ,@L ,@X) *COLLECTOR*)) FORMS)))) (DOLIST (C '(NIL (:COMPILE-TOPLEVEL))) (DOLIST (L '(NIL (:LOAD-TOPLEVEL))) (DOLIST (X '(NIL (:EXECUTE))) (PUSH `(LET NIL (EVAL-WHEN (,@C ,@L ,@X) (PUSH '(LET ,@C ,@L ,@X) *COLLECTOR*))) FORMS)))) (WITH-OPEN-FILE (O FF :DIRECTION :OUTPUT) (DOLIST (F FORMS) (PRIN1 F O) (TERPRI O))) (LET ((*COLLECTOR* NIL)) (LOAD FF) (PUSH (CONS "load source" *COLLECTOR*) ALL)) (LET ((*COLLECTOR* NIL)) (COMPILE-FILE FF) (PUSH (CONS "compile source" *COLLECTOR*) ALL)) (LET ((*COLLECTOR* NIL)) (LOAD (COMPILE-FILE-PATHNAME FF)) (PUSH (CONS "load compiled" *COLLECTOR*) ALL)) (POST-COMPILE-FILE-CLEANUP FF) (NREVERSE ALL))
;; Loading file eval-when-test.lisp ...

;; Loaded file eval-when-test.lisp

;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/eval-when-test.lisp ...

;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/eval-when-test.fas
0 errors, 0 warnings
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/eval-when-test.fas ...

;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/eval-when-test.fas
EQUAL-OK: (("load source" (:EXECUTE) (:LOAD-TOPLEVEL :EXECUTE) (:COMPILE-TOPLEVEL :EXECUTE) (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE) (LET :EXECUTE) (LET :LOAD-TOPLEVEL :EXECUTE) (LET :COMPILE-TOPLEVEL :EXECUTE) (LET :COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)) ("compile source" (:COMPILE-TOPLEVEL) (:COMPILE-TOPLEVEL :EXECUTE) (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL) (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)) ("load compiled" (:LOAD-TOPLEVEL) (:LOAD-TOPLEVEL :EXECUTE) (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL) (:COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE) (LET :EXECUTE) (LET :LOAD-TOPLEVEL :EXECUTE) (LET :COMPILE-TOPLEVEL :EXECUTE) (LET :COMPILE-TOPLEVEL :LOAD-TOPLEVEL :EXECUTE)))
(CONSTANTP 2)
EQL-OK: T
(CONSTANTP #\r)
EQL-OK: T
(CONSTANTP "max")
EQL-OK: T
(CONSTANTP '#(110))
EQL-OK: T
(CONSTANTP :MAX)
EQL-OK: T
(CONSTANTP T)
EQL-OK: T
(CONSTANTP NIL)
EQL-OK: T
(CONSTANTP 'PI)
EQL-OK: NIL
(CONSTANTP ''FOO)
EQL-OK: T
(CONSTANTP '(+ 3 4))
EQL-OK: T
(CONSTANTP '((SETF CONS) 3 4))
EQL-OK: NIL
(LET ((SRC "foo.lisp") (ZZ (CONS 1 2))) (DEFUN SETF-FOO (U V) (SETF (CAR U) V)) (WITH-OPEN-FILE (S SRC :DIRECTION :OUTPUT) (FORMAT S "(progn~%  (defsetf foo setf-foo)
  (defun bar (u v) (setf (foo u) v)))~%")) (LOAD SRC :COMPILING T) (DELETE-FILE SRC) (BAR ZZ 12) ZZ)
;; Loading file foo.lisp ...
0 errors, 0 warnings
;; Loaded file foo.lisp
EQUAL-OK: (12 . 2)
(UNINTERN 'X)
EQL-OK: T
RUN-TEST: finished "eval20" (0 errors out of 21 tests)
RUN-TEST: started #<INPUT BUFFERED FILE-STREAM CHARACTER #P"ext-clisp.tst" @1>
(MAPCAR (LAMBDA (X &AUX A B) (LIST (SETF (IF X A B) 2) A B)) '(T NIL))
EQUAL-OK: ((2 2 NIL) (2 NIL 2))
(LOOP WITH A AND B FOR X BELOW 2 COLLECT (MULTIPLE-VALUE-LIST (SETF (IF (ZEROP X) (VALUES A B) (VALUES B A)) (FLOOR 7 5))) COLLECT (CONS A B))
EQUAL-OK: ((1 2) (1 . 2) (1 2) (2 . 1))
(LET (X A B C) (SETF (IF (ZEROP X) (VALUES A B) C) X))
[SIMPLE-SOURCE-PROGRAM-ERROR]: SETF place (IF #1=(ZEROP X) #2=(VALUES A B) C) expects different numbers of values in the true and false branches (2 vs. 1 values).
EQL-OK: ERROR
(FCASE STRING= (LET ((FOO "two third")) (SUBSEQ FOO 0 (POSITION #\Space FOO))) ("first" 1) (("second" "two") 2) (("true" "yes") T) (OTHERWISE NIL))
EQL-OK: 2
(MULTIPLE-VALUE-LIST (XOR NIL NIL NIL))
EQUAL-OK: (NIL)
(MULTIPLE-VALUE-LIST (XOR NIL (BLOCK NIL (RETURN 'A)) NIL))
EQUAL-OK: (A 2)
(! 10)
EQL-OK: 3628800
(! 11)
EQL-OK: 39916800
(! 0)
EQL-OK: 1
(! 3/2)
[SIMPLE-TYPE-ERROR]: !: argument #1=3/2 is not a nonnegative fixnum

EQL-OK: ERROR
(DEFUN TEST-DOHASH (HASH-TABLE) (LET ((ALL-ENTRIES 'NIL) (GENERATED-ENTRIES 'NIL) (UNIQUE (LIST NIL))) (MAPHASH #'(LAMBDA (KEY VALUE) (PUSH (LIST KEY VALUE) ALL-ENTRIES)) HASH-TABLE) (DOHASH (KEY VALUE HASH-TABLE) (DECLARE (OPTIMIZE SAFETY)) (UNLESS (EQL VALUE (GETHASH KEY HASH-TABLE UNIQUE)) (ERROR "Key ~S not found for value ~S" KEY VALUE)) (PUSH (LIST KEY VALUE) GENERATED-ENTRIES)) (UNLESS (= (LENGTH ALL-ENTRIES) (LENGTH GENERATED-ENTRIES) (LENGTH (UNION ALL-ENTRIES GENERATED-ENTRIES :KEY #'CAR :TEST (HASH-TABLE-TEST HASH-TABLE)))) (ERROR "MAPHASH and EXT:DOHASH entries don't correspond")) T))
EQL-OK: TEST-DOHASH
(LET ((TAB (MAKE-HASH-TABLE :TEST #'EQUAL))) (SETF (GETHASH "Richard" TAB) "Gabriel") (SETF (GETHASH "Bruno" TAB) "Haible") (SETF (GETHASH "Michael" TAB) "Stoll") (SETF (GETHASH "Linus" TAB) "Torvalds") (SETF (GETHASH "Richard" TAB) "Stallman") (TEST-DOHASH TAB))
EQL-OK: T
(LET ((HASH-TABLE (MAKE-HASH-TABLE)) (ENTRIES 'NIL)) (SETF (GETHASH 1 HASH-TABLE) 100) (SETF (GETHASH 2 HASH-TABLE) 200) (SORT (DOHASH (KEY VALUE HASH-TABLE ENTRIES) (DECLARE (IGNORE KEY)) (PUSH VALUE ENTRIES)) #'<))
EQUAL-OK: (100 200)
(LET ((HASH-TABLE (MAKE-HASH-TABLE :INITIAL-CONTENTS '((1 . 100) (2 . 200)))) (ENTRIES 'NIL)) (SORT (DOHASH (KEY VALUE HASH-TABLE ENTRIES) (PUSH VALUE ENTRIES) (GO SKIP) (PUSH KEY ENTRIES) SKIP) #'<))
EQUAL-OK: (100 200)
(LET ((X (LIST 1))) (LIST (LETF (((CAR X) 3)) (LIST X (COPY-LIST X))) X))
EQUAL-OK: (((1) (3)) (1))
(LET ((X (LIST 1))) (LIST (LETF (((CAR X) 3) ((CDR X) (COPY-LIST X))) (LIST X (COPY-LIST X))) X))
EQUAL-OK: (((1) (3 1)) (1))
(LET (A B) (LIST (LETF (((VALUES A B) (VALUES 1 2))) (LIST A B)) (LIST A B)))
EQUAL-OK: ((1 2) (NIL NIL))
(LET ((X (LIST 2))) (LIST (LETF* (((CAR X) 3)) (LIST X (COPY-LIST X))) X))
EQUAL-OK: (((2) (3)) (2))
(LET ((X (LIST 1))) (LIST (LETF* (((CAR X) 3) ((CDR X) (COPY-LIST X))) (LIST X (COPY-LIST X))) X))
EQUAL-OK: (((1) (3 3)) (1))
(LET (A B) (LIST (LETF* (((VALUES A B) (VALUES 1 2))) (LIST A B)) (LIST A B)))
EQUAL-OK: ((1 2) (NIL NIL))
(LET ((X (LIST 1))) (BLOCK NIL (LETF (((CAR X) 2) ((CDR (PROGN (RETURN) X)) 3)) X)) X)
EQUAL-OK: (1)
(LET ((X (LIST 11184810))) (LETF (((LDB (BYTE 5 9) (FIRST X)) -1)) (SETF (FIRST X) 0)) X)
EQUAL-OK: (10752)
(LET ((X (LIST 1))) (LETF (((FIRST X) 3))))
EQL-OK: NIL
(LET ((X (LIST 1))) (MACROLET ((FROB NIL '(FIRST X))) (LETF (((FROB) 2)) (COPY-LIST X))))
EQUAL-OK: (2)
(LET ((X (LIST 1))) (MACROLET ((FROB NIL '(FIRST X))) (LETF* (((FROB) 2)) (COPY-LIST X))))
EQUAL-OK: (2)
(SYMBOL-MACROLET ((A *PRINT-BASE*)) (LETF ((A 36)) (PRINC-TO-STRING 20)))
EQUAL-OK: "K"
(SYMBOL-MACROLET ((A *PRINT-BASE*)) (LETF* ((A 36)) (PRINC-TO-STRING 20)))
EQUAL-OK: "K"
(LET (A B C) (SYMBOL-MACROLET ((A *PRINT-BASE*)) (LETF (((VALUES A B C) 36)) (PRINC-TO-STRING 20))))
EQUAL-OK: "K"
(LET (A B C) (SYMBOL-MACROLET ((A *PRINT-BASE*)) (LETF* (((VALUES A B C) 36)) (PRINC-TO-STRING 20))))
EQUAL-OK: "K"
(LET ((A (VECTOR 0 0))) (LETF (((VALUES (AREF A 0) (AREF A 1)) (FLOOR 7 5))) (COPY-SEQ A)))
EQUALP-OK: #(1 2)
(LET ((A (VECTOR 0 0))) (LETF* (((VALUES (AREF A 0) (AREF A 1)) (FLOOR 7 5))) (COPY-SEQ A)))
EQUALP-OK: #(1 2)
(LETF (((VALUES) 1)) 2)
EQL-OK: 2
(LETF* (((VALUES) 1)) 2)
EQL-OK: 2
(MAKUNBOUND 'XX)
EQL-OK: XX
(LETF (((SYMBOL-VALUE 'XX) 3)) (DECLARE (SPECIAL XX)) XX)
[SIMPLE-UNBOUND-VARIABLE]: SYMBOL-VALUE: XX has no dynamic value

EQL-OK: ERROR
(MULTIPLE-VALUE-LIST (GETHASH 1 (LETF* ((H (MAKE-HASH-TABLE)) ((GETHASH 1 H) 'A)) H) 2))
EQUAL-OK: (NIL T)
(MULTIPLE-VALUE-LIST (GETHASH 1 (LETF* ((H (MAKE-HASH-TABLE)) ((GETHASH 1 H 'B) 'A)) H) 2))
EQUAL-OK: (B T)
(LET ((A 'NIL)) (LETF* (((GETF A :KEY) 1))) A)
EQUAL-OK: (:KEY NIL)
(LET ((A 'NIL)) (LETF* (((GETF A :KEY :DEFAULT) 1))) A)
EQUAL-OK: (:KEY :DEFAULT)
(LET ((A 'NIL)) (LETF (((GETF A :KEY :DEFAULT) 1))) A)
EQUAL-OK: (:KEY :DEFAULT)
(EVERY #'FEATUREP *FEATURES*)
EQL-OK: T
(NOTANY (LAMBDA (X) (FEATUREP `(NOT ,X))) *FEATURES*)
EQL-OK: T
((LAMBDA (X) (DECLARE (COMPILE)) (ETHE INTEGER X)) 3)
EQL-OK: 3
((LAMBDA (X) (DECLARE (COMPILE)) (ETHE INTEGER X)) T)
[SIMPLE-ERROR]: The form X yielded T ,
that's not of type INTEGER.
EQL-OK: ERROR
(LOCALLY (DECLARE (COMPILE)) (MULTIPLE-VALUE-LIST (ETHE (VALUES INTEGER FLOAT) (TRUNCATE 3.2 2))))
EQUAL-OK: (1 1.2)
(LOCALLY (DECLARE (COMPILE)) (ETHE (VALUES FLOAT INTEGER) (TRUNCATE 3.2 2)))
[SIMPLE-ERROR]: The form (TRUNCATE 3.2 2) yielded 1 ; 1.2 ,
that's not of type (VALUES FLOAT INTEGER).
EQL-OK: ERROR
RUN-TEST: finished "ext-clisp" (0 errors out of 46 tests)
RUN-TEST: started #<INPUT BUFFERED FILE-STREAM CHARACTER #P"floeps.tst" @1>
(DEFUN TEST-POS-EPSILON (<EPSILON>) (/= (FLOAT 1 <EPSILON>) (+ (FLOAT 1 <EPSILON>) <EPSILON>)))
EQL-OK: TEST-POS-EPSILON
(TEST-POS-EPSILON SHORT-FLOAT-EPSILON)
EQL-OK: T
(TEST-POS-EPSILON SINGLE-FLOAT-EPSILON)
EQL-OK: T
(TEST-POS-EPSILON DOUBLE-FLOAT-EPSILON)
EQL-OK: T
(TEST-POS-EPSILON LONG-FLOAT-EPSILON)
EQL-OK: T
(DEFUN TEST-NEG-EPSILON (<EPSILON>) (/= (FLOAT 1 <EPSILON>) (- (FLOAT 1 <EPSILON>) <EPSILON>)))
EQL-OK: TEST-NEG-EPSILON
(TEST-NEG-EPSILON SHORT-FLOAT-NEGATIVE-EPSILON)
EQL-OK: T
(TEST-NEG-EPSILON SINGLE-FLOAT-NEGATIVE-EPSILON)
EQL-OK: T
(TEST-NEG-EPSILON DOUBLE-FLOAT-NEGATIVE-EPSILON)
EQL-OK: T
(TEST-NEG-EPSILON LONG-FLOAT-NEGATIVE-EPSILON)
EQL-OK: T
(DEFUN BINARY-SEARCH (LOWER-BOUND UPPER-BOUND OLD-VALUE PRECISION TEST-FUN) (LET* ((NEW-VALUE (FLOAT (/ (+ LOWER-BOUND UPPER-BOUND) 2) PRECISION))) (IF (= OLD-VALUE NEW-VALUE) (FLOAT UPPER-BOUND PRECISION) (IF (FUNCALL TEST-FUN NEW-VALUE) (BINARY-SEARCH LOWER-BOUND NEW-VALUE NEW-VALUE PRECISION TEST-FUN) (BINARY-SEARCH NEW-VALUE UPPER-BOUND NEW-VALUE PRECISION TEST-FUN)))))
EQL-OK: BINARY-SEARCH
(DEFUN CHECK-EPS (EPS TEST) (= EPS (BINARY-SEARCH 0 1 0 EPS TEST)))
EQL-OK: CHECK-EPS
(CHECK-EPS SHORT-FLOAT-EPSILON #'TEST-POS-EPSILON)
EQL-OK: T
(CHECK-EPS SHORT-FLOAT-NEGATIVE-EPSILON #'TEST-NEG-EPSILON)
EQL-OK: T
(CHECK-EPS SINGLE-FLOAT-EPSILON #'TEST-POS-EPSILON)
EQL-OK: T
(CHECK-EPS SINGLE-FLOAT-NEGATIVE-EPSILON #'TEST-NEG-EPSILON)
EQL-OK: T
(CHECK-EPS DOUBLE-FLOAT-EPSILON #'TEST-POS-EPSILON)
EQL-OK: T
(CHECK-EPS DOUBLE-FLOAT-NEGATIVE-EPSILON #'TEST-NEG-EPSILON)
EQL-OK: T
(CHECK-EPS LONG-FLOAT-EPSILON #'TEST-POS-EPSILON)
EQL-OK: T
(CHECK-EPS LONG-FLOAT-NEGATIVE-EPSILON #'TEST-NEG-EPSILON)
EQL-OK: T
RUN-TEST: finished "floeps" (0 errors out of 20 tests)
RUN-TEST: started #<INPUT BUFFERED FILE-STREAM CHARACTER #P"format.tst" @1>
(FORMAT NIL "~10<foo~;bar~>")
EQUAL-OK: "foo    bar"
(FORMAT NIL "~10:<foo~;bar~>")
EQUAL-OK: "  foo  bar"
(FORMAT NIL "~10@<foo~;bar~>")
EQUAL-OK: "foo  bar  "
(FORMAT NIL "~10:@<foo~;bar~>")
EQUAL-OK: "  foo bar "
(FORMAT NIL "~10<foobar~>")
EQUAL-OK: "    foobar"
(FORMAT NIL "~10:<foobar~>")
EQUAL-OK: "    foobar"
(FORMAT NIL "~10@<foobar~>")
EQUAL-OK: "foobar    "
(FORMAT NIL "~10:@<foobar~>")
EQUAL-OK: "  foobar  "
(FORMAT NIL "~15<~S~>" 'FOO)
EQUALP-OK: "            foo"
(FORMAT NIL "~15<~S~;~^~S~>" 'FOO)
EQUALP-OK: "            foo"
(FORMAT NIL "~15<~S~;~^~S~;~^~S~>" 'FOO)
EQUALP-OK: "            foo"
(FORMAT NIL "~15<~S~;~^~S~>" 'FOO 'BAR)
EQUALP-OK: "foo         bar"
(FORMAT NIL "~15<~S~;~^~S~;~^~S~>" 'FOO 'BAR)
EQUALP-OK: "foo         bar"
(FORMAT NIL "~15<~S~;~^~S~;~^~S~>" 'FOO 'BAR 'BAZ)
EQUALP-OK: "foo   bar   baz"
(FORMAT NIL "~12<~S~;~^~S~;~^~S~>" 'FOO 'BAR 'BAZ)
EQUALP-OK: "foo  bar baz"
(PROGN (SETQ LISTE '(AAAAAAA BBBBBB CCCCCCCCCCCC DDDDDDDDDDDDDD EEEE FFFFFFFFF GGGGGGGG HHHHH IIII J KK LLL MMMM NNNNNN OOOOOOOOOO PPPPPPPPPPPPPPP QQQQQQQ RRRRRRRRRRRR S TTT UUUUUUUUU VVVVVVV WWWWWWWWWW XXXXX YYYYYY ZZZZZZZZ)) T)
EQL-OK: T
(FORMAT NIL "~%;; ~<~%;; ~1:; ~s~; ~s~; ~s~; ~s~; ~s~; ~s~; ~s~; ~s~; ~s~; ~s~;~
 ~s~; ~s~; ~s~; ~s~; ~s~; ~s~; ~s~; ~s~; ~s~; ~s~;~
 ~s~; ~s~; ~s~; ~s~;~>~%" 'AAAAAAA 'BBBBBB 'CCCCCCCCCCCC 'DDDDDDDDDDDDDD 'EEEE 'FFFFFFFFF 'GGGGGGGG 'HHHHH 'IIII 'J 'KK 'LLL 'MMMM 'NNNNNN 'OOOOOOOOOO 'PPPPPPPPPPPPPPP 'QQQQQQQ 'RRRRRRRRRRRR 'S 'TTT 'UUUUUUUUU 'VVVVVVV 'WWWWWWWWWW 'XXXXX 'YYYYYY 'ZZZZZZZZ)
EQUAL-OK: "
;; 
;;  AAAAAAA BBBBBB CCCCCCCCCCCC DDDDDDDDDDDDDD EEEE FFFFFFFFF GGGGGGGG HHHHH IIII JKK LLL MMMM NNNNNN OOOOOOOOOO PPPPPPPPPPPPPPP QQQQQQQ RRRRRRRRRRRR S TTTUUUUUUUUU VVVVVVV WWWWWWWWWW XXXXX
"
(FORMAT NIL "~%;; ~<~%;; ~1,50:; ~s~; ~s~; ~s~; ~s~; ~s~; ~s~; ~s~; ~s~; ~s~; ~s~;~
 ~s~; ~s~; ~s~; ~s~; ~s~; ~s~; ~s~; ~s~; ~s~; ~s~;~
 ~s~; ~s~; ~s~; ~s~;~>~%" 'AAAAAAA 'BBBBBB 'CCCCCCCCCCCC 'DDDDDDDDDDDDDD 'EEEE 'FFFFFFFFF 'GGGGGGGG 'HHHHH 'IIII 'J 'KK 'LLL 'MMMM 'NNNNNN 'OOOOOOOOOO 'PPPPPPPPPPPPPPP 'QQQQQQQ 'RRRRRRRRRRRR 'S 'TTT 'UUUUUUUUU 'VVVVVVV 'WWWWWWWWWW 'XXXXX 'YYYYYY 'ZZZZZZZZ)
EQUAL-OK: "
;; 
;;  AAAAAAA BBBBBB CCCCCCCCCCCC DDDDDDDDDDDDDD EEEE FFFFFFFFF GGGGGGGG HHHHH IIII JKK LLL MMMM NNNNNN OOOOOOOOOO PPPPPPPPPPPPPPP QQQQQQQ RRRRRRRRRRRR S TTTUUUUUUUUU VVVVVVV WWWWWWWWWW XXXXX
"
(DEFUN FORMAT-BLOCKSATZ (STREAM PARTS PREFIX &OPTIONAL LINE-LENGTH START-P END-P) (IF (NULL STREAM) (LET ((STREAM (MAKE-STRING-OUTPUT-STREAM))) (FORMAT-BLOCKSATZ STREAM PARTS PREFIX LINE-LENGTH START-P END-P) (GET-OUTPUT-STREAM-STRING STREAM)) (UNLESS (ENDP PARTS) (SETQ LINE-LENGTH (OR LINE-LENGTH 72)) (WHEN START-P (FORMAT STREAM PREFIX)) (LOOP (LET ((POS (SYSTEM::LINE-POSITION STREAM)) (PARTS-NOW 'NIL)) (LET ((POS-NOW POS)) (LOOP (WHEN (ENDP PARTS) (RETURN)) (LET* ((PART (FIRST PARTS)) (PART-LENGTH (LENGTH PART))) (UNLESS (NULL PARTS-NOW) (WHEN (> (+ POS-NOW PART-LENGTH) LINE-LENGTH) (RETURN))) (POP PARTS) (PUSH PART PARTS-NOW) (INCF POS-NOW PART-LENGTH)))) (APPLY #'FORMAT STREAM (IF (AND (ENDP PARTS) (NOT END-P)) (APPLY #'CONCATENATE 'STRING (MAKE-LIST (LENGTH PARTS-NOW) :INITIAL-ELEMENT "~A")) (CONCATENATE 'STRING "~" (WRITE-TO-STRING (MAX 0 (- LINE-LENGTH POS)) :RADIX NIL :BASE 10) (IF (= (LENGTH PARTS-NOW) 1) "@" "") "<" (APPLY #'CONCATENATE 'STRING "~A" (MAKE-LIST (1- (LENGTH PARTS-NOW)) :INITIAL-ELEMENT "~;~A")) "~>")) (NREVERSE PARTS-NOW))) (WHEN (ENDP PARTS) (RETURN)) (FORMAT STREAM PREFIX)))))
EQL-OK: FORMAT-BLOCKSATZ
(FORMAT-BLOCKSATZ NIL (MAPCAR #'(LAMBDA (X) (FORMAT NIL " ~A" X)) '(AAAAAAA BBBBBB CCCCCCCCCCCC DDDDDDDDDDDDDD EEEE FFFFFFFFF GGGGGGGG HHHHH IIII J KK LLL MMMM NNNNNN OOOOOOOOOO PPPPPPPPPPPPPPP QQQQQQQ RRRRRRRRRRRR S TTT UUUUUUUUU VVVVVVV WWWWWWWWWW XXXXX YYYYYY ZZZZZZZZ)) "~%;; " NIL T NIL)
EQUAL-OK: "
;;  AAAAAAA  BBBBBB  CCCCCCCCCCCC DDDDDDDDDDDDDD EEEE FFFFFFFFF GGGGGGGG
;;  HHHHH  IIII  J KK LLL MMMM NNNNNN OOOOOOOOOO PPPPPPPPPPPPPPP QQQQQQQ
;;  RRRRRRRRRRRR   S  TTT  UUUUUUUUU  VVVVVVV  WWWWWWWWWW  XXXXX  YYYYYY
;;  ZZZZZZZZ"
(FORMAT-BLOCKSATZ NIL (MAPCAR #'(LAMBDA (X) (FORMAT NIL " ~A" X)) '(AAAAAAA BBBBBB CCCCCCCCCCCC DDDDDDDDDDDDDD EEEE FFFFFFFFF GGGGGGGG HHHHH IIII J KK LLL MMMM NNNNNN OOOOOOOOOO PPPPPPPPPPPPPPP QQQQQQQ RRRRRRRRRRRR S TTT UUUUUUUUU VVVVVVV WWWWWWWWWW XXXXX YYYYYY ZZZZZZZZ)) "~%;; " 50 T T)
EQUAL-OK: "
;;  AAAAAAA   BBBBBB  CCCCCCCCCCCC  DDDDDDDDDDDDDD
;;  EEEE  FFFFFFFFF  GGGGGGGG  HHHHH IIII J KK LLL
;;  MMMM NNNNNN OOOOOOOOOO PPPPPPPPPPPPPPP QQQQQQQ
;;  RRRRRRRRRRRR    S    TTT   UUUUUUUUU   VVVVVVV
;;  WWWWWWWWWW      XXXXX      YYYYYY     ZZZZZZZZ"
(FORMAT NIL "~%;; ~{~<~%;; ~1,50:; ~s~>~^,~}.~%" '(AAAAAAA BBBBBB CCCCCCCCCCCC DDDDDDDDDDDDDD EEEE FFFFFFFFF GGGGGGGG HHHHH IIII J KK LLL MMMM NNNNNN OOOOOOOOOO PPPPPPPPPPPPPPP QQQQQQQ RRRRRRRRRRRR S TTT UUUUUUUUU VVVVVVV WWWWWWWWWW XXXXX YYYYYY ZZZZZZZZ))
EQUAL-OK: "
;;  AAAAAAA, BBBBBB, CCCCCCCCCCCC, DDDDDDDDDDDDDD,
;;  EEEE, FFFFFFFFF, GGGGGGGG, HHHHH, IIII, J, KK,
;;  LLL, MMMM, NNNNNN, OOOOOOOOOO,
;;  PPPPPPPPPPPPPPP, QQQQQQQ, RRRRRRRRRRRR, S,
;;  TTT, UUUUUUUUU, VVVVVVV, WWWWWWWWWW, XXXXX,
;;  YYYYYY, ZZZZZZZZ.
"
(DEFUN FOO (X) (FORMAT NIL "~6,2F|~6,2,1,'*F|~6,2,,'?F|~6F|~,2F|~F" X X X X X X))
EQL-OK: FOO
(FOO 3.14159)
EQUAL-OK: "  3.14| 31.42|  3.14|3.1416|3.14|3.14159"
(FOO -3.14159)
EQUAL-OK: " -3.14|-31.42| -3.14|-3.142|-3.14|-3.14159"
(FOO 100.0)
EQUAL-OK: "100.00|******|100.00| 100.0|100.00|100.0"
(FOO 1234.0)
EQUAL-OK: "1234.00|******|??????|1234.0|1234.00|1234.0"
(FOO 0.006)
EQUAL-OK: "  0.01|  0.06|  0.01| 0.006|0.01|0.006"
(FORMAT NIL "~5,2,-13f" 1.1E13)
EQUAL-OK: " 1.10"
(FORMAT NIL "~9,0,6f" 3.14159)
EQUAL-OK: " 3141590."
(FORMAT NIL "~5D" 'A)
EQUAL-OK: "    A"
(FORMAT NIL "~5,3F" 'A)
EQUAL-OK: "    A"
(FORMAT NIL "~5,3F" #C(1.2 0.3))
EQUAL-OK: "#C(1.2 0.3)"
(FORMAT NIL "~5,3F" 2/3)
EQUAL-OK: "0.667"
(FORMAT NIL "~1f" 10)
EQUAL-OK: "10."
(FORMAT NIL "~0f" 10)
EQUAL-OK: "10."
(FORMAT NIL "~1,,,'xf" -10)
EQUAL-OK: "x"
(FORMAT NIL "~2f" 1234567.1)
EQUAL-OK: "1234567."
(DEFUN FOO (X) (FORMAT NIL "~9,2,1,,'*E|~10,3,2,2,'?,,'$E|~9,3,2,-2,'%@e|~9,2E" X X X X))
EQL-OK: FOO
(FOO 3.14159)
EQUAL-OK: "  3.14E+0| 31.42$-01|+.003E+03|  3.14E+0"
(FOO -3.14159)
EQUAL-OK: " -3.14E+0|-31.42$-01|-.003E+03| -3.14E+0"
(FOO 1100.0)
EQUAL-OK: "  1.10E+3| 11.00$+02|+.001E+06|  1.10E+3"
(FOO 1100.0L0)
EQUAL-OK: "  1.10L+3| 11.00$+02|+.001L+06|  1.10L+3"
(FOO 1.1E13)
EQUAL-OK: "*********| 11.00$+12|+.001E+16| 1.10E+13"
(FORMAT NIL "_~10,4E_" 1.2)
EQUAL-OK: "_ 1.2000E+0_"
(FORMAT NIL "~9,2,1E" 0.0314159)
EQUAL-OK: "  3.14E-2"
(FORMAT NIL "~ve" 21 4.6d8)
EQUAL-OK: "               4.6d+8"
(FORMAT NIL "~21e" 4.66d19)
EQUAL-OK: "             4.66d+19"
(LET (X) (DOTIMES (K 13 X) (SETQ X (CONS (FORMAT NIL "~%Scale factor ~2D: |~13,6,2,VE|" (- K 5) (- K 5) 3.14159) X))))
EQUAL-OK: ("
Scale factor  7: | 3141590.E-06|" "
Scale factor  6: | 314159.0E-05|" "
Scale factor  5: | 31415.90E-04|" "
Scale factor  4: | 3141.590E-03|" "
Scale factor  3: | 314.1590E-02|" "
Scale factor  2: | 31.41590E-01|" "
Scale factor  1: | 3.141590E+00|" "
Scale factor  0: | 0.314159E+01|" "
Scale factor -1: | 0.031416E+02|" "
Scale factor -2: | 0.003142E+03|" "
Scale factor -3: | 0.000314E+04|" "
Scale factor -4: | 0.000031E+05|" "
Scale factor -5: | 0.000003E+06|")
(FORMAT NIL "~G" 1.0d22)
EQUAL-OK: "10000000000000000000000.    "
(FORMAT NIL "~G" 9.999999999999999d22)
EQUAL-OK: "100000000000000000000000.    "
(FORMAT NIL "~G" 1.0d24)
EQUAL-OK: "1000000000000000000000000.    "
(FORMAT NIL "~F" 1.0d22)
EQUAL-OK: "10000000000000000000000.0"
(FORMAT NIL "~F" 9.999999999999999d22)
EQUAL-OK: "100000000000000000000000.0"
(FORMAT NIL "~F" 1.0d24)
EQUAL-OK: "1000000000000000000000000.0"
(FORMAT NIL "~E" 1.0d22)
EQUAL-OK: "1.0d+22"
(FORMAT NIL "~E" 9.999999999999999d22)
EQUAL-OK: "1.0d+23"
(FORMAT NIL "~E" 1.0d24)
EQUAL-OK: "1.0d+24"
(FORMAT NIL "~8e" 0.8999999d0)
EQUAL-OK: "  9.0d-1"
(FORMAT NIL "~8e" 0.999999d0)
EQUAL-OK: "  1.0d+0"
(FORMAT NIL "~8e" 9.99999d8)
EQUAL-OK: "  1.0d+9"
(FORMAT NIL "~8e" 9.99999d9)
EQUAL-OK: " 1.0d+10"
(FORMAT NIL "~8e" 9.99999d-11)
EQUAL-OK: " 1.0d-10"
(FORMAT NIL "~8e" 9.99999d-10)
EQUAL-OK: "  1.0d-9"
(DEFUN FOO (X) (FORMAT NIL "~9,2,1,,'*G|~9,3,2,3,'?,,'$G|~9,3,2,0,'%G|~9,2G" X X X X))
EQL-OK: FOO
(FOO 0.0314159)
EQUAL-OK: "  3.14E-2|314.2$-04|0.314E-01|  3.14E-2"
(FOO 0.314159)
EQUAL-OK: "  0.31   |0.314    |0.314    | 0.31    "
(FOO 3.14159)
EQUAL-OK: "   3.1   | 3.14    | 3.14    |  3.1    "
(FOO 31.4159)
EQUAL-OK: "   31.   | 31.4    | 31.4    |  31.    "
(FOO 314.159)
EQUAL-OK: "  3.14E+2| 314.    | 314.    |  3.14E+2"
(FOO 3141.59)
EQUAL-OK: "  3.14E+3|314.2$+01|0.314E+04|  3.14E+3"
(FOO 3141.59L0)
EQUAL-OK: "  3.14L+3|314.2$+01|0.314L+04|  3.14L+3"
(FOO 3.14E12)
EQUAL-OK: "*********|314.0$+10|0.314E+13| 3.14E+12"
(FORMAT NIL "foo")
EQUAL-OK: "foo"
(FORMAT NIL "format-a:--~a--ende" '|ABc|)
EQUAL-OK: "format-a:--ABc--ende"
(SETQ Y "elephant")
EQUAL-OK: "elephant"
(FORMAT NIL "Look at the ~A!" Y)
EQUAL-OK: "Look at the elephant!"
(FORMAT NIL "format-%:--~%--1-newline-*")
EQUAL-OK: "format-%:--
--1-newline-*"
(FORMAT NIL "format-%:--~3%--3-newline-*")
EQUAL-OK: "format-%:--


--3-newline-*"
(FORMAT NIL "format-a:--~5a--ende-*" '|ABc|)
EQUAL-OK: "format-a:--ABc  --ende-*"
(FORMAT NIL "format-a:--~5,2a--ende-*" '|ABc|)
EQUAL-OK: "format-a:--ABc  --ende-*"
(FORMAT NIL "format-a:--~5,2,3a--ende-*" '|ABc|)
EQUAL-OK: "format-a:--ABc   --ende-*"
(FORMAT NIL "format-a:--~5,2,3,'*a--ende-*" '|ABc|)
EQUAL-OK: "format-a:--ABc***--ende-*"
(FORMAT NIL "format-a:--~@a--ende-*" '|ABc|)
EQUAL-OK: "format-a:--ABc--ende-*"
(FORMAT NIL "format-a:--~5@a--ende-*" '|ABc|)
EQUAL-OK: "format-a:--  ABc--ende-*"
(FORMAT NIL "format-a:--~5,2@a--ende-*" '|ABc|)
EQUAL-OK: "format-a:--  ABc--ende-*"
(FORMAT NIL "format-a:--~5,2,3@a--ende-*" '|ABc|)
EQUAL-OK: "format-a:--   ABc--ende-*"
(FORMAT NIL "format-a:--~5,2,3,'*@a--ende-*" '|ABc|)
EQUAL-OK: "format-a:--***ABc--ende-*"
(FORMAT NIL "format-a:--~:a--ende-*" '(|ABc| NIL XYZ))
EQUAL-OK: "format-a:--(ABc NIL XYZ)--ende-*"
(FORMAT NIL "format-s:--~s--ende-*" '|ABc|)
EQUAL-OK: "format-s:--|ABc|--ende-*"
(FORMAT NIL "format-s:--~5s--ende-*" '|ABc|)
EQUAL-OK: "format-s:--|ABc|--ende-*"
(FORMAT NIL "format-s:--~5,2s--ende-*" '|ABc|)
EQUAL-OK: "format-s:--|ABc|--ende-*"
(FORMAT NIL "format-s:--~5,2,3s--ende-*" '|ABc|)
EQUAL-OK: "format-s:--|ABc|   --ende-*"
(FORMAT NIL "format-s:--~5,2,3,'*s--ende-*" '|ABc|)
EQUAL-OK: "format-s:--|ABc|***--ende-*"
(FORMAT NIL "format-s:--~@s--ende-*" '|ABc|)
EQUAL-OK: "format-s:--|ABc|--ende-*"
(FORMAT NIL "format-s:--~5@s--ende-*" '|ABc|)
EQUAL-OK: "format-s:--|ABc|--ende-*"
(FORMAT NIL "format-s:--~5,2@s--ende-*" '|ABc|)
EQUAL-OK: "format-s:--|ABc|--ende-*"
(FORMAT NIL "format-s:--~5,2,3@s--ende-*" '|ABc|)
EQUAL-OK: "format-s:--   |ABc|--ende-*"
(FORMAT NIL "format-s:--~5,2,3,'*@s--ende-*" '|ABc|)
EQUAL-OK: "format-s:--***|ABc|--ende-*"
(FORMAT NIL "format-s:--~:s--ende-*" '(|ABc| NIL XYZ))
EQUAL-OK: "format-s:--(|ABc| NIL XYZ)--ende-*"
(SETQ X 5)
EQL-OK: 5
(FORMAT NIL "The answer is ~D." X)
EQUAL-OK: "The answer is 5."
(FORMAT NIL "The answer is ~3D." X)
EQUAL-OK: "The answer is   5."
(FORMAT NIL "The answer is ~3,'0D." X)
EQUAL-OK: "The answer is 005."
(FORMAT NIL "The answer is ~:D." (EXPT 47 X))
EQUAL-OK: "The answer is 229,345,007."
(FORMAT NIL "decimal:~d, width=5:~5d-*" 10 10)
EQUAL-OK: "decimal:10, width=5:   10-*"
(FORMAT NIL "format-d:--~d--ende-*" 123)
EQUAL-OK: "format-d:--123--ende-*"
(FORMAT NIL "format-d:--~10d--ende-*" 123)
EQUAL-OK: "format-d:--       123--ende-*"
(FORMAT NIL "format-d:--~10,'?d--ende-*" 123)
EQUAL-OK: "format-d:--???????123--ende-*"
(FORMAT NIL "format-d:--~@d--ende-*" 123)
EQUAL-OK: "format-d:--+123--ende-*"
(FORMAT NIL "format-d:--~10@d--ende-*" 123)
EQUAL-OK: "format-d:--      +123--ende-*"
(FORMAT NIL "format-d:--~10,'?@d--ende-*" 123)
EQUAL-OK: "format-d:--??????+123--ende-*"
(FORMAT NIL "format-b:--~b--ende-*" 123)
EQUAL-OK: "format-b:--1111011--ende-*"
(FORMAT NIL "format-b:--~10b--ende-*" 123)
EQUAL-OK: "format-b:--   1111011--ende-*"
(FORMAT NIL "format-b:--~10,'?b--ende-*" 123)
EQUAL-OK: "format-b:--???1111011--ende-*"
(FORMAT NIL "format-b:--~:b--ende-*" 123)
EQUAL-OK: "format-b:--1,111,011--ende-*"
(FORMAT NIL "format-b:--~10:b--ende-*" 123)
EQUAL-OK: "format-b:-- 1,111,011--ende-*"
(FORMAT NIL "format-b:--~10,'?:b--ende-*" 123)
EQUAL-OK: "format-b:--?1,111,011--ende-*"
(FORMAT NIL "format-b:--~10,'?,'.:b--ende-*" 123)
EQUAL-OK: "format-b:--?1.111.011--ende-*"
(FORMAT NIL "format-b:--~@b--ende-*" 123)
EQUAL-OK: "format-b:--+1111011--ende-*"
(FORMAT NIL "format-b:--~10@b--ende-*" 123)
EQUAL-OK: "format-b:--  +1111011--ende-*"
(FORMAT NIL "format-b:--~10,'?@b--ende-*" 123)
EQUAL-OK: "format-b:--??+1111011--ende-*"
(FORMAT NIL "format-b:--~:@b--ende-*" 123)
EQUAL-OK: "format-b:--+1,111,011--ende-*"
(FORMAT NIL "format-o:--~o--ende-*" 123)
EQUAL-OK: "format-o:--173--ende-*"
(FORMAT NIL "format-o:--~10o--ende-*" 123)
EQUAL-OK: "format-o:--       173--ende-*"
(FORMAT NIL "format-o:--~10,'?o--ende-*" 123)
EQUAL-OK: "format-o:--???????173--ende-*"
(FORMAT NIL "format-o:--~@o--ende-*" 123)
EQUAL-OK: "format-o:--+173--ende-*"
(FORMAT NIL "format-o:--~10@o--ende-*" 123)
EQUAL-OK: "format-o:--      +173--ende-*"
(FORMAT NIL "format-x:--~x--ende-*" 123)
EQUAL-OK: "format-x:--7B--ende-*"
(FORMAT NIL "format-x:--~10x--ende-*" 123)
EQUAL-OK: "format-x:--        7B--ende-*"
(FORMAT NIL "format-x:--~10,'?x--ende-*" 123)
EQUAL-OK: "format-x:--????????7B--ende-*"
(FORMAT NIL "format-x:--~10:x--ende-*" 123)
EQUAL-OK: "format-x:--        7B--ende-*"
(FORMAT NIL "format-x:--~@x--ende-*" 123)
EQUAL-OK: "format-x:--+7B--ende-*"
(FORMAT NIL "format-x:--~10@x--ende-*" 123)
EQUAL-OK: "format-x:--       +7B--ende-*"
(FORMAT NIL "format-r:--~20r--ende-*" 123)
EQUAL-OK: "format-r:--63--ende-*"
(FORMAT NIL "format-r:--~20,10r--ende-*" 123)
EQUAL-OK: "format-r:--        63--ende-*"
(FORMAT NIL "format-r:--~20@r--ende-*" 123)
EQUAL-OK: "format-r:--+63--ende-*"
(FORMAT NIL "format-r:--~r--ende-*" 9)
EQUAL-OK: "format-r:--nine--ende-*"
(FORMAT NIL "format-r:--~:r--ende-*" 9)
EQUAL-OK: "format-r:--ninth--ende-*"
(FORMAT NIL "format-r:--~@r--ende-*" 9)
EQUAL-OK: "format-r:--IX--ende-*"
(FORMAT NIL "format-r:--~:@r--ende-*" 9)
EQUAL-OK: "format-r:--VIIII--ende-*"
(FORMAT NIL "format-p:--~d  object~p-*" 1 1)
EQUAL-OK: "format-p:--1  object-*"
(FORMAT NIL "format-p:--~d  object~p-*" 2 2)
EQUAL-OK: "format-p:--2  objects-*"
(FORMAT NIL "format-p:--~d  bab~@p-*" 1 1)
EQUAL-OK: "format-p:--1  baby-*"
(FORMAT NIL "format-p:--~d  bab~@p-*" 2 2)
EQUAL-OK: "format-p:--2  babies-*"
(FORMAT NIL "format-p:--~d  object~:p-*" 1)
EQUAL-OK: "format-p:--1  object-*"
(FORMAT NIL "format-p:--~d  object~:p-*" 2)
EQUAL-OK: "format-p:--2  objects-*"
(FORMAT NIL "format-p:--~d  bab~:@p-*" 1)
EQUAL-OK: "format-p:--1  baby-*"
(FORMAT NIL "format-&:--~%~&--1-newline-*")
EQUAL-OK: "format-&:--
--1-newline-*"
(FORMAT NIL "format-&:--~%~3&--3-newline-*")
EQUAL-OK: "format-&:--


--3-newline-*"
(FORMAT NIL "format-tilde:--~~--1-tilde-*")
EQUAL-OK: "format-tilde:--~--1-tilde-*"
(FORMAT NIL "format-tilde:--~3~--3-tilden-*")
EQUAL-OK: "format-tilde:--~~~--3-tilden-*"
(FORMAT NIL "format-|:--~|--1-ff-*")
EQUAL-OK: "format-|:----1-ff-*"
(FORMAT NIL "format-|:--~2|--2-ff-*")
EQUAL-OK: "format-|:----2-ff-*"
(FORMAT NIL "format-<nl>:~
	 	        same line no space despite 2*<tab> and sp-*")
EQUAL-OK: "format-<nl>:same line no space despite 2*<tab> and sp-*"
(FORMAT NIL "format-<nl>:~@
	                 new beginning of line despite <tab> + sp-*")
EQUAL-OK: "format-<nl>:
new beginning of line despite <tab> + sp-*"
(FORMAT NIL "format-<nl>:~:
	gleiche Zeile aber ein tab vor Anfang-*")
EQUAL-OK: "format-<nl>:	gleiche Zeile aber ein tab vor Anfang-*"
(FORMAT NIL "format-?:***~a***~?***~a***-*" 1 "+++~s+++~s+++" '(A B) 2)
EQUAL-OK: "format-?:***1***+++A+++B+++***2***-*"
(FORMAT NIL "format-?:***~a***~?***~a***-*" 1 "+++++++++++++" NIL 2)
EQUAL-OK: "format-?:***1***+++++++++++++***2***-*"
(FORMAT NIL "~(AAAAAAAA BBBBBB ccccccc dddddddd~)")
EQUAL-OK: "aaaaaaaa bbbbbb ccccccc dddddddd"
(FORMAT NIL "~:(AAAAAAAA BBBBBB ccccccc dddddddd~)")
EQUAL-OK: "Aaaaaaaa Bbbbbb Ccccccc Dddddddd"
(FORMAT NIL "~@(AAAAAAAA BBBBBB ccccccc dddddddd~)")
EQUAL-OK: "Aaaaaaaa bbbbbb ccccccc dddddddd"
(FORMAT NIL "~:@(AAAAAAAA BBBBBB ccccccc dddddddd~)")
EQUAL-OK: "AAAAAAAA BBBBBB CCCCCCC DDDDDDDD"
(FORMAT NIL "++~{-=~s=-~}++" '(1 2 3))
EQUAL-OK: "++-=1=--=2=--=3=-++"
(FORMAT NIL "++~2{-=~s=-~}++" '(1 2 3))
EQUAL-OK: "++-=1=--=2=-++"
(FORMAT NIL "++~@{-=~s=-~}++" 1 2 3)
EQUAL-OK: "++-=1=--=2=--=3=-++"
(FORMAT NIL "++~:{-=~s=~s=-~}++" '((1 2) (3 4 5) (6 7)))
EQUAL-OK: "++-=1=2=--=3=4=--=6=7=-++"
(FORMAT NIL "++~:@{-=~s=~s=-~}++" '(1 2) '(3 4 5) '(6 7))
EQUAL-OK: "++-=1=2=--=3=4=--=6=7=-++"
(FORMAT NIL "~{abc~:}")
[SIMPLE-ERROR]: There are not enough arguments left for this format directive.
Current point in control string:
  "~{abc~:}"
        |
EQL-OK: ERROR
(FORMAT NIL "~{~:}" "xyz")
[SIMPLE-ERROR]: There are not enough arguments left for this format directive.
Current point in control string:
  "~{~:}"
     |
EQL-OK: ERROR
(FORMAT NIL "~1{~:}" "-~s-" '(1 2) 3)
EQUAL-OK: "-1-"
(FORMAT NIL "123456789012345678901234567890
~10,4txx~10,4ty~10,4tzzz~10,4tende")
EQUAL-OK: "123456789012345678901234567890
          xx  y   zzz ende"
(FORMAT NIL "123456789012345678901234567890
~3,4@txx~3,4@ty~3,4@tzzz~3,4@tende")
EQUAL-OK: "123456789012345678901234567890
    xx      y   zzz     ende"
(FORMAT NIL "-~a-~a-~a-~a-" 1 2 3 4 5 6 7 8 9)
EQUAL-OK: "-1-2-3-4-"
(FORMAT NIL "-~a-~a-~*~a-~a-" 1 2 3 4 5 6 7 8 9)
EQUAL-OK: "-1-2-4-5-"
(FORMAT NIL "-~a-~a-~3*~a-~a-" 1 2 3 4 5 6 7 8 9)
EQUAL-OK: "-1-2-6-7-"
(FORMAT NIL "-~a-~a-~:*~a-~a-" 1 2 3 4 5 6 7 8 9)
EQUAL-OK: "-1-2-2-3-"
(FORMAT NIL "-~a-~a-~2:*~a-~a-" 1 2 3 4 5 6 7 8 9)
EQUAL-OK: "-1-2-1-2-"
(FORMAT NIL "-~a-~a-~@*~a-~a-" 1 2 3 4 5 6 7 8 9)
EQUAL-OK: "-1-2-1-2-"
(FORMAT NIL "-~a-~a-~6@*~a-~a-" 1 2 3 4 5 6 7 8 9)
EQUAL-OK: "-1-2-7-8-"
(FORMAT NIL "~[aa~;bb~;cc~]" 1)
EQUAL-OK: "bb"
(FORMAT NIL "~[aa~;bb~;cc~]" 10)
EQUAL-OK: ""
(FORMAT NIL "~2[aa~;bb~;cc~]" 10)
EQUAL-OK: "cc"
(FORMAT NIL "~@[aaa~]" NIL 10)
EQUAL-OK: ""
(FORMAT NIL "~@[aaa~]" 20 10)
EQUAL-OK: "aaa"
(FORMAT NIL "~@[aaa~d~]" NIL 10)
EQUAL-OK: ""
(FORMAT NIL "~@[aaa~d~]" 20 10)
EQUAL-OK: "aaa20"
(FORMAT NIL "~@[aaa~d~]bbb~d" NIL 10 30)
EQUAL-OK: "bbb10"
(FORMAT NIL "~@[aaa~d~]bbb~d" 20 10 30)
EQUAL-OK: "aaa20bbb10"
(FORMAT NIL "~:[-nil-~;-true-~d~]-ende~d" NIL 10 20)
EQUAL-OK: "-nil--ende10"
(FORMAT NIL "~:[-nil-~;-true-~d~]-ende~d" T 10 20)
EQUAL-OK: "-true-10-ende20"
(FORMAT NIL "Start test, newline:~%freshline:~&")
EQUAL-OK: "Start test, newline:
freshline:
"
(FORMAT NIL "decimal pad with period:~10,vd-*" #\. 12)
EQUAL-OK: "decimal pad with period:........12-*"
(FORMAT NIL "char normal:~c, as # would read:~@c, human read:~:c-*" #\Space #\Space #\Space)
EQUAL-OK: "char normal: , as # would read:#\\Space, human read:Space-*"
(FORMAT NIL "cardinal:~r, roman new:~@r, roman-old:~:@r~
                <same line I hope>~@
                new line but at beginning~:
   same line, but spaced out~@
		new line and over two tabs-*" 4 4 4)
EQUAL-OK: "cardinal:four, roman new:IV, roman-old:IIII<same line I hope>
new line but at beginning   same line, but spaced out
new line and over two tabs-*"
(SETQ N 3)
EQL-OK: 3
(FORMAT NIL "~D item~:P found." N)
EQUAL-OK: "3 items found."
(FORMAT NIL "~R dog~:[s are~; is~] here." N (= N 1))
EQUAL-OK: "three dogs are here."
(FORMAT NIL "~R dog~:*~[s are~; is~:;s are~] here." N)
EQUAL-OK: "three dogs are here."
(FORMAT NIL "Here ~[are~;is~:;are~] ~:*~R pupp~:@p." N)
EQUAL-OK: "Here are three puppies."
(SETQ N 1)
EQL-OK: 1
(FORMAT NIL "~D item~:P found." N)
EQUAL-OK: "1 item found."
(FORMAT NIL "~R dog~:[s are~; is~] here." N (= N 1))
EQUAL-OK: "one dog is here."
(FORMAT NIL "~R dog~:*~[s are~; is~:;s are~] here." N)
EQUAL-OK: "one dog is here."
(FORMAT NIL "Here ~[are~;is~:;are~] ~:*~R pupp~:@p." N)
EQUAL-OK: "Here is one puppy."
(SETQ N 0)
EQL-OK: 0
(FORMAT NIL "~D item~:P found." N)
EQUAL-OK: "0 items found."
(FORMAT NIL "~R dog~:[s are~; is~] here." N (= N 1))
EQUAL-OK: "zero dogs are here."
(FORMAT NIL "~R dog~:*~[s are~; is~:;s are~] here." N)
EQUAL-OK: "zero dogs are here."
(FORMAT NIL "Here ~[are~;is~:;are~] ~:*~R pupp~:@p." N)
EQUAL-OK: "Here are zero puppies."
(FORMAT NIL "~D tr~:@p/~D win~:P" 7 1)
EQUAL-OK: "7 tries/1 win"
(FORMAT NIL "~D tr~:@p/~D win~:P" 1 0)
EQUAL-OK: "1 try/0 wins"
(FORMAT NIL "~D tr~:@p/~D win~:P" 1 3)
EQUAL-OK: "1 try/3 wins"
(DEFUN TYPE-CLASH-ERROR (FN NARGS ARGNUM RIGHT-TYPE WRONG-TYPE) (FORMAT NIL "~&~S requires its ~:[~:R~;~*~] ~
           argument to be of type ~S,~%but it was called ~
    	       with an argument of type ~S.-*" FN (EQL NARGS 1) ARGNUM RIGHT-TYPE WRONG-TYPE))
EQL-OK: TYPE-CLASH-ERROR
(TYPE-CLASH-ERROR 'AREF NIL 2 'INTEGER 'VECTOR)
EQUAL-OK: "AREF requires its second argument to be of type INTEGER,
but it was called with an argument of type VECTOR.-*"
(TYPE-CLASH-ERROR 'CAR 1 1 'LIST 'SHORT-FLOAT)
EQUAL-OK: "CAR requires its  argument to be of type LIST,
but it was called with an argument of type SHORT-FLOAT.-*"
(FORMAT NIL "~? ~D" "<~A ~D>" '("Foo" 5) 7)
EQUAL-OK: "<Foo 5> 7"
(FORMAT NIL "~? ~D" "<~A ~D>" '(" Foo" 5 14) 7)
EQUAL-OK: "< Foo 5> 7"
(FORMAT NIL "~@? ~d" "<~A ~D>" "Foo" 5 7)
EQUAL-OK: "<Foo 5> 7"
(FORMAT NIL "~@? ~D" "<~A ~D>" "Foo" 5 14 7)
EQUAL-OK: "<Foo 5> 14"
(FORMAT NIL "~@R ~(~@R~)" 14 14)
EQUAL-OK: "XIV xiv"
(DEFUN F (N) (FORMAT NIL "~@(~R~) error~:P detected." N))
EQL-OK: F
(F 0)
EQUAL-OK: "Zero errors detected."
(F 1)
EQUAL-OK: "One error detected."
(F 23)
EQUAL-OK: "Twenty-three errors detected."
(SETQ *PRINT-LEVEL* NIL *PRINT-LENGTH* 5)
EQL-OK: 5
(FORMAT NIL "~@[ print level = ~D~]~@[ print length = ~D~]" *PRINT-LEVEL* *PRINT-LENGTH*)
EQUAL-OK: " print length = 5"
(SETQ *PRINT-LENGTH* NIL)
EQL-OK: NIL
(SETQ FOO "Items:~#[none~; ~s~; ~S and ~S~
          ~:;~@{~#[~; and~] ~S~^,~}~].")
EQUAL-OK: "Items:~#[none~; ~s~; ~S and ~S~
          ~:;~@{~#[~; and~] ~S~^,~}~]."
(FORMAT NIL FOO)
EQUAL-OK: "Items:none."
(FORMAT NIL FOO 'FOO)
EQUAL-OK: "Items: FOO."
(FORMAT NIL FOO 'FOO 'BAR)
EQUAL-OK: "Items: FOO and BAR."
(FORMAT NIL FOO 'FOO 'BAR 'BAZ)
EQUAL-OK: "Items: FOO, BAR, and BAZ."
(FORMAT NIL FOO 'FOO 'BAR 'BAZ 'QUUX)
EQUAL-OK: "Items: FOO, BAR, BAZ, and QUUX."
(FORMAT NIL "The winners are:~{ ~S~}." '(FRED HARRY JILL))
EQUAL-OK: "The winners are: FRED HARRY JILL."
(FORMAT NIL "Pairs:~{ <~S,~S>~}." '(A 1 B 2 C 3))
EQUAL-OK: "Pairs: <A,1> <B,2> <C,3>."
(FORMAT NIL "Pairs:~:{ <~S,~S>~}." '((A 1) (B 2) (C 3)))
EQUAL-OK: "Pairs: <A,1> <B,2> <C,3>."
(FORMAT NIL "Pairs:~@{ <~S,~S>~}." 'A 1 'B 2 'C 3)
EQUAL-OK: "Pairs: <A,1> <B,2> <C,3>."
(FORMAT NIL "Pairs:~:@{ <~S,~S>~}." '(A 1) '(B 2) '(C 3))
EQUAL-OK: "Pairs: <A,1> <B,2> <C,3>."
(SETQ DONESTR "done.~^ ~D warning~:P.~^ ~D error~:P.")
EQUAL-OK: "done.~^ ~D warning~:P.~^ ~D error~:P."
(FORMAT NIL DONESTR)
EQUAL-OK: "done."
(FORMAT NIL DONESTR 3)
EQUAL-OK: "done. 3 warnings."
(FORMAT NIL DONESTR 1 5)
EQUAL-OK: "done. 1 warning. 5 errors."
(SETQ TELLSTR "~@(~@[~R~]~^ ~A.~)")
EQUAL-OK: "~@(~@[~R~]~^ ~A.~)"
(FORMAT NIL TELLSTR 23)
EQUAL-OK: "Twenty-three"
(FORMAT NIL TELLSTR NIL "losers")
EQUAL-OK: " Losers."
(FORMAT NIL TELLSTR 23 "losers")
EQUAL-OK: "Twenty-three losers."
(FORMAT NIL "**~c**" #\Space)
EQUAL-OK: "** **"
(FORMAT NIL "**~:c**" #\Space)
EQUAL-OK: "**Space**"
(FORMAT NIL "**~:@c**" #\Space)
EQUAL-OK: "**Space**"
(FORMAT NIL "**~@c**" #\Space)
EQUAL-OK: "**#\\Space**"
(FORMAT NIL "**~c**" #\A)
EQUAL-OK: "**A**"
(FORMAT NIL "**~:c**" #\A)
EQUAL-OK: "**A**"
(FORMAT NIL "**~:@c**" #\A)
EQUAL-OK: "**A**"
(FORMAT NIL "**~@c**" #\A)
EQUAL-OK: "**#\\A**"
(FORMAT NIL "**~c**" (CODE-CHAR 27))
EQUAL-OK: "****"
(FORMAT NIL "**~:c**" (CODE-CHAR 27))
EQUAL-OK: "**Escape**"
(FORMAT NIL "**~:@c**" (CODE-CHAR 27))
EQUAL-OK: "**Escape**"
(FORMAT NIL "**~@c**" (CODE-CHAR 27))
EQUAL-OK: "**#\\Escape**"
(PROGN (FMAKUNBOUND 'FOO) (MAKUNBOUND 'LISTE) T)
EQL-OK: T
(STRING= (FORMAT NIL "~10I") (WITH-OUTPUT-TO-STRING (S) (FUNCALL (FORMATTER "~10I") S)))
EQL-OK: T
(FORMAT NIL "~&abc~.")
EQUAL-OK: "abc
"
(WITH-OUTPUT-TO-STRING (S) (FUNCALL (FORMATTER "~&abc~.") S))
EQUAL-OK: "abc
"
(FORMAT NIL "~&abc~.~%")
EQUAL-OK: "abc
"
(FORMAT NIL "~&abc~3.")
EQUAL-OK: "abc


"
(FORMAT NIL "~&abc~0.")
EQUAL-OK: "abc"
(WITH-OUTPUT-TO-STRING (STREAM) (FORMAT STREAM "~&abc~."))
EQUAL-OK: "abc
"
(WITH-OUTPUT-TO-STRING (STREAM) (FORMAT STREAM "~&abc~.") (FORMAT STREAM "def"))
EQUAL-OK: "abc
def"
(WITH-OUTPUT-TO-STRING (STREAM) (FORMAT STREAM "~&abc~.") (FORMAT STREAM "~%def"))
EQUAL-OK: "abc
def"
(WITH-OUTPUT-TO-STRING (STREAM) (FORMAT STREAM "~&abc~.") (FORMAT STREAM "~&def"))
EQUAL-OK: "abc
def"
(WITH-OUTPUT-TO-STRING (STREAM) (FORMAT STREAM "~&abc~.~.") (FORMAT STREAM "~&~&def"))
EQUAL-OK: "abc
def"
(WITH-OUTPUT-TO-STRING (STREAM) (FORMAT STREAM "~&abc~%~.") (FORMAT STREAM "~&def"))
EQUAL-OK: "abc

def"
(WITH-OUTPUT-TO-STRING (STREAM) (FORMAT STREAM "~&abc~.") (FORMAT STREAM "~&~%def"))
EQUAL-OK: "abc

def"
(WITH-OUTPUT-TO-STRING (STREAM) (FORMAT STREAM "~&abc~%~.") (FORMAT STREAM "~&~%def"))
EQUAL-OK: "abc


def"
(PROGN (DEFCLASS GRAY-STRING-OUTPUT-STREAM (FUNDAMENTAL-CHARACTER-OUTPUT-STREAM) ((ACCUMULATOR :TYPE STRING))) (DEFMETHOD INITIALIZE-INSTANCE :AFTER ((S GRAY-STRING-OUTPUT-STREAM) &REST ARGS) (SETF (SLOT-VALUE S 'ACCUMULATOR) (MAKE-ARRAY 0 :ELEMENT-TYPE 'CHARACTER :ADJUSTABLE T :FILL-POINTER 0))) (DEFMETHOD STREAM-WRITE-CHAR ((S GRAY-STRING-OUTPUT-STREAM) CH) (VECTOR-PUSH-EXTEND CH (SLOT-VALUE S 'ACCUMULATOR))) (DEFMETHOD STREAM-LINE-COLUMN ((S GRAY-STRING-OUTPUT-STREAM)) (LET* ((A (SLOT-VALUE S 'ACCUMULATOR)) (J (LENGTH A)) (I (1+ (OR (POSITION #\Newline A :FROM-END T) -1)))) (STRING-WIDTH A :START I :END J))) (LIST (LET ((STREAM (MAKE-INSTANCE 'GRAY-STRING-OUTPUT-STREAM))) (FORMAT STREAM "~&abc~.") (CLOSE STREAM) (COERCE (SLOT-VALUE STREAM 'ACCUMULATOR) 'SIMPLE-STRING)) (LET ((STREAM (MAKE-INSTANCE 'GRAY-STRING-OUTPUT-STREAM))) (FORMAT STREAM "~&abc~.") (FORMAT STREAM "def") (CLOSE STREAM) (COERCE (SLOT-VALUE STREAM 'ACCUMULATOR) 'SIMPLE-STRING)) (LET ((STREAM (MAKE-INSTANCE 'GRAY-STRING-OUTPUT-STREAM))) (FORMAT STREAM "~&abc~.") (FORMAT STREAM "~%def") (CLOSE STREAM) (COERCE (SLOT-VALUE STREAM 'ACCUMULATOR) 'SIMPLE-STRING)) (LET ((STREAM (MAKE-INSTANCE 'GRAY-STRING-OUTPUT-STREAM))) (FORMAT STREAM "~&abc~.") (FORMAT STREAM "~&def") (CLOSE STREAM) (COERCE (SLOT-VALUE STREAM 'ACCUMULATOR) 'SIMPLE-STRING)) (LET ((STREAM (MAKE-INSTANCE 'GRAY-STRING-OUTPUT-STREAM))) (FORMAT STREAM "~&abc~.~.") (FORMAT STREAM "~&~&def") (CLOSE STREAM) (COERCE (SLOT-VALUE STREAM 'ACCUMULATOR) 'SIMPLE-STRING)) (LET ((STREAM (MAKE-INSTANCE 'GRAY-STRING-OUTPUT-STREAM))) (FORMAT STREAM "~&abc~%~.") (FORMAT STREAM "~&def") (CLOSE STREAM) (COERCE (SLOT-VALUE STREAM 'ACCUMULATOR) 'SIMPLE-STRING)) (LET ((STREAM (MAKE-INSTANCE 'GRAY-STRING-OUTPUT-STREAM))) (FORMAT STREAM "~&abc~.") (FORMAT STREAM "~&~%def") (CLOSE STREAM) (COERCE (SLOT-VALUE STREAM 'ACCUMULATOR) 'SIMPLE-STRING)) (LET ((STREAM (MAKE-INSTANCE 'GRAY-STRING-OUTPUT-STREAM))) (FORMAT STREAM "~&abc~%~.") (FORMAT STREAM "~&~%def") (CLOSE STREAM) (COERCE (SLOT-VALUE STREAM 'ACCUMULATOR) 'SIMPLE-STRING))))
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION STREAM-WRITE-CHAR>
         is being modified, but has already been called.
EQUAL-OK: ("abc
" "abc
def" "abc
def" "abc
def" "abc
def" "abc

def" "abc

def" "abc


def")
(UNINTERN 'X)
EQL-OK: T
RUN-TEST: finished "format" (0 errors out of 276 tests)
RUN-TEST: started #<INPUT BUFFERED FILE-STREAM CHARACTER #P"genstream.tst" @1>
(USE-PACKAGE "CLOS")
EQL-OK: T
(PROGN (DEFCLASS GENERIC-STREAM-CONTROLLER-CLASS (GENERIC-STREAM-CONTROLLER) (SOURCE-STREAM DESTINATION-STREAM (FLAGS :INITFORM (COPY-TREE '((FINISH-OUTPUT) (FORCE-OUTPUT) (CLEAR-INPUT) (CLOSED)))))) (DEFCLASS GENERIC-STREAM-CONTROLLER-CLASS-2 (GENERIC-STREAM-CONTROLLER-CLASS) ((CAPITALIZE :INITARG CAPITALIZE :INITFORM NIL))) (DEFMETHOD CONVERT (CH (CONTROLLER GENERIC-STREAM-CONTROLLER-CLASS)) (IF (STANDARD-CHAR-P CH) CH #\_)) (DEFMETHOD CONVERT (CH (CONTROLLER GENERIC-STREAM-CONTROLLER-CLASS-2)) (CALL-NEXT-METHOD (IF (SLOT-VALUE CONTROLLER 'CAPITALIZE) (CHAR-UPCASE CH) CH) CONTROLLER)) (DEFMETHOD GENERIC-STREAM-READ-CHAR ((CONTROLLER GENERIC-STREAM-CONTROLLER-CLASS)) (WITH-SLOTS (SOURCE-STREAM) CONTROLLER (IF (LISTEN SOURCE-STREAM) (READ-CHAR SOURCE-STREAM)))) (DEFMETHOD GENERIC-STREAM-PEEK-CHAR ((CONTROLLER GENERIC-STREAM-CONTROLLER-CLASS)) (WITH-SLOTS (SOURCE-STREAM) CONTROLLER (IF (LISTEN SOURCE-STREAM) (PEEK-CHAR NIL SOURCE-STREAM) NIL))) (DEFMETHOD GENERIC-STREAM-READ-CHAR-WILL-HANG-P ((CONTROLLER GENERIC-STREAM-CONTROLLER-CLASS)) (IF (LISTEN (SLOT-VALUE CONTROLLER 'SOURCE-STREAM)) NIL T)) (DEFMETHOD GENERIC-STREAM-CLEAR-INPUT ((CONTROLLER GENERIC-STREAM-CONTROLLER-CLASS)) (RPLACD (ASSOC 'CLEAR-INPUT (SLOT-VALUE CONTROLLER 'FLAGS)) T)) (DEFMETHOD GENERIC-STREAM-READ-BYTE ((CONTROLLER GENERIC-STREAM-CONTROLLER-CLASS)) (CHAR-CODE (READ-CHAR (SLOT-VALUE CONTROLLER 'SOURCE-STREAM)))) (DEFMETHOD GENERIC-STREAM-WRITE-BYTE ((CONTROLLER GENERIC-STREAM-CONTROLLER-CLASS) BY) (WRITE-CHAR (CODE-CHAR BY) (SLOT-VALUE CONTROLLER 'DESTINATION-STREAM))) (DEFMETHOD GENERIC-STREAM-WRITE-CHAR ((CONTROLLER GENERIC-STREAM-CONTROLLER-CLASS) CH) (FORMAT (SLOT-VALUE CONTROLLER 'DESTINATION-STREAM) "~C" (CONVERT CH CONTROLLER))) (DEFMETHOD GENERIC-STREAM-WRITE-STRING ((CONTROLLER GENERIC-STREAM-CONTROLLER-CLASS) STR START LEN) (FORMAT (SLOT-VALUE CONTROLLER 'DESTINATION-STREAM) "~A" STR START LEN)) (DEFMETHOD GENERIC-STREAM-FINISH-OUTPUT ((CONTROLLER GENERIC-STREAM-CONTROLLER-CLASS)) (RPLACD (ASSOC 'FINISH-OUTPUT (SLOT-VALUE CONTROLLER 'FLAGS)) T)) (DEFMETHOD GENERIC-STREAM-FORCE-OUTPUT ((CONTROLLER GENERIC-STREAM-CONTROLLER-CLASS)) (RPLACD (ASSOC 'FORCE-OUTPUT (SLOT-VALUE CONTROLLER 'FLAGS)) T)) (DEFMETHOD GENERIC-STREAM-CLOSE ((CONTROLLER GENERIC-STREAM-CONTROLLER-CLASS)) (RPLACD (ASSOC 'CLOSED (SLOT-VALUE CONTROLLER 'FLAGS)) T)) (DEFUN MAKE-TEST-STREAM (SOURCE-STREAM DESTINATION-STREAM CONTROLLER) (LET ((GENSTREAM (MAKE-GENERIC-STREAM CONTROLLER))) (SETF (SLOT-VALUE CONTROLLER 'SOURCE-STREAM) SOURCE-STREAM) (SETF (SLOT-VALUE CONTROLLER 'DESTINATION-STREAM) DESTINATION-STREAM) GENSTREAM)) (SETQ STR1 "0123") (SETQ STR1S "4567") (SETQ STR2 "abc") (SETQ STR2C "def") (SETQ STR3 "xyz") (SETQ *STRING-INPUT-STREAM-1* (MAKE-STRING-INPUT-STREAM STR1)) (SETQ *STRING-OUTPUT-STREAM-1* (MAKE-STRING-OUTPUT-STREAM)) (SETQ *STRING-INPUT-STREAM-1S* (MAKE-STRING-INPUT-STREAM STR1S)) (SETQ *STRING-OUTPUT-STREAM-1S* (MAKE-STRING-OUTPUT-STREAM)) (SETQ *STRING-INPUT-STREAM-2* (MAKE-STRING-INPUT-STREAM STR2)) (SETQ *STRING-OUTPUT-STREAM-2* (MAKE-STRING-OUTPUT-STREAM)) (SETQ *STRING-INPUT-STREAM-2C* (MAKE-STRING-INPUT-STREAM STR2C)) (SETQ *STRING-OUTPUT-STREAM-2C* (MAKE-STRING-OUTPUT-STREAM)) (SETQ *STRING-INPUT-STREAM-3* (MAKE-STRING-INPUT-STREAM STR3)) (SETQ S1 (MAKE-TEST-STREAM *STRING-INPUT-STREAM-1* *STRING-OUTPUT-STREAM-1* (MAKE-INSTANCE 'GENERIC-STREAM-CONTROLLER-CLASS))) (SETQ S1S (MAKE-TEST-STREAM *STRING-INPUT-STREAM-1S* *STRING-OUTPUT-STREAM-1S* (MAKE-INSTANCE 'GENERIC-STREAM-CONTROLLER-CLASS))) (SETQ S2 (MAKE-TEST-STREAM *STRING-INPUT-STREAM-2* *STRING-OUTPUT-STREAM-2* (MAKE-INSTANCE 'GENERIC-STREAM-CONTROLLER-CLASS-2))) (SETQ S2C (MAKE-TEST-STREAM *STRING-INPUT-STREAM-2C* *STRING-OUTPUT-STREAM-2C* (MAKE-INSTANCE 'GENERIC-STREAM-CONTROLLER-CLASS-2 'CAPITALIZE T))) (SETQ S3 (MAKE-TEST-STREAM *STRING-INPUT-STREAM-3* NIL (MAKE-INSTANCE 'GENERIC-STREAM-CONTROLLER-CLASS))) (DEFUN COPY-STRING-CHAR (STR STREAM) (DOTIMES (I (LENGTH STR) T) (IF (AND (LISTEN STREAM) (CHAR-EQUAL (CHAR STR I) (READ-CHAR STREAM))) (WRITE-CHAR (CHAR STR I) STREAM) (RETURN NIL)))) (DEFUN COPY-STRING-BYTE (STR STREAM) (DOTIMES (I (LENGTH STR) T) (IF (AND (LISTEN STREAM) (EQ (CHAR-CODE (CHAR STR I)) (READ-BYTE STREAM))) (WRITE-BYTE (CHAR-CODE (CHAR STR I)) STREAM) (RETURN NIL)))) (DEFUN CHECK-OUTPUT-STRING (STR STREAM &KEY CAPITALIZE) (LET* ((STRVAL (IF CAPITALIZE (STRING-UPCASE STR) STR)) (CONTROLLER (GENERIC-STREAM-CONTROLLER STREAM)) (STREAM (SLOT-VALUE CONTROLLER 'DESTINATION-STREAM)) (OUTPUT-STRING (GET-OUTPUT-STREAM-STRING STREAM))) (FORMAT T "   ~S ~S ~S" STR STRVAL OUTPUT-STRING) (STRING= STRVAL OUTPUT-STRING))) (DEFUN CHECK-CHAR (STR STREAM &KEY CAPITALIZE) (LET* ((TEST (COPY-STRING-CHAR STR STREAM)) (TESTR (CHECK-OUTPUT-STRING STR STREAM :CAPITALIZE CAPITALIZE))) (FORMAT T "  char-check: ~S listen/read-char: ~S write chk: ~S~%" STR TEST TESTR) (AND TEST TESTR))) (DEFUN CHECK-BYTE (STR STREAM) (LET* ((TEST (COPY-STRING-BYTE STR STREAM)) (TESTR (CHECK-OUTPUT-STRING STR STREAM))) (FORMAT T " byte-check: ~S listen/read-byte: ~S write chk: ~S~%" STR TEST TESTR) (AND TEST TESTR))) (DEFUN CHECK-WRITE-STRING (STR STREAM) (WRITE-STRING STR STREAM) (LET ((TESTR (CHECK-OUTPUT-STRING STR STREAM))) (FORMAT T "  write-string-check: ~S write chk: ~S~%" STR TESTR) TESTR)) (DEFUN CHECK-FLAG (FLAG CONTROLLER) (LET ((STATUS (CDR (ASSOC FLAG (SLOT-VALUE CONTROLLER 'FLAGS))))) (FORMAT T "Checking ~S flag status: ~S~%" FLAG STATUS) STATUS)) (TERPRI) NIL)

EQL-OK: NIL
(PROGN (FORMAT T "Checking READ-CHAR & WRITE-CHAR~%") (CHECK-CHAR STR1 S1))
Checking READ-CHAR & WRITE-CHAR
   "0123" "0123" "0123"  char-check: "0123" listen/read-char: T write chk: T
EQL-OK: T
(PROGN (FORMAT T "Checking WRITE-STRING~%") (CHECK-WRITE-STRING STR1S S1S))
Checking WRITE-STRING
   "4567" "4567" "4567"  write-string-check: "4567" write chk: T
EQL-OK: T
(PROGN (FORMAT T "Checking READ-BYTE & WRITE-BYTE~%") (CHECK-BYTE STR2 S2))
Checking READ-BYTE & WRITE-BYTE
   "abc" "abc" "abc" byte-check: "abc" listen/read-byte: T write chk: T
EQL-OK: T
(PROGN (FORMAT T "Checking READ-CHAR & WRITE-CHAR with a subclass~%") (CHECK-CHAR STR2C S2C :CAPITALIZE T))
Checking READ-CHAR & WRITE-CHAR with a subclass
   "def" "DEF" "DEF"  char-check: "def" listen/read-char: T write chk: T
EQL-OK: T
(PROGN (SETQ CONTROLLER-INSTANCE (GENERIC-STREAM-CONTROLLER S1)) NIL)
EQL-OK: NIL
(PROGN (CLEAR-INPUT S1) (CHECK-FLAG 'CLEAR-INPUT CONTROLLER-INSTANCE))
Checking CLEAR-INPUT flag status: T
EQL-OK: T
(PROGN (FINISH-OUTPUT S1) (CHECK-FLAG 'FINISH-OUTPUT CONTROLLER-INSTANCE))
Checking FINISH-OUTPUT flag status: T
EQL-OK: T
(PROGN (FORCE-OUTPUT S1) (CHECK-FLAG 'FORCE-OUTPUT CONTROLLER-INSTANCE))
Checking FORCE-OUTPUT flag status: T
EQL-OK: T
(PROG2 (FORMAT T "Checking generic-stream-p (T): ") (PRINC (GENERIC-STREAM-P S1)) (TERPRI))
Checking generic-stream-p (T): T
EQL-OK: T
(PROG2 (FORMAT T "Checking generic-stream-p (NIL): ") (PRINC (GENERIC-STREAM-P *STRING-INPUT-STREAM-1*)) (TERPRI))
Checking generic-stream-p (NIL): NIL
EQL-OK: NIL
(PROG2 (FORMAT T "Checking READ-CHAR's eof-error-p, eof-value: ") (PRINC (AND (EQL (READ-CHAR S3) #\x) (EQL (READ-CHAR S3) #\y) (EQL (READ-CHAR S3) #\z) (EQL (READ-CHAR S3 NIL 2) 2))) (TERPRI))
Checking READ-CHAR's eof-error-p, eof-value: T
EQL-OK: T
(PROGN (FORMAT T "Checking CLOSE (NIL,T)~%") (CLOSE S1) (PRINC (AND (EQ (CHECK-FLAG 'CLOSED (GENERIC-STREAM-CONTROLLER S2)) NIL) (CHECK-FLAG 'CLOSED CONTROLLER-INSTANCE))))
Checking CLOSE (NIL,T)
Checking CLOSED flag status: NIL
Checking CLOSED flag status: T
T
EQL-OK: T
RUN-TEST: finished "genstream" (0 errors out of 14 tests)
RUN-TEST: started #<INPUT BUFFERED FILE-STREAM CHARACTER #P"hashlong.tst" @1>
(PROGN (SETF (SYMBOL-FUNCTION 'SETF-GETHASH) (SYMBOL-FUNCTION 'SYSTEM::PUTHASH)) T)
EQL-OK: T
(DEFUN SYMBOLE NIL (LET ((B 0) (HASH-TABLE (MAKE-HASH-TABLE :SIZE 20 :REHASH-THRESHOLD 0.75)) (LISTE (MAKE-LIST 50)) (LISTE2 (MAKE-LIST 50))) (RPLACD (LAST LISTE) LISTE) (RPLACD (LAST LISTE2) LISTE2) (DO-EXTERNAL-SYMBOLS (X (FIND-PACKAGE "LISP")) (COND ((CAR LISTE) (LET ((HVAL (GETHASH (CAR LISTE) HASH-TABLE)) (LVAL (CAR LISTE2))) (UNLESS (EQ HVAL LVAL) (PRINT "mist, hash-tabelle kaputt") (PRINT (CAR LISTE)) (PRINT HASH-TABLE) (PRINT (HASH-TABLE-COUNT HASH-TABLE)) (PRINT "hval:") (PRINT HVAL) (PRINT "lval:") (PRINT LVAL) (RETURN-FROM SYMBOLE 'ERROR)) (REMHASH (CAR LISTE) HASH-TABLE) (SETF-GETHASH X HASH-TABLE (SETQ B (+ 1 B))) (RPLACA LISTE X) (RPLACA LISTE2 B) (SETQ LISTE (CDR LISTE)) (SETQ LISTE2 (CDR LISTE2)))) (T (SETF-GETHASH X HASH-TABLE (SETQ B (+ 1 B))) (RPLACA LISTE X) (RPLACA LISTE2 B) (SETQ LISTE (CDR LISTE)) (SETQ LISTE2 (CDR LISTE2)))))))
EQL-OK: SYMBOLE
(SYMBOLE)
EQL-OK: NIL
(PROGN (SETF HT1 (MAKE-HASH-TABLE :TEST 'EQUAL) HT2 (MAKE-HASH-TABLE :TEST 'EQUAL) (GETHASH HT1 HT1) 1 (GETHASH HT2 HT1) 2 (GETHASH HT2 HT2) 2 (GETHASH HT1 HT2) 1 (GETHASH 10 HT1) 11 (GETHASH 11 HT1) 12 (GETHASH 12 HT1) 13 (GETHASH 12 HT2) 13 (GETHASH 11 HT2) 12 (GETHASH 10 HT2) 11) (EQUALP HT1 HT2))
EQL-OK: T
(PROGN (SETF (GETHASH 100 HT1) 101) (EQUALP HT1 HT2))
EQL-OK: NIL
(PROGN (REMHASH 100 HT1) (EQUALP HT1 HT2))
EQL-OK: T
(DEFUN HASH-TABLE-KEYS (HT) (LOOP :FOR KK :BEING :EACH :HASH-KEY :OF HT :COLLECT KK))
EQL-OK: HASH-TABLE-KEYS
(DEFUN CHECK-HASH-UNIQUE-VEC (HT SIZE) (LET ((VEC (MAKE-ARRAY SIZE :INITIAL-ELEMENT NIL)) (ERROR-COUNT 0)) (MAPHASH (LAMBDA (KEY VAL) (LET* ((POS (1- (CDR KEY))) (ELT (SVREF VEC POS))) (COND (ELT (PUSH VAL (CDR ELT)) (INCF ERROR-COUNT) (FORMAT T "<ERROR> key ~s occurs multiple times: ~S!~%" KEY (CDR ELT))) ((SETF (SVREF VEC POS) (LIST KEY VAL)))))) HT) ERROR-COUNT))
EQL-OK: CHECK-HASH-UNIQUE-VEC
(DEFUN DO-HASH-TEST (HT &KEY (SIZE 15000)) (CLRHASH HT) (LOOP :FOR COUNTVAL :FROM 1 :TO SIZE :FOR KEY = (CONS "HT" COUNTVAL) :DO (SETF (GETHASH KEY HT) T (GETHASH KEY HT) COUNTVAL)) (CHECK-HASH-UNIQUE-VEC HT SIZE))
EQL-OK: DO-HASH-TEST
(LOOP :FOR TEST :IN '(EQ EQL EQUAL EQUALP) :DO (FORMAT T "~& === ~10@S:" TEST) :SUM (LOOP :WITH HT = (MAKE-HASH-TABLE :TEST TEST :SIZE 1000) :FOR I :FROM 1 :TO 1 :DO (FORMAT T " <~d>" I) (FORCE-OUTPUT) :SUM (DO-HASH-TEST HT)) :DO (FORMAT T " done~%"))
 ===         EQ: <1> done
 ===        EQL: <1> done
 ===      EQUAL: <1> done
 ===     EQUALP: <1> done
EQL-OK: 0
(= (SXHASH '(1 2 3 4 5 6 7 8)) (SXHASH '(1 2 3 4 5 6 7 8 9)))
EQL-OK: NIL
(TYPEP (SXHASH '#1=(1 #1# . #1#)) 'FIXNUM)
EQL-OK: T
(= (SXHASH '(1 (2 . 3) 4 (5 . 6) (7 (8)))) (SXHASH '(1 (2 . 3) 4 (5 . 6) (8 (7)))))
EQL-OK: NIL
RUN-TEST: finished "hashlong" (0 errors out of 13 tests)
RUN-TEST: started #<INPUT BUFFERED FILE-STREAM CHARACTER #P"hashtable.tst" @1>
(BLOCK NIL (HANDLER-BIND ((WARNING #'(LAMBDA (W) (DECLARE (IGNORE W)) (RETURN 'WARNING)))) (LET ((X1 (MAKE-INSTANCE 'STANDARD-STABLEHASH)) (X2 (MAKE-INSTANCE 'STANDARD-STABLEHASH)) (HT (MAKE-HASH-TABLE :TEST 'STABLEHASH-EQ))) (SETF (GETHASH X1 HT) 11) (SETF (GETHASH X2 HT) 22) (SETF (GETHASH '1000 HT) 11999) (GC) (GETHASH X1 HT) (SETF (GETHASH '10000000000000000000 HT) 11999999999999) (GC) (GETHASH X1 HT))))
EQL-OK: 11
(BLOCK NIL (HANDLER-BIND ((WARNING #'(LAMBDA (W) (DECLARE (IGNORE W)) (RETURN 'WARNING)))) (LET ((X1 (MAKE-INSTANCE 'STANDARD-STABLEHASH)) (X2 (MAKE-INSTANCE 'STANDARD-STABLEHASH)) (HT (MAKE-HASH-TABLE :TEST 'STABLEHASH-EQ :WARN-IF-NEEDS-REHASH-AFTER-GC T))) (SETF (GETHASH X1 HT) 11) (SETF (GETHASH X2 HT) 22) (SETF (GETHASH '1000 HT) 11999) (GC) (GETHASH X1 HT) (SETF (GETHASH '10000000000000000000 HT) 11999999999999))))
EQL-OK: WARNING
(BLOCK NIL (HANDLER-BIND ((WARNING #'(LAMBDA (W) (DECLARE (IGNORE W)) (RETURN 'WARNING)))) (LET ((*WARN-ON-HASHTABLE-NEEDING-REHASH-AFTER-GC* T)) (LET ((X1 (MAKE-INSTANCE 'STANDARD-STABLEHASH)) (X2 (MAKE-INSTANCE 'STANDARD-STABLEHASH)) (HT (MAKE-HASH-TABLE :TEST 'STABLEHASH-EQ))) (SETF (GETHASH X1 HT) 11) (SETF (GETHASH X2 HT) 22) (SETF (GETHASH '1000 HT) 11999) (GC) (GETHASH X1 HT) (SETF (GETHASH '10000000000000000000 HT) 11999999999999) (GC) (GETHASH X1 HT)))))
EQL-OK: WARNING
(LET ((HT (MAKE-HASH-TABLE :TEST 'EQ))) (SETF (GETHASH HT HT) HT) (SETQ HT (READ-FROM-STRING (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING HT)))) (EQ (GETHASH HT HT) HT))
EQL-OK: T
(LET ((HT (MAKE-HASH-TABLE :TEST 'EQ)) X) (DEFSTRUCT HT-TEST-STRUCT A B C) (SETQ X (MAKE-HT-TEST-STRUCT :A 1 :B 2 :C HT)) (SETF (GETHASH HT HT) HT (GETHASH X HT) 12) (LET ((L (READ-FROM-STRING (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING (LIST X HT)))))) (SETQ HT (SECOND L) X (FIRST L))) (LIST (EQ (GETHASH HT HT) HT) (GETHASH X HT)))
EQUAL-OK: (T 12)
(LET ((HT (MAKE-HASH-TABLE :TEST 'FASTHASH-EQ))) (DEFSTRUCT HT-TEST-STRUCT A B C) (SETQ X (MAKE-HT-TEST-STRUCT :A 1 :B 2 :C HT)) (SETF (GETHASH HT HT) HT (GETHASH X HT) 12) (SETQ X (READ-FROM-STRING (WITH-STANDARD-IO-SYNTAX (WRITE-TO-STRING X))) HT (HT-TEST-STRUCT-C X)) (SETF (HT-TEST-STRUCT-A X) (! 123) (GETHASH (! 20) HT) (! 21) (GETHASH (! 21) HT) (! 22) (GETHASH (! 22) HT) (! 23)) (GC) (SETF (HT-TEST-STRUCT-B X) (! 124) (GETHASH (! 30) HT) (! 61) (GETHASH (! 41) HT) (! 72) (GETHASH (! 52) HT) (! 83)) (GC) (LIST (EQ (GETHASH HT HT) HT) (GETHASH X HT)))
EQUAL-OK: (T 12)
(SETF (FIND-CLASS 'HT-TEST-STRUCT) NIL)
EQL-OK: NIL
RUN-TEST: finished "hashtable" (0 errors out of 7 tests)
RUN-TEST: started #<INPUT BUFFERED FILE-STREAM CHARACTER #P"iofkts.tst" @1>
(PROGN (IN-PACKAGE "USER") T)
EQL-OK: T
(PROGN (SETQ BS (MAKE-BROADCAST-STREAM)) T)
EQL-OK: T
(PRINT 123 BS)
EQL-OK: 123
(SETQ STR1 "test 123456")
EQUAL-OK: "test 123456"
(PROGN (SETQ S1 (MAKE-TWO-WAY-STREAM (MAKE-STRING-INPUT-STREAM STR1) *STANDARD-OUTPUT*)) T)
EQL-OK: T
(READ S1)
EQL-OK: TEST
(READ-CHAR S1)
EQL-OK: #\1
(READ-CHAR S1)
EQL-OK: #\2
(UNREAD-CHAR #\2 S1)
EQL-OK: NIL
(READ-CHAR S1)
EQL-OK: #\2
(READ-CHAR S1)
EQL-OK: #\3
(READ-CHAR S1)
EQL-OK: #\4
(UNREAD-CHAR #\A S1)
[SIMPLE-STREAM-ERROR]: UNREAD-CHAR: the last character read from #1=#<IO TWO-WAY-STREAM #<INPUT STRING-INPUT-STREAM> #<OUTPUT BROADCAST-STREAM #<OUTPUT BUFFERED FILE-STREAM CHARACTER #P"/dev/fd/1"> #<OUTPUT STRING-OUTPUT-STREAM>>> was not #\A

EQL-OK: ERROR
(READ-CHAR S1)
EQL-OK: #\5
(READ-CHAR S1)
EQL-OK: #\6
(CLOSE S1)
EQL-OK: T
STR1
EQUAL-OK: "test 123456"
(MULTIPLE-VALUE-LIST (PARSE-INTEGER "abc"))
[SIMPLE-PARSE-ERROR]: PARSE-INTEGER: substring "abc" does not have integer syntax at position 0

EQL-OK: ERROR
(MULTIPLE-VALUE-LIST (PARSE-INTEGER "  abc  "))
[SIMPLE-PARSE-ERROR]: PARSE-INTEGER: substring "  abc  " does not have integer syntax at position 2

EQL-OK: ERROR
(MULTIPLE-VALUE-LIST (PARSE-INTEGER "123"))
EQUAL-OK: (123 3)
(MULTIPLE-VALUE-LIST (PARSE-INTEGER "  123  "))
EQUAL-OK: (123 7)
(MULTIPLE-VALUE-LIST (PARSE-INTEGER "123 t"))
[SIMPLE-PARSE-ERROR]: PARSE-INTEGER: substring "123 t" does not have integer syntax at position 4

EQL-OK: ERROR
(MULTIPLE-VALUE-LIST (PARSE-INTEGER "  123   t  "))
[SIMPLE-PARSE-ERROR]: PARSE-INTEGER: substring "  123   t  " does not have integer syntax at position 8

EQL-OK: ERROR
(MULTIPLE-VALUE-LIST (PARSE-INTEGER " ( 12 ) 43   t  "))
[SIMPLE-PARSE-ERROR]: PARSE-INTEGER: substring " ( 12 ) 43   t  " does not have integer syntax at position 1

EQL-OK: ERROR
(MULTIPLE-VALUE-LIST (PARSE-INTEGER "  abc  " :JUNK-ALLOWED T))
EQUAL-OK: (NIL 2)
(MULTIPLE-VALUE-LIST (PARSE-INTEGER "123" :JUNK-ALLOWED T))
EQUAL-OK: (123 3)
(MULTIPLE-VALUE-LIST (PARSE-INTEGER "  123  " :JUNK-ALLOWED T))
EQUAL-OK: (123 5)
(MULTIPLE-VALUE-LIST (PARSE-INTEGER "123 t" :JUNK-ALLOWED T))
EQUAL-OK: (123 3)
(MULTIPLE-VALUE-LIST (PARSE-INTEGER "  123   t  " :JUNK-ALLOWED T))
EQUAL-OK: (123 5)
(MULTIPLE-VALUE-LIST (PARSE-INTEGER " ( 12 ) 43   t  " :JUNK-ALLOWED T))
EQUAL-OK: (NIL 1)
(SETQ A "q w e 1 2 r 4 d : :;;;")
EQUAL-OK: "q w e 1 2 r 4 d : :;;;"
(SETQ B "1 2 3 4 5 6 7")
EQUAL-OK: "1 2 3 4 5 6 7"
(SETQ C "1.3 4.223")
EQUAL-OK: "1.3 4.223"
(SETQ D "q w e r t z")
EQUAL-OK: "q w e r t z"
(MULTIPLE-VALUE-LIST (PARSE-INTEGER A))
[SIMPLE-PARSE-ERROR]: PARSE-INTEGER: substring "q w e 1 2 r 4 d : :;;;" does not have integer syntax at position 0

EQL-OK: ERROR
(MULTIPLE-VALUE-LIST (PARSE-INTEGER B))
[SIMPLE-PARSE-ERROR]: PARSE-INTEGER: substring "1 2 3 4 5 6 7" does not have integer syntax at position 2

EQL-OK: ERROR
(MULTIPLE-VALUE-LIST (PARSE-INTEGER C))
[SIMPLE-PARSE-ERROR]: PARSE-INTEGER: substring "1.3 4.223" does not have integer syntax at position 1

EQL-OK: ERROR
(MULTIPLE-VALUE-LIST (PARSE-INTEGER D))
[SIMPLE-PARSE-ERROR]: PARSE-INTEGER: substring "q w e r t z" does not have integer syntax at position 0

EQL-OK: ERROR
(MULTIPLE-VALUE-LIST (PARSE-INTEGER A :START 4 :END 6))
[SIMPLE-PARSE-ERROR]: PARSE-INTEGER: substring "e " does not have integer syntax at position 0

EQL-OK: ERROR
(MULTIPLE-VALUE-LIST (PARSE-INTEGER B :START 2 :END 3))
EQUAL-OK: (2 3)
(MULTIPLE-VALUE-LIST (PARSE-INTEGER C :START 1))
[SIMPLE-PARSE-ERROR]: PARSE-INTEGER: substring ".3 4.223" does not have integer syntax at position 0

EQL-OK: ERROR
(MULTIPLE-VALUE-LIST (PARSE-INTEGER D :START 6))
[SIMPLE-PARSE-ERROR]: PARSE-INTEGER: substring "r t z" does not have integer syntax at position 0

EQL-OK: ERROR
(MULTIPLE-VALUE-LIST (PARSE-INTEGER A :END 4))
[SIMPLE-PARSE-ERROR]: PARSE-INTEGER: substring "q w " does not have integer syntax at position 0

EQL-OK: ERROR
(MULTIPLE-VALUE-LIST (PARSE-INTEGER B :END 3))
[SIMPLE-PARSE-ERROR]: PARSE-INTEGER: substring "1 2" does not have integer syntax at position 2

EQL-OK: ERROR
(MULTIPLE-VALUE-LIST (PARSE-INTEGER C :END 3))
[SIMPLE-PARSE-ERROR]: PARSE-INTEGER: substring "1.3" does not have integer syntax at position 1

EQL-OK: ERROR
(MULTIPLE-VALUE-LIST (PARSE-INTEGER D :END 1))
[SIMPLE-PARSE-ERROR]: PARSE-INTEGER: substring "q" does not have integer syntax at position 0

EQL-OK: ERROR
(MULTIPLE-VALUE-LIST (PARSE-INTEGER A :RADIX 1))
[SIMPLE-TYPE-ERROR]: PARSE-INTEGER: :RADIX argument 1 is not an integer between 2 and 36

EQL-OK: ERROR
(MULTIPLE-VALUE-LIST (PARSE-INTEGER B :RADIX 10))
[SIMPLE-PARSE-ERROR]: PARSE-INTEGER: substring "1 2 3 4 5 6 7" does not have integer syntax at position 2

EQL-OK: ERROR
(MULTIPLE-VALUE-LIST (PARSE-INTEGER C :RADIX 20))
[SIMPLE-PARSE-ERROR]: PARSE-INTEGER: substring "1.3 4.223" does not have integer syntax at position 1

EQL-OK: ERROR
(MULTIPLE-VALUE-LIST (PARSE-INTEGER D :RADIX 40))
[SIMPLE-TYPE-ERROR]: PARSE-INTEGER: :RADIX argument 40 is not an integer between 2 and 36

EQL-OK: ERROR
(MULTIPLE-VALUE-LIST (PARSE-INTEGER A :JUNK-ALLOWED T))
EQUAL-OK: (NIL 0)
(MULTIPLE-VALUE-LIST (PARSE-INTEGER B :JUNK-ALLOWED T))
EQUAL-OK: (1 1)
(MULTIPLE-VALUE-LIST (PARSE-INTEGER C :JUNK-ALLOWED T))
EQUAL-OK: (1 1)
(MULTIPLE-VALUE-LIST (PARSE-INTEGER D :JUNK-ALLOWED T))
EQUAL-OK: (NIL 0)
(LET* ((S "0123456789") (D (MAKE-ARRAY 5 :DISPLACED-TO S :DISPLACED-INDEX-OFFSET 3 :ELEMENT-TYPE (ARRAY-ELEMENT-TYPE S)))) (MULTIPLE-VALUE-LIST (PARSE-INTEGER D :START 2 :END 5)))
EQUAL-OK: (567 5)
(STREAM-ELEMENT-TYPE *TERMINAL-IO*)
EQL-OK: CHARACTER
(PROGN (SETQ A (MAKE-STRING-INPUT-STREAM "aaa bbb")) T)
EQL-OK: T
(READ A)
EQL-OK: AAA
(READ A)
EQL-OK: BBB
(PROGN (SETQ A (MAKE-STRING-OUTPUT-STREAM)) (SETQ B (MAKE-STRING-OUTPUT-STREAM)) (SETQ C (MAKE-BROADCAST-STREAM A B)) T)
EQL-OK: T
(PRINT "xxx" C)
EQUAL-OK: "xxx"
(CLEAR-OUTPUT C)
EQL-OK: NIL
(FINISH-OUTPUT C)
EQL-OK: NIL
(GET-OUTPUT-STREAM-STRING A)
EQUAL-OK: "
\"xxx\" "
(GET-OUTPUT-STREAM-STRING B)
EQUAL-OK: "
\"xxx\" "
(PRINT "yyy" C)
EQUAL-OK: "yyy"
(CLEAR-OUTPUT C)
EQL-OK: NIL
(FINISH-OUTPUT C)
EQL-OK: NIL
(PRINT "zzz" A)
EQUAL-OK: "zzz"
(CLEAR-OUTPUT A)
EQL-OK: NIL
(FINISH-OUTPUT A)
EQL-OK: NIL
(GET-OUTPUT-STREAM-STRING A)
EQUAL-OK: "
\"yyy\" 
\"zzz\" "
(GET-OUTPUT-STREAM-STRING B)
EQUAL-OK: "
\"yyy\" "
(PROGN (SETQ A (MAKE-STRING-INPUT-STREAM "123")) T)
EQL-OK: T
(LISTEN A)
EQL-OK: T
(READ A)
EQL-OK: 123
(LISTEN A)
EQL-OK: NIL
*PRINT-CASE*
EQL-OK: :UPCASE
*PRINT-GENSYM*
EQL-OK: T
*PRINT-LEVEL*
EQL-OK: NIL
*PRINT-LENGTH*
EQL-OK: NIL
*PRINT-ARRAY*
EQL-OK: T
*PRINT-ESCAPE*
EQL-OK: T
*PRINT-PRETTY*
EQL-OK: NIL
*PRINT-CIRCLE*
EQL-OK: T
*PRINT-BASE*
EQL-OK: 10
*PRINT-RADIX*
EQL-OK: NIL
(SETQ STRING1 "Das ist ein Test mit Print ")
EQUAL-OK: "Das ist ein Test mit Print "
(PRIN1-TO-STRING STRING1)
EQUAL-OK: "\"Das ist ein Test mit Print \""
(PRINC-TO-STRING STRING1)
EQUAL-OK: "Das ist ein Test mit Print "
(PROGN (SETQ A (MAKE-STRING-INPUT-STREAM "123")) T)
EQL-OK: T
(READ-CHAR-NO-HANG A)
EQL-OK: #\1
(READ A)
EQL-OK: 23
(READ-CHAR-NO-HANG A)
[SIMPLE-END-OF-FILE]: READ: input stream #1=#<INPUT STRING-INPUT-STREAM> has reached its end

EQL-OK: ERROR
(READ-CHAR-NO-HANG A NIL "EOF")
EQUAL-OK: "EOF"
(PROGN (SETQ A (MAKE-STRING-INPUT-STREAM "1   2   ;32  abA")) (SETQ B (MAKE-STRING-INPUT-STREAM " 1 2 3 A x y z 
a b c  ")) T)
EQL-OK: T
(READ-DELIMITED-LIST #\A B)
EQUAL-OK: (1 2 3)
(SETQ C (MULTIPLE-VALUE-LIST (READ-LINE B)))
EQUAL-OK: (" x y z " NIL)
(LENGTH C)
EQL-OK: 2
(MULTIPLE-VALUE-LIST (READ-LINE B))
EQUAL-OK: ("a b c  " T)
(MULTIPLE-VALUE-LIST (READ-LINE B))
[SIMPLE-END-OF-FILE]: READ: input stream #1=#<INPUT STRING-INPUT-STREAM> has reached its end

EQL-OK: ERROR
(MULTIPLE-VALUE-LIST (READ-LINE B NIL "EOF"))
EQUAL-OK: ("EOF" T)
(PEEK-CHAR NIL A)
EQL-OK: #\1
(READ-CHAR A)
EQL-OK: #\1
(PEEK-CHAR T A)
EQL-OK: #\2
(READ-CHAR A)
EQL-OK: #\2
(PEEK-CHAR T A)
EQL-OK: #\;
(READ-CHAR A)
EQL-OK: #\;
(PEEK-CHAR #\A A)
EQL-OK: #\A
(READ-CHAR A)
EQL-OK: #\A
(PEEK-CHAR NIL A)
[SIMPLE-END-OF-FILE]: READ: input stream #1=#<INPUT STRING-INPUT-STREAM> has reached its end

EQL-OK: ERROR
(PEEK-CHAR NIL A NIL "EOF")
EQUAL-OK: "EOF"
(WITH-OUTPUT-TO-STRING (OUT) (PEEK-CHAR #\] (MAKE-ECHO-STREAM (MAKE-STRING-INPUT-STREAM " ab cd e df s]") OUT)))
EQUAL-OK: " ab cd e df s"
(WITH-OUTPUT-TO-STRING (OUT) (PEEK-CHAR T (MAKE-ECHO-STREAM (MAKE-STRING-INPUT-STREAM " ab cd e df s]") OUT)))
EQUAL-OK: " "
(WITH-OUTPUT-TO-STRING (OUT) (PEEK-CHAR NIL (MAKE-ECHO-STREAM (MAKE-STRING-INPUT-STREAM " ab cd e df s]") OUT)))
EQUAL-OK: ""
(SETQ A '((BERLIN (DRESDEN FRANKFURT BONN MUENCHEN)) (MUELLER (KARL LUISE DIETER ALDO))))
EQUAL-OK: ((BERLIN (DRESDEN FRANKFURT BONN MUENCHEN)) (MUELLER (KARL LUISE DIETER ALDO)))
(PROGN (SETQ AA (MAKE-STRING-INPUT-STREAM "berlin d mueller :r")) T)
EQL-OK: T
(DEFUN ASK (&OPTIONAL (RES NIL)) "  (terpri)(terpri)(terpri)
  (print '(*** Eingabe des  Keywortes ***))
  (print '(- mit :r reset))
  (terpri)" (SETQ X (READ AA)) "  (print x)" (COND ((EQUAL X ':R) (CONS "--- reset ---" RES)) (T (CONS (CADR (ASSOC X A)) (ASK RES)))))
EQL-OK: ASK
(ASK)
EQUAL-OK: ((DRESDEN FRANKFURT BONN MUENCHEN) NIL (KARL LUISE DIETER ALDO) "--- reset ---")
(SETQ STRING1 "Das ist ein Teststring")
EQUAL-OK: "Das ist ein Teststring"
(SETQ STRING2 "Auch das 1 2 3 ist ein Teststring")
EQUAL-OK: "Auch das 1 2 3 ist ein Teststring"
(MULTIPLE-VALUE-LIST (READ-FROM-STRING STRING1))
EQUAL-OK: (DAS 4)
(MULTIPLE-VALUE-LIST (READ-FROM-STRING STRING2))
EQUAL-OK: (AUCH 5)
(MULTIPLE-VALUE-LIST (READ-FROM-STRING STRING1 T NIL :START 2))
EQUAL-OK: (S 4)
(MULTIPLE-VALUE-LIST (READ-FROM-STRING STRING1 T NIL :START 2 :PRESERVE-WHITESPACE T))
EQUAL-OK: (S 3)
(MULTIPLE-VALUE-LIST (READ-FROM-STRING STRING2 T NIL :START 5))
EQUAL-OK: (DAS 9)
(MULTIPLE-VALUE-LIST (READ-FROM-STRING STRING2 T NIL :START 5 :END 6))
EQUAL-OK: (D 6)
(MULTIPLE-VALUE-LIST (READ-FROM-STRING STRING1 T NIL :START 4 :END 3))
[SIMPLE-ERROR]: MAKE-STRING-INPUT-STREAM: :START-index 4 must not be greater than :END-index 3

EQL-OK: ERROR
(MULTIPLE-VALUE-LIST (READ-FROM-STRING STRING1 T NIL :END 0))
[SIMPLE-END-OF-FILE]: READ: input stream #1=#<INPUT STRING-INPUT-STREAM> has reached its end

EQL-OK: ERROR
(MULTIPLE-VALUE-LIST (READ-FROM-STRING STRING1 T NIL :START -2 :END 0))
[SIMPLE-TYPE-ERROR]: MAKE-STRING-INPUT-STREAM: :START-index should not be negative: -2

EQL-OK: ERROR
(MULTIPLE-VALUE-LIST (READ-FROM-STRING STRING1 T NIL :END 2))
EQUAL-OK: (DA 2)
*READ-SUPPRESS*
EQL-OK: NIL
(STANDARD-CHAR-P 'A)
[SIMPLE-TYPE-ERROR]: STANDARD-CHAR-P: argument A is not a character

EQL-OK: ERROR
(STANDARD-CHAR-P '#\Backspace)
EQL-OK: NIL
(STANDARD-CHAR-P '#\Tab)
EQL-OK: NIL
(STANDARD-CHAR-P '#\Newline)
EQL-OK: T
(STANDARD-CHAR-P '#\Page)
EQL-OK: NIL
(STANDARD-CHAR-P '#\Return)
EQL-OK: NIL
(STRING-CHAR-P 'A)
[SIMPLE-TYPE-ERROR]: STRING-CHAR-P: argument A is not a character

EQL-OK: ERROR
(STRING-CHAR-P '#\Space)
EQL-OK: T
(STRING-CHAR-P '#\Newline)
EQL-OK: T
(STRING-CHAR-P '#\Backspace)
EQL-OK: T
(STRING-CHAR-P '#\a)
EQL-OK: T
(STRING-CHAR-P '#\8)
EQL-OK: T
(STRING-CHAR-P '#\-)
EQL-OK: T
(STRING-CHAR-P '#\n)
EQL-OK: T
(STRING-CHAR-P '#\()
EQL-OK: T
(STRINGP "das ist einer der Teststrings")
EQL-OK: T
(STRINGP '(DAS IST NATUERLICH FALSCH))
EQL-OK: NIL
(STRINGP "das ist die eine Haelfte" "und das die andere")
[SIMPLE-SOURCE-PROGRAM-ERROR]: EVAL: too many arguments given to STRINGP: #1=(STRINGP "das ist die eine Haelfte" "und das die andere")

EQL-OK: ERROR
(SETQ J 0)
EQL-OK: 0
(WITH-INPUT-FROM-STRING (S "animal crackers" :START 6) (READ S))
EQL-OK: CRACKERS
(WITH-INPUT-FROM-STRING (S "animal crackers" :INDEX J :START 6) (READ S))
EQL-OK: CRACKERS
J
EQL-OK: 15
(WITH-INPUT-FROM-STRING (S "animal crackers" :INDEX J :START 7) (READ S))
EQL-OK: CRACKERS
J
EQL-OK: 15
(WITH-INPUT-FROM-STRING (S "animal crackers" :INDEX J :START 2) (READ S))
EQL-OK: IMAL
J
EQL-OK: 7
(WITH-INPUT-FROM-STRING (S "animal crackers" :INDEX J :START 0 :END 6) (READ S))
EQL-OK: ANIMAL
J
EQL-OK: 6
(WITH-INPUT-FROM-STRING (S "animal crackers" :INDEX J :START 0 :END 12) (READ S))
EQL-OK: ANIMAL
J
EQL-OK: 7
(WITH-INPUT-FROM-STRING (S "animal crackers" :INDEX J :START -1) (READ S))
[SIMPLE-TYPE-ERROR]: MAKE-STRING-INPUT-STREAM: :START-index should not be negative: -1

EQL-OK: ERROR
J
EQL-OK: 7
(WITH-INPUT-FROM-STRING (S "animal crackers" :INDEX J :START 6 :END 20) (READ S))
[SIMPLE-TYPE-ERROR]: MAKE-STRING-INPUT-STREAM: :END-index 20 should not be greater than the length of the string

EQL-OK: ERROR
J
EQL-OK: 7
(SETQ A "Das ist wieder einmal einer der SUUPERTESTstrings.")
EQUAL-OK: "Das ist wieder einmal einer der SUUPERTESTstrings."
(PROGN (SETQ B (MAKE-STRING-OUTPUT-STREAM)) T)
EQL-OK: T
(WRITE-STRING A B)
EQUAL-OK: "Das ist wieder einmal einer der SUUPERTESTstrings."
(WRITE-STRING A B :START 10)
EQUAL-OK: "Das ist wieder einmal einer der SUUPERTESTstrings."
(WRITE-STRING A B :START 80)
[SIMPLE-TYPE-ERROR]: WRITE-STRING: :START-index 80 should not be greater than the length of the string

EQL-OK: ERROR
(WRITE-STRING A B :END 5)
EQUAL-OK: "Das ist wieder einmal einer der SUUPERTESTstrings."
(WRITE-STRING A B :END -2)
[SIMPLE-TYPE-ERROR]: WRITE-STRING: :END-index should not be negative: -2

EQL-OK: ERROR
(WRITE-STRING A B :END 100)
[SIMPLE-TYPE-ERROR]: WRITE-STRING: :END-index 100 should not be greater than the length of the string

EQL-OK: ERROR
(WRITE-STRING A B :START 5 :END 20)
EQUAL-OK: "Das ist wieder einmal einer der SUUPERTESTstrings."
(WRITE-STRING A B :START 10 :END 5)
[SIMPLE-ERROR]: WRITE-STRING: :START-index 10 must not be greater than :END-index 5

EQL-OK: ERROR
(GET-OUTPUT-STREAM-STRING B)
EQUAL-OK: "Das ist wieder einmal einer der SUUPERTESTstrings.eder einmal einer der SUUPERTESTstrings.Das ist wieder einma"
(WRITE-STRING A B)
EQUAL-OK: "Das ist wieder einmal einer der SUUPERTESTstrings."
(LENGTH (GET-OUTPUT-STREAM-STRING B))
EQL-OK: 50
(WRITE-LINE A B)
EQUAL-OK: "Das ist wieder einmal einer der SUUPERTESTstrings."
(LENGTH (GET-OUTPUT-STREAM-STRING B))
EQL-OK: 51
(WITH-OUTPUT-TO-STRING (S) (PRINT 'XXX S))
EQUAL-OK: "
XXX "
(SETQ A (MAKE-ARRAY 10 :ELEMENT-TYPE 'STRING-CHAR :FILL-POINTER 0))
EQUAL-OK: ""
(WITH-OUTPUT-TO-STRING (S A) (PRINC 123 S))
EQL-OK: 123
A
EQUAL-OK: "123"
(WITH-OUTPUT-TO-STRING (S A) (PRINC 4567 S))
EQL-OK: 4567
A
EQUAL-OK: "1234567"
(WITH-OUTPUT-TO-STRING (S A) (PRINC 890 S))
EQL-OK: 890
A
EQUAL-OK: "1234567890"
(IF (ADJUSTABLE-ARRAY-P A) (ERROR "this test assumes that A is not actually adjustable") (WITH-OUTPUT-TO-STRING (S A) (PRINC 'A S)))
[SIMPLE-ERROR]: VECTOR-PUSH-EXTEND works only on adjustable arrays, not on "1234567890"

EQL-OK: ERROR
A
EQUAL-OK: "1234567890"
(SETQ A (MAKE-ARRAY 10 :ELEMENT-TYPE 'STRING-CHAR :FILL-POINTER 0 :ADJUSTABLE T))
EQUAL-OK: ""
(WITH-OUTPUT-TO-STRING (S A) (PRINC 123 S))
EQL-OK: 123
A
EQUAL-OK: "123"
(WITH-OUTPUT-TO-STRING (S A) (PRINC 4567 S))
EQL-OK: 4567
A
EQUAL-OK: "1234567"
(WITH-OUTPUT-TO-STRING (S A) (PRINC 890 S))
EQL-OK: 890
A
EQUAL-OK: "1234567890"
(WITH-OUTPUT-TO-STRING (S A) (PRINC 'ABCDE S))
EQL-OK: ABCDE
A
EQUAL-OK: "1234567890ABCDE"
(WITH-OUTPUT-TO-STRING (S A) (PRINC 'FGHI S))
EQL-OK: FGHI
A
EQUAL-OK: "1234567890ABCDEFGHI"
(PROGN (MAKUNBOUND 'BS) (MAKUNBOUND 'A) (MAKUNBOUND 'B) (MAKUNBOUND 'C) (MAKUNBOUND 'D) (MAKUNBOUND 'AA) (MAKUNBOUND 'STRING1) (MAKUNBOUND 'STRING2) (MAKUNBOUND 'X) (MAKUNBOUND 'J) (MAKUNBOUND 'S1) (MAKUNBOUND 'STR1) T)
EQL-OK: T
(LET (RESULT) (LIST (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (SETQ RESULT (MULTIPLE-VALUE-LIST (WRITE-STRING (MAKE-ARRAY 0 :ELEMENT-TYPE NIL))))) RESULT))
EQUAL-OK: ("" (""))
(LET ((ST (STRING (CODE-CHAR 27)))) (STRING= ST (SYMBOL-NAME (READ-FROM-STRING (PRIN1-TO-STRING (MAKE-SYMBOL ST))))))
EQL-OK: T
(WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (LET ((RESULT 'NIL) (TABWIDTH 12)) (DOLIST (SYMBOL '(|x| |FoObAr| |fOo|)) (LET ((TAB -1)) (FORMAT T "~&") (DOLIST (ESCAPE '(T NIL)) (DOLIST (CASE '(:UPCASE :DOWNCASE :CAPITALIZE)) (FORMAT T "~VT" (* (INCF TAB) TABWIDTH)) (WRITE SYMBOL :ESCAPE ESCAPE :CASE CASE)))))))
EQUAL-OK: " |x|        |x|         |x|         x           x           x
 |FoObAr|   |FoObAr|    |FoObAr|    FoObAr      foobar      Foobar
 |fOo|      |fOo|       |fOo|       fOo         foo         foo"
(LET ((*READ-SUPPRESS* T)) (MAPCAR #'READ-FROM-STRING '("#(foo bar baz)" "#P(:type :lisp)" "#c1.2" "#.(PRINT 'FOO)" "#3AHELLO" "#S(INTEGER)" "#*ABC" "#\\GARBAGE" "#RALPHA" "#3R444")))
EQUAL-OK: (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
(LET ((*READ-SUPPRESS* T)) (MAPCAR #'READ-FROM-STRING '("#(foo bar baz)" "#P(:type :lisp)" "#c1.2")))
EQUAL-OK: (NIL NIL NIL)
(DEFUN MY-PPRINT-REVERSE (OUT LIST) (WRITE-CHAR #\( OUT) (WHEN (SETQ LIST (REVERSE LIST)) (LOOP (WRITE (POP LIST) :STREAM OUT) (WHEN (ENDP LIST) (RETURN)) (WRITE-CHAR #\Space OUT))) (WRITE-CHAR #\) OUT))
EQL-OK: MY-PPRINT-REVERSE
(LET ((*PRINT-PPRINT-DISPATCH* (COPY-PPRINT-DISPATCH NIL))) (SET-PPRINT-DISPATCH '(CONS (MEMBER FOO)) 'MY-PPRINT-REVERSE 0) (WRITE-TO-STRING '(FOO BAR :BOO 1) :PRETTY T :ESCAPE T))
EQUAL-OK: "(1 :BOO BAR FOO)"
(DEFUN MY-PPRINT-LOGICAL (OUT LIST) (PPRINT-LOGICAL-BLOCK (OUT LIST :PREFIX "(" :SUFFIX ")") (WHEN LIST (LOOP (WRITE-CHAR #\? OUT) (WRITE (PPRINT-POP) :STREAM OUT) (WRITE-CHAR #\? OUT) (PPRINT-EXIT-IF-LIST-EXHAUSTED) (WRITE-CHAR #\Space OUT)))))
EQL-OK: MY-PPRINT-LOGICAL
(LET ((*PRINT-PPRINT-DISPATCH* (COPY-PPRINT-DISPATCH NIL))) (SET-PPRINT-DISPATCH '(CONS (MEMBER BAR)) 'MY-PPRINT-LOGICAL 0) (WRITE-TO-STRING '(BAR FOO :BOO 1) :PRETTY T :ESCAPE T))
EQUAL-OK: "(?BAR? ?FOO? ?:BOO? ?1?)"
(WITH-OUTPUT-TO-STRING (S) (PRINT-OBJECT 42 S))
EQUAL-OK: "42"
(STRING= (WITH-OUTPUT-TO-STRING (S) (LET ((*PRINT-PRETTY* T)) (WRITE 42 :STREAM S))) (WITH-OUTPUT-TO-STRING (S) (FUNCALL (PPRINT-DISPATCH 42) S 42)))
EQL-OK: T
(LET ((*PRINT-PPRINT-DISPATCH* (COPY-PPRINT-DISPATCH NIL)) (*PRINT-PRETTY* T)) (FLET ((MY-SYMBOL-PPRINT (STREAM OBJ) (LET ((*PRINT-PRETTY* NIL)) (PRINC "++" STREAM) (PRINC OBJ STREAM) (PRINC "++" STREAM)))) (SET-PPRINT-DISPATCH 'SYMBOL #'MY-SYMBOL-PPRINT) (PRINC-TO-STRING '(A (B (C (D) E) F) G))))
EQUAL-OK: "(++A++ (++B++ (++C++ (++D++) ++E++) ++F++) ++G++)"
(LET ((*PRINT-PPRINT-DISPATCH* (COPY-PPRINT-DISPATCH NIL)) (*PRINT-PRETTY* T) (L '(:BRACKET 1 2 (:BRACKET 3 4)))) (FLET ((BRACKET-LIST-PRINTER (STREAM BLIST) (FORMAT STREAM "[~{~S~^ ~}]" (REST BLIST)))) (SET-PPRINT-DISPATCH '(CONS (EQL :BRACKET)) #'BRACKET-LIST-PRINTER) (LIST (PRINC-TO-STRING L) (WITH-OUTPUT-TO-STRING (S) (PPRINT-LOGICAL-BLOCK (S NIL) (PRIN1 L S))))))
EQUAL-OK: ("[1 2 [3 4]]" "[1 2 [3 4]]")
(PROGN (DEFCLASS C1 NIL ((A :INITARG A) (B :INITARG B) (C :INITARG C))) (DEFCLASS C2 (C1) ((AA :INITARG AA) (BB :INITARG BB) (CC :INITARG CC))) (DEFMETHOD PRINT-OBJECT ((OBJ C2) (OUT STREAM)) (PPRINT-LOGICAL-BLOCK (OUT NIL :PREFIX "#[" :SUFFIX "]") (LET ((CL (CLASS-OF OBJ))) (WRITE (CLASS-NAME CL) :STREAM OUT) (LOOP :FOR SLOTDEF :IN (CLASS-SLOTS CL) :FOR SLOT = (SLOT-DEFINITION-NAME SLOTDEF) :WHEN (AND SLOT (SLOT-BOUNDP OBJ SLOT)) :DO (WRITE-CHAR #\Space OUT) (PPRINT-NEWLINE :FILL OUT) (WRITE SLOT :STREAM OUT) (WRITE-CHAR #\Space OUT) (PPRINT-NEWLINE :FILL OUT) (WRITE (SLOT-VALUE OBJ SLOT) :STREAM OUT))))) T)
WARNING: DEFCLASS: Class C1 (or one of its ancestors) is being redefined,
         instances are obsolete

WARNING: DEFCLASS: Class C2 (or one of its ancestors) is being redefined,
         instances are obsolete
EQL-OK: T
(LET ((*PRINT-LENGTH* 123)) (DEFMETHOD PRINT-OBJECT ((OBJ C1) (OUT STREAM)) (SETQ *PRINT-LENGTH* 321) (CALL-NEXT-METHOD)) (WRITE-TO-STRING (MAKE-INSTANCE 'C1) :LENGTH 222) *PRINT-LENGTH*)
EQL-OK: 123
(WRITE-TO-STRING (MAKE-INSTANCE 'C2 'B 123 'CC 42) :PRETTY T)
EQUAL-OK: "#[C2 B 123 CC 42]"
(LET ((*PRINT-READABLY* T)) (WITH-OUTPUT-TO-STRING (OUT) (PPRINT-LINEAR OUT (LIST 'A 'B 'C))))
EQUAL-OK: "(|COMMON-LISP-USER|::|A| |COMMON-LISP-USER|::|B| |COMMON-LISP-USER|::|C|)"
(EQUALP (READ-FROM-STRING "#2A((\"first\" #1=\"second\" \"third\")
              #2=(\"null\" #1# \"zero\") #2#)") (READ-FROM-STRING "#A(t (3 3) ((\"first\" #1=\"second\" \"third\")
             #2=(\"null\" #1# \"zero\") #2#))"))
EQL-OK: T
(WITH-INPUT-FROM-STRING (S "'a #'b c d") (LIST (READ-PRESERVING-WHITESPACE S) (READ-CHAR S) (READ-PRESERVING-WHITESPACE S) (READ-CHAR S) (READ-PRESERVING-WHITESPACE S) (READ-CHAR S) (READ-CHAR S)))
EQUAL-OK: ('A #\Space #'B #\Space C #\Space #\d)
(LET ((*PPRINT-FIRST-NEWLINE* NIL)) (FORMAT NIL "~{~a~}" (LIST "string1" "string2" (CONCATENATE 'STRING "string3" (STRING #\Newline)))))
EQUAL-OK: "string1string2string3
"
(PRINC-TO-STRING (FDEFINITION 'DEFUN))
EQUAL-OK: "#<MACRO #<COMPILED-FUNCTION DEFUN> (FUNCTION-NAME LAMBDA-LIST &BODY FORMS)>"
(FLET ((FOO-PRINTER (STREAM FOO) (LET ((*PRINT-PRETTY* NIL)) (PRINC "FOO:" STREAM) (PRIN1 (CDR FOO) STREAM)))) (WITH-STANDARD-IO-SYNTAX (SET-PPRINT-DISPATCH '(CONS (MEMBER FOO)) #'FOO-PRINTER) (WRITE-TO-STRING '(FOO 123) :PRETTY T)))
EQUAL-OK: "FOO:(123.)"
(EQ *PRINT-PPRINT-DISPATCH* (COPY-PPRINT-DISPATCH))
EQL-OK: T
(WITH-OUTPUT-TO-STRING (S) (PRINC "xxx" S) (TERPRI S) (PRINC #\Tab S) (FRESH-LINE S) (PRINC "yyy" S))
EQUAL-OK: "xxx
	
yyy"
(FLET ((KILL (S) (MAKUNBOUND S) (FMAKUNBOUND S) (UNINTERN S))) (KILL 'BS) (KILL 'STR1) (KILL 'S1) (KILL 'STRING1) (KILL 'STRING2) (KILL 'A) (KILL 'AA) (KILL 'B) (KILL 'C) (KILL 'D) (KILL 'J) (KILL 'X) (KILL 'ASK) (KILL 'MY-PPRINT-REVERSE) (KILL 'MY-PPRINT-LOGICAL) (KILL 'FOO-PRINTER) (SETF (FIND-CLASS 'C1) NIL (FIND-CLASS 'C2) NIL))
EQL-OK: NIL
RUN-TEST: finished "iofkts" (0 errors out of 228 tests)
RUN-TEST: started #<INPUT BUFFERED FILE-STREAM CHARACTER #P"lambda.tst" @1>
(MAKUNBOUND 'B)
EQL-OK: B
(MAKUNBOUND 'E)
EQL-OK: E
(SETQ Z 2)
EQL-OK: 2
((LAMBDA (Z) (DECLARE (SPECIAL Z)) (LIST Z (SYMBOL-VALUE 'Z))) 3)
EQUAL-OK: (3 3)
(MAKUNBOUND 'Z)
EQL-OK: Z
((LAMBDA (A B) (+ A (* B 3))) 4 5)
EQL-OK: 19
((LAMBDA (A &OPTIONAL (B 2)) (+ A (* B 3))) 4 5)
EQL-OK: 19
((LAMBDA (A &OPTIONAL (B 2)) (+ A (* B 3))) 4)
EQL-OK: 10
((LAMBDA (&OPTIONAL (A 2 B) (C 3 D) &REST X) (LIST A B C D X)))
EQUAL-OK: (2 NIL 3 NIL NIL)
((LAMBDA (&OPTIONAL (A 2 B) (C 3 D) &REST X) (LIST A B C D X)) 6)
EQUAL-OK: (6 T 3 NIL NIL)
((LAMBDA (&OPTIONAL (A 2 B) (C 3 D) &REST X) (LIST A B C D X)) 6 3)
EQUAL-OK: (6 T 3 T NIL)
((LAMBDA (&OPTIONAL (A 2 B) (C 3 D) &REST X) (LIST A B C D X)) 6 3 8)
EQUAL-OK: (6 T 3 T (8))
((LAMBDA (&OPTIONAL (A 2 B) (C 3 D) &REST X) (LIST A B C D X)) 6 3 8 9 10 11)
EQUAL-OK: (6 T 3 T (8 9 10 11))
((LAMBDA (A B &KEY C D) (LIST A B C D)) 1 2)
EQUAL-OK: (1 2 NIL NIL)
((LAMBDA (A B &KEY C D) (LIST A B C D)) 1 2 :C 6)
EQUAL-OK: (1 2 6 NIL)
((LAMBDA (A B &KEY C D) (LIST A B C D)) 1 2 :D 8)
EQUAL-OK: (1 2 NIL 8)
((LAMBDA (A B &KEY C D) (LIST A B C D)) 1 2 :C 6 :D 8)
EQUAL-OK: (1 2 6 8)
((LAMBDA (A B &KEY C D) (LIST A B C D)) 1 2 :D 8 :C 6)
EQUAL-OK: (1 2 6 8)
((LAMBDA (A B &KEY C D) (LIST A B C D)) :A 1 :D 8 :C 6)
EQUAL-OK: (:A 1 6 8)
((LAMBDA (A B &KEY C D) (LIST A B C D)) :A :B :C :D)
EQUAL-OK: (:A :B :D NIL)
((LAMBDA (A &OPTIONAL (B 3) &REST X &KEY C (D A)) (LIST A B C D X)) 1)
EQUAL-OK: (1 3 NIL 1 NIL)
((LAMBDA (A &OPTIONAL (B 3) &REST X &KEY C (D A)) (LIST A B C D X)) 1 2)
EQUAL-OK: (1 2 NIL 1 NIL)
((LAMBDA (A &OPTIONAL (B 3) &REST X &KEY C (D A)) (LIST A B C D X)) :C 7)
EQUAL-OK: (:C 7 NIL :C NIL)
((LAMBDA (A &OPTIONAL (B 3) &REST X &KEY C (D A)) (LIST A B C D X)) 1 6 :C 7)
EQUAL-OK: (1 6 7 1 (:C 7))
((LAMBDA (A &OPTIONAL (B 3) &REST X &KEY C (D A)) (LIST A B C D X)) 1 6 :D 8)
EQUAL-OK: (1 6 NIL 8 (:D 8))
((LAMBDA (A &OPTIONAL (B 3) &REST X &KEY C (D A)) (LIST A B C D X)) 1 6 :D 8 :C 9 :D 10)
EQUAL-OK: (1 6 9 8 (:D 8 :C 9 :D 10))
((LAMBDA (X &AUX (A 3) (B 4)) (+ X (* A B))) 2)
EQL-OK: 14
((LAMBDA (X Y &OPTIONAL A B &REST Z &KEY C (D Y) &AUX (U 3) (V 4)) (+ X Y A (* B (CAR Z)) C (* D U) V)) 3 4 5 2 7 :C 6 :D 8)
[SIMPLE-PROGRAM-ERROR]: :LAMBDA: keyword arguments in (7 :C 6 :D 8) should occur pairwise

EQL-OK: ERROR
((LAMBDA (X Y &OPTIONAL A B &REST Z &KEY C (D Y) &AUX (U 3) (V 4)) (+ X Y A (* B (CAR Z)) C (* D U) V)) 3 4 5 2 7 :C 6)
[SIMPLE-PROGRAM-ERROR]: :LAMBDA: keyword arguments in (7 :C 6) should occur pairwise

EQL-OK: ERROR
((LAMBDA (X &AUX C) (CONS X C)) 'A)
EQUAL-OK: (A)
((LAMBDA (X &REST Y Z) (LIST X Y Z)) 1 2 3)
[SIMPLE-PROGRAM-ERROR]: FUNCTION: Lambda list element Z is superfluous. Only one variable is allowed after &REST.
EQL-OK: ERROR
((LAMBDA (5 A B) (LIST A B)) 1 2)
[SIMPLE-PROGRAM-ERROR]: FUNCTION: Invalid lambda list element 5. A lambda list may only contain symbols and lists.
EQL-OK: ERROR
((LAMBDA ((LENGTH '(A B)) C) (LIST C)) 1)
[SIMPLE-PROGRAM-ERROR]: EVAL/APPLY: too few arguments given to :LAMBDA

EQL-OK: ERROR
((LAMBDA (X &KEY :Y :Z) (LIST X Y Z)) 1 :Y 2 :Z 3)
[SIMPLE-SOURCE-PROGRAM-ERROR]: FUNCTION: :Y is a constant, may not be used as a variable

EQL-OK: ERROR
((LAMBDA (X Y) (LIST X Y Z)) 1 2)
[SIMPLE-UNBOUND-VARIABLE]: EVAL: variable Z has no value

EQL-OK: ERROR
((LAMBDA (X Y) (LIST X Y Z)) 1 2 3)
[SIMPLE-PROGRAM-ERROR]: EVAL/APPLY: too many arguments given to :LAMBDA

EQL-OK: ERROR
((LAMBDA (&OPTIONAL) (LIST A B C)) 1)
[SIMPLE-PROGRAM-ERROR]: EVAL/APPLY: too many arguments given to :LAMBDA

EQL-OK: ERROR
((LAMBDA (&OPTIONAL (A)) (LIST A)) 1)
EQUAL-OK: (1)
((LAMBDA (&OPTIONAL (A B)) (LIST A B)) 1)
[SIMPLE-UNBOUND-VARIABLE]: EVAL: variable B has no value

EQL-OK: ERROR
((LAMBDA (&OPTIONAL (A 3 B)) (LIST A B)) 1)
EQUAL-OK: (1 T)
((LAMBDA (&OPTIONAL (A 3)) (LIST A)) 1)
EQUAL-OK: (1)
((LAMBDA (&OPTIONAL (A 3 B 4)) (LIST A B)) 1)
[SIMPLE-PROGRAM-ERROR]: FUNCTION: Invalid lambda list element (A 3 B 4)
EQL-OK: ERROR
((LAMBDA (X) (LIST X Y)) 1 2)
[SIMPLE-PROGRAM-ERROR]: EVAL/APPLY: too many arguments given to :LAMBDA

EQL-OK: ERROR
((LAMBDA (X) (LIST X)) 1 2)
[SIMPLE-PROGRAM-ERROR]: EVAL/APPLY: too many arguments given to :LAMBDA

EQL-OK: ERROR
((LAMBDA (#\a) (LIST A)) 1)
[SIMPLE-PROGRAM-ERROR]: FUNCTION: Invalid lambda list element #\a. A lambda list may only contain symbols and lists.
EQL-OK: ERROR
((LAMBDA (#*10) (LIST 1 2 3)))
[SIMPLE-PROGRAM-ERROR]: FUNCTION: Invalid lambda list element #*10. A lambda list may only contain symbols and lists.
EQL-OK: ERROR
((LAMBDA (X Y) ((LAMBDA (A B) (LIST A B)) 'U 'V)) 5 6)
EQUAL-OK: (U V)
((LAMBDA (X Y) (LIST X Y)) 1)
[SIMPLE-PROGRAM-ERROR]: EVAL/APPLY: too few arguments given to :LAMBDA

EQL-OK: ERROR
((LAMBDA (X &REST Y &OPTIONAL (Z 5)) (LIST X Y Z)) 1 3)
[SIMPLE-PROGRAM-ERROR]: FUNCTION: Lambda list marker &OPTIONAL not allowed here.
EQL-OK: ERROR
((LAMBDA (X &X) (LIST X)) 7)
[SIMPLE-PROGRAM-ERROR]: EVAL/APPLY: too few arguments given to :LAMBDA

EQL-OK: ERROR
((LAMBDA (X &AUX) (LIST X)) 6)
EQUAL-OK: (6)
((LAMBDA (X &AUX Y) (LIST X Y)) 6)
EQUAL-OK: (6 NIL)
((LAMBDA (X &AUX (Y)) (LIST X Y)) 6)
EQUAL-OK: (6 NIL)
((LAMBDA (X &REST) (LIST X)) 2)
[SIMPLE-PROGRAM-ERROR]: FUNCTION: Missing &REST parameter in lambda list (X &REST)
EQL-OK: ERROR
((LAMBDA (X &KEY) (LIST X)) 3)
EQUAL-OK: (3)
((LAMBDA (X &KEY Y) (LIST X)) 3)
EQUAL-OK: (3)
((LAMBDA (X &KEY Y) (LIST X)) 3 :Y)
[SIMPLE-PROGRAM-ERROR]: :LAMBDA: keyword arguments in (:Y) should occur pairwise

EQL-OK: ERROR
((LAMBDA (X &KEY Y) (LIST X)) :|3|)
EQUAL-OK: (:|3|)
((LAMBDA NIL (LIST 1 2 3)))
EQUAL-OK: (1 2 3)
((LAMBDA NIL (LIST 1 2 3)) 4 5)
[SIMPLE-PROGRAM-ERROR]: EVAL/APPLY: too many arguments given to :LAMBDA

EQL-OK: ERROR
((LAMBDA (LIST 1 2 3)))
[SIMPLE-PROGRAM-ERROR]: FUNCTION: Invalid lambda list element 1. A lambda list may only contain symbols and lists.
EQL-OK: ERROR
((LAMBDA (X)))
[SIMPLE-PROGRAM-ERROR]: EVAL/APPLY: too few arguments given to :LAMBDA

EQL-OK: ERROR
((LAMBDA (&AUX &KEY &REST &OPTIONAL)))
[SIMPLE-PROGRAM-ERROR]: FUNCTION: Lambda list marker &KEY not allowed here.
EQL-OK: ERROR
((LAMBDA (A B &KEY C D &ALLOW-OTHER-KEYS) (LIST A B C D E F)) 1 2 :C 6 :D 8 :E 5 :F 7)
[SIMPLE-UNBOUND-VARIABLE]: EVAL: variable E has no value

EQL-OK: ERROR
((LAMBDA (X &ALLOW-OTHER-KEYS) (LIST X Y)) 2 :Y 3)
[SIMPLE-PROGRAM-ERROR]: FUNCTION: Lambda list marker &ALLOW-OTHER-KEYS not allowed here.
EQL-OK: ERROR
((LAMBDA))
[SIMPLE-SOURCE-PROGRAM-ERROR]: :LAMBDA: lambda-list for NIL is missing

EQL-OK: ERROR
((LAMBDA (&KEY X) X) :X 1 :Y 2 :ALLOW-OTHER-KEYS T)
EQL-OK: 1
((LAMBDA (&KEY X) X) :X 1 :Y 2 :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL)
EQL-OK: 1
((LAMBDA (&KEY X) X) :X 1 :Y 2 :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T)
[SIMPLE-KEYWORD-ERROR]: :LAMBDA: illegal keyword/value pair :Y, 2 in argument list.
The allowed keywords are #1=(:X)

EQL-OK: ERROR
((LAMBDA (&KEY X &ALLOW-OTHER-KEYS) X) :X 1 :Y 2)
EQL-OK: 1
((LAMBDA (&KEY X &ALLOW-OTHER-KEYS) X) :X 1 :Y 2 :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL)
EQL-OK: 1
((LAMBDA (&KEY X &ALLOW-OTHER-KEYS) X) :X 1 :Y 2 :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS T)
EQL-OK: 1
((LAMBDA (&KEY X) X) :X 1 :ALLOW-OTHER-KEYS NIL)
EQL-OK: 1
((LAMBDA (&KEY X) X) :X 1 :ALLOW-OTHER-KEYS NIL :ALLOW-OTHER-KEYS NIL)
EQL-OK: 1
(DEFUN FOO (X) (LIST X))
EQL-OK: FOO
(MULTIPLE-VALUE-LIST (FUNCTION-LAMBDA-EXPRESSION #'FOO))
EQUALP-OK: ((LAMBDA (X) (DECLARE (SYSTEM::IN-DEFUN FOO)) (BLOCK FOO (LIST X))) #(NIL NIL NIL NIL ((DECLARATION OPTIMIZE DECLARATION))) FOO)
(COMPILE 'FOO)
EQL-OK: FOO
(MULTIPLE-VALUE-LIST (FUNCTION-LAMBDA-EXPRESSION #'FOO))
EQUAL-OK: ((LAMBDA (X) (LIST X)) T FOO)
(LET ((FILE "function-lambda-expression-test.lisp") (FLE (FUNCTION-LAMBDA-EXPRESSION #'FOO)) (RES NIL)) (UNWIND-PROTECT (PROGN (WITH-OPEN-FILE (OUT FILE :DIRECTION :OUTPUT) (WRITE '(DEFUN FOO (X) (CAR X)) :STREAM OUT :READABLY T) (TERPRI OUT)) (LOAD (COMPILE-FILE FILE)) (PUSH (FOO '(3)) RES) (PUSH (EQUALP FLE (FUNCTION-LAMBDA-EXPRESSION #'FOO)) RES)) (POST-COMPILE-FILE-CLEANUP FILE)))
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/function-lambda-expression-test.lisp ...

;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/function-lambda-expression-test.fas
0 errors, 0 warnings
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/function-lambda-expression-test.fas ...
WARNING: DEFUN/DEFMACRO: redefining function FOO in
         /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/function-lambda-expression-test.fas,
         was defined in top-level
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/function-lambda-expression-test.fas
EQUAL-OK: (NIL 3)
(FMAKUNBOUND 'FOO)
EQL-OK: FOO
(DEFUN (SETF FOO) (V A) (SETF (CAR A) V))
EQUAL-OK: (SETF FOO)
(MULTIPLE-VALUE-LIST (FUNCTION-LAMBDA-EXPRESSION #'(SETF FOO)))
EQUALP-OK: ((LAMBDA (V A) (DECLARE (SYSTEM::IN-DEFUN (SETF FOO))) (BLOCK FOO (SETF (CAR A) V))) #(NIL NIL NIL NIL ((DECLARATION OPTIMIZE DECLARATION))) (SETF FOO))
(COMPILE '(SETF FOO))
EQUAL-OK: (SETF FOO)
(MULTIPLE-VALUE-LIST (FUNCTION-LAMBDA-EXPRESSION #'(SETF FOO)))
EQUAL-OK: ((LAMBDA (V A) (SETF (CAR A) V)) T (SETF FOO))
(FMAKUNBOUND '(SETF FOO))
EQUAL-OK: (SETF FOO)
(SETF (GETENV "PAGER") "cat")
EQUAL-OK: "cat"
Could not attach to process.  If your uid matches the uid of the target
process, check the setting of /proc/sys/kernel/yama/ptrace_scope, or try
again as the root user.  For more details, see /etc/sysctl.d/10-ptrace.conf
/tmp/gdbcomm18642:3: Error in sourced command file:
ptrace: Operation not permitted.
(DISASSEMBLE 'CAR)
EQL-OK: NIL
Could not attach to process.  If your uid matches the uid of the target
process, check the setting of /proc/sys/kernel/yama/ptrace_scope, or try
again as the root user.  For more details, see /etc/sysctl.d/10-ptrace.conf
/tmp/gdbcomm18642:3: Error in sourced command file:
ptrace: Operation not permitted.
(DISASSEMBLE #'CDR)
EQL-OK: NIL
(DISASSEMBLE 'DISASSEMBLE)

Disassembly of function DISASSEMBLE
(CONST 0) = #(#(NIL #S(HASH-TABLE :TEST STABLEHASH-EQ :WARN-IF-NEEDS-REHASH-AFTER-GC T (#1=#<FUNCALLABLE-STANDARD-CLASS STANDARD-GENERIC-FUNCTION> . #<COMPILED-FUNCTION #:COMPILED-FORM-1947-1>) (#2=#<BUILT-IN-CLASS FUNCTION> . #<COMPILED-FUNCTION #:COMPILED-FORM-1946-1>) (#3=#<BUILT-IN-CLASS SYMBOL> . #<COMPILED-FUNCTION #:COMPILED-FORM-1945-1>))) CLOS::COMPUTE-APPLICABLE-METHODS-EFFECTIVE-METHOD #4=#<STANDARD-GENERIC-FUNCTION DISASSEMBLE>)
(CONST 1) = DISASSEMBLE
(CONST 2) = NIL
(CONST 3) = #(1 0 T T (:QUALIFIERS :SPECIALIZERS) NIL)
(CONST 4) = (0)
(CONST 5) = (#1=#<STANDARD-METHOD (#2=#<BUILT-IN-CLASS FUNCTION>)> #3=#<STANDARD-METHOD (#4=#<BUILT-IN-CLASS T>)> #5=#<STANDARD-METHOD (#6=#<BUILT-IN-CLASS CONS>)> #7=#<STANDARD-METHOD (#8=#<BUILT-IN-CLASS SYMBOL>)> #9=#<STANDARD-METHOD (#10=#<FUNCALLABLE-STANDARD-CLASS STANDARD-GENERIC-FUNCTION>)> #11=#<STANDARD-METHOD (#12=#<STANDARD-CLASS STANDARD-METHOD>)> #13=#<STANDARD-METHOD (#14=#<STANDARD-CLASS METHOD>)> #15=#<STANDARD-METHOD (#16=#<BUILT-IN-CLASS STRING>)>)
(CONST 6) = #<METHOD-COMBINATION STANDARD #x000333B82278>
(CONST 7) = #1=#<STANDARD-CLASS STANDARD-METHOD>
(CONST 8) = (SYSTEM::OBJECT &KEY SYSTEM::QUALIFIERS SYSTEM::SPECIALIZERS)
(CONST 9) = "disassemble the OBJECT, which should be a function.
if QUALIFIERS or SPECIALIZERS is given, OBJECT should be a generic function."
(CONST 10) = NIL
(CONST 11) = (((#1=#<STANDARD-METHOD (#2=#<FUNCALLABLE-STANDARD-CLASS STANDARD-GENERIC-FUNCTION>)> #3=#<STANDARD-METHOD (#4=#<BUILT-IN-CLASS FUNCTION>)> #5=#<STANDARD-METHOD (#6=#<BUILT-IN-CLASS T>)>) . #<COMPILED-FUNCTION #:COMPILED-FORM-1947-1>) ((#3# #5#) . #<COMPILED-FUNCTION #:COMPILED-FORM-1946-1>) ((#7=#<STANDARD-METHOD (#8=#<BUILT-IN-CLASS SYMBOL>)> #5#) . #<COMPILED-FUNCTION #:COMPILED-FORM-1945-1>))
(CONST 12) = T
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
15 byte-code instructions:
0     (LOADV&PUSH 1 1)
3     (LOAD&PUSH 3)
4     (CALLS1&JMPIFNOT 118 L9)            ; CLOS::CLASS-GETHASH
7     (SKIP&RETGF 3)
9     L9
9     (LOAD&PUSH 2)
10    (CALLS2&PUSH 57)                    ; CLASS-OF
12    (LOADV&PUSH 1 1)
15    (LOADV&PUSH 0 1)
18    (LOADV&PUSH 0 2)
21    (LOAD&PUSH 6)
22    (LOAD 6)
23    (APPLY&PUSH 2)
25    (CALLS1 111)                        ; SYSTEM::PUTHASH
27    (SKIP&RETGF 3)
EQL-OK: NIL
(DISASSEMBLE #'SET-DIFFERENCE)

Disassembly of function SET-DIFFERENCE
(CONST 0) = :TEST
(CONST 1) = :TEST-NOT
(CONST 2) = :KEY
(CONST 3) = SYSTEM::LIST-TO-HT
(CONST 4) = #<SYSTEM-FUNCTION MEMBER>
2 required arguments
0 optional arguments
Rest parameter
3 keyword parameters: :TEST, :TEST-NOT, :KEY.
49 byte-code instructions:
0     (UNBOUND->NIL 1)
2     (NIL&PUSH)
3     (CONST&SYMBOL-FUNCTION&PUSH 3)      ; SYSTEM::LIST-TO-HT
5     (LOAD&PUSH 8)
6     (LOAD&PUSH 8)
7     (LOAD 8)
8     (APPLY&PUSH 2)
10    (LOAD&PUSH 8)
11    (NIL&PUSH)
12    (JMP L58)
14    L14
14    (PUSH)
15    (LOAD&PUSH 1)
16    (FUNCALL 1)
18    (JMP L39)
20    L20
20    (LOAD&PUSH 0)
21    (LOAD&PUSH 4)
22    (PUSH-UNBOUND 1)
24    (CALLS1 110)                        ; GETHASH
26    (SKIP 1)
28    (JMPIFNOT L53)
30    (JMP L56)
32    L32
32    (LOAD&CAR&STORE 1 0)
35    (LOAD&JMPIF 5 L14)
38    (LOAD 0)
39    L39
39    (PUSH)
40    (LOAD&JMPIF 3 L20)
43    (CONST&PUSH 4)                      ; #<SYSTEM-FUNCTION MEMBER>
44    (LOAD&PUSH 1)
45    (LOAD&PUSH 12)
46    (LOAD 12)
47    (APPLY 2)
49    (SKIP 1)
51    (JMPIF L56)
53    L53
53    (LOAD&PUSH 0)
54    (LOAD&CONS&STORE 3)
56    L56
56    (LOAD&CDR&STORE 1)
58    L58
58    (LOAD&PUSH 1)
59    (CALLS1&JMPIFNOT 159 L32)           ; ENDP
62    (SKIP 2)
64    (LOAD&PUSH 1)
65    (CALLS1 177)                        ; SYSTEM::LIST-NREVERSE
67    (SKIP&RET 9)
EQL-OK: NIL
RUN-TEST: finished "lambda" (0 errors out of 90 tests)
RUN-TEST: started #<INPUT BUFFERED FILE-STREAM CHARACTER #P"lists151.tst" @1>
(MAKUNBOUND 'A)
EQL-OK: A
(MAKUNBOUND 'X)
EQL-OK: X
(CAR '(A B C D E F G))
EQL-OK: A
(CDR '(A B C D E F G))
EQUAL-OK: (B C D E F G)
(CAAR '((A) B C D E F G))
EQL-OK: A
(CADR '(A B C D E F G))
EQL-OK: B
(CDAR '((A B) C D E F G))
EQUAL-OK: (B)
(CDDR '(A B C D E F G))
EQUAL-OK: (C D E F G)
(CAAAR '(((A)) B C D E F G))
EQL-OK: A
(CAADR '(A (B) C D E F G))
EQL-OK: B
(CADAR '((A B) C D E F G))
EQL-OK: B
(CADDR '(A B C D E F G))
EQL-OK: C
(CDAAR '(((A B)) C D E F G))
EQUAL-OK: (B)
(CDADR '(A (B C) D E F G))
EQUAL-OK: (C)
(CDDAR '((A B C) D E F G))
EQUAL-OK: (C)
(CDDDR '(A B C D E F G))
EQUAL-OK: (D E F G)
(CAAAAR '((((A))) B C D E F G))
EQL-OK: A
(CAAADR '(A ((B)) C D E F G))
EQL-OK: B
(CAADAR '((A (B)) C D E F G))
EQL-OK: B
(CAADDR '(A B (C) D E F G))
EQL-OK: C
(CADAAR '(((A B)) C D E F G))
EQL-OK: B
(CADADR '(A (B C) D E F G))
EQL-OK: C
(CADDAR '((A B C) D E F G))
EQL-OK: C
(CADDDR '(A B C D E F G))
EQL-OK: D
(CDAAAR '((((A B))) C D E F G))
EQUAL-OK: (B)
(CDAADR '(A ((B C)) D E F G))
EQUAL-OK: (C)
(CDADAR '((A (B C)) D E F G))
EQUAL-OK: (C)
(CDADDR '(A B (C D) E F G))
EQUAL-OK: (D)
(CDDAAR '(((A B C)) D E F G))
EQUAL-OK: (C)
(CDDADR '(A (B C D) E F G))
EQUAL-OK: (D)
(CDDDAR '((A B C D) E F G))
EQUAL-OK: (D)
(CDDDDR '(A B C D E F G))
EQUAL-OK: (E F G)
(CAR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: ((((1 2 3) 4) 5) (6 7))
(CDR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: ((((U V W) X) Y) ((Q W E) R) (A B C) E F G)
(CAAR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: (((1 2 3) 4) 5)
(CADR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: (((U V W) X) Y)
(CDAR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: ((6 7))
(CDDR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: (((Q W E) R) (A B C) E F G)
(CAAAR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: ((1 2 3) 4)
(CAADR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: ((U V W) X)
(CADAR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: (6 7)
(CADDR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: ((Q W E) R)
(CDAAR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: (5)
(CDADR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: (Y)
(CDDAR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQL-OK: NIL
(CDDDR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: ((A B C) E F G)
(CAAAAR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: (1 2 3)
(CAAADR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: (U V W)
(CAADAR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQL-OK: 6
(CAADDR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: (Q W E)
(CADAAR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQL-OK: 5
(CADADR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQL-OK: Y
(CADDAR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQL-OK: NIL
(CADDDR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: (A B C)
(CDAAAR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: (4)
(CDAADR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: (X)
(CDADAR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: (7)
(CDADDR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: (R)
(CDDAAR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQL-OK: NIL
(CDDADR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQL-OK: NIL
(CDDDAR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQL-OK: NIL
(CDDDDR '(((((1 2 3) 4) 5) (6 7)) (((U V W) X) Y) ((Q W E) R) (A B C) E F G))
EQUAL-OK: (E F G)
(CAR 'NIL)
EQL-OK: NIL
(CDR 'NIL)
EQL-OK: NIL
(CAAR 'NIL)
EQL-OK: NIL
(CADR 'NIL)
EQL-OK: NIL
(CDAR 'NIL)
EQL-OK: NIL
(CDDR 'NIL)
EQL-OK: NIL
(CAAAR 'NIL)
EQL-OK: NIL
(CAADR 'NIL)
EQL-OK: NIL
(CADAR 'NIL)
EQL-OK: NIL
(CADDR 'NIL)
EQL-OK: NIL
(CDAAR 'NIL)
EQL-OK: NIL
(CDADR 'NIL)
EQL-OK: NIL
(CDDAR 'NIL)
EQL-OK: NIL
(CDDDR 'NIL)
EQL-OK: NIL
(CAAAAR 'NIL)
EQL-OK: NIL
(CAAADR 'NIL)
EQL-OK: NIL
(CAADAR 'NIL)
EQL-OK: NIL
(CAADDR 'NIL)
EQL-OK: NIL
(CADAAR 'NIL)
EQL-OK: NIL
(CADADR 'NIL)
EQL-OK: NIL
(CADDAR 'NIL)
EQL-OK: NIL
(CADDDR 'NIL)
EQL-OK: NIL
(CDAAAR 'NIL)
EQL-OK: NIL
(CDAADR 'NIL)
EQL-OK: NIL
(CDADAR 'NIL)
EQL-OK: NIL
(CDADDR 'NIL)
EQL-OK: NIL
(CDDAAR 'NIL)
EQL-OK: NIL
(CDDADR 'NIL)
EQL-OK: NIL
(CDDDAR 'NIL)
EQL-OK: NIL
(CDDDDR 'NIL)
EQL-OK: NIL
(CAR '(A B C D E F G))
EQL-OK: A
(CDR '(A B C D E F G))
EQUAL-OK: (B C D E F G)
(CAAR '(A B C D E F G))
[SIMPLE-TYPE-ERROR]: CAAR: A is not a list

EQL-OK: ERROR
(CADR '(A B C D E F G))
EQL-OK: B
(CDAR '(A B C D E F G))
[SIMPLE-TYPE-ERROR]: CDAR: A is not a list

EQL-OK: ERROR
(CDDR '(A B C D E F G))
EQUAL-OK: (C D E F G)
(CAAAR '(A B C D E F G))
[SIMPLE-TYPE-ERROR]: CAAAR: A is not a list

EQL-OK: ERROR
(CAADR '(A B C D E F G))
[SIMPLE-TYPE-ERROR]: CAADR: B is not a list

EQL-OK: ERROR
(CADAR '(A B C D E F G))
[SIMPLE-TYPE-ERROR]: CADAR: A is not a list

EQL-OK: ERROR
(CADDR '(A B C D E F G))
EQL-OK: C
(CDAAR '(A B C D E F G))
[SIMPLE-TYPE-ERROR]: CDAAR: A is not a list

EQL-OK: ERROR
(CDADR '(A B C D E F G))
[SIMPLE-TYPE-ERROR]: CDADR: B is not a list

EQL-OK: ERROR
(CDDAR '(A B C D E F G))
[SIMPLE-TYPE-ERROR]: CDDAR: A is not a list

EQL-OK: ERROR
(CDDDR '(A B C D E F G))
EQUAL-OK: (D E F G)
(CAAAAR '(A B C D E F G))
[SIMPLE-TYPE-ERROR]: CAAAAR: A is not a list

EQL-OK: ERROR
(CAAADR '(A B C D E F G))
[SIMPLE-TYPE-ERROR]: CAAADR: B is not a list

EQL-OK: ERROR
(CAADAR '(A B C D E F G))
[SIMPLE-TYPE-ERROR]: CAADAR: A is not a list

EQL-OK: ERROR
(CAADDR '(A B C D E F G))
[SIMPLE-TYPE-ERROR]: CAADDR: C is not a list

EQL-OK: ERROR
(CADAAR '(A B C D E F G))
[SIMPLE-TYPE-ERROR]: CADAAR: A is not a list

EQL-OK: ERROR
(CADADR '(A B C D E F G))
[SIMPLE-TYPE-ERROR]: CADADR: B is not a list

EQL-OK: ERROR
(CADDAR '(A B C D E F G))
[SIMPLE-TYPE-ERROR]: CADDAR: A is not a list

EQL-OK: ERROR
(CADDDR '(A B C D E F G))
EQL-OK: D
(CDAAAR '(A B C D E F G))
[SIMPLE-TYPE-ERROR]: CDAAAR: A is not a list

EQL-OK: ERROR
(CDAADR '(A B C D E F G))
[SIMPLE-TYPE-ERROR]: CDAADR: B is not a list

EQL-OK: ERROR
(CDADAR '(A B C D E F G))
[SIMPLE-TYPE-ERROR]: CDADAR: A is not a list

EQL-OK: ERROR
(CDADDR '(A B C D E F G))
[SIMPLE-TYPE-ERROR]: CDADDR: C is not a list

EQL-OK: ERROR
(CDDAAR '(A B C D E F G))
[SIMPLE-TYPE-ERROR]: CDDAAR: A is not a list

EQL-OK: ERROR
(CDDADR '(A B C D E F G))
[SIMPLE-TYPE-ERROR]: CDDADR: B is not a list

EQL-OK: ERROR
(CDDDAR '(A B C D E F G))
[SIMPLE-TYPE-ERROR]: CDDDAR: A is not a list

EQL-OK: ERROR
(CDDDDR '(A B C D E F G))
EQUAL-OK: (E F G)
(CAR '(A))
EQL-OK: A
(CDR '(A))
EQL-OK: NIL
(CAAR '(A))
[SIMPLE-TYPE-ERROR]: CAAR: A is not a list

EQL-OK: ERROR
(CADR '(A))
EQL-OK: NIL
(CDAR '(A))
[SIMPLE-TYPE-ERROR]: CDAR: A is not a list

EQL-OK: ERROR
(CDDR '(A))
EQL-OK: NIL
(CAAAR '(A))
[SIMPLE-TYPE-ERROR]: CAAAR: A is not a list

EQL-OK: ERROR
(CAADR '(A))
EQL-OK: NIL
(CADAR '(A))
[SIMPLE-TYPE-ERROR]: CADAR: A is not a list

EQL-OK: ERROR
(CADDR '(A))
EQL-OK: NIL
(CDAAR '(A))
[SIMPLE-TYPE-ERROR]: CDAAR: A is not a list

EQL-OK: ERROR
(CDADR '(A))
EQL-OK: NIL
(CDDAR '(A))
[SIMPLE-TYPE-ERROR]: CDDAR: A is not a list

EQL-OK: ERROR
(CDDDR '(A))
EQL-OK: NIL
(CAAAAR '(A))
[SIMPLE-TYPE-ERROR]: CAAAAR: A is not a list

EQL-OK: ERROR
(CAAADR '(A))
EQL-OK: NIL
(CAADAR '(A))
[SIMPLE-TYPE-ERROR]: CAADAR: A is not a list

EQL-OK: ERROR
(CAADDR '(A))
EQL-OK: NIL
(CADAAR '(A))
[SIMPLE-TYPE-ERROR]: CADAAR: A is not a list

EQL-OK: ERROR
(CADADR '(A))
EQL-OK: NIL
(CADDAR '(A))
[SIMPLE-TYPE-ERROR]: CADDAR: A is not a list

EQL-OK: ERROR
(CADDDR '(A))
EQL-OK: NIL
(CDAAAR '(A))
[SIMPLE-TYPE-ERROR]: CDAAAR: A is not a list

EQL-OK: ERROR
(CDAADR '(A))
EQL-OK: NIL
(CDADAR '(A))
[SIMPLE-TYPE-ERROR]: CDADAR: A is not a list

EQL-OK: ERROR
(CDADDR '(A))
EQL-OK: NIL
(CDDAAR '(A))
[SIMPLE-TYPE-ERROR]: CDDAAR: A is not a list

EQL-OK: ERROR
(CDDADR '(A))
EQL-OK: NIL
(CDDDAR '(A))
[SIMPLE-TYPE-ERROR]: CDDDAR: A is not a list

EQL-OK: ERROR
(CDDDDR '(A))
EQL-OK: NIL
(CONS 1 2)
EQUAL-OK: (1 . 2)
(CONS 'A 'B)
EQUAL-OK: (A . B)
(CONS 'A 'B 'C)
[SIMPLE-SOURCE-PROGRAM-ERROR]: EVAL: too many arguments given to CONS: #1=(CONS 'A 'B 'C)

EQL-OK: ERROR
(CONS 'A)
[SIMPLE-SOURCE-PROGRAM-ERROR]: EVAL: too few arguments given to CONS: #1=(CONS 'A)

EQL-OK: ERROR
(CONS)
[SIMPLE-SOURCE-PROGRAM-ERROR]: EVAL: too few arguments given to CONS: #1=(CONS)

EQL-OK: ERROR
(CONS 'A 'NIL)
EQUAL-OK: (A)
(CONS 'NIL 'A)
EQUAL-OK: (NIL . A)
(CONS 'A (CONS 'B (CONS 'C 'NIL)))
EQUAL-OK: (A B C)
(CONS 'A '(B C D))
EQUAL-OK: (A B C D)
(TREE-EQUAL 1 1)
EQL-OK: T
(TREE-EQUAL 'WORD 'WORD)
EQL-OK: T
(TREE-EQUAL 'WORD1 'WORD2)
EQL-OK: NIL
(TREE-EQUAL '(A B) '(A B))
EQL-OK: T
(TREE-EQUAL '(A (B C)) '((A B) C))
EQL-OK: NIL
(TREE-EQUAL 5 (+ 2 3))
EQL-OK: T
(TREE-EQUAL '(A (B QUOTE NIL)) '(A (B)))
EQL-OK: NIL
(TREE-EQUAL '(A (B . 1.0)) '(A (B #C(1.0 0.0))))
EQL-OK: NIL
(TREE-EQUAL 1 1 :TEST #'EQ)
EQL-OK: T
(TREE-EQUAL 'WORD 'WORD :TEST #'EQ)
EQL-OK: T
(TREE-EQUAL 'WORD1 'WORD2 :TEST #'EQ)
EQL-OK: NIL
(TREE-EQUAL '(A B) '(A B) :TEST #'EQ)
EQL-OK: T
(TREE-EQUAL '(A (B C)) '((A B) C) :TEST #'EQ)
EQL-OK: NIL
(TREE-EQUAL 5 (+ 2 3) :TEST #'EQ)
EQL-OK: T
(TREE-EQUAL '(A (B)) '(A (B)) :TEST #'EQ)
EQL-OK: T
(TREE-EQUAL '(A (B . 1.0)) '(A (B #C(1.0 0.0))) :TEST #'EQ)
EQL-OK: NIL
(TREE-EQUAL 1 1 :TEST #'EQL)
EQL-OK: T
(TREE-EQUAL 'WORD 'WORD :TEST #'EQL)
EQL-OK: T
(TREE-EQUAL 'WORD1 'WORD2 :TEST #'EQL)
EQL-OK: NIL
(TREE-EQUAL '(A B) '(A B) :TEST #'EQL)
EQL-OK: T
(TREE-EQUAL '(A (B C)) '((A B) C) :TEST #'EQL)
EQL-OK: NIL
(TREE-EQUAL 5 (+ 2 3) :TEST #'EQL)
EQL-OK: T
(TREE-EQUAL '(A (B)) '(A (B)) :TEST #'EQL)
EQL-OK: T
(TREE-EQUAL '(A (B . 1.0)) '(A (B #C(1.0 0.0))) :TEST #'EQL)
EQL-OK: NIL
(TREE-EQUAL 1 1 :TEST #'EQUAL)
EQL-OK: T
(TREE-EQUAL 'WORD 'WORD :TEST #'EQUAL)
EQL-OK: T
(TREE-EQUAL 'WORD1 'WORD2 :TEST #'EQUAL)
EQL-OK: NIL
(TREE-EQUAL '(A B) '(A B) :TEST #'EQUAL)
EQL-OK: T
(TREE-EQUAL '(A (B C)) '((A B) C) :TEST #'EQUAL)
EQL-OK: NIL
(TREE-EQUAL 5 (+ 2 3) :TEST #'EQUAL)
EQL-OK: T
(TREE-EQUAL '(A (B)) '(A (B)) :TEST #'EQUAL)
EQL-OK: T
(TREE-EQUAL '(A (B . 1.0)) '(A (B #C(1.0 0.0))) :TEST #'EQUAL)
EQL-OK: NIL
(TREE-EQUAL 1 1 :TEST-NOT #'EQ)
EQL-OK: NIL
(TREE-EQUAL 'WORD 'WORD :TEST-NOT #'EQ)
EQL-OK: NIL
(TREE-EQUAL 'WORD1 'WORD2 :TEST-NOT #'EQ)
EQL-OK: T
(TREE-EQUAL '(A B) '(A B) :TEST-NOT #'EQ)
EQL-OK: NIL
(TREE-EQUAL '(A (B C)) '((A B) C) :TEST-NOT #'EQ)
EQL-OK: NIL
(TREE-EQUAL 5 (+ 2 3) :TEST-NOT #'EQ)
EQL-OK: NIL
(TREE-EQUAL '(A (B)) '(A (B)) :TEST-NOT #'EQ)
EQL-OK: NIL
(TREE-EQUAL '(A (B . 1.0)) '(A (B #C(1.0 0.0))) :TEST-NOT #'EQ)
EQL-OK: NIL
RUN-TEST: finished "lists151" (0 errors out of 201 tests)
RUN-TEST: started #<INPUT BUFFERED FILE-STREAM CHARACTER #P"lists152.tst" @1>
(ENDP 'NIL)
EQL-OK: T
(ENDP '(A . B))
EQL-OK: NIL
(ENDP '(A B . C))
EQL-OK: NIL
(ENDP '(A B C))
EQL-OK: NIL
(ENDP '(A B C D))
EQL-OK: NIL
(ENDP '(A B C . D))
EQL-OK: NIL
(ENDP '('NIL 'NIL))
EQL-OK: NIL
(LIST-LENGTH 'NIL)
EQL-OK: 0
(LIST-LENGTH '(A . B))
[SIMPLE-TYPE-ERROR]: LIST-LENGTH: A proper list must not end with B

EQL-OK: ERROR
(LIST-LENGTH '(A B C D))
EQL-OK: 4
(LIST-LENGTH '(A (B C) D))
EQL-OK: 3
(LET ((X (LIST 'A 'B 'C))) (RPLACD (LAST X) X) (LIST-LENGTH X))
EQL-OK: NIL
(NTH 0 '(A B C D))
EQL-OK: A
(NTH 1 '(A B C D))
EQL-OK: B
(NTH 3 '(A B C D))
EQL-OK: D
(NTH 5 '(A B C D))
EQL-OK: NIL
(NTH -2 '(A B C D))
[SIMPLE-TYPE-ERROR]: NTH: -2 is not a non-negative integer

EQL-OK: ERROR
(NTH 0 'NIL)
EQL-OK: NIL
(NTH 2 'NIL)
EQL-OK: NIL
(FIRST '(1 2 3 4 5 6 7 8 9 10 11))
EQL-OK: 1
(SECOND '(1 2 3 4 5 6 7 8 9 10 11))
EQL-OK: 2
(THIRD '(1 2 3 4 5 6 7 8 9 10 11))
EQL-OK: 3
(FOURTH '(1 2 3 4 5 6 7 8 9 10 11))
EQL-OK: 4
(FIFTH '(1 2 3 4 5 6 7 8 9 10 11))
EQL-OK: 5
(SIXTH '(1 2 3 4 5 6 7 8 9 10 11))
EQL-OK: 6
(SEVENTH '(1 2 3 4 5 6 7 8 9 10 11))
EQL-OK: 7
(EIGHTH '(1 2 3 4 5 6 7 8 9 10 11))
EQL-OK: 8
(NINTH '(1 2 3 4 5 6 7 8 9 10 11))
EQL-OK: 9
(TENTH '(1 2 3 4 5 6 7 8 9 10 11))
EQL-OK: 10
(FIRST '(1 2 3))
EQL-OK: 1
(SECOND '(1 2 3))
EQL-OK: 2
(THIRD '(1 2 3))
EQL-OK: 3
(FOURTH '(1 2 3))
EQL-OK: NIL
(FIFTH '(1 2 3))
EQL-OK: NIL
(SIXTH '(1 2 3))
EQL-OK: NIL
(SEVENTH '(1 2 3))
EQL-OK: NIL
(EIGHTH '(1 2 3))
EQL-OK: NIL
(NINTH '(1 2 3))
EQL-OK: NIL
(TENTH '(1 2 3))
EQL-OK: NIL
(FIRST 'NIL)
EQL-OK: NIL
(SECOND 'NIL)
EQL-OK: NIL
(THIRD 'NIL)
EQL-OK: NIL
(FOURTH 'NIL)
EQL-OK: NIL
(FIFTH 'NIL)
EQL-OK: NIL
(SIXTH 'NIL)
EQL-OK: NIL
(SEVENTH 'NIL)
EQL-OK: NIL
(EIGHTH 'NIL)
EQL-OK: NIL
(NINTH 'NIL)
EQL-OK: NIL
(TENTH 'NIL)
EQL-OK: NIL
(REST '(1 2 3 4 5))
EQUAL-OK: (2 3 4 5)
(REST 'NIL)
EQL-OK: NIL
(REST '(A . B))
EQL-OK: B
(REST '(1 2 3 . 4))
EQUAL-OK: (2 3 . 4)
(NTHCDR 0 '(A B C D))
EQUAL-OK: (A B C D)
(NTHCDR 1 '(A B C D))
EQUAL-OK: (B C D)
(NTHCDR 3 '(A B C D))
EQUAL-OK: (D)
(NTHCDR 5 '(A B C D))
EQL-OK: NIL
(NTHCDR -2 '(A B C D))
[SIMPLE-TYPE-ERROR]: NTHCDR: -2 is not a non-negative integer

EQL-OK: ERROR
(NTHCDR 0 'NIL)
EQL-OK: NIL
(NTHCDR 2 'NIL)
EQL-OK: NIL
(LAST '(1 2 3 4 5))
EQUAL-OK: (5)
(LAST 'NIL)
EQL-OK: NIL
(LAST '(A . B))
EQUAL-OK: (A . B)
(LAST '(1 2 3 . 4))
EQUAL-OK: (3 . 4)
(LIST 'A 'B 'C 'D)
EQUAL-OK: (A B C D)
(LIST 'A)
EQUAL-OK: (A)
(LIST '(A B) '(C D))
EQUAL-OK: ((A B) (C D))
(LIST 'A 'NIL)
EQUAL-OK: (A NIL)
(LIST 'NIL 'A)
EQUAL-OK: (NIL A)
(LIST 'NIL 'NIL)
EQUAL-OK: (NIL NIL)
(LIST)
EQL-OK: NIL
(LIST 3 4 'A (CAR '(B . C)) (+ 6 -2))
EQUAL-OK: (3 4 A B 4)
(LIST* 'A 'B 'C 'D)
EQUAL-OK: (A B C . D)
(LIST* 'A)
EQL-OK: A
(LIST* '(A B) '(C D))
EQUAL-OK: ((A B) C D)
(LIST* 'A 'NIL)
EQUAL-OK: (A)
(LIST* 'NIL 'A)
EQUAL-OK: (NIL . A)
(LIST* 'NIL 'NIL)
EQUAL-OK: (NIL)
(LIST*)
[SIMPLE-SOURCE-PROGRAM-ERROR]: EVAL: too few arguments given to LIST*: #1=(LIST*)

EQL-OK: ERROR
(LIST* 3 4 'A (CAR '(B . C)) (+ 6 -2))
EQUAL-OK: (3 4 A B . 4)
(LIST* 'A 'B 'C '(D E F))
EQUAL-OK: (A B C D E F)
(LIST* X)
[SIMPLE-UNBOUND-VARIABLE]: EVAL: variable X has no value

EQL-OK: ERROR
(LIST* 'NIL)
EQL-OK: NIL
(MAKE-LIST 5)
EQUAL-OK: (NIL NIL NIL NIL NIL)
(MAKE-LIST 5 :INITIAL-ELEMENT)
[SIMPLE-PROGRAM-ERROR]: MAKE-LIST: keyword arguments in (:INITIAL-ELEMENT) should occur pairwise

EQL-OK: ERROR
(MAKE-LIST 3 :INITIAL-ELEMENT 'RAH)
EQUAL-OK: (RAH RAH RAH)
(MAKE-LIST 0)
EQL-OK: NIL
(MAKE-LIST 0 :INITIAL-ELEMENT 'AAA)
EQL-OK: NIL
(MAKE-LIST 5 :INITIAL-ELEMENT 'NIL)
EQUAL-OK: (NIL NIL NIL NIL NIL)
(MAKE-LIST)
[SIMPLE-SOURCE-PROGRAM-ERROR]: EVAL: too few arguments given to MAKE-LIST: #1=(MAKE-LIST)

EQL-OK: ERROR
(APPEND '(A B C) '(D E F) 'NIL '(G))
EQUAL-OK: (A B C D E F G)
(APPEND '(A B C) 'D)
EQUAL-OK: (A B C . D)
(APPEND 'A 'B)
[SIMPLE-TYPE-ERROR]: APPEND: A is not a list

EQL-OK: ERROR
(APPEND 'A 'NIL)
[SIMPLE-TYPE-ERROR]: APPEND: A is not a list

EQL-OK: ERROR
(APPEND 'NIL 'NIL)
EQL-OK: NIL
(APPEND 'NIL 'A)
EQL-OK: A
(APPEND 'NIL '(A B C))
EQUAL-OK: (A B C)
(SETQ X '(A B C))
EQUAL-OK: (A B C)
(SETQ Y '(D E F))
EQUAL-OK: (D E F)
(SETQ R (APPEND X Y))
EQUAL-OK: (A B C D E F)
X
EQUAL-OK: (A B C)
Y
EQUAL-OK: (D E F)
(EQ (CDDDR R) Y)
EQL-OK: T
(COPY-LIST '(1 2 3 4 5))
EQUAL-OK: (1 2 3 4 5)
(COPY-LIST 'NIL)
EQL-OK: NIL
(COPY-LIST '(A . B))
EQUAL-OK: (A . B)
(COPY-LIST '(1 2 3 . 4))
EQUAL-OK: (1 2 3 . 4)
(SETQ L '(1 2 3 4 5))
EQUAL-OK: (1 2 3 4 5)
(EQ L (COPY-LIST L))
EQL-OK: NIL
(EQL L (COPY-LIST L))
EQL-OK: NIL
(EQUAL L (COPY-LIST L))
EQL-OK: T
(EQUALP L (COPY-LIST L))
EQL-OK: T
(COPY-ALIST 'A)
[SIMPLE-TYPE-ERROR]: COPY-ALIST: A proper list must not end with A

EQL-OK: ERROR
(COPY-ALIST 'NIL)
EQL-OK: NIL
(COPY-ALIST 5)
[SIMPLE-TYPE-ERROR]: COPY-ALIST: A proper list must not end with 5

EQL-OK: ERROR
(COPY-ALIST '(A B))
EQUAL-OK: (A B)
(COPY-ALIST '((1 . A) (2 . B) (3 . C)))
EQUAL-OK: ((1 . A) (2 . B) (3 . C))
(SETQ X '((1 . A) (2 . B) (3 . C)))
EQUAL-OK: ((1 . A) (2 . B) (3 . C))
(EQ X (COPY-ALIST X))
EQL-OK: NIL
(EQL X (COPY-ALIST X))
EQL-OK: NIL
(EQUAL X (COPY-ALIST X))
EQL-OK: T
(EQ (CADR X) (CADR (COPY-ALIST X)))
EQL-OK: NIL
(EQL (CADR X) (CADR (COPY-ALIST X)))
EQL-OK: NIL
(EQUAL (CADR X) (CADR (COPY-ALIST X)))
EQL-OK: T
(COPY-ALIST '((1 . 2)) '((A . B)))
[SIMPLE-SOURCE-PROGRAM-ERROR]: EVAL: too many arguments given to COPY-ALIST: #1=(COPY-ALIST '((1 . 2)) '((A . B)))

EQL-OK: ERROR
(COPY-ALIST '((A B) C (D E)))
EQUAL-OK: ((A B) C (D E))
(COPY-TREE 'X)
EQL-OK: X
(COPY-TREE 5)
EQL-OK: 5
(COPY-TREE '(A B))
EQUAL-OK: (A B)
(COPY-TREE '(A B (C (D) (E F)) G))
EQUAL-OK: (A B (C (D) (E F)) G)
(COPY-TREE '((1 . E) (2 . F)))
EQUAL-OK: ((1 . E) (2 . F))
(COPY-TREE #*001)
EQUAL-OK: #*001
(SETQ X '(A B (C D) E))
EQUAL-OK: (A B (C D) E)
(EQ X (COPY-TREE X))
EQL-OK: NIL
(EQL X (COPY-TREE X))
EQL-OK: NIL
(EQUAL X (COPY-TREE X))
EQL-OK: T
(EQ (CDADDR X) (CDADDR (COPY-TREE X)))
EQL-OK: NIL
(EQL (CDADDR X) (CDADDR (COPY-TREE X)))
EQL-OK: NIL
(EQUAL (CDADDR X) (CDADDR (COPY-TREE X)))
EQL-OK: T
(REVAPPEND '(A B C) '(D E F) 'NIL '(G))
[SIMPLE-SOURCE-PROGRAM-ERROR]: EVAL: too many arguments given to REVAPPEND: #1=(REVAPPEND '(A B C) '(D E F) 'NIL '(G))

EQL-OK: ERROR
(REVAPPEND '(A B C) 'D)
EQUAL-OK: (C B A . D)
(REVAPPEND 'A 'B)
[SIMPLE-TYPE-ERROR]: REVAPPEND: A proper list must not end with A

EQL-OK: ERROR
(REVAPPEND 'A 'NIL)
[SIMPLE-TYPE-ERROR]: REVAPPEND: A proper list must not end with A

EQL-OK: ERROR
(REVAPPEND 'NIL 'NIL)
EQL-OK: NIL
(REVAPPEND 'NIL 'A)
EQL-OK: A
(REVAPPEND 'NIL '(A B C))
EQUAL-OK: (A B C)
(REVAPPEND '(A B C) '(D E F))
EQUAL-OK: (C B A D E F)
(REVAPPEND '(D E F) '(A B C))
EQUAL-OK: (F E D A B C)
(EQL (REVAPPEND '(A B C) '(D E F)) (APPEND (REVERSE '(A B C)) '(D E F)))
EQL-OK: NIL
(EQUAL (REVAPPEND '(A B C) '(D E F)) (APPEND (REVERSE '(A B C)) '(D E F)))
EQL-OK: T
(SETQ X '(A B C))
EQUAL-OK: (A B C)
(SETQ Y '(D E F))
EQUAL-OK: (D E F)
(SETQ R (REVAPPEND X Y))
EQUAL-OK: (C B A D E F)
X
EQUAL-OK: (A B C)
Y
EQUAL-OK: (D E F)
(EQ (CDDDR R) Y)
EQL-OK: T
(SETQ X '(A B C) Y '(D E F))
EQUAL-OK: (D E F)
(NCONC X Y)
EQUAL-OK: (A B C D E F)
X
EQUAL-OK: (A B C D E F)
(EQ (CDDDR X) Y)
EQL-OK: T
(SETQ X '(A B C) Y '(D E F) Z '(G H I))
EQUAL-OK: (G H I)
(NCONC)
EQL-OK: NIL
(NCONC X)
EQUAL-OK: (A B C)
(NCONC NIL)
EQL-OK: NIL
(NCONC NIL NIL)
EQL-OK: NIL
(NCONC X NIL)
EQUAL-OK: (A B C)
(NCONC NIL NIL NIL NIL)
EQL-OK: NIL
(NCONC NIL NIL X NIL)
EQUAL-OK: (A B C)
(NCONC X NIL Y NIL Z NIL)
EQUAL-OK: (A B C D E F G H I)
X
EQUAL-OK: (A B C D E F G H I)
Y
EQUAL-OK: (D E F G H I)
Z
EQUAL-OK: (G H I)
(EQ (CDDDR X) Y)
EQL-OK: T
(EQ (CDDDR Y) Z)
EQL-OK: T
(NCONC '(1 2) 'A)
EQUAL-OK: (1 2 . A)
(NCONC 'A)
EQL-OK: A
(SETQ X '(A B C) Y '(D E F))
EQUAL-OK: (D E F)
(NRECONC X Y)
EQUAL-OK: (C B A D E F)
X
EQUAL-OK: (C B A D E F)
(TAILP Y X)
EQL-OK: T
(SETQ X '(A B C) Y '(D E F) Z '(G H I))
EQUAL-OK: (G H I)
(NRECONC)
[SIMPLE-SOURCE-PROGRAM-ERROR]: EVAL: too few arguments given to NRECONC: #1=(NRECONC)

EQL-OK: ERROR
(NRECONC X)
[SIMPLE-SOURCE-PROGRAM-ERROR]: EVAL: too few arguments given to NRECONC: #1=(NRECONC X)

EQL-OK: ERROR
(NRECONC NIL)
[SIMPLE-SOURCE-PROGRAM-ERROR]: EVAL: too few arguments given to NRECONC: #1=(NRECONC NIL)

EQL-OK: ERROR
(NRECONC NIL NIL)
EQL-OK: NIL
(NRECONC X NIL)
EQUAL-OK: (C B A)
X
EQUAL-OK: (C B A)
(NRECONC NIL NIL NIL NIL)
[SIMPLE-SOURCE-PROGRAM-ERROR]: EVAL: too many arguments given to NRECONC: #1=(NRECONC NIL NIL NIL NIL)

EQL-OK: ERROR
(NCONC NIL 'X)
EQL-OK: X
(SETQ AA NIL)
EQL-OK: NIL
(PUSH '1 AA)
EQUAL-OK: (1)
(PUSH '2 AA)
EQUAL-OK: (2 1)
(PUSH '2 AA)
EQUAL-OK: (2 2 1)
(SETQ AA '(B A))
EQUAL-OK: (B A)
(PUSHNEW 'A AA)
EQUAL-OK: (B A)
(PUSHNEW 'C AA)
EQUAL-OK: (C B A)
(SETQ XXX NIL)
EQL-OK: NIL
(PUSHNEW 'C XXX :TEST 'EQUAL)
EQUAL-OK: (C)
(PUSHNEW 'C XXX :TEST 'EQUAL)
EQUAL-OK: (C)
(PUSHNEW '(C) XXX :TEST 'EQUAL)
EQUAL-OK: ((C) C)
XXX
EQUAL-OK: ((C) C)
(SETQ XX '(NIL KKK))
EQUAL-OK: (NIL KKK)
(PUSHNEW 'U (CAR XX))
EQUAL-OK: (U)
(PUSHNEW 'U (CAR XX))
EQUAL-OK: (U)
(PUSHNEW 'V (CAR XX))
EQUAL-OK: (V U)
XX
EQUAL-OK: ((V U) KKK)
(PUSHNEW '(W) (CAR XX))
EQUAL-OK: ((W) V U)
(PUSHNEW '(W) (CAR XX))
EQUAL-OK: ((W) (W) V U)
(PUSHNEW '(W) (CAR XX) :TEST 'EQUAL)
EQUAL-OK: ((W) (W) V U)
(PUSHNEW '(W) (CAR XX) :TEST-NOT 'EQUAL)
EQUAL-OK: ((W) (W) V U)
(SETQ AA '(1 2 3))
EQUAL-OK: (1 2 3)
(POP AA)
EQL-OK: 1
AA
EQUAL-OK: (2 3)
(POP AA)
EQL-OK: 2
(POP AA)
EQL-OK: 3
(POP AA)
EQL-OK: NIL
(POP AA)
EQL-OK: NIL
(BUTLAST '(A B C))
EQUAL-OK: (A B)
(BUTLAST '(A B C) 2)
EQUAL-OK: (A)
(NBUTLAST '(A B C D) 3)
EQUAL-OK: (A)
(NBUTLAST '(A B C D) 1)
EQUAL-OK: (A B C)
(NBUTLAST '(A B C D) 0)
EQUAL-OK: (A B C D)
(NBUTLAST '(A B C D) 4)
EQL-OK: NIL
(NBUTLAST '(A B C D) 6)
EQL-OK: NIL
(BUTLAST '#1=(1 2 3 . #1#) 3)
[SIMPLE-ERROR]: BUTLAST: #1=(1 2 3 . #1#) is a circular list

EQL-OK: ERROR
(LET ((LIST-1 (LIST 1 2 3)) (LIST-2 (LIST 'A 'B 'C))) (LIST (REVAPPEND LIST-1 LIST-2) (EQUAL LIST-1 '(1 2 3)) (EQUAL LIST-2 '(A B C))))
EQUAL-OK: ((3 2 1 A B C) T T)
(REVAPPEND '(1 2 3) 'NIL)
EQUAL-OK: (3 2 1)
(REVAPPEND '(1 2 3) '(A . B))
EQUAL-OK: (3 2 1 A . B)
(REVAPPEND 'NIL '(A B C))
EQUAL-OK: (A B C)
(REVAPPEND '(1 2 3) 'A)
EQUAL-OK: (3 2 1 . A)
(REVAPPEND 'NIL 'A)
EQL-OK: A
(LET ((LIST-1 (LIST '1 '2 '3)) (LIST-2 (LIST 'A 'B 'C))) (LIST (NRECONC LIST-1 LIST-2) (EQUAL LIST-1 '(1 2 3)) (EQUAL LIST-2 '(A B C))))
EQUAL-OK: ((3 2 1 A B C) NIL T)
(NCONC)
EQL-OK: NIL
(SETQ X '(A B C))
EQUAL-OK: (A B C)
(SETQ Y '(D E F))
EQUAL-OK: (D E F)
(NCONC X Y)
EQUAL-OK: (A B C D E F)
X
EQUAL-OK: (A B C D E F)
(SETQ FOO (LIST 'A 'B 'C 'D 'E) BAR (LIST 'F 'G 'H 'I 'J) BAZ (LIST 'K 'L 'M))
EQUAL-OK: (K L M)
(SETQ FOO (NCONC FOO BAR BAZ))
EQUAL-OK: (A B C D E F G H I J K L M)
FOO
EQUAL-OK: (A B C D E F G H I J K L M)
BAR
EQUAL-OK: (F G H I J K L M)
BAZ
EQUAL-OK: (K L M)
(SETQ FOO (LIST 'A 'B 'C 'D 'E) BAR (LIST 'F 'G 'H 'I 'J) BAZ (LIST 'K 'L 'M))
EQUAL-OK: (K L M)
(SETQ FOO (NCONC NIL FOO BAR NIL BAZ))
EQUAL-OK: (A B C D E F G H I J K L M)
FOO
EQUAL-OK: (A B C D E F G H I J K L M)
BAR
EQUAL-OK: (F G H I J K L M)
BAZ
EQUAL-OK: (K L M)
(APPEND '(A B C) '(D E F) 'NIL '(G))
EQUAL-OK: (A B C D E F G)
(APPEND '(A B C) 'D)
EQUAL-OK: (A B C . D)
(SETQ LST '(A B C))
EQUAL-OK: (A B C)
(APPEND LST '(D))
EQUAL-OK: (A B C D)
LST
EQUAL-OK: (A B C)
(APPEND)
EQL-OK: NIL
(APPEND 'A)
EQL-OK: A
(UNINTERN 'X)
EQL-OK: T
RUN-TEST: finished "lists152" (0 errors out of 255 tests)
RUN-TEST: started #<INPUT BUFFERED FILE-STREAM CHARACTER #P"lists153.tst" @1>
(UNLESS (AND (= (LOGAND (SYSTEM::ADDRESS-OF NIL) 16777215) 0) (<= (INTEGER-LENGTH MOST-POSITIVE-FIXNUM) 26)) (LET ((Z (MAKE-LIST 5000000))) (GC) (MAPCAR #'NULL Z) (GC) (SETQ Z NIL) (GC) NIL))
EQL-OK: NIL
RUN-TEST: finished "lists153" (0 errors out of 1 test)
RUN-TEST: started #<INPUT BUFFERED FILE-STREAM CHARACTER #P"lists154.tst" @1>
(SUBST 'A 'B '(U B (B) C))
EQUAL-OK: (U A (A) C)
(SUBST 'A 'B '(U B (B) C) :TEST-NOT #'(LAMBDA (X Y) (IF (ATOM Y) (EQL X Y) T)))
EQUAL-OK: (A B (B . A) A . A)
(SUBST 'A 'B '(U B (B) C) :TEST #'(LAMBDA (X Y) (NOT (EQL X Y))))
EQL-OK: A
(SUBST 'A 'B '(U B (B) C) :TEST-NOT #'(LAMBDA (X Y) (NOT (EQL X Y))))
EQUAL-OK: (U A (A) C)
(SUBST 'A 'B '(U B (B) C) :TEST-NOT #'(LAMBDA (X Y) (NOT (EQL X Y))) :KEY #'(LAMBDA (U) (IF (LISTP U) (CAR U))))
EQUAL-OK: (U . A)
(SUBST-IF 'NUMMMER 'NUMBERP '((A (7 (V 6)))))
EQUAL-OK: ((A (NUMMMER (V NUMMMER))))
(SUBST-IF-NOT 'NUMMMER 'NUMBERP '((A (7 (V 6)))))
EQL-OK: NUMMMER
(SUBST-IF-NOT 'NUMMMER #'(LAMBDA (X) (AND (LISTP X) (NUMBERP X))) '((A (7 (V 6)))))
EQL-OK: NUMMMER
(SUBST-IF-NOT 'NUMMMER #'(LAMBDA (X) (OR (LISTP X) (NUMBERP X))) '((A (7 (V 6)))))
EQUAL-OK: ((NUMMMER (7 (NUMMMER 6))))
(NSUBST 'A 'B '(U B (B) C) :TEST-NOT #'(LAMBDA (X Y) (IF (ATOM Y) (EQL X Y) T)))
EQUAL-OK: (A B (B . A) A . A)
(NSUBST 'A 'B '(U B (B) C) :TEST-NOT #'(LAMBDA (X Y) (NOT (EQL X Y))))
EQUAL-OK: (U A (A) C)
(NSUBST 'A 'B '(U B (B) C) :TEST #'(LAMBDA (X Y) (NOT (EQL X Y))))
EQL-OK: A
(NSUBST-IF 'OO 'NUMBERP '(A B C (3 (4) 0)))
EQUAL-OK: (A B C (OO (OO) OO))
(NSUBST-IF-NOT 'OO 'NUMBERP '(A B C (3 (4) 0)))
EQL-OK: OO
(NSUBST-IF-NOT 'OO #'(LAMBDA (X) (OR (ATOM X) (NUMBERP X))) '(A B C (3 (4) 0)))
EQL-OK: OO
(NSUBST-IF-NOT 'OO #'(LAMBDA (X) (AND (ATOM X) (NUMBERP X))) '(A B C (3 (4) 0)))
EQL-OK: OO
(NSUBST-IF-NOT 'OO #'(LAMBDA (X) (OR (LIST X) (NUMBERP X))) '(A B C (3 (4) 0)))
EQUAL-OK: (A B C (3 (4) 0))
(NSUBST-IF-NOT 'OO #'(LAMBDA (X) (OR (LIST X) (SYMBOLP X))) '(A B C (3 (4) 0)))
EQUAL-OK: (A B C (3 (4) 0))
(SUBLIS '((A . A1) (B . B1)) '(A B))
EQUAL-OK: (A1 B1)
(SUBLIS '((A . A1) (B . B1)) '(A B (B . C)))
EQUAL-OK: (A1 B1 (B1 . C))
(SUBLIS '((A . A1) (B . B1) (NIL . NIL1)) '(A B (B . C)))
EQUAL-OK: (A1 B1 (B1 . C) . NIL1)
(SUBLIS '((A . A1) (B . B1) (NIL . NIL1)) '(A B (B C)))
EQUAL-OK: (A1 B1 (B1 C . NIL1) . NIL1)
(SUBLIS '((A . A1) (B . B1) (NIL . NIL1)) '(A B (B C)) :TEST-NOT 'EQL)
EQL-OK: A1
(SUBLIS '((A . A1) (B . B1) (NIL . NIL1)) '(A B (B C)) :TEST-NOT #'(LAMBDA (X Y) (IF (ATOM Y) (EQL X Y))))
EQL-OK: A1
(SUBLIS '(((A) . UU) (A . II)) '(I (A) A))
EQUAL-OK: (I (II) II)
(SUBLIS '(((A) . UU) (A . II)) '(I (A) A) :KEY #'(LAMBDA (X) (IF (LISTP X) (CAR X))))
EQUAL-OK: (I II . II)
(SUBLIS '((1 . 2) (2 . 4) (3 . 6) (A . AA) (B . BB) (C . CC) (D . DD)) '((A B (C (D 1) 2 (3)))))
EQUAL-OK: ((AA BB (CC (DD 2) 4 (6))))
(SUBLIS '((1 . 2) (2 . 4) (3 . 6) (A . AA) (B . BB) (C . CC) (D . DD)) '((A B (C (D 1) 2 (3)))) :TEST #'(LAMBDA (X Y) (AND (NUMBERP X) (NUMBERP Y) (= X Y))))
EQUAL-OK: ((A B (C (D 2) 4 (6))))
(SUBLIS '((1 . 2) (2 . 4) (3 . 6) (A . AA) (B . BB) (C . CC) (D . DD)) '((A B (C (D 1) 2 (3)))) :TEST #'EQUALP :KEY #'(LAMBDA (X) (AND (SYMBOLP X) X)))
EQUAL-OK: ((AA BB (CC (DD 1) 2 (3))))
(SUBLIS '(((A) . UU) (A . II)) '(I (A) A) :TEST #'(LAMBDA (X Y) (IF (LISTP Y) (EQL X (CAR Y)))))
EQUAL-OK: (I (UU) UU)
(NSUBLIS '(((A) . UU) (A . II)) '(I (A) A) :KEY #'(LAMBDA (X) (IF (LISTP X) (CAR X))))
EQUAL-OK: (I II . II)
(NSUBLIS '(((A) . UU) (A . II)) '(I (A) A) :TEST #'(LAMBDA (X Y) (IF (LISTP X) (EQUAL X Y))))
EQUAL-OK: (I UU . UU)
(NSUBLIS '(((A) . UU) (A . II)) '(I (A) A) :TEST #'(LAMBDA (X Y) (IF (LISTP Y) (EQUAL X Y))))
EQUAL-OK: (I UU . UU)
(NSUBLIS '(((A) . UU) (A . II)) '(I (A) A) :TEST #'(LAMBDA (X Y) (IF (LISTP Y) (EQL X (CAR Y)))))
EQUAL-OK: (I (UU) UU)
(SUBLIS '((X . 100) (Z . ZPRIME)) '(PLUS X (MINUS G Z X P) 4 . X))
EQUAL-OK: (PLUS 100 (MINUS G ZPRIME 100 P) 4 . 100)
(SUBLIS '(((+ X Y) - X Y) ((- X Y) + X Y)) '(* (/ (+ X Y) (+ X P)) (- X Y)) :TEST #'EQUAL)
EQUAL-OK: (* (/ (- X Y) (+ X P)) (+ X Y))
(SETQ TREE1 '(1 (1 2) ((1 2 3)) (((1 2 3 4)))))
EQUAL-OK: (1 (1 2) ((1 2 3)) (((1 2 3 4))))
(SUBLIS '((3 . "three")) TREE1)
EQUAL-OK: (1 (1 2) ((1 2 "three")) (((1 2 "three" 4))))
(SUBLIS '((T . "string")) (SUBLIS '((1 . "") (4 . 44)) TREE1) :KEY #'STRINGP)
EQUAL-OK: ("string" ("string" 2) (("string" 2 3)) ((("string" 2 3 44))))
TREE1
EQUAL-OK: (1 (1 2) ((1 2 3)) (((1 2 3 4))))
(SETQ TREE2 '("one" ("one" "two") (("one" "Two" "three"))))
EQUAL-OK: ("one" ("one" "two") (("one" "Two" "three")))
(SUBLIS '(("two" . 2)) TREE2)
EQUAL-OK: ("one" ("one" "two") (("one" "Two" "three")))
TREE2
EQUAL-OK: ("one" ("one" "two") (("one" "Two" "three")))
(SUBLIS '(("two" . 2)) TREE2 :TEST 'EQUAL)
EQUAL-OK: ("one" ("one" 2) (("one" "Two" "three")))
(NSUBLIS '((T QUOTE TEMP)) TREE1 :KEY #'(LAMBDA (X) (OR (ATOM X) (< (LIST-LENGTH X) 3))))
EQUAL-OK: ('TEMP 'TEMP QUOTE TEMP)
(NTHCDR (1+ MOST-POSITIVE-FIXNUM) '(1 2 3))
EQL-OK: NIL
RUN-TEST: finished "lists154" (0 errors out of 46 tests)
RUN-TEST: started #<INPUT BUFFERED FILE-STREAM CHARACTER #P"lists155.tst" @1>
(MEMBER 'A '((A) (B) (A) (C)))
EQL-OK: NIL
(MEMBER 'A '((A) (B) (A) (C)) :KEY 'CAR)
EQUAL-OK: ((A) (B) (A) (C))
(MEMBER-IF 'NUMBERP '((A) (B) (3) (C)) :KEY 'CAR)
EQUAL-OK: ((3) (C))
(MEMBER-IF-NOT 'NUMBERP '((8) (A) (B) (3) (C)) :KEY 'CAR)
EQUAL-OK: ((A) (B) (3) (C))
(TAILP '(A B) '(U A B))
EQL-OK: NIL
(TAILP (CDDR (SETQ XX '(U I A B))) XX)
EQL-OK: T
(TAILP (CDDR (SETQ XX '(U I A B))) XX)
EQL-OK: T
(ADJOIN 'A '(A B C))
EQUAL-OK: (A B C)
(ADJOIN 'A '((A) B C) :TEST 'EQUAL)
EQUAL-OK: (A (A) B C)
(ADJOIN 'A '((A) B C) :TEST 'EQUAL)
EQUAL-OK: (A (A) B C)
(UNION '(A B C D) '(A D I V))
EQUAL-OK: (B C A D I V)
(NUNION '(A B C D) '(U I B A))
EQUAL-OK: (C D U I B A)
(NINTERSECTION '(A B C D) '(C D E F G))
EQUAL-OK: (C D)
(NINTERSECTION '(A B C D) '(C D E F G) :TEST-NOT 'EQL)
EQUAL-OK: (A B C D)
(SET-DIFFERENCE '(A B C D E) '(D B E))
EQUAL-OK: (A C)
(SET-DIFFERENCE '(AUTO ANTON BERTA BERLIN) '(A) :TEST #'(LAMBDA (X Y) (EQL (ELT (SYMBOL-NAME X) 1) (ELT (SYMBOL-NAME Y) 1))))
[SIMPLE-TYPE-ERROR]: ELT: index 1 for "A" is out of range

EQL-OK: ERROR
(SET-DIFFERENCE '(ANTON BERTA AUTO BERLIN) '(AMERILLA) :TEST #'(LAMBDA (X Y) (EQL (ELT (SYMBOL-NAME X) 0) (ELT (SYMBOL-NAME Y) 0))))
EQUAL-OK: (BERTA BERLIN)
(NSET-DIFFERENCE '(A B C D) '(I J C))
EQUAL-OK: (A B D)
(SET-EXCLUSIVE-OR '(A B C D) '(C A I L))
EQUAL-OK: (B D I L)
(SET-EXCLUSIVE-OR '(ANTON ANNA EMIL) '(BERTA AUTO AUGUST) :TEST #'(LAMBDA (X Y) (EQL (ELT (SYMBOL-NAME X) 0) (ELT (SYMBOL-NAME Y) 0))))
EQUAL-OK: (EMIL BERTA)
(NSET-EXCLUSIVE-OR '(A B C) '(I A D C))
EQUAL-OK: (B I D)
(SUBSETP '(A B) '(B U I A C D))
EQL-OK: T
(SUBSETP '(A B) '(B U I C D))
EQL-OK: NIL
(SUBSETP '(A B) '(B A U I C D))
EQL-OK: T
(SUBSETP '(A B) '(A U I C D))
EQL-OK: NIL
RUN-TEST: finished "lists155" (0 errors out of 25 tests)
RUN-TEST: started #<INPUT BUFFERED FILE-STREAM CHARACTER #P"lists156.tst" @1>
(ACONS 'A 'B NIL)
EQUAL-OK: ((A . B))
(ACONS 'A 'B '((C . D)))
EQUAL-OK: ((A . B) (C . D))
(PAIRLIS '(A B C) '(1 2))
[SIMPLE-ERROR]: PAIRLIS: lists (A B C) and (1 2) are not of same length

EQL-OK: ERROR
(PAIRLIS '(A B C) '(1 2 3))
EQUAL-OK: ((C . 3) (B . 2) (A . 1))
(ASSOC 'A '((B C) (A U) (A I)))
EQUAL-OK: (A U)
(ASSOC 'A '((B C) ((A) U) (A I)))
EQUAL-OK: (A I)
(ASSOC 'A '((B C) ((A) U) (A I)) :KEY #'(LAMBDA (X) (IF (LISTP X) (CAR X))))
EQUAL-OK: ((A) U)
(ASSOC 'A '((B C) A ((A) U) (A I)) :KEY #'(LAMBDA (X) (IF (LISTP X) (CAR X))))
[SIMPLE-TYPE-ERROR]: ASSOC: A is not a list

EQL-OK: ERROR
(ASSOC 'A '((B C) A ((A) U) (A I)) :KEY #'(LAMBDA (X) (IF (ATOM X) X)))
[SIMPLE-TYPE-ERROR]: ASSOC: A is not a list

EQL-OK: ERROR
(ASSOC 'A '((B C) A ((A) U) (A I)) :TEST #'(LAMBDA (X Y) (IF (LISTP Y) (EQL (CAR Y) X))))
[SIMPLE-TYPE-ERROR]: ASSOC: A is not a list

EQL-OK: ERROR
(ASSOC 'A '((B C) A ((A) U) (A I)) :TEST #'(LAMBDA (X Y) (IF (ATOM Y) (EQL Y X))))
[SIMPLE-TYPE-ERROR]: ASSOC: A is not a list

EQL-OK: ERROR
(ASSOC 'A '((B C) A ((A) U) (A I)) :TEST-NOT #'(LAMBDA (X Y) (IF (ATOM Y) (EQL Y X))))
EQUAL-OK: (B C)
(ASSOC-IF 'NUMBERP '((A . 3) (3 . A)))
EQUAL-OK: (3 . A)
(ASSOC-IF 'SYMBOLP '((A . 3) (3 . A)))
EQUAL-OK: (A . 3)
(ASSOC-IF-NOT 'SYMBOLP '((A . 3) (3 . A)))
EQUAL-OK: (3 . A)
(ASSOC-IF-NOT 'NUMBERP '((A . 3) (3 . A)))
EQUAL-OK: (A . 3)
(RASSOC 'A '((1 . B) (2 . A)))
EQUAL-OK: (2 . A)
(RASSOC-IF 'SYMBOLP '((1 . B) (2 . A)))
EQUAL-OK: (1 . B)
(RASSOC-IF 'SYMBOLP '((1 . 3) (2 . A)))
EQUAL-OK: (2 . A)
(RASSOC-IF-NOT 'SYMBOLP '((1 . 3) (2 . A)))
EQUAL-OK: (1 . 3)
RUN-TEST: finished "lists156" (0 errors out of 20 tests)
RUN-TEST: started #<INPUT BUFFERED FILE-STREAM CHARACTER #P"list-set.tst" @1>
(SET-DIFFERENCE '(A B C) '(A))
EQUAL-OK: (B C)
(SET-DIFFERENCE (LOOP :FOR I :FROM 1 :TO 100 :COLLECT I) (LOOP :FOR I :FROM 1 :TO 99 :COLLECT I) :TEST 'EQUALP)
EQUAL-OK: (100)
RUN-TEST: finished "list-set" (0 errors out of 2 tests)
RUN-TEST: started #<INPUT BUFFERED FILE-STREAM CHARACTER #P"loop.tst" @1>
(LOOP FOR X FROM 1 TO 9 FOR Y = NIL THEN X COLLECT (LIST X Y))
EQUAL-OK: ((1 NIL) (2 2) (3 3) (4 4) (5 5) (6 6) (7 7) (8 8) (9 9))
(LOOP FOR X FROM 1 TO 9 AND Y = NIL THEN X COLLECT (LIST X Y))
EQUAL-OK: ((1 NIL) (2 1) (3 2) (4 3) (5 4) (6 5) (7 6) (8 7) (9 8))
(WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (LOOP AS I FROM 1 TO 5 DO (PRINT I)))
EQUAL-OK: "
1 
2 
3 
4 
5 "
(WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (LOOP FOR I FROM 10 DOWNTO 1 BY 3 DO (PRINT I)))
EQUAL-OK: "
10 
7 
4 
1 "
(WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (LOOP AS I BELOW 5 DO (PRINT I)))
EQUAL-OK: "
0 
1 
2 
3 
4 "
(WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (LOOP FOR ITEM IN '(1 2 3 4 5) DO (PRINT ITEM)))
EQUAL-OK: "
1 
2 
3 
4 
5 "
(WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (LOOP FOR ITEM IN '(1 2 3 4 5) BY #'CDDR DO (PRINT ITEM)))
EQUAL-OK: "
1 
3 
5 "
(LOOP FOR (ITEM . X) (T . FIXNUM) IN '((A . 1) (B . 2) (C . 3)) UNLESS (EQ ITEM 'B) SUM X)
EQL-OK: 4
(LOOP FOR SUBLIST ON '(A B C D) COLLECT SUBLIST)
EQUAL-OK: ((A B C D) (B C D) (C D) (D))
(WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (LOOP FOR (ITEM) ON '(1 2 3) DO (PRINT ITEM)))
EQUAL-OK: "
1 
2 
3 "
(WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (LOOP FOR ITEM IN '(1 2 3) DO (PRINT ITEM)))
EQUAL-OK: "
1 
2 
3 "
(LOOP FOR X ON '(1 2 . 3) COLLECT X)
EQUAL-OK: ((1 2 . 3) (2 . 3))
(LOOP FOR I BELOW 5 FOR J = 10 THEN I COLLECT J)
EQUAL-OK: (10 1 2 3 4)
(LOOP FOR I BELOW 5 FOR J = I COLLECT J)
EQUAL-OK: (0 1 2 3 4)
(LOOP FOR ITEM = 1 THEN (+ ITEM 10) REPEAT 5 COLLECT ITEM)
EQUAL-OK: (1 11 21 31 41)
(LOOP FOR CHAR ACROSS (THE SIMPLE-STRING "Hello") COLLECT CHAR)
EQUAL-OK: (#\H #\e #\l #\l #\o)
(WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (LOOP REPEAT 3 DO (WRITE-LINE "What I say three times is true")))
EQUAL-OK: "What I say three times is true
What I say three times is true
What I say three times is true
"
(WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (LOOP REPEAT -15 DO (WRITE-LINE "What you see is what you expect")))
EQUAL-OK: ""
(LOOP FOR I FIXNUM FROM 3 WHEN (ODDP I) COLLECT I WHILE (< I 5))
EQUAL-OK: (3 5)
(LOOP FOR I FROM 0 TO 10 ALWAYS (< I 11))
EQL-OK: T
(LOOP FOR I FROM 0 TO 10 NEVER (> I 11))
EQL-OK: T
(LOOP FOR I FROM 0 THEREIS (WHEN (> I 10) I))
EQL-OK: 11
(WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (LOOP FOR I FROM 0 TO 10 ALWAYS (< I 9) FINALLY (PRINT "You won't see this")))
EQUAL-OK: ""
(WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (LOOP NEVER T FINALLY (PRINT "You won't see this")))
EQUAL-OK: ""
(WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (LOOP THEREIS "Here is my value" FINALLY (PRINT "You won't see this")))
EQUAL-OK: ""
(LOOP THEREIS "Here is my value" FINALLY (PRINT "You won't see this"))
EQUAL-OK: "Here is my value"
(WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (LOOP FOR I FROM 1 TO 10 THEREIS (> I 11) FINALLY (PRINT I)))
EQUAL-OK: "
11 "
(LET (EVEREST CHOCORUA SAHARA) (DEFSTRUCT MOUNTAIN HEIGHT DIFFICULTY (WHY "because it is there")) (SETQ EVEREST (MAKE-MOUNTAIN :HEIGHT '(2.86E-13 PARSECS))) (SETQ CHOCORUA (MAKE-MOUNTAIN :HEIGHT '(1059180001 MICRONS))) (DEFSTRUCT DESERT AREA (HUMIDITY 0)) (SETQ SAHARA (MAKE-DESERT :AREA '(212480000 SQUARE FURLONGS))) (LOOP FOR X IN (LIST EVEREST SAHARA CHOCORUA) THEREIS (AND (MOUNTAIN-P X) (MOUNTAIN-HEIGHT X))))
EQUAL-OK: (2.86E-13 PARSECS)
(WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (LOOP FOR (MONTH DATE-LIST) IN '((JANUARY (24 28)) (FEBRUARY (17 29 12))) DO (LOOP FOR DATE IN DATE-LIST DO (CASE DATE (29 (WHEN (EQ MONTH 'FEBRUARY) (LOOP-FINISH)))) DO (FORMAT T "~:(~A~) ~A~%" MONTH DATE))))
EQUAL-OK: "January 24
January 28
February 17
"
(LOOP FOR I IN '(1 2 3 STOP-HERE 4 5 6) WHEN (SYMBOLP I) DO (LOOP-FINISH) COUNT I)
EQL-OK: 3
(LOOP FOR I IN '(1 2 3 STOP-HERE 4 5 6) UNTIL (SYMBOLP I) COUNT I)
EQL-OK: 3
(LOOP FOR NAME IN '(FRED SUE ALICE JOE JUNE) FOR KIDS IN '((BOB KEN) NIL NIL (KRIS SUNSHINE) NIL) COLLECT NAME APPEND KIDS)
EQUAL-OK: (FRED BOB KEN SUE ALICE JOE KRIS SUNSHINE JUNE)
(MULTIPLE-VALUE-LIST (LOOP FOR NAME IN '(FRED SUE ALICE JOE JUNE) AS AGE IN '(22 26 19 20 10) APPEND (LIST NAME AGE) INTO NAME-AND-AGE-LIST COUNT NAME INTO NAME-COUNT SUM AGE INTO TOTAL-AGE FINALLY (RETURN (VALUES (ROUND TOTAL-AGE NAME-COUNT) NAME-AND-AGE-LIST))))
EQUAL-OK: (19 (FRED 22 SUE 26 ALICE 19 JOE 20 JUNE 10))
(LOOP FOR X FROM 1 TO 20 WHEN (EQL (MOD X 5) 0) COLLECT X INTO FOO WHEN (EQL (MOD X 5) 2) COLLECT X INTO FOO FINALLY (RETURN FOO))
EQUAL-OK: (2 5 7 10 12 15 17 20)
(LOOP FOR I IN '(BIRD 3 4 TURTLE (1 . 4) HORSE CAT) WHEN (SYMBOLP I) COLLECT I)
EQUAL-OK: (BIRD TURTLE HORSE CAT)
(LOOP FOR I FROM 1 TO 10 IF (ODDP I) COLLECT I)
EQUAL-OK: (1 3 5 7 9)
(WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (LOOP FOR I IN '(A B C D) BY #'CDDR COLLECT I INTO MY-LIST FINALLY (PRINT MY-LIST)))
EQUAL-OK: "
(A C) "
(LOOP FOR X IN '((A) (B) ((C))) APPEND X)
EQUAL-OK: (A B (C))
(LOOP FOR I UPFROM 0 AS X IN '(A B (C)) NCONC (IF (EVENP I) (LIST X) 'NIL))
EQUAL-OK: (A (C))
(LOOP FOR X IN '((A) (B) (C . WHATEVER)) APPENDING X)
EQUAL-OK: (A B C . WHATEVER)
(LOOP FOR X IN '((A) (B) (C . WHATEVER)) NCONC X)
EQUAL-OK: (A B C . WHATEVER)
(LOOP FOR X IN '(A B C D E) NCONC (CONS X 'FOO))
EQUAL-OK: (A B C D E . FOO)
(LOOP FOR I IN '(A B NIL C NIL D E) COUNT I)
EQL-OK: 5
(LOOP FOR I FIXNUM IN '(1 2 3 4 5) SUM I)
EQL-OK: 15
(LET ((SERIES '(1.2 4.3 5.7))) (LOOP FOR V IN SERIES SUM (* 2.0 V)))
EQL-OK: 22.4
(LOOP FOR I IN '(2 1 5 3 4) MAXIMIZE I)
EQL-OK: 5
(LOOP FOR I IN '(2 1 5 3 4) MINIMIZE I)
EQL-OK: 1
(LET ((SERIES '(1.2 4.3 5.7))) (LOOP FOR V IN SERIES MAXIMIZE (ROUND V) FIXNUM))
EQL-OK: 6
(LET ((SERIES '(1.2 4.3 5.7))) (LOOP FOR V IN SERIES MINIMIZE (ROUND V) INTO RESULT FIXNUM FINALLY (RETURN RESULT)))
EQL-OK: 1
(LOOP WITH A = 1 WITH B = (+ A 2) WITH C = (+ B 3) WITH D = (+ C 4) RETURN (LIST A B C D))
EQUAL-OK: (1 3 6 10)
(LOOP WITH A = 1 AND B = 2 AND C = 3 AND D = 4 RETURN (LIST A B C D))
EQUAL-OK: (1 2 3 4)
(LET ((A 5) (B 10) (C 1729)) (LOOP WITH A = 1 AND B = (+ A 2) AND C = (+ B 3) AND D = (+ C 4) RETURN (LIST A B C D)))
EQUAL-OK: (1 7 13 1733)
(LOOP WITH (A B C) (FLOAT INTEGER FLOAT) RETURN (FORMAT NIL "~A ~A ~A" A B C))
WARNING: LOOP: After (A B C), (FLOAT INTEGER FLOAT) is interpreted as a type
         specification
EQUAL-OK: "0.0 0 0.0"
(LOOP WITH (A B C) FLOAT RETURN (FORMAT NIL "~A ~A ~A" A B C))
EQUAL-OK: "0.0 0.0 0.0"
(LET ((NUMBERS-LIST '(3 2 4 6 1 7 8)) (RESULTS NIL)) (CONS (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (LOOP FOR I IN NUMBERS-LIST WHEN (ODDP I) DO (PRINT I) AND COLLECT I INTO ODD-NUMBERS AND DO (TERPRI) ELSE COLLECT I INTO EVEN-NUMBERS FINALLY (SETQ RESULTS (LIST ODD-NUMBERS EVEN-NUMBERS)))) RESULTS))
EQUAL-OK: ("
3 

1 

7 
" (3 1 7) (2 4 6 8))
(LOOP FOR I IN '(1 2 3 4 5 6) WHEN (AND (> I 3) I) COLLECT IT)
EQUAL-OK: (4 5 6)
(LOOP FOR I IN '(1 2 3 4 5 6) WHEN (AND (> I 3) I) RETURN IT)
EQL-OK: 4
(LOOP FOR I IN '(1 2 3 4 5 6) WHEN (AND (> I 3) I) RETURN IT)
EQL-OK: 4
(LOOP FOR I IN '(1 2 3 4 5 6) THEREIS (AND (> I 3) I))
EQL-OK: 4
(LET ((LIST '(0 3.0 APPLE 4 5 9.8 ORANGE BANANA))) (LOOP FOR I IN LIST WHEN (NUMBERP I) WHEN (FLOATP I) COLLECT I INTO FLOAT-NUMBERS ELSE COLLECT I INTO OTHER-NUMBERS ELSE WHEN (SYMBOLP I) COLLECT I INTO SYMBOL-LIST ELSE DO (ERROR "found a funny value in list ~S, value ~S~%" LIST I) FINALLY (RETURN (LIST FLOAT-NUMBERS OTHER-NUMBERS SYMBOL-LIST))))
EQUAL-OK: ((3.0 9.8) (0 4 5) (APPLE ORANGE BANANA))
(LET ((IT 'Z)) (LOOP FOR X IN '(A NIL B C D) IF X COLLECT IT END COLLECT IT))
EQUAL-OK: (A Z Z B Z C Z D Z)
(LET ((IT 'Z)) (LOOP FOR X IN '(A NIL B C D) WHEN X COLLECT IT AND COLLECT IT))
EQUAL-OK: (A Z B Z C Z D Z)
(LOOP FOR I IN '(1 2 3 4 5 6) THEREIS (AND (> I 3) I))
EQL-OK: 4
(WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (LOOP FOR X FROM 0 TO 3 DO (PRINT X) IF (ZEROP (MOD X 2)) DO (WRITE-STRING " a") AND IF (ZEROP (FLOOR X 2)) DO (WRITE-STRING " b") AND DO (WRITE-STRING " c")))
EQUAL-OK: "
0  a b c
1 
2  a
3 "
(WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (LOOP FOR X FROM 0 TO 3 DO (PRINT X) IF (ZEROP (MOD X 2)) DO (WRITE-STRING " a") AND IF (ZEROP (FLOOR X 2)) DO (WRITE-STRING " b") END AND DO (WRITE-STRING " c")))
EQUAL-OK: "
0  a b c
1 
2  a c
3 "
(WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (LOOP FOR I FROM 1 TO 5 DO (PRINT I)))
EQUAL-OK: "
1 
2 
3 
4 
5 "
(WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (LOOP FOR I FROM 1 TO 4 DO (PRINT I) (PRINT (* I I))))
EQUAL-OK: "
1 
1 
2 
4 
3 
9 
4 
16 "
(LOOP FOR ITEM IN '(1 2 3 A 4 5) WHEN (NOT (NUMBERP ITEM)) RETURN (FORMAT NIL "non-numeric value: ~S" ITEM))
EQUAL-OK: "non-numeric value: A"
(LOOP FOR ITEM IN '(1 2 3 A 4 5) WHEN (NOT (NUMBERP ITEM)) DO (RETURN (FORMAT NIL "non-numeric value: ~S" ITEM)))
EQUAL-OK: "non-numeric value: A"
(LOOP FOR NUMLIST IN '((1 2 4.0) (5 6 8.3) (8 9 10.4)) FOR A INTEGER = (FIRST NUMLIST) FOR B INTEGER = (SECOND NUMLIST) FOR C FLOAT = (THIRD NUMLIST) COLLECT (LIST C B A))
WARNING: LOOP: After A, INTEGER is interpreted as a type specification

WARNING: LOOP: After B, INTEGER is interpreted as a type specification
EQUAL-OK: ((4.0 2 1) (8.3 6 5) (10.4 9 8))
(LOOP FOR NUMLIST IN '((1 2 4.0) (5 6 8.3) (8 9 10.4)) FOR A INTEGER = (FIRST NUMLIST) AND FOR B INTEGER = (SECOND NUMLIST) AND FOR C FLOAT = (THIRD NUMLIST) COLLECT (LIST C B A))
WARNING: LOOP: After A, INTEGER is interpreted as a type specification

WARNING: LOOP: After B, INTEGER is interpreted as a type specification
EQUAL-OK: ((4.0 2 1) (8.3 6 5) (10.4 9 8))
(LOOP FOR NUMLIST IN '((1 2 4.0) (5 6 8.3) (8 9 10.4)) FOR A INTEGER = (FIRST NUMLIST) AND B INTEGER = (SECOND NUMLIST) AND C FLOAT = (THIRD NUMLIST) COLLECT (LIST C B A))
WARNING: LOOP: After A, INTEGER is interpreted as a type specification

WARNING: LOOP: After B, INTEGER is interpreted as a type specification
EQUAL-OK: ((4.0 2 1) (8.3 6 5) (10.4 9 8))
(LOOP FOR (A B C) (INTEGER INTEGER FLOAT) IN '((1 2 4.0) (5 6 8.3) (8 9 10.4)) COLLECT (LIST C B A))
WARNING: LOOP: After (A B C), (INTEGER INTEGER FLOAT) is interpreted as a type
         specification
EQUAL-OK: ((4.0 2 1) (8.3 6 5) (10.4 9 8))
(LOOP FOR (A B C) FLOAT IN '((1.0 2.0 4.0) (5.0 6.0 8.3) (8.0 9.0 10.4)) COLLECT (LIST C B A))
EQUAL-OK: ((4.0 2.0 1.0) (8.3 6.0 5.0) (10.4 9.0 8.0))
(LOOP WITH (A B) FLOAT = '(1.0 2.0) AND (C D) INTEGER = '(3 4) AND (E F) RETURN (LIST A B C D E F))
WARNING: LOOP: After (C D), INTEGER is interpreted as a type specification
EQUAL-OK: (1.0 2.0 3 4 NIL NIL)
(LOOP FOR (A NIL B) = '(1 2 3) DO (RETURN (LIST A B)))
EQUAL-OK: (1 3)
(LOOP FOR (X . Y) = '(1 . 2) DO (RETURN Y))
EQL-OK: 2
(LOOP FOR ((A . B) (C . D)) OF-TYPE ((FLOAT . FLOAT) (INTEGER . INTEGER)) IN '(((1.2 . 2.4) (3 . 4)) ((3.4 . 4.6) (5 . 6))) COLLECT (LIST A B C D))
EQUAL-OK: ((1.2 2.4 3 4) (3.4 4.6 5 6))
(LOOP FOR BUFFER IN '("\"Hello\"" "\"unterminated" "nothing") COLLECT (LOOP INITIALLY (UNLESS (CHAR= (CHAR BUFFER 0) #\") (LOOP-FINISH)) FOR I FIXNUM FROM 1 BELOW (LENGTH BUFFER) WHEN (CHAR= (CHAR BUFFER I) #\") RETURN I))
EQUAL-OK: (6 NIL NIL)
(LET (RESULT) (LIST (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (SETQ RESULT (LOOP FOR I FROM 1 TO 10 WHEN (> I 5) COLLECT I FINALLY (PRINT I)))) RESULT))
EQUAL-OK: ("
11 " (6 7 8 9 10))
(MULTIPLE-VALUE-LIST (LOOP FOR I FROM 1 TO 10 WHEN (> I 5) COLLECT I INTO NUMBER-LIST AND COUNT I INTO NUMBER-COUNT FINALLY (RETURN (VALUES NUMBER-COUNT NUMBER-LIST))))
EQUAL-OK: (5 (6 7 8 9 10))
(LET (Z) (LIST (LOOP FOR X FROM 1 TO 10 COUNT (< X 5) INTO FOO FLOAT FINALLY (SETQ Z FOO)) Z))
EQUAL-OK: (NIL 4.0)
(LET (RESULT) (LIST (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (SETQ RESULT (LOOP NAMED MAX FOR I FROM 1 TO 10 DO (PRINT I) DO (RETURN-FROM MAX 'DONE)))) RESULT))
EQUAL-OK: ("
1 " DONE)
(LOOP FOR I = 0 FOR J TO 2 COLLECT J)
EQUAL-OK: (0 1 2)
(LOOP FOR I IN '(1 2) FOR J = I FOR K = J COLLECT (LIST I J K))
EQUAL-OK: ((1 1 1) (2 2 2))
(LOOP FOR IDX UPFROM 0 BELOW 5 FOR CHAR = (AREF "Error" IDX) COLLECT CHAR)
EQUAL-OK: (#\E #\r #\r #\o #\r)
(LET ((HASH-TABLE (MAKE-HASH-TABLE))) (SETF (GETHASH 1 HASH-TABLE) 100) (SETF (GETHASH 2 HASH-TABLE) 200) (SORT (LOOP FOR KEY BEING EACH HASH-KEY IN HASH-TABLE USING (HASH-VALUE VAL) FOR KEY+1 = (1+ KEY) DO (ASSERT (= 100 (/ VAL KEY))) COLLECT (LIST KEY KEY+1 VAL)) #'< :KEY #'CAR))
EQUAL-OK: ((1 2 100) (2 3 200))
(LOOP FOR I ACROSS '#(1 2 3 4) FOR J = (1+ I) COLLECT (LIST I J))
EQUAL-OK: ((1 2) (2 3) (3 4) (4 5))
(LOOP FOR I IN 'NIL FOR J = (1+ I) COLLECT J)
EQL-OK: NIL
(LOOP FOR I ACROSS '#() FOR J = (1+ I) COLLECT J)
EQL-OK: NIL
(LOOP FOR X = T FOR Y IN '(A B C) FOR Z = T COLLECT Y)
EQUAL-OK: (A B C)
(LOOP FOR X = T FOR Y ACROSS '#(A B C) FOR Z = T COLLECT Y)
EQUAL-OK: (A B C)
(LOOP FOR X = T FOR Y IN NIL FOR Z = T COLLECT Y)
EQL-OK: NIL
(LOOP FOR X = T FOR Y ACROSS '#() FOR Z = T COLLECT Y)
EQL-OK: NIL
(LET ((HASH-TABLE (MAKE-HASH-TABLE))) (SETF (GETHASH 1 HASH-TABLE) 100) (SETF (GETHASH 2 HASH-TABLE) 200) (SORT (LOOP FOR X = T FOR KEY BEING EACH HASH-KEY IN HASH-TABLE USING (HASH-VALUE VAL) FOR KEY+1 = (1+ KEY) FOR Z = T COLLECT (LIST KEY KEY+1 VAL)) #'< :KEY #'CAR))
EQUAL-OK: ((1 2 100) (2 3 200))
(LOOP FOR I FROM 1 TO 0 COLLECT I)
EQL-OK: NIL
(LET ((HASH-TABLE (MAKE-HASH-TABLE))) (SETF (GETHASH 1 HASH-TABLE) 100) (SETF (GETHASH 2 HASH-TABLE) 200) (SORT (LOOP FOR VAL BEING EACH HASH-VALUE IN HASH-TABLE COLLECT VAL) #'<))
EQUAL-OK: (100 200)
(LET ((HASH-TABLE (MAKE-HASH-TABLE))) (SETF (GETHASH 1 HASH-TABLE) 100) (SETF (GETHASH 2 HASH-TABLE) 200) (SORT (LOOP FOR VAL BEING EACH HASH-VALUE IN HASH-TABLE FOR DERIV-VAL = (/ 1 VAL) COLLECT DERIV-VAL) #'<))
EQUAL-OK: (1/200 1/100)
(LET ((HASH-TABLE (MAKE-HASH-TABLE))) (SETQ I 123456789) (SETF (GETHASH 1 HASH-TABLE) 100) (SETF (GETHASH 2 HASH-TABLE) 200) (LOOP FOR I ACROSS '#(1 2 3 4 5 6) COLLECT I) (LOOP FOR I IN '(1 2 3 4 5 6) COLLECT I) (LOOP FOR I BEING EACH HASH-KEY OF HASH-TABLE COLLECT I) (LOOP FOR I BEING EACH PRESENT-SYMBOL OF *PACKAGE* COLLECT I) I)
EQL-OK: 123456789
(LOOP FOR X ON '(3 4 5) FOR Y = (CAR X) FOR Z IN '(A B C) COLLECT Z)
EQUAL-OK: (A B C)
(LOOP FOR X ACROSS '#(3 4 5) FOR Y = (1+ X) FOR Z ACROSS '#(A B C) COLLECT (LIST X Y Z))
EQUAL-OK: ((3 4 A) (4 5 B) (5 6 C))
(LOOP FOR X ACROSS '#() FOR Y = X FOR Z ACROSS '#(A B C) COLLECT (LIST X Y Z))
EQL-OK: NIL
(LOOP FOR X ACROSS '#(1 2 3) FOR Y = X FOR Z ACROSS '#() COLLECT (LIST X Y Z))
EQL-OK: NIL
(LOOP FOR X ACROSS '#(1 2 3) FOR Y = (1+ X) FOR Z ACROSS '#(A B) COLLECT (LIST X Y Z))
EQUAL-OK: ((1 2 A) (2 3 B))
(LOOP FOR X ACROSS '#(1 2) FOR Y = (1+ X) FOR Z ACROSS '#(A B C) COLLECT (LIST X Y Z))
EQUAL-OK: ((1 2 A) (2 3 B))
(LET ((PACKAGE (MAKE-PACKAGE "LOOP-TEST"))) (INTERN "blah" PACKAGE) (LET ((BLAH2 (INTERN "blah2" PACKAGE))) (EXPORT BLAH2 PACKAGE)) (LIST (SORT (LOOP FOR SYM BEING EACH PRESENT-SYMBOL OF PACKAGE FOR SYM-NAME = (SYMBOL-NAME SYM) COLLECT SYM-NAME) #'STRING<) (SORT (LOOP FOR SYM BEING EACH EXTERNAL-SYMBOL OF PACKAGE FOR SYM-NAME = (SYMBOL-NAME SYM) COLLECT SYM-NAME) #'STRING<)))
EQUAL-OK: (("blah" "blah2") ("blah2"))
(LET ((HT (MAKE-HASH-TABLE))) (LOOP FOR KEY BEING EACH HASH-KEY OF HT FOR VALUE = (GETHASH KEY HT) COLLECT (LIST KEY VALUE)))
EQL-OK: NIL
(LET ((HT (MAKE-HASH-TABLE))) (LOOP FOR DUMMY = (+ 1 2) FOR KEY BEING EACH HASH-KEY OF HT COLLECT (LIST KEY)))
EQL-OK: NIL
(LET ((LIST '(1 2 3))) (LOOP FOR X IN LIST AND Y = NIL THEN X COLLECT (LIST X Y)))
EQUAL-OK: ((1 NIL) (2 1) (3 2))
(LET ((LIST '(1 2 3))) (LOOP FOR X IN LIST FOR Y = NIL THEN X COLLECT (LIST X Y)))
EQUAL-OK: ((1 NIL) (2 2) (3 3))
(LET ((LIST '(1 2 3))) (LOOP FOR X IN LIST FOR Y = NIL THEN X AND Z = NIL THEN Y COLLECT (LIST X Y Z)))
EQUAL-OK: ((1 NIL NIL) (2 2 NIL) (3 3 2))
(LOOP REPEAT 4 FOR X = (+ 1 1) COLLECT X)
EQUAL-OK: (2 2 2 2)
(LET ((X 1)) (LOOP FOR I FROM X BY (INCF X) TO 10 COLLECT I))
EQUAL-OK: (1 3 5 7 9)
(LET ((X 1)) (LOOP FOR I BY (INCF X) FROM X TO 10 COLLECT I))
EQUAL-OK: (2 4 6 8 10)
(LOOP FOR I FROM 1 TO 5 COLLECT I INTO C COLLECT (COPY-LIST C))
EQUAL-OK: ((1) (1 2) (1 2 3) (1 2 3 4) (1 2 3 4 5))
(LET ((REM 55)) (LOOP FOR I BELOW 3 WITH NUM = (* 10 REM) AND REM COLLECT REM))
EQUAL-OK: (NIL NIL NIL)
(PROGN (DELETE-PACKAGE "LOOP-TEST") T)
EQL-OK: T
(UNWIND-PROTECT (LET ((*PACKAGE* (MAKE-PACKAGE "LOOP-TEST-PACKAGE-1"))) (READ-FROM-STRING "(THIS IS A TEST)") (EXPORT (INTERN "THIS")) (SET-EXCLUSIVE-OR '("THIS" "IS" "A" "TEST") (LOOP FOR X BEING EACH PRESENT-SYMBOL COLLECT X) :TEST #'STRING=)) (DELETE-PACKAGE "LOOP-TEST-PACKAGE-1"))
EQL-OK: NIL
(LET ((ALIST '(1 2 3 4 5 6))) (LOOP FOR VALUE IN ALIST IF (ODDP VALUE) COLLECT VALUE INTO ALIST ELSE COLLECT VALUE INTO BLIST FINALLY (RETURN (LIST ALIST BLIST))))
EQUAL-OK: ((1 3 5) (2 4 6))
(LOOP :FOR X = 0 :THEN (1+ X) :FOR Y = (1+ X) :THEN (ASH Y 1) :FOR Z :ACROSS #(1 3 9 27 81 243) :FOR W = (+ X Y Z) :INITIALLY (ASSERT (ZEROP X)) :INITIALLY (ASSERT (= 2 W)) :UNTIL (>= W 100) :COLLECT W)
EQUAL-OK: (2 6 15 38)
(LET ((I 0)) (LOOP (INCF I) (IF (= I 3) (RETURN I))))
EQL-OK: 3
(LET ((I 0) (J 0)) (TAGBODY (LOOP (INCF J 3) (INCF I) (IF (= I 3) (GO EXIT))) EXIT) J)
EQL-OK: 9
(LOOP FOR X FROM 1 TO 10 FOR Y = NIL THEN X COLLECT (LIST X Y))
EQUAL-OK: ((1 NIL) (2 2) (3 3) (4 4) (5 5) (6 6) (7 7) (8 8) (9 9) (10 10))
(LOOP FOR X FROM 1 TO 10 AND Y = NIL THEN X COLLECT (LIST X Y))
EQUAL-OK: ((1 NIL) (2 1) (3 2) (4 3) (5 4) (6 5) (7 6) (8 7) (9 8) (10 9))
(LOOP FOR X IN '(1 2 3) FOR Y IN '(4 5 6) SUM (* X Y) INTO Z FINALLY (RETURN (+ X Y Z)))
EQL-OK: 41
(CDR (MULTIPLE-VALUE-LIST (COMPILE NIL (LAMBDA (X) (LOOP :WITH (A . B) = X :REPEAT 10 :FINALLY (PPRINT (LIST A B)))))))
EQUAL-OK: (NIL NIL)
(LET ((I 0)) (LOOP FOR NIL FROM 10 BELOW 15 COLLECT (INCF I)))
EQUAL-OK: (1 2 3 4 5)
(LOOP FOR NIL ON NIL DO (RETURN T))
EQL-OK: NIL
(HANDLER-CASE (EVAL (MACROEXPAND '(LOOP :FOR I :FROM 1 :TO 20 :SUM I :MAXIMIZE I))) (PROGRAM-ERROR (C) (PRINC C) (VALUES '(CORRECT PROGRAM-ERROR))))
#1=(LOOP :FOR I :FROM 1 :TO 20 :SUM I :MAXIMIZE I): variable #:ACCUNUM-VAR-484444 is used in incompatible clauses MAXIMIZE I and SUM I
EQUAL-OK: (CORRECT PROGRAM-ERROR)
(HANDLER-CASE (EVAL (MACROEXPAND '(LOOP :FOR I :FROM 1 :TO 20 :SUM I :ALWAYS (EVENP I)))) (PROGRAM-ERROR (C) (PRINC C) (VALUES '(CORRECT PROGRAM-ERROR))))
#1=(LOOP :FOR I :FROM 1 :TO 20 :SUM I :ALWAYS #2=(EVENP I)): ambiguous result:
T from ALWAYS #2#
#:ACCUNUM-VAR-484454 from SUM I
EQUAL-OK: (CORRECT PROGRAM-ERROR)
(WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (LOOP :INITIALLY (WRITE-CHAR #\a) :FOR CHAR :ACROSS "" :FOR CODE = (CHAR-CODE CHAR) :DO (PRINC CODE) :FINALLY (WRITE-CHAR #\b)))
EQUAL-OK: "ab"
(WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (LOOP :INITIALLY (WRITE-CHAR #\a) :FOR CHAR :ACROSS "" :DO (WRITE-CHAR CHAR) :FINALLY (WRITE-CHAR #\b)))
EQUAL-OK: "ab"
(WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (LOOP :INITIALLY (WRITE-CHAR #\a) :FOR CHAR :ACROSS "1" :FOR CODE = (CHAR-CODE CHAR) :DO (PRINC CODE) :FINALLY (WRITE-CHAR #\b)))
EQUAL-OK: "a49b"
(WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (LOOP :INITIALLY (WRITE-CHAR #\a) :FOR CHAR :ACROSS "1" :DO (WRITE-CHAR CHAR) :FINALLY (WRITE-CHAR #\b)))
EQUAL-OK: "a1b"
RUN-TEST: finished "loop" (0 errors out of 134 tests)
RUN-TEST: started #<INPUT BUFFERED FILE-STREAM CHARACTER #P"macro8.tst" @1>
(AND (MACRO-FUNCTION 'PUSH) T)
EQL-OK: T
(AND (MACRO-FUNCTION 'MEMBER) T)
EQL-OK: NIL
(DEFMACRO ARITHMETIC-IF (TEST NEG-FORM ZERO-FORM POS-FORM) (LET ((VAR (GENSYM))) `(LET ((,VAR ,TEST)) (COND ((< ,VAR 0) ,NEG-FORM) ((= ,VAR 0) ,ZERO-FORM) (T ,POS-FORM)))))
EQL-OK: ARITHMETIC-IF
(AND (MACRO-FUNCTION 'ARITHMETIC-IF) T)
EQL-OK: T
(SETF X 8)
EQL-OK: 8
(ARITHMETIC-IF (- X 4) (- X) (LIST "ZERO") X)
EQL-OK: 8
(SETF X 4)
EQL-OK: 4
(ARITHMETIC-IF (- X 4) (- X) (LIST "ZERO") X)
EQUAL-OK: ("ZERO")
(SETF X 3)
EQL-OK: 3
(ARITHMETIC-IF (- X 4) (- X) (LIST "ZERO") X)
EQL-OK: -3
(DEFMACRO ARITHMETIC-IF (TEST NEG-FORM &OPTIONAL ZERO-FORM POS-FORM) (LET ((VAR (GENSYM))) `(LET ((,VAR ,TEST)) (COND ((< ,VAR 0) ,NEG-FORM) ((= ,VAR 0) ,ZERO-FORM) (T ,POS-FORM)))))
EQL-OK: ARITHMETIC-IF
(SETF X 8)
EQL-OK: 8
(ARITHMETIC-IF (- X 4) (- X))
EQL-OK: NIL
(SETF X 4)
EQL-OK: 4
(ARITHMETIC-IF (- X 4) (- X))
EQL-OK: NIL
(SETF X 3)
EQL-OK: 3
(ARITHMETIC-IF (- X 4) (- X))
EQL-OK: -3
(DEFMACRO HALIBUT ((MOUTH EYE1 EYE2) ((FIN1 LENGTH1) (FIN2 LENGTH2)) TAIL) `(LIST ,MOUTH ,EYE1 ,EYE2 ,FIN1 ,LENGTH1 ,FIN2 ,LENGTH2 ,TAIL))
EQL-OK: HALIBUT
(SETF M 'RED-MOUTH EYES '(LEFT-EYE . RIGHT-EYE) F1 '(1 2 3 4 5) F2 '(6 7 8 9 0) MY-FAVORITE-TAIL '(LIST OF ALL PARTS OF TAIL))
EQUAL-OK: (LIST OF ALL PARTS OF TAIL)
(HALIBUT (M (CAR EYES) (CDR EYES)) ((F1 (LENGTH F1)) (F2 (LENGTH F2))) MY-FAVORITE-TAIL)
EQUAL-OK: (RED-MOUTH LEFT-EYE RIGHT-EYE (1 2 3 4 5) 5 (6 7 8 9 0) 5 (LIST OF ALL PARTS OF TAIL))
(ECASE 'OTHERWISE (OTHERWISE 4))
WARNING: OTHERWISE used as a key in (OTHERWISE 4), it would be better to use
         parentheses.
EQL-OK: 4
(MACROLET ((FOO (&ENVIRONMENT ENV) (IF (MACRO-FUNCTION 'BAR ENV) ''YES ''NO))) (LIST (FOO) (MACROLET ((BAR NIL :BEEP)) (FOO))))
EQUAL-OK: (NO YES)
(MACROLET ((%M (NIL) :GOOD)) (%M NIL))
EQL-OK: :GOOD
(MACROLET ((%M (NIL) :GOOD)) (%M 10))
[SIMPLE-SOURCE-PROGRAM-ERROR]: %M: 10 does not match lambda list element ()
EQL-OK: ERROR
(DEFINE-COMPILER-MACRO TESTP NIL '(PROGN 2))
EQL-OK: TESTP
(DEFUN TESTP NIL 'B)
EQL-OK: TESTP
(LOCALLY (DECLARE (NOTINLINE TESTP)) (DEFUN TEST11 NIL (TESTP)))
EQL-OK: TEST11
(TEST11)
EQL-OK: B
(DEFUN TEST11 NIL (TESTP))
EQL-OK: TEST11
(COMPILE 'TEST11)
EQL-OK: TEST11
(TEST11)
EQL-OK: 2
(DEFINE-COMPILER-MACRO TESTC NIL ''A)
EQL-OK: TESTC
(DEFUN TESTC NIL 'B)
EQL-OK: TESTC
(LOCALLY (DECLARE (NOTINLINE TESTC)) (DEFUN TEST6 NIL (TESTC)))
EQL-OK: TEST6
(TEST6)
EQL-OK: B
(DEFUN TEST6 NIL (TESTC))
EQL-OK: TEST6
(COMPILE 'TEST6)
EQL-OK: TEST6
(TEST6)
EQL-OK: A
(DEFINE-COMPILER-MACRO TESTW NIL ''#(A 3))
EQL-OK: TESTW
(DEFUN TESTW NIL 'B)
EQL-OK: TESTW
(LOCALLY (DECLARE (NOTINLINE TESTW)) (DEFUN TEST9 NIL (TESTW)))
EQL-OK: TEST9
(TEST9)
EQL-OK: B
(DEFUN TEST9 NIL (TESTW))
EQL-OK: TEST9
(COMPILE 'TEST9)
EQL-OK: TEST9
(TEST9)
EQUALP-OK: #(A 3)
(DEFINE-COMPILER-MACRO TESTF NIL '#'PRINT)
EQL-OK: TESTF
(DEFUN TESTF NIL 'B)
EQL-OK: TESTF
(LOCALLY (DECLARE (NOTINLINE TESTF)) (DEFUN TEST10 NIL (TESTF)))
EQL-OK: TEST10
(TEST10)
EQL-OK: B
(DEFUN TEST10 NIL (TESTF))
EQL-OK: TEST10
(COMPILE 'TEST10)
EQL-OK: TEST10
(TEST10)
EQL-OK: #<SYSTEM-FUNCTION PRINT>
(DEFINE-COMPILER-MACRO TESTP NIL '(PROGN (PRINT 'A) 2))
EQL-OK: TESTP
(DEFUN TESTP NIL 'B)
EQL-OK: TESTP
(LOCALLY (DECLARE (NOTINLINE TESTP)) (DEFUN TEST11 NIL (TESTP)))
EQL-OK: TEST11
(TEST11)
EQL-OK: B
(DEFUN TEST11 NIL (TESTP))
EQL-OK: TEST11
(COMPILE 'TEST11)
EQL-OK: TEST11
(TEST11)

A 
EQL-OK: 2
(PROGN (DEFMACRO TEST12 NIL `(LET NIL (EVAL-WHEN (COMPILE) (PRINT "compiling")))) (DEFINE-COMPILER-MACRO TEST12 NIL (PRINC "Optimizing-") '((LAMBDA (X) (PRINC X)) 123)) (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (FUNCALL (LAMBDA NIL (DECLARE (COMPILE)) (TEST12)))))
EQUAL-OK: "Optimizing-123"
(LET* ((F '(LOCALLY (DECLARE (OPTIMIZE SAFETY ABAZONK (DEBUG 20))) (+ 3 4))) (C (COPY-TREE F))) (LIST (EVAL F) (EQUAL F C)))
EQUAL-OK: (7 T)
(DEFUN TEST-COMPILER (LAMBDA-EXPRESSION &REST ARGS) (LET ((RET-I (APPLY LAMBDA-EXPRESSION ARGS)) (RET-C (APPLY (COMPILE NIL LAMBDA-EXPRESSION) ARGS))) (LIST (EQUAL RET-I RET-C) RET-I RET-C)))
EQL-OK: TEST-COMPILER
(TEST-COMPILER (LAMBDA NIL (BLOCK TEST12 (FLET ((TEST12-O NIL (FLET ((TEST12-I NIL (RETURN-FROM TEST12 NIL))) (TEST12-I)))) (TEST12-O)))))
EQUAL-OK: (T NIL NIL)
(PROGN (DEFUN STEM (&KEY (OBJ (ERROR "missing OBJ"))) (WITH-OPEN-FILE (STREAM OBJ :DIRECTION :OUTPUT) (TRUENAME STREAM))) (COMPILE 'STEM) (DELETE-FILE (STEM :OBJ "foo-bar-zot")) T)
EQL-OK: T
(DEFPARAMETER X 1)
EQL-OK: X
(DEFUN TEST-KEY NIL (FIND 1 #(0 1 2 3) :TEST #'= :TEST (INCF X)))
EQL-OK: TEST-KEY
(TEST-KEY)
EQL-OK: 1
X
EQL-OK: 2
(COMPILE 'TEST-KEY)
WARNING in TEST-KEY :
FIND: ignored duplicate keyword :TEST (INCF X)
EQL-OK: TEST-KEY
(TEST-KEY)
EQL-OK: 1
X
EQL-OK: 3
(DESTRUCTURING-BIND ((A &OPTIONAL (B 'BEE)) ONE TWO THREE) `((ALPHA) 1 2 3) (LIST A B THREE TWO ONE))
EQUAL-OK: (ALPHA BEE 3 2 1)
(DEFMACRO FOO (&KEY ((KEY VAR))) `(LIST ',VAR))
EQL-OK: FOO
(FOO KEY 42)
EQUAL-OK: (42)
(DEFUN FOO (&KEY ((KEY VAR))) `(LIST ',VAR))
EQL-OK: FOO
(FOO 'KEY 42)
EQUAL-OK: (LIST '42)
(FMAKUNBOUND 'FOO)
EQL-OK: FOO
(DEFMACRO M (&KEY (X X)) `,X)
EQL-OK: M
(M)
EQL-OK: 3
(DESTRUCTURING-BIND (&KEY (X X)) NIL X)
EQL-OK: 3
(DESTRUCTURING-BIND (&WHOLE (A . B) C . D) '(1 . 2) (LIST A B C D))
EQUAL-OK: (1 2 1 2)
(DESTRUCTURING-BIND (NIL A B) (LIST NIL 2 3) (+ A B))
EQL-OK: 5
(DESTRUCTURING-BIND (X . Y) '(1 . 10) (LIST X Y))
EQUAL-OK: (1 10)
(MACROLET ((%M (&WHOLE (M A B) C D) `'(,M ,A ,B ,C ,D))) (%M 1 2))
EQUAL-OK: (%M 1 2 1 2)
(MACROLET ((%M (&KEY ((:A (B C)))) `'(,C ,B))) (%M :A (1 2)))
EQUAL-OK: (2 1)
(MACROLET ((%M (&KEY ((:A (B C)) '(3 4))) `'(,C ,B))) (LIST (%M :A (1 2)) (%M :A (1 2) :A (10 11)) (%M)))
EQUAL-OK: ((2 1) (2 1) (4 3))
(MACROLET ((%M (&KEY ((:A (B C)) '(3 4) A-P)) `'(,A-P ,C ,B))) (LIST (%M :A (1 2)) (%M :A (1 2) :A (10 11)) (%M)))
EQUAL-OK: ((T 2 1) (T 2 1) (NIL 4 3))
(MACROLET ((%M (&KEY A B C) `'(,A ,B ,C))) (LIST (%M :ALLOW-OTHER-KEYS NIL) (%M :A 1 :ALLOW-OTHER-KEYS NIL) (%M :ALLOW-OTHER-KEYS T) (%M :ALLOW-OTHER-KEYS T :ALLOW-OTHER-KEYS NIL :FOO T) (%M :ALLOW-OTHER-KEYS T :C 1 :B 2 :A 3) (%M :C 1 :B 2 :A 3 :ALLOW-OTHER-KEYS T) (%M :ALLOW-OTHER-KEYS NIL :C 1 :B 2 :A 3)))
EQUAL-OK: ((NIL NIL NIL) (1 NIL NIL) (NIL NIL NIL) (NIL NIL NIL) (3 2 1) (3 2 1) (3 2 1))
(DEFMACRO ALPHA (X Y) `(BETA ,X ,Y))
EQL-OK: ALPHA
(DEFMACRO BETA (X Y) `(GAMMA ,X ,Y))
EQL-OK: BETA
(DEFMACRO DELTA (X Y) `(GAMMA ,X ,Y))
EQL-OK: DELTA
(DEFMACRO MEXPAND (FORM &ENVIRONMENT ENV) (MULTIPLE-VALUE-BIND (EXPANSION EXPANDED-P) (MACROEXPAND FORM ENV) `(LIST ',EXPANSION ',EXPANDED-P)))
EQL-OK: MEXPAND
(DEFMACRO MEXPAND-1 (FORM &ENVIRONMENT ENV) (MULTIPLE-VALUE-BIND (EXPANSION EXPANDED-P) (MACROEXPAND-1 FORM ENV) `(LIST ',EXPANSION ',EXPANDED-P)))
EQL-OK: MEXPAND-1
(DEFUN FEXPAND (FORM &OPTIONAL ENV) (MULTIPLE-VALUE-LIST (MACROEXPAND FORM ENV)))
EQL-OK: FEXPAND
(DEFUN FEXPAND-1 (FORM &OPTIONAL ENV) (MULTIPLE-VALUE-LIST (MACROEXPAND-1 FORM ENV)))
EQL-OK: FEXPAND-1
(FEXPAND-1 '(ALPHA A B))
EQUAL-OK: ((BETA A B) T)
(MEXPAND-1 (ALPHA A B))
EQUAL-OK: ((BETA A B) T)
(FEXPAND '(ALPHA A B))
EQUAL-OK: ((GAMMA A B) T)
(MEXPAND (ALPHA A B))
EQUAL-OK: ((GAMMA A B) T)
(FEXPAND-1 'NOT-A-MACRO)
EQUAL-OK: (NOT-A-MACRO NIL)
(MEXPAND-1 NOT-A-MACRO)
EQUAL-OK: (NOT-A-MACRO NIL)
(FEXPAND '(NOT-A-MACRO A B))
EQUAL-OK: ((NOT-A-MACRO A B) NIL)
(MEXPAND (NOT-A-MACRO A B))
EQUAL-OK: ((NOT-A-MACRO A B) NIL)
(MACROLET ((ALPHA (X Y) `(DELTA ,X ,Y))) (FEXPAND-1 '(ALPHA A B)))
EQUAL-OK: ((BETA A B) T)
(MACROLET ((ALPHA (X Y) `(DELTA ,X ,Y))) (MEXPAND-1 (ALPHA A B)))
EQUAL-OK: ((DELTA A B) T)
(MACROLET ((ALPHA (X Y) `(DELTA ,X ,Y))) (FEXPAND '(ALPHA A B)))
EQUAL-OK: ((GAMMA A B) T)
(MACROLET ((ALPHA (X Y) `(DELTA ,X ,Y))) (MEXPAND (ALPHA A B)))
EQUAL-OK: ((GAMMA A B) T)
(MACROLET ((BETA (X Y) `(EPSILON ,X ,Y))) (MEXPAND (ALPHA A B)))
EQUAL-OK: ((EPSILON A B) T)
(LET ((X (LIST 1 2 3))) (SYMBOL-MACROLET ((A-SM (FIRST X))) (MEXPAND A-SM)))
EQUAL-OK: ((FIRST X) T)
(LET ((X (LIST 1 2 3))) (SYMBOL-MACROLET ((A-SM (FIRST X))) (FEXPAND 'A-SM)))
EQUAL-OK: (A-SM NIL)
(SYMBOL-MACROLET ((B-SM (ALPHA X Y))) (MEXPAND-1 B-SM))
EQUAL-OK: ((ALPHA X Y) T)
(SYMBOL-MACROLET ((B-SM (ALPHA X Y))) (MEXPAND B-SM))
EQUAL-OK: ((GAMMA X Y) T)
(SYMBOL-MACROLET ((B-SM (ALPHA X Y)) (A-SM B-SM)) (MEXPAND-1 A-SM))
EQUAL-OK: (B-SM T)
(SYMBOL-MACROLET ((B-SM (ALPHA X Y)) (A-SM B-SM)) (MEXPAND A-SM))
EQUAL-OK: ((GAMMA X Y) T)
(FLET ((BETA (X Y) (+ X Y))) (MEXPAND (ALPHA A B)))
EQUAL-OK: ((BETA A B) T)
(MACROLET ((ALPHA (X Y) `(DELTA ,X ,Y))) (FLET ((ALPHA (X Y) (+ X Y))) (MEXPAND (ALPHA A B))))
EQUAL-OK: ((ALPHA A B) NIL)
(LET ((X (LIST 1 2 3))) (SYMBOL-MACROLET ((A-SM (FIRST X))) (LET ((A-SM X)) (MEXPAND A-SM))))
EQUAL-OK: (A-SM NIL)
(SYMBOL-MACROLET ((FOO 12)) (MACROLET ((BAR (X) `(+ ,X ,(1+ FOO)))) (BAR 10)))
EQL-OK: 23
(SYMBOL-MACROLET ((FOO 12)) (MACROLET ((BAR (X) (+ X FOO))) (BAR 10)))
EQL-OK: 22
(LET ((F (GENSYM "FUNC-")) (A (GENSYM "A-")) (B (GENSYM "B-"))) (EVAL `(DEFUN ,F NIL (LET ((,A 1) (,B 2)) (SYMBOL-MACROLET ((,A 5)) (SYMBOL-MACROLET ((,B ,A)) ,B))))) (FUNCALL F))
EQL-OK: 5
(LET ((F (GENSYM "FUNC-")) (A (GENSYM "A-")) (B (GENSYM "B-"))) (EVAL `(PROGN (DEFVAR ,A 2) (SETQ ,B 3) (DEFUN ,F NIL ,B) (COMPILE ',F) (DEFINE-SYMBOL-MACRO ,B ,A) (,F))))
WARNING in #:FUNC-484556 :
#:B-484558 is neither declared nor bound,
it will be treated as if it were declared SPECIAL.
EQL-OK: 3
(PROGN (DEFINE-SYMBOL-MACRO FOO137 (SYMBOL-VALUE 'FOO137)) (SETQ FOO137 73) FOO137)
EQL-OK: 73
(PROGN (DEFINE-SYMBOL-MACRO FOO138 (ERROR "should not occur")) (DOLIST (X (SYMBOL-PLIST 'FOO138)) (ATOM X)))
EQL-OK: NIL
(PROGN (DEFINE-SYMBOL-MACRO FOO139 1) (APPEASE-CERRORS (DEFVAR FOO139 T)) FOO139)
WARNING: PROCLAIM: attempting to turn FOO139 into a SPECIAL variable, but it
         is already a global SYMBOL-MACRO.
         Remove the global SYMBOL-MACRO definition
EQL-OK: T
(PROGN (DEFINE-SYMBOL-MACRO FOO140 1) (APPEASE-CERRORS (DEFCONSTANT FOO140 T)) FOO140)
WARNING: SYSTEM::%PROCLAIM-CONSTANT: attempting to turn FOO140 into a
         constant, but it is already a global SYMBOL-MACRO.
         Remove the global SYMBOL-MACRO definition
EQL-OK: T
(LET ((S (MAKE-SYMBOL "FOO141"))) (EVAL `(DEFINE-SYMBOL-MACRO ,S T)) (APPEASE-CERRORS (IMPORT S "KEYWORD")) (EQ S (SYMBOL-VALUE S)))
WARNING: IMPORT: interning #:FOO141 into the KEYWORD package would turn it
         into a constant, but it is already a global SYMBOL-MACRO.
         Remove the global SYMBOL-MACRO definition
EQL-OK: T
(PROGN (DEFVAR FOO142 1) (APPEASE-CERRORS (DEFINE-SYMBOL-MACRO FOO142 T)) FOO142)
WARNING: SYSTEM::%PROCLAIM-SYMBOL-MACRO: the symbol FOO142 names a global
         SPECIAL variable
         Remove the global SPECIAL variable binding
EQL-OK: T
(LET ((S (DEFINE-SYMBOL-MACRO FOO143 T))) (IMPORT S "KEYWORD") (EVAL S))
EQL-OK: T
(DEFPARAMETER *MY-TYPEOF-COUNTER* 0)
EQL-OK: *MY-TYPEOF-COUNTER*
(DEFMACRO MY-TYPEOF (PLACE &ENVIRONMENT ENV) (LET ((EXP-PLACE (MACROEXPAND PLACE ENV))) (UNLESS (AND (CONSP EXP-PLACE) (EQ (CAR EXP-PLACE) 'FOREIGN-VALUE)) (ERROR "MY-TYPEOF not upon a place: ~S" EXP-PLACE)) (INCF *MY-TYPEOF-COUNTER*) (SECOND EXP-PLACE)))
EQL-OK: MY-TYPEOF
(DEFMACRO WITH-VAR ((VAR FVAR) &BODY BODY) (LET ((FV (GENSYM (SYMBOL-NAME VAR)))) `(LET ((,FV ,FVAR)) (SYMBOL-MACROLET ((,VAR (FOREIGN-VALUE ,FV))) ,@BODY))))
EQL-OK: WITH-VAR
(WITH-VAR (MY-VAR "fake variable") (MY-TYPEOF MY-VAR))
EQUAL-OK: "fake variable"
*MY-TYPEOF-COUNTER*
EQL-OK: 1
(FUNCALL (LAMBDA NIL (DECLARE (COMPILE)) (WITH-VAR (MY-VAR "fake variable") (MY-TYPEOF MY-VAR))))
EQUAL-OK: "fake variable"
*MY-TYPEOF-COUNTER*
EQL-OK: 2
(DEFMACRO MY-MAC (&OPTIONAL (X (ERROR "missing arg")) &KEY (Y (ERROR "missing arg"))) `'(,X ,Y))
EQL-OK: MY-MAC
(MY-MAC 1 :Y 10)
EQUAL-OK: (1 10)
(DEFMACRO MY-MAC (&KEY (B T)) (IF B 'C 'D))
EQL-OK: MY-MAC
(MACROEXPAND '(MY-MAC))
EQL-OK: C
(MACROEXPAND '(MY-MAC :B NIL))
EQL-OK: D
(DEFMACRO MY-MAC (&KEY (A T B)) `(,A ,B))
EQL-OK: MY-MAC
(MACROEXPAND '(MY-MAC :A 1))
EQUAL-OK: (1 T)
(MACROEXPAND '(MY-MAC))
EQUAL-OK: (T NIL)
(DEFMACRO DM1A (&WHOLE X) `',X)
EQL-OK: DM1A
(MACROEXPAND '(DM1A))
EQUAL-OK: '(DM1A)
(DEFMACRO DM1B (&WHOLE X A &OPTIONAL B) `'(,X ,A ,B))
EQL-OK: DM1B
(MACROEXPAND '(DM1B Q))
EQUAL-OK: '((DM1B Q) Q NIL)
(MACROEXPAND '(DM1B Q R))
EQUAL-OK: '((DM1B Q R) Q R)
(DEFMACRO DM2A (&WHOLE FORM A B) `'(FORM ,FORM A ,A B ,B))
EQL-OK: DM2A
(MACROEXPAND '(DM2A X Y))
EQUAL-OK: '(FORM (DM2A X Y) A X B Y)
(DM2A X Y)
EQUAL-OK: (FORM (DM2A X Y) A X B Y)
(DEFMACRO INCFQ (X) `(SETQ ,X (+ ,X 1)))
EQL-OK: INCFQ
(DEFMACRO DM2B (&WHOLE FORM A (&WHOLE B (C . D) &OPTIONAL (E 5)) &BODY F &ENVIRONMENT ENV) ``(,',FORM ,,A ,',B ,',(MACROEXPAND C ENV) ,',D ,',E ,',F))
EQL-OK: DM2B
(DM2B :X1 (((INCFQ X2) X3 X4)) X5 X6)
EQUAL-OK: ((DM2B :X1 (((INCFQ X2) X3 X4)) X5 X6) :X1 (((INCFQ X2) X3 X4)) (SETQ X2 (+ X2 1)) (X3 X4) 5 (X5 X6))
(LET ((X1 5)) (MACROLET ((SEGUNDO (X) `(CADR ,X))) (DM2B X1 (((SEGUNDO X2) X3 X4)) X5 X6)))
EQUAL-OK: ((DM2B X1 (((SEGUNDO X2) X3 X4)) X5 X6) 5 (((SEGUNDO X2) X3 X4)) (CADR X2) (X3 X4) 5 (X5 X6))
(LOOP :FOR A :IN (FUNCALL (SYSTEM::COMPILE-FORM-IN-TOPLEVEL-ENVIRONMENT '(LIST (LIST #'EQUAL 2 2) (LIST #'EQUAL 2 3)))) :COLLECT (FUNCALL (CAR A) (CADR A) (CADDR A)))
EQUAL-OK: (T NIL)
(PROGN (DEFCLASS T1 NIL ((FOO :ACCESSOR FOO :INITFORM :FOO))) (LIST (FUNCALL (COMPILE NIL (LAMBDA NIL (TYPEP (MAKE-INSTANCE 'T1) 'T1)))) (FUNCALL (SYSTEM::COMPILE-FORM-IN-TOPLEVEL-ENVIRONMENT '(TYPEP (MAKE-INSTANCE 'T1) 'T1)))))
EQUAL-OK: (T T)
(PROGN (DECLAIM (NOTINLINE NOTINLINE-TEST-FUNC-1)) (DEFUN NOTINLINE-TEST-FUNC-1 (X) X) (COMPILE 'NOTINLINE-TEST-FUNC-1) (DEFUN NOTINLINE-TEST-FUNC-2 (X) (NOTINLINE-TEST-FUNC-1 X) X) (COMPILE 'NOTINLINE-TEST-FUNC-2) (DEFVAR *NOTINLINE-TEST-VAR* 10) (DEFUN NOTINLINE-TEST-FUNC-1 (X) (INCF *NOTINLINE-TEST-VAR* X)) (LIST (NOTINLINE-TEST-FUNC-2 12) *NOTINLINE-TEST-VAR*))
EQUAL-OK: (12 22)
(LET ((FILE "tmp.lisp")) (WITH-OPEN-FILE (O FILE :DIRECTION :OUTPUT) (WRITE-LINE "(defun caller (a b) (foo a b))" O) (WRITE-LINE "(defun foo (a b c) (list a b c))" O)) (UNWIND-PROTECT (PROGN (LOAD FILE :COMPILING T) (FOO 1 2 3)) (DELETE-FILE FILE)))
;; Loading file tmp.lisp ...
WARNING in CALLER :
FOO was called with 2 arguments, but it requires 1 argument.

WARNING: DEFUN/DEFMACRO: redefining function FOO in
         /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/tmp.lisp,
         was defined in top-level

0 errors, 0 warnings
;; Loaded file tmp.lisp
EQUAL-OK: (1 2 3)
(LET ((FILE1 "tmp1.lisp") (FILE2 "tmp2.lisp")) (WITH-OPEN-FILE (O FILE1 :DIRECTION :OUTPUT) (WRITE-LINE "(defun foo (a b c) (cons b c a))" O) (FORMAT O "(load ~S)~%" FILE2)) (WITH-OPEN-FILE (O FILE2 :DIRECTION :OUTPUT) (WRITE-LINE "(defun bar (a b) (sin (1+ a) (1- b a)))" O)) (UNWIND-PROTECT (PROGN (LOAD FILE1 :COMPILING T) (LIST (NOT (NULL (FBOUNDP 'FOO))) (NOT (NULL (FBOUNDP 'BAR))))) (DELETE-FILE FILE1) (DELETE-FILE FILE2)))
;; Loading file tmp1.lisp ...
WARNING in FOO :
CONS was called with 3 arguments, but it requires 2 arguments.

WARNING: DEFUN/DEFMACRO: redefining function FOO in
         /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/tmp1.lisp,
         was defined in
         /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/tmp.lisp
;;  Loading file tmp2.lisp ...
WARNING in BAR :
SIN was called with 2 arguments, but it requires 1 argument.

WARNING in BAR :
1- was called with 2 arguments, but it requires 1 argument.

WARNING: DEFUN/DEFMACRO: redefining function BAR in
         /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/tmp2.lisp,
         was defined in
         /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/foo.lisp

0 errors, 0 warnings
;;  Loaded file tmp2.lisp
0 errors, 0 warnings
;; Loaded file tmp1.lisp
EQUAL-OK: (T T)
(TEST-COMPILER (LAMBDA (A) (IF (AND (IF A T NIL) NIL) A (MIN (BLOCK B5 -1) A))) 123)
EQUAL-OK: (T -1 -1)
(TEST-COMPILER (LAMBDA (A B C) (IF (OR (NOT (AND A NIL)) (AND (OR B (LDB-TEST (BYTE 26 31) C)) T)) B B)) 123 144 532)
EQUAL-OK: (T 144 144)
(TEST-COMPILER (LAMBDA (C) (IF (OR (NOT (IF C NIL NIL)) (AND (AND (LDB-TEST (BYTE 13 25) -707966251) (LOGBITP 5 C)) (LDB-TEST (BYTE 13 26) -396394270089))) 513972305 19641756)) 125)
EQUAL-OK: (T 513972305 513972305)
(LET ((FILE "tmp.lisp")) (WITH-OPEN-FILE (OUT FILE :DIRECTION :OUTPUT) (WRITE '(EVAL-WHEN (LOAD COMPILE EVAL) (+ (FUNCALL (COMPILE NIL (LAMBDA NIL (LOAD-TIME-VALUE (+ 2 3))))) 120)) :STREAM OUT)) (UNWIND-PROTECT (COMPILE-FILE FILE) (POST-COMPILE-FILE-CLEANUP FILE)) NIL)
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/tmp.lisp ...

;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/tmp.fas
0 errors, 0 warnings
EQL-OK: NIL
(LET ((FILE "tmp.lisp")) (WITH-OPEN-FILE (OUT FILE :DIRECTION :OUTPUT) (WRITE-STRING "(defun ltv1 () (eq #1=(load-time-value (cons nil nil)) #1#))" OUT)) (UNWIND-PROTECT (PROGN (COMPILE-FILE FILE) (LOAD (COMPILE-FILE-PATHNAME FILE))) (POST-COMPILE-FILE-CLEANUP FILE)) (LTV1))
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/tmp.lisp ...

;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/tmp.fas
0 errors, 0 warnings
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/tmp.fas ...

;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/tmp.fas
EQL-OK: T
(LET ((FILE "tmp.lisp")) (WITH-OPEN-FILE (OUT FILE :DIRECTION :OUTPUT) (WRITE-STRING "(defun ltv2 () (eq (load-time-value #1=(cons nil nil)) (load-time-value #1#)))" OUT)) (UNWIND-PROTECT (PROGN (COMPILE-FILE FILE) (LOAD (COMPILE-FILE-PATHNAME FILE))) (POST-COMPILE-FILE-CLEANUP FILE)) (LTV2))
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/tmp.lisp ...

;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/tmp.fas
0 errors, 0 warnings
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/tmp.fas ...

;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/tmp.fas
EQL-OK: NIL
(LET ((FILE "tmp.lisp")) (WITH-OPEN-FILE (OUT FILE :DIRECTION :OUTPUT) (WRITE-STRING "(defun ltv3 () (eq (load-time-value (cons nil nil)) (load-time-value (cons nil nil))))" OUT)) (UNWIND-PROTECT (PROGN (COMPILE-FILE FILE) (LOAD (COMPILE-FILE-PATHNAME FILE))) (POST-COMPILE-FILE-CLEANUP FILE)) (LTV3))
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/tmp.lisp ...

;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/tmp.fas
0 errors, 0 warnings
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/tmp.fas ...

;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/tmp.fas
EQL-OK: NIL
(FUNCALL (COMPILE NIL (LAMBDA (A) (UNWIND-PROTECT (BLOCK B2 (RETURN-FROM B2 A))))) 77759)
EQL-OK: 77759
(TEST-COMPILER (LAMBDA NIL (LABELS ((%F17 (F17-1 F17-2) (MULTIPLE-VALUE-PROG1 F17-1 F17-2 100 (RETURN-FROM %F17 12)))) (%F17 1 2))))
EQUAL-OK: (T 12 12)
(TEST-COMPILER (LAMBDA (A) (BLOCK B6 (MULTIPLE-VALUE-PROG1 A (RETURN-FROM B6 100)))) :WRONG)
EQUAL-OK: (T 100 100)
(TEST-COMPILER (LAMBDA NIL (BLOCK B3 (RETURN-FROM B3 (MULTIPLE-VALUE-PROG1 10 (RETURN-FROM B3 100))))))
EQUAL-OK: (T 100 100)
(TEST-COMPILER (LAMBDA (A B) (UNWIND-PROTECT (BLOCK B2 (FLET ((%F1 NIL B)) (LOGIOR (IF A (IF (LDB-TEST (BYTE 23 1) 253966182) (RETURN-FROM B2 A) -103275090) 62410) (IF (NOT (NOT (IF (NOT NIL) T (LDB-TEST (BYTE 2 27) 253671809)))) (RETURN-FROM B2 -22) (%F1))))) (SETQ A (+ A B)))) 777595384624 -1510893868)
EQUAL-OK: (T 777595384624 777595384624)
(TEST-COMPILER (LAMBDA (A C) (FLET ((%F10 NIL 10)) (FLET ((%F4 (&OPTIONAL (F4-1 (SETQ C (%F10))) (F4-2 (SETQ A 0))) (+ F4-1 F4-2) 123)) (%F4 -5)))) 13 17)
EQUAL-OK: (T 123 123)
(TEST-COMPILER (LAMBDA (A C) (IF (OR (LDB-TEST (BYTE 12 18) A) (NOT (AND T (NOT (IF (NOT (AND C T)) NIL NIL))))) 170 -110730)) 123 456)
EQUAL-OK: (T -110730 -110730)
(TEST-COMPILER (LAMBDA NIL (TAGBODY (FLET ((F6 NIL (GO 18))) (F6)) 18)))
EQUAL-OK: (T NIL NIL)
(TEST-COMPILER (LAMBDA NIL (TAGBODY (FLET ((%F1 (F1-1) (FLET ((%F9 (&OPTIONAL (F9-1 B) (F9-2 (GO TAG2)) (F9-3 0)) 0)) (%F9 0 0 0)))) (%F1 0)) TAG2)))
WARNING in %F1-%F9 :
B is neither declared nor bound,
it will be treated as if it were declared SPECIAL.

WARNING in %F1-%F9 :
variable F9-1 is not used.
Misspelled or missing IGNORE declaration?

WARNING in %F1-%F9 :
variable F9-2 is not used.
Misspelled or missing IGNORE declaration?

WARNING in %F1-%F9 :
variable F9-3 is not used.
Misspelled or missing IGNORE declaration?

WARNING in %F1 :
variable F1-1 is not used.
Misspelled or missing IGNORE declaration?
EQUAL-OK: (T NIL NIL)
(TEST-COMPILER (LAMBDA (X) (TAGBODY (FLET ((FOO-1 NIL (FLET ((FOO-2 NIL (FLET ((FOO-3 NIL (INCF X) (GO FOO-TAG))) (FOO-3)))) (FOO-2)))) (FOO-1)) FOO-TAG) X) 12)
EQUAL-OK: (T 13 13)
(TEST-COMPILER (LAMBDA NIL (LET ((*S4* :RIGHT)) (DECLARE (SPECIAL *S4*)) (PROGV '(*S4*) (LIST :WRONG1) (SETQ *S4* :WRONG2)) *S4*)))
EQUAL-OK: (T :RIGHT :RIGHT)
(UNWIND-PROTECT (TEST-COMPILER (LAMBDA NIL (SETQ *PRINT-LEVEL* 20) (NCONC (LET ((*PRINT-LEVEL* 30) (FOO (SETQ *PRINT-LEVEL* 40))) (LIST *PRINT-LEVEL* FOO)) (LIST *PRINT-LEVEL*)))) (SETQ *PRINT-LEVEL* NIL))
EQUAL-OK: (T (30 40 40) (30 40 40))
(TEST-COMPILER (LAMBDA (D) (GCD 39 (CATCH 'CT2 (BLOCK B7 (THROW 'CT2 (UNWIND-PROTECT (RETURN-FROM B7 17) (RETURN-FROM B7 (PROGV '(*S6*) (LIST 31) D)))))))) 65)
EQUAL-OK: (T 13 13)
(TEST-COMPILER (LAMBDA (D) (BLOCK B7 (THROW 'CT2 (UNWIND-PROTECT (RETURN-FROM B7 17) (RETURN-FROM B7 (PROGV '(*S6*) (LIST 31) D)))))) 65)
EQUAL-OK: (T 65 65)
(TEST-COMPILER (LAMBDA (B) (LABELS ((%F2 NIL (LET ((V10 (PROGN (DOTIMES (IV2 0 0) IV2) B))) (UNWIND-PROTECT B (LABELS ((%F6 NIL)) (%F6)))))) (%F2))) :GOOD)
WARNING in %F2 :
variable V10 is not used.
Misspelled or missing IGNORE declaration?
EQUAL-OK: (T :GOOD :GOOD)
(TEST-COMPILER (LAMBDA (B) (LET ((V10 (PROGN (DOTIMES (IV2 0 0) IV2) B))) (UNWIND-PROTECT B (LABELS ((%F6 NIL)) (%F6))))) :GOOD)
WARNING :
variable V10 is not used.
Misspelled or missing IGNORE declaration?
EQUAL-OK: (T :GOOD :GOOD)
(TEST-COMPILER (LAMBDA (B) (LET ((V10 (PROGN (PRINT 321) B))) (UNWIND-PROTECT B (PRINT 123)))) :GOOD)

321 
123 
WARNING :
variable V10 is not used.
Misspelled or missing IGNORE declaration?
321 
123 
EQUAL-OK: (T :GOOD :GOOD)
(TEST-COMPILER (LAMBDA (A B) (DECLARE (IGNORABLE A B)) (DECLARE (OPTIMIZE (SPACE 3) (DEBUG 0) (SAFETY 1) (COMPILATION-SPEED 3) (SPEED 1))) (PROG2 (CATCH 'CT1 (IF (OR (AND T (NOT (AND (AND (OR A T) NIL) NIL))) NIL) A (REDUCE #'(LAMBDA (LMV5 LMV2) 0) (VECTOR B 0 A)))) 0)) 2212755 3154856)
WARNING in #:|1| :
variable LMV5 is not used.
Misspelled or missing IGNORE declaration?

WARNING in #:|1| :
variable LMV2 is not used.
Misspelled or missing IGNORE declaration?
EQUAL-OK: (T 0 0)
(TEST-COMPILER (LAMBDA NIL (LABELS ((FOO NIL (APPLY #'BAR NIL)) (BAR NIL)))))
EQUAL-OK: (T NIL NIL)
(PROGN (LOAD (MERGE-PATHNAMES "bug001.lisp" *RUN-TEST-TRUENAME*)) T)
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/tests/bug001.lisp ...

EVAL: -105424
COMPILE: -105424
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/tests/bug001.lisp
EQL-OK: T
(PROGN (LOAD (MERGE-PATHNAMES "bug002.lisp" *RUN-TEST-TRUENAME*)) T)
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/tests/bug002.lisp ...

 ---- (-6471154533 -252139422192 298074672 864413032888 -3027364 -35189361672 1119416506309 69109593) ----
EVAL: 1371853947591
COMPILE: 1371853947591
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/tests/bug002.lisp
EQL-OK: T
(LET ((F (LAMBDA ((X1 FIXNUM) (X2 INTEGER) (X3 NUMBER) Y Z) (LIST X1 X2 X3 Y Z)))) (FLET ((G ((X1 FIXNUM) (X2 INTEGER) (X3 NUMBER) Y Z) (LIST Z Y X3 X2 X1))) (LIST (FUNCALL F 0 1 2 3 4) (FUNCALL (COMPILE NIL F) 5 6 7 8 9) (G 'A 'B 'C 'D 'E))))
EQUAL-OK: ((0 1 2 3 4) (5 6 7 8 9) (E D C B A))
(LET ((FNAME "donc.lisp") (RESULTS 'NIL) COMPILED) (WITH-OPEN-FILE (OUT FNAME :DIRECTION :OUTPUT :IF-EXISTS :OVERWRITE :IF-DOES-NOT-EXIST :CREATE) (WRITE '(DEFPARAMETER *DONC* NIL) :STREAM OUT) (TERPRI OUT) (WRITE '(EVAL-WHEN (:LOAD-TOPLEVEL :COMPILE-TOPLEVEL :EXECUTE) (SETQ *DONC* (FUNCALL (COMPILE (DEFUN G NIL (LOAD-TIME-VALUE (+ 2 3))))))) :STREAM OUT) (TERPRI OUT)) (LOAD FNAME) (PUSH *DONC* RESULTS) (SETQ COMPILED (COMPILE-FILE FNAME)) (PUSH *DONC* RESULTS) (LOAD COMPILED) (PUSH *DONC* RESULTS) (POST-COMPILE-FILE-CLEANUP FNAME) (NREVERSE RESULTS))
;; Loading file donc.lisp ...
WARNING: DEFUN/DEFMACRO: redefining function G in
         /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/donc.lisp,
         was defined in top-level
;; Loaded file donc.lisp

;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/donc.lisp ...

;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/donc.fas
0 errors, 0 warnings
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/donc.fas ...
WARNING: G is already compiled.
;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/donc.fas
EQUAL-OK: (5 5 5)
(LET ((FNAME "donc.lisp") (RESULTS 'NIL) COMPILED) (WITH-OPEN-FILE (OUT FNAME :DIRECTION :OUTPUT :IF-EXISTS :OVERWRITE :IF-DOES-NOT-EXIST :CREATE) (WRITE '(DEFMACRO M1 (X) (COMPILE X (LAMBDA NIL (LOAD-TIME-VALUE (+ 2 3)))) 4) :STREAM OUT) (TERPRI OUT) (WRITE '(DEFUN FOO NIL (M1 BAR)) :STREAM OUT) (TERPRI OUT)) (LOAD FNAME) (PUSH (BAR) RESULTS) (PUSH (FOO) RESULTS) (SETQ COMPILED (COMPILE-FILE FNAME)) (PUSH (BAR) RESULTS) (PUSH (FOO) RESULTS) (LOAD COMPILED) (PUSH (BAR) RESULTS) (PUSH (FOO) RESULTS) (POST-COMPILE-FILE-CLEANUP FNAME) (NREVERSE RESULTS))
;; Loading file donc.lisp ...
WARNING: DEFUN/DEFMACRO: redefining function FOO in
         /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/donc.lisp,
         was defined in
         /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/tmp1.lisp
;; Loaded file donc.lisp

;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/donc.lisp ...

;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/donc.fas
0 errors, 0 warnings
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/donc.fas ...

;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/donc.fas
EQUAL-OK: (5 4 5 4 5 4)
(LET* ((F "test-compile-file-output-argument.lisp") (C (OPEN (MAKE-PATHNAME :TYPE "fas" :DEFAULTS F) :DIRECTION :PROBE :IF-DOES-NOT-EXIST :CREATE))) (WITH-OPEN-FILE (S F :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE :IF-DOES-NOT-EXIST :CREATE) (FORMAT S "(defun foo (x) (1+ x))~%")) (UNWIND-PROTECT (PROGN (COMPILE-FILE F :OUTPUT-FILE C) T) (POST-COMPILE-FILE-CLEANUP F)))
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/test-compile-file-output-argument.lisp ...

;; Wrote file test-compile-file-output-argument.fas
0 errors, 0 warnings
EQL-OK: T
(DEFUN TEST-CONSTANT-FOLDING (X) (* 1.0d200 X 1.0d200))
EQL-OK: TEST-CONSTANT-FOLDING
(MULTIPLE-VALUE-LIST (COMPILE 'TEST-CONSTANT-FOLDING))
WARNING in TEST-CONSTANT-FOLDING :
Run time error expected: *: floating point overflow

EQUAL-OK: (TEST-CONSTANT-FOLDING 1 1)
(TEST-CONSTANT-FOLDING 12)
[SIMPLE-FLOATING-POINT-OVERFLOW]: *: floating point overflow

EQL-OK: ERROR
(MULTIPLE-VALUE-LIST (COMPILE NIL #'TEST-CONSTANT-FOLDING))
WARNING: #<COMPILED-FUNCTION TEST-CONSTANT-FOLDING> is already compiled.
EQUAL-OK: (#<COMPILED-FUNCTION TEST-CONSTANT-FOLDING> NIL NIL)
(FUNCALL (COMPILE NIL (LAMBDA NIL (COND (NIL)))))
EQL-OK: NIL
(FUNCALL (COMPILE NIL (LAMBDA NIL (COND (T)) NIL)))
EQL-OK: NIL
(LET (X) (DEFUN CIRCULARITY-IN-CODE NIL '(ONE TWO THREE . #1=(MANY . #1#))) (SETQ X (CIRCULARITY-IN-CODE)) (SUBSEQ X 0 7))
EQUAL-OK: (ONE TWO THREE MANY MANY MANY MANY)
(LET* ((F "test-compiled-file-p.lisp") (C (COMPILE-FILE-PATHNAME F))) (OPEN F :DIRECTION :PROBE :IF-DOES-NOT-EXIST :CREATE) (DELETE-FILE C) (LIST (MULTIPLE-VALUE-LIST (COMPILED-FILE-P C)) (MULTIPLE-VALUE-LIST (COMPILED-FILE-P F)) (UNWIND-PROTECT (MULTIPLE-VALUE-LIST (COMPILED-FILE-P (SETQ C (COMPILE-FILE F)))) (POST-COMPILE-FILE-CLEANUP F))))
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/test-compiled-file-p.lisp ...

;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/test-compiled-file-p.fas
0 errors, 0 warnings
EQUAL-OK: ((NIL) (NIL) (T))
(LET ((F "test-compile-time-value.lisp")) (DEFPARAMETER TEST-COMPILE-TIME-VALUE-C 0) (WITH-OPEN-FILE (*STANDARD-OUTPUT* F :DIRECTION :OUTPUT) (WRITE '(DEFUN TEST-COMPILE-TIME-VALUE-F NIL (INCF TEST-COMPILE-TIME-VALUE-C) 'TEST-COMPILE-TIME-VALUE)) (TERPRI) (WRITE '(DEFPARAMETER TEST-COMPILE-TIME-VALUE-V (COMPILE-TIME-VALUE (TEST-COMPILE-TIME-VALUE-F)))) (TERPRI)) (UNWIND-PROTECT (LIST (PROGN (LOAD F) (LIST TEST-COMPILE-TIME-VALUE-C TEST-COMPILE-TIME-VALUE-V)) (PROGN (COMPILE-FILE F) (LIST TEST-COMPILE-TIME-VALUE-C TEST-COMPILE-TIME-VALUE-V)) (PROGN (LOAD (COMPILE-FILE-PATHNAME F)) (LIST TEST-COMPILE-TIME-VALUE-C TEST-COMPILE-TIME-VALUE-V))) (POST-COMPILE-FILE-CLEANUP F)))
;; Loading file test-compile-time-value.lisp ...

;; Loaded file test-compile-time-value.lisp

;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/test-compile-time-value.lisp ...

;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/test-compile-time-value.fas
0 errors, 0 warnings
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/test-compile-time-value.fas ...

;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/test-compile-time-value.fas
EQUAL-OK: ((0 NIL) (1 NIL) (1 TEST-COMPILE-TIME-VALUE))
(LET* ((F "test-crlf-print-read.lisp") (V #(#\a #\Return #\Newline #\Null #\b)) (S (COERCE V 'STRING))) (UNWIND-PROTECT (PROGN (WITH-OPEN-FILE (OUT F :DIRECTION :OUTPUT) (LET ((*PRINT-READABLY* T)) (SYSTEM::SET-OUTPUT-STREAM-FASL OUT) (FORMAT OUT "(defparameter *v* ~S)~%" V) (FORMAT OUT "(defparameter *s* ~S)~%" S))) (LOAD (COMPILE-FILE F)) (LIST (STRING= S *S*) (EQUALP V *V*) (= (LENGTH S) (LENGTH V)))) (POST-COMPILE-FILE-CLEANUP F) (MAKUNBOUND '*V*) (UNINTERN '*V*) (MAKUNBOUND '*S*) (UNINTERN '*S*)))
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/test-crlf-print-read.lisp ...

;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/test-crlf-print-read.fas
0 errors, 0 warnings
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/test-crlf-print-read.fas ...

;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/test-crlf-print-read.fas
EQUAL-OK: (T T T)
(LET ((F "test-crlf-print-read.lisp") (CODE '(DEFMACRO ADD-CRLF (STRING) (WITH-OUTPUT-TO-STRING (O) (WRITE-STRING STRING O) (PRINC #\Return O) (PRINC #\Newline O))))) (UNWIND-PROTECT (PROGN (WITH-OPEN-FILE (OUT F :DIRECTION :OUTPUT) (WRITE CODE :STREAM OUT :PRETTY T) (FORMAT OUT "(defparameter *z* (length (add-crlf \"a\")))~%")) (LIST (PROGN (LOAD F) *Z*) (PROGN (LOAD (COMPILE-FILE F)) *Z*))) (POST-COMPILE-FILE-CLEANUP F) (MAKUNBOUND '*Z*) (UNINTERN '*Z*)))
;; Loading file test-crlf-print-read.lisp ...

;; Loaded file test-crlf-print-read.lisp

;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/test-crlf-print-read.lisp ...

;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/test-crlf-print-read.fas
0 errors, 0 warnings
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/test-crlf-print-read.fas ...

;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/test-crlf-print-read.fas
EQUAL-OK: (3 3)
(LET* ((F "test-crlf-print-read.lisp") (*PACKAGE* (FIND-PACKAGE "CS-COMMON-LISP-USER")) (C (READ-FROM-STRING "*c*"))) (UNWIND-PROTECT (PROGN (WITH-OPEN-FILE (OUT F :DIRECTION :OUTPUT) (FORMAT OUT "(defconstant *c* #\\Null)~%")) (LOAD (COMPILE-FILE F)) (CHAR-CODE (SYMBOL-VALUE C))) (POST-COMPILE-FILE-CLEANUP F) (PROCLAIM (LIST 'SPECIAL C)) (MAKUNBOUND C) (UNINTERN C)))
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/test-crlf-print-read.lisp ...

;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/test-crlf-print-read.fas
0 errors, 0 warnings
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/test-crlf-print-read.fas ...

;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/test-crlf-print-read.fas
EQL-OK: 0
(FUNCALL (COMPILE NIL '(LAMBDA NIL (DECLARE (OPTIMIZE FOO)))))
WARNING :
FOO is not a valid OPTIMIZE quality.
EQL-OK: NIL
(LET (RET) (DEFMACRO TEST-MACRO-ARGLIST (A) A) (PUSH (ARGLIST 'TEST-MACRO-ARGLIST) RET) (COMPILE 'TEST-MACRO-ARGLIST) (PUSH (ARGLIST 'TEST-MACRO-ARGLIST) RET) RET)
EQUAL-OK: ((A) (A))
(LET (RET) (DEFMACRO TEST-MACRO-ARGLIST (A) A) (PUSH (ARGLIST 'TEST-MACRO-ARGLIST) RET) (TRACE TEST-MACRO-ARGLIST) (PUSH (ARGLIST 'TEST-MACRO-ARGLIST) RET) RET)
;; Tracing macro TEST-MACRO-ARGLIST.
EQUAL-OK: ((A) (A))
(LOCALLY (DECLARE (OPTIMIZE (SPACE 2))) (DEFMACRO TEST-MACRO-ARGLIST (A) A) (COMPILE 'TEST-MACRO-ARGLIST) (ARGLIST 'TEST-MACRO-ARGLIST))
WARNING: DEFUN/DEFMACRO: redefining TEST-MACRO-ARGLIST; it was traced!
EQUAL-OK: (A)
(LOCALLY (DECLARE (OPTIMIZE (SPACE 3))) (DEFMACRO TEST-MACRO-ARGLIST (A) A) (COMPILE 'TEST-MACRO-ARGLIST) (STRINGP (PRINC (WITH-OUTPUT-TO-STRING (S) (DESCRIBE 'TEST-MACRO-ARGLIST S)))))

TEST-MACRO-ARGLIST is the symbol TEST-MACRO-ARGLIST, lies in
 #<PACKAGE COMMON-LISP-USER>
, is accessible in 1 package COMMON-LISP-USER, names a macro, has 1 property
 SYSTEM::DEFINITION
.
For more information, evaluate (SYMBOL-PLIST 'TEST-MACRO-ARGLIST).

 #<PACKAGE COMMON-LISP-USER> is the package named COMMON-LISP-USER. It has 2
 nicknames CL-USER, USER.
 It imports the external symbols of 3 packages CLOS, COMMON-LISP, EXT and
 exports no symbols, but no package uses these exports.

 #<MACRO #<COMPILED-FUNCTION TEST-MACRO-ARGLIST> 0> is a macro expander.
 Argument list:"Due to the compiler optimization settings, lambda list for #<MACRO #<COMPILED-FUNCTION TEST-MACRO-ARGLIST> 0> is not available
  "

 For more information, evaluate
  (DISASSEMBLE (MACRO-FUNCTION 'TEST-MACRO-ARGLIST))
 .
EQL-OK: T
(LOCALLY (DECLARE (OPTIMIZE (SPACE 2))) (DEFUN TEST-FUN-ARGLIST (A) (DECLARE (COMPILE)) A) (ARGLIST 'TEST-FUN-ARGLIST))
EQUAL-OK: (A)
(LOCALLY (DECLARE (OPTIMIZE (SPACE 3))) (DEFUN TEST-FUN-ARGLIST (A) (DECLARE (COMPILE)) A) (PRINC-TO-STRING (ARGLIST 'TEST-FUN-ARGLIST)))
EQUAL-OK: "(ARG0)"
(LISTP (ARGLIST 'SYSTEM::BACKQUOTE))
EQL-OK: T
(DEFUN CHECK-CONST-FOLD (FORM) (SYSTEM::CLOSURE-CONST (COMPILE NIL `(LAMBDA NIL ,FORM)) 0))
EQL-OK: CHECK-CONST-FOLD
(CHECK-CONST-FOLD '(! 10))
EQL-OK: 3628800
(CHECK-CONST-FOLD '(CHAR-CODE #\a))
EQL-OK: 97
(CHECK-CONST-FOLD '(CODE-CHAR 97))
EQL-OK: #\a
(CHECK-CONST-FOLD '(CHAR-UPCASE #\a))
EQL-OK: #\A
(CHECK-CONST-FOLD '(CHAR-INVERTCASE #\a))
EQL-OK: #\A
(CHECK-CONST-FOLD '(MOD-EXPT 29 13 17))
EQL-OK: 14
(SYSTEM::CLOSURE-CONSTS (COMPILE NIL (LAMBDA NIL (ATOM 12))))
EQL-OK: NIL
(SYSTEM::CLOSURE-CONSTS (COMPILE NIL (LAMBDA NIL (CONSP 12))))
EQL-OK: NIL
(SYSTEM::CLOSURE-CONSTS (COMPILE NIL (LAMBDA NIL (XOR 1 NIL 2))))
EQL-OK: NIL
(CHECK-CONST-FOLD '(HASH-TABLE-TEST #S(HASH-TABLE :TEST FASTHASH-EQ)))
EQL-OK: FASTHASH-EQ
(FUNCALL (COMPILE NIL (LAMBDA (B C) (BLOCK B3 (IF (IF B (NOT NIL) C) (RETURN-FROM B3 124))))) 1 2)
EQL-OK: 124
(FLET ((KILL (S) (FMAKUNBOUND S) (MAKUNBOUND S) (UNINTERN S))) (KILL 'TEST-MACRO-ARGLIST) (KILL 'TEST-FUN-ARGLIST) (KILL 'CIRCULARITY-IN-CODE) (KILL 'TEST-CONSTANT-FOLDING) (KILL 'TEST-COMPILER) (KILL 'TEST-COMPILE-TIME-VALUE-C) (KILL 'TEST-COMPILE-TIME-VALUE-F) (KILL 'TEST-COMPILE-TIME-VALUE-V) (KILL 'ADD-CRLF) (KILL '*Z*) (KILL '*C*) (KILL '*V*) (KILL 'X))
EQL-OK: T
RUN-TEST: finished "macro8" (0 errors out of 225 tests)
RUN-TEST: started #<INPUT BUFFERED FILE-STREAM CHARACTER #P"map.tst" @1>
(SETF A-VECTOR (MAKE-ARRAY 10))
EQUALP-OK: #(NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
(DO ((I 0 (1+ I)) (N (LENGTH A-VECTOR))) ((= I N)) (WHEN (NULL (AREF A-VECTOR I)) (SETF (AREF A-VECTOR I) 0)))
EQL-OK: NIL
(SETQ LISTE '(A B C D))
EQUAL-OK: (A B C D)
(SETQ X 'ANFANGSWERT-VON-X)
EQL-OK: ANFANGSWERT-VON-X
(DO ((X LISTE (CDR X)) (OLDX X X)) ((NULL X)) (PRINT OLDX) (PRINT X))

ANFANGSWERT-VON-X 
(A B C D) 
(A B C D) 
(B C D) 
(B C D) 
(C D) 
(C D) 
(D) 
EQL-OK: NIL
(DEFUN LIST-REVERSE (LIST) (DO ((X LIST (CDR X)) (Y 'NIL (CONS (CAR X) Y))) ((ENDP X) Y)))
EQL-OK: LIST-REVERSE
(LIST-REVERSE '(A B C D))
EQUAL-OK: (D C B A)
(SETQ FOO '(A B C D))
EQUAL-OK: (A B C D)
(SETQ BAR '(1 2 3 4))
EQUAL-OK: (1 2 3 4)
(DEFUN FKT (A B) (CONS A B))
EQL-OK: FKT
(MAPCAR #'ABS '(3 -4 2 -5 -6))
EQUAL-OK: (3 4 2 5 6)
(MAPCAR #'CONS '(A B C) '(1 2 3))
EQUAL-OK: ((A . 1) (B . 2) (C . 3))
(MAPCAR #'FKT FOO BAR)
EQUAL-OK: ((A . 1) (B . 2) (C . 3) (D . 4))
(DO ((X FOO (CDR X)) (Y BAR (CDR Y)) (Z 'NIL (CONS (FKT (CAR X) (CAR Y)) Z))) ((OR (NULL X) (NULL Y)) (NREVERSE Z)))
EQUAL-OK: ((A . 1) (B . 2) (C . 3) (D . 4))
(LET ((L '(1 2 3)) (R 0)) (DOLIST (X L R) (SETF R (+ R X))))
EQL-OK: 6
(LET ((L '(1 2 3))) (DOLIST (X L) (IF (> 0 X) (INCF X) (RETURN 10))))
EQL-OK: 10
(LET ((L '(1 2 3))) (DOLIST (X L) (INCF X)))
EQL-OK: NIL
(LET ((S 0)) (DOTIMES (I (+ 1 9) S) (SETF S (+ S I))))
EQL-OK: 45
(DOLIST (X '(A B C D)) (PRIN1 X) (PRINC " "))
A B C D 
EQL-OK: NIL
(DEFUN PALINDROMEP (STRING &OPTIONAL (START 0) (END (LENGTH STRING))) (DOTIMES (K (FLOOR (- END START) 2) T) (UNLESS (CHAR-EQUAL (CHAR STRING (+ START K)) (CHAR STRING (- END K 1))) (RETURN NIL))))
EQL-OK: PALINDROMEP
(PALINDROMEP "Able was I ere I saw Elba")
EQL-OK: T
(PALINDROMEP "einnegermitgazellezagtimregennie")
EQL-OK: T
(PALINDROMEP "eisgekuehlter bommerlunder")
EQL-OK: NIL
(PALINDROMEP (REMOVE-IF-NOT #'ALPHA-CHAR-P "A man, a plan, a canal -- Panama"))
EQL-OK: T
(MAPCAR #'(LAMBDA (X) (LIST X)) '(A B C))
EQUAL-OK: ((A) (B) (C))
(MAPCAR #'(LAMBDA (X Y) (LIST X Y)) '(A B C) '(1 2 3))
EQUAL-OK: ((A 1) (B 2) (C 3))
(MAPCAR #'(LAMBDA (X Y) (LIST X Y)) '(A B C) '(1 2))
EQUAL-OK: ((A 1) (B 2))
(MAPCAR #'(LAMBDA (X Y) (LIST X Y)) '(C) '(1 2))
EQUAL-OK: ((C 1))
(MAPCAR #'(LAMBDA (X Y Z) (LIST X Y)) '(C) '(1 2) (U V W))
[SIMPLE-UNDEFINED-FUNCTION]: EVAL: undefined function U

EQL-OK: ERROR
(MAPCAR #'(LAMBDA (X Y Z) (LIST X Y)) '(C) '(1 2) '(U V W))
EQUAL-OK: ((C 1))
(MAPCAR #'(LAMBDA (X Y Z) (LIST X Y)) '(A B C) '(1 2 3) '(U V W))
EQUAL-OK: ((A 1) (B 2) (C 3))
(MAPCAR #'(LAMBDA (X Y Z) (LIST X Y Z)) '(A B C) '(1 2 3) '(U V W))
EQUAL-OK: ((A 1 U) (B 2 V) (C 3 W))
(MAPCAR #'(LAMBDA (X Y Z) (LIST X Y Z)) '(A B C) '(1 2 3) '(U V W . X))
EQUAL-OK: ((A 1 U) (B 2 V) (C 3 W))
(MAPCAR #'(LAMBDA (X Y Z) (LIST X Y Z)) '(A B C) '(1 2 3) '(U V . W))
[SIMPLE-TYPE-ERROR]: MAPCAR: A proper list must not end with W

EQL-OK: ERROR
(FUNCALL (COMPILE NIL (LAMBDA NIL (MAPCAR #'(LAMBDA (X Y Z) (LIST X Y Z)) '(A B C) '(1 2 3) '(U V . W)))))
[SIMPLE-TYPE-ERROR]: ENDP: A proper list must not end with W

EQL-OK: ERROR
(MAPC #'ABS '(3 -4 2 -5 -6))
EQUAL-OK: (3 -4 2 -5 -6)
(MAPC #'(LAMBDA (X Y Z) (LIST X Y Z)) '(A B C) '(1 2 3) '(U I V))
EQUAL-OK: (A B C)
(MAPCAR #'(LAMBDA (X Y Z) (LIST X Y Z)) '(A B C) '(1 2 3) '(U I V))
EQUAL-OK: ((A 1 U) (B 2 I) (C 3 V))
(MAPL #'(LAMBDA (X Y) (CONS X Y)) '(A B C D) '(1 2 3 4))
EQUAL-OK: (A B C D)
(MAPL #'(LAMBDA (X Y Z) (LIST X Y Z)) '(A B C) '(1 2 3) '(U I V))
EQUAL-OK: (A B C)
(MAPLIST #'(LAMBDA (X) (CONS 'FOO X)) '(A B C D))
EQUAL-OK: ((FOO A B C D) (FOO B C D) (FOO C D) (FOO D))
(MAPLIST #'(LAMBDA (X) (IF (MEMBER (CAR X) (CDR X)) 0 1)) '(A B A C D B C))
EQUAL-OK: (0 0 1 0 1 1 1)
(MAPLIST #'(LAMBDA (X Y Z) (LIST X Y Z)) '(A B C) '(1 2 3) '(U I V))
EQUAL-OK: (((A B C) (1 2 3) (U I V)) ((B C) (2 3) (I V)) ((C) (3) (V)))
(MAPLIST #'(LAMBDA (X Y Z) (LIST X Y Z)) '(A B C) '(1 2 3) '(U I))
EQUAL-OK: (((A B C) (1 2 3) (U I)) ((B C) (2 3) (I)))
(MAPLIST #'(LAMBDA (X Y Z) (LIST X Y Z)) '(A B C) '(1 2) '(U I V))
EQUAL-OK: (((A B C) (1 2) (U I V)) ((B C) (2) (I V)))
(MAPLIST #'(LAMBDA (X Y Z) (LIST X Y Z)) '(A B) '(1 2 3) '(U I V))
EQUAL-OK: (((A B) (1 2 3) (U I V)) ((B) (2 3) (I V)))
(MAPCON #'(LAMBDA (X) (AND (ODDP (CAR X)) (LIST (CAR X)))) '(5 4 3 2 1))
EQUAL-OK: (5 3 1)
(MAPCON #'(LAMBDA (X Y Z) (LIST X Y Z)) '(A B) '(1 2 3) '(U I V))
EQUAL-OK: ((A B) (1 2 3) (U I V) (B) (2 3) (I V))
(MAPCON #'(LAMBDA (X Y Z) (LIST X Y Z)) '(A B C) '(1 2 3) '(U I V))
EQUAL-OK: ((A B C) (1 2 3) (U I V) (B C) (2 3) (I V) (C) (3) (V))
(MAPCON (CONSTANTLY 1) (LIST 2))
EQL-OK: 1
(MAPLAP #'LIST '(A B) '(1 2 3) '(U I V))
EQUAL-OK: ((A B) (1 2 3) (U I V) (B) (2 3) (I V))
(MAPLAP #'LIST '(A B C) '(1 2 3) '(U I V))
EQUAL-OK: ((A B C) (1 2 3) (U I V) (B C) (2 3) (I V) (C) (3) (V))
(MAPCAN #'(LAMBDA (X) (AND (NUMBERP X) (LIST X))) '(A 1 B C 3 4 D 5))
EQUAL-OK: (1 3 4 5)
(MAPCAN #'(LAMBDA (X Y Z) (LIST X Y Z)) '(A B C) '(1 2 3) '(U I V))
EQUAL-OK: (A 1 U B 2 I C 3 V)
(MAPCAN #'(LAMBDA (X Y) (LIST X Y)) '(A B C) '(1 2 3))
EQUAL-OK: (A 1 B 2 C 3)
(MAPCAN #'(LAMBDA (X) (LIST X)) '(A B C))
EQUAL-OK: (A B C)
(MAPCON #'(LAMBDA (X) (LIST X)) '(A B C))
EQUAL-OK: ((A B C) (B C) (C))
(MAPCON #'(LAMBDA (X Y) (LIST X Y)) '(A B C) '(1 2))
EQUAL-OK: ((A B C) (1 2) (B C) (2))
(MAPCON #'(LAMBDA (X) (LIST X)) '(A B C))
EQUAL-OK: ((A B C) (B C) (C))
(MAPCAN #'IDENTITY '(1))
EQL-OK: 1
(MAPCAN #'IDENTITY '(1 2 3))
EQL-OK: 3
(MAPCAP #'LIST '(A B) '(1 2 3) '(U I V))
EQUAL-OK: (A 1 U B 2 I)
(MAPCAP #'LIST '(A B C) '(1 2 3) '(U I V))
EQUAL-OK: (A 1 U B 2 I C 3 V)
(UNINTERN 'X)
EQL-OK: T
RUN-TEST: finished "map" (0 errors out of 64 tests)
RUN-TEST: started #<INPUT BUFFERED FILE-STREAM CHARACTER #P"mop.tst" @1>
(PROGN (DEFSTRUCT RECTANGLE1 (X 0.0) (Y 0.0)) (DEFCLASS COUNTED1-CLASS (STRUCTURE-CLASS) ((COUNTER :INITFORM 0))) (DEFCLASS COUNTED1-RECTANGLE (RECTANGLE1) NIL (:METACLASS COUNTED1-CLASS)) (DEFMETHOD MAKE-INSTANCE :AFTER ((C COUNTED1-CLASS) &REST ARGS) (INCF (SLOT-VALUE C 'COUNTER))) (SLOT-VALUE (FIND-CLASS 'COUNTED1-RECTANGLE) 'COUNTER) (MAKE-INSTANCE 'COUNTED1-RECTANGLE) (SLOT-VALUE (FIND-CLASS 'COUNTED1-RECTANGLE) 'COUNTER))
EQL-OK: 1
(PROGN (DEFCLASS RECTANGLE2 NIL ((X :INITFORM 0.0 :INITARG X) (Y :INITFORM 0.0 :INITARG Y))) (DEFCLASS COUNTED2-CLASS (STANDARD-CLASS) ((COUNTER :INITFORM 0))) (DEFCLASS COUNTED2-RECTANGLE (RECTANGLE2) NIL (:METACLASS COUNTED2-CLASS)) (DEFMETHOD MAKE-INSTANCE :AFTER ((C COUNTED2-CLASS) &REST ARGS) (INCF (SLOT-VALUE C 'COUNTER))) (SLOT-VALUE (FIND-CLASS 'COUNTED2-RECTANGLE) 'COUNTER) (MAKE-INSTANCE 'COUNTED2-RECTANGLE) (SLOT-VALUE (FIND-CLASS 'COUNTED2-RECTANGLE) 'COUNTER))
EQL-OK: 1
(PROGN (DEFCLASS COUNTER NIL ((COUNT :ALLOCATION :CLASS :INITFORM 0 :READER HOW-MANY))) (DEFCLASS COUNTED-OBJECT (COUNTER) ((NAME :INITARG :NAME))) (DEFMETHOD INITIALIZE-INSTANCE :AFTER ((OBJ COUNTER) &REST ARGS) (INCF (SLOT-VALUE OBJ 'COUNT))) (UNLESS (CLASS-FINALIZED-P (FIND-CLASS 'COUNTER)) (FINALIZE-INHERITANCE (FIND-CLASS 'COUNTER))) (LIST (HOW-MANY (MAKE-INSTANCE 'COUNTED-OBJECT :NAME 'FOO)) (HOW-MANY (CLASS-PROTOTYPE (FIND-CLASS 'COUNTER))) (HOW-MANY (MAKE-INSTANCE 'COUNTED-OBJECT :NAME 'BAR)) (HOW-MANY (CLASS-PROTOTYPE (FIND-CLASS 'COUNTER)))))
EQUAL-OK: (1 1 2 2)
(PROGN (DEFCLASS STRUCTURE01 NIL ((X :INITARG :X :ACCESSOR STRUCTURE01-X)) (:METACLASS STRUCTURE-CLASS)) (LET ((OBJECT (MAKE-INSTANCE 'STRUCTURE01 :X 17))) (LIST (TYPEP #'STRUCTURE01-X 'GENERIC-FUNCTION) (STRUCTURE01-X OBJECT) (PROGN (INCF (STRUCTURE01-X OBJECT)) (STRUCTURE01-X OBJECT)))))
EQUAL-OK: (T 17 18)
(PROGN (DEFSTRUCT STRUCTURE02A SLOT1 (SLOT2 T) (SLOT3 (FLOOR PI)) (SLOT4 44)) (DEFCLASS STRUCTURE02B (STRUCTURE02A) ((SLOT4 :INITFORM -44) (SLOT5) (SLOT6 :INITFORM T) (SLOT7 :INITFORM (FLOOR (* PI PI))) (SLOT8 :INITFORM 88)) (:METACLASS STRUCTURE-CLASS)) (DEFSTRUCT (STRUCTURE02C (:INCLUDE STRUCTURE02B (SLOT8 -88))) SLOT9 (SLOT10 T) (SLOT11 (FLOOR (EXP 3)))) (LET ((A (MAKE-STRUCTURE02C)) (B (MAKE-INSTANCE 'STRUCTURE02C))) (LIST (STRUCTURE02C-SLOT1 A) (STRUCTURE02C-SLOT2 A) (STRUCTURE02C-SLOT3 A) (STRUCTURE02C-SLOT4 A) (STRUCTURE02C-SLOT5 A) (STRUCTURE02C-SLOT6 A) (STRUCTURE02C-SLOT7 A) (STRUCTURE02C-SLOT8 A) (STRUCTURE02C-SLOT9 A) (STRUCTURE02C-SLOT10 A) (STRUCTURE02C-SLOT11 A) (STRUCTURE02C-SLOT2 B) (STRUCTURE02C-SLOT3 B) (STRUCTURE02C-SLOT4 B) (STRUCTURE02C-SLOT6 B) (STRUCTURE02C-SLOT7 B) (STRUCTURE02C-SLOT8 B) (STRUCTURE02C-SLOT10 B) (STRUCTURE02C-SLOT11 B) (EQUALP A (COPY-STRUCTURE A)) (EQUALP B (COPY-STRUCTURE B)) (EQUALP A B))))
EQUAL-OK: (NIL T 3 -44 NIL T 9 -88 NIL T 20 T 3 -44 T 9 -88 T 20 T T NIL)
(PROGN (DEFCLASS STRUCTURE03A NIL ((SLOT1) (SLOT2 :INITFORM T) (SLOT3 :INITFORM (FLOOR PI)) (SLOT4 :INITFORM 44)) (:METACLASS STRUCTURE-CLASS)) (DEFSTRUCT (STRUCTURE03B (:INCLUDE STRUCTURE03A (SLOT4 -44))) SLOT5 (SLOT6 T) (SLOT7 (FLOOR (* PI PI))) (SLOT8 88)) (DEFCLASS STRUCTURE03C (STRUCTURE03B) ((SLOT8 :INITFORM -88) (SLOT9) (SLOT10 :INITFORM T) (SLOT11 :INITFORM (FLOOR (EXP 3)))) (:METACLASS STRUCTURE-CLASS)) (LET ((B (MAKE-INSTANCE 'STRUCTURE03C))) (LIST (SLOT-VALUE B 'SLOT2) (SLOT-VALUE B 'SLOT3) (SLOT-VALUE B 'SLOT4) (SLOT-VALUE B 'SLOT6) (SLOT-VALUE B 'SLOT7) (SLOT-VALUE B 'SLOT8) (SLOT-VALUE B 'SLOT10) (SLOT-VALUE B 'SLOT11) (EQUALP B (COPY-STRUCTURE B)))))
EQUAL-OK: (T 3 -44 T 9 -88 T 20 T)
(DEFUN AS-STRING (OBJ) (LET ((STRING (WRITE-TO-STRING OBJ :ESCAPE T :PRETTY NIL))) (LET ((I (SEARCH "#x" STRING))) (WHEN I (LET ((J (OR (POSITION-IF-NOT #'(LAMBDA (C) (DIGIT-CHAR-P C 16)) STRING :START (+ I 2)) (LENGTH STRING)))) (SETQ STRING (CONCATENATE 'STRING (SUBSEQ STRING 0 I) (SUBSEQ STRING J)))))) (DO ((POS 0)) (NIL) (LET ((I (SEARCH "{" STRING :START2 POS))) (UNLESS I (RETURN)) (LET ((J (POSITION-IF-NOT #'(LAMBDA (C) (DIGIT-CHAR-P C 16)) STRING :START (+ I 1)))) (IF (AND J (EQL (CHAR STRING J) #\})) (PROGN (SETQ STRING (CONCATENATE 'STRING (SUBSEQ STRING 0 (+ I 1)) (SUBSEQ STRING J))) (SETQ POS (+ I 2))) (SETQ POS (+ I 1)))))) (DO ((POS 0)) (NIL) (LET ((I (SEARCH ">" STRING :START2 POS))) (UNLESS I (RETURN)) (IF (AND (>= (- I POS) 8) (EQL (POSITION-IF-NOT #'(LAMBDA (C) (DIGIT-CHAR-P C 16)) STRING :START (- I 8)) I)) (PROGN (SETQ STRING (CONCATENATE 'STRING (SUBSEQ STRING 0 (- I 8)) (SUBSEQ STRING I))) (SETQ POS (+ (- I 8) 1))) (SETQ POS (+ I 1))))) STRING))
EQL-OK: AS-STRING
(AS-STRING (ALLOCATE-INSTANCE (FIND-CLASS 'SPECIALIZER)))
EQUAL-OK: "#<SPECIALIZER >"
(AS-STRING (ALLOCATE-INSTANCE (FIND-CLASS 'CLASS)))
EQUAL-OK: "#<CLASS #<UNBOUND>>"
(AS-STRING (ALLOCATE-INSTANCE (FIND-CLASS 'STANDARD-CLASS)))
EQUAL-OK: "#<STANDARD-CLASS #<UNBOUND> :UNINITIALIZED>"
(AS-STRING (ALLOCATE-INSTANCE (FIND-CLASS 'STRUCTURE-CLASS)))
EQUAL-OK: "#<STRUCTURE-CLASS #<UNBOUND>>"
(AS-STRING (ALLOCATE-INSTANCE (FIND-CLASS 'EQL-SPECIALIZER)))
EQUAL-OK: "#<EQL-SPECIALIZER #<UNBOUND>>"
(AS-STRING (ALLOCATE-INSTANCE (FIND-CLASS 'SLOT-DEFINITION)))
EQUAL-OK: "#<SLOT-DEFINITION #<UNBOUND> >"
(AS-STRING (ALLOCATE-INSTANCE (FIND-CLASS 'DIRECT-SLOT-DEFINITION)))
EQUAL-OK: "#<DIRECT-SLOT-DEFINITION #<UNBOUND> >"
(AS-STRING (ALLOCATE-INSTANCE (FIND-CLASS 'EFFECTIVE-SLOT-DEFINITION)))
EQUAL-OK: "#<EFFECTIVE-SLOT-DEFINITION #<UNBOUND> >"
(AS-STRING (ALLOCATE-INSTANCE (FIND-CLASS 'STANDARD-DIRECT-SLOT-DEFINITION)))
EQUAL-OK: "#<STANDARD-DIRECT-SLOT-DEFINITION #<UNBOUND> >"
(AS-STRING (ALLOCATE-INSTANCE (FIND-CLASS 'STANDARD-EFFECTIVE-SLOT-DEFINITION)))
EQUAL-OK: "#<STANDARD-EFFECTIVE-SLOT-DEFINITION #<UNBOUND> >"
(AS-STRING (ALLOCATE-INSTANCE (FIND-CLASS 'METHOD-COMBINATION)))
EQUAL-OK: "#<METHOD-COMBINATION #<UNBOUND> >"
(AS-STRING (ALLOCATE-INSTANCE (FIND-CLASS 'METHOD)))
EQUAL-OK: "#<METHOD >"
(AS-STRING (ALLOCATE-INSTANCE (FIND-CLASS 'STANDARD-METHOD)))
EQUAL-OK: "#<STANDARD-METHOD :UNINITIALIZED>"
(AS-STRING (ALLOCATE-INSTANCE (FIND-CLASS 'STANDARD-READER-METHOD)))
EQUAL-OK: "#<STANDARD-READER-METHOD :UNINITIALIZED>"
(AS-STRING (ALLOCATE-INSTANCE (FIND-CLASS 'STANDARD-WRITER-METHOD)))
EQUAL-OK: "#<STANDARD-WRITER-METHOD :UNINITIALIZED>"
(AS-STRING (ALLOCATE-INSTANCE (FIND-CLASS 'FUNCALLABLE-STANDARD-OBJECT)))
EQUAL-OK: "#<FUNCALLABLE-STANDARD-OBJECT #<UNBOUND>>"
(AS-STRING (ALLOCATE-INSTANCE (FIND-CLASS 'GENERIC-FUNCTION)))
EQUAL-OK: "#<GENERIC-FUNCTION #<UNBOUND>>"
(AS-STRING (ALLOCATE-INSTANCE (FIND-CLASS 'STANDARD-GENERIC-FUNCTION)))
EQUAL-OK: "#<STANDARD-GENERIC-FUNCTION #<UNBOUND>>"
(PROGN (DEFCLASS FOO135B NIL ((S :INITARG :S :ACCESSOR FOO135B-S))) (UNLESS (CLASS-FINALIZED-P (FIND-CLASS 'FOO135B)) (FINALIZE-INHERITANCE (FIND-CLASS 'FOO135B))) (CLASS-PROTOTYPE (FIND-CLASS 'FOO135B)) (DEFCLASS FOO135B (FOO135A) ((S :ACCESSOR FOO135B-S))) T)
EQL-OK: T
(LET ((WRONG 'NIL)) (LABELS ((CHECK-TREE (C) (UNLESS (MEMBER (CLASS-NAME C) '(STREAM SEQUENCE LIST NUMBER REAL RATIONAL)) (LET ((P (CLASS-PROTOTYPE C))) (UNLESS (EQ (CLASS-OF P) C) (PUSH (LIST C P) WRONG)))) (UNLESS (OR (MEMBER (FIND-CLASS 'STANDARD-OBJECT) (CLASS-PRECEDENCE-LIST C)) (MEMBER (FIND-CLASS 'STRUCTURE-OBJECT) (CLASS-PRECEDENCE-LIST C))) (MAPC #'CHECK-TREE (CLASS-DIRECT-SUBCLASSES C))))) (CHECK-TREE (FIND-CLASS 'T)) WRONG))
EQL-OK: NIL
(PROGN (SETQ *FORWARD-REFERENCED-CLASS-MISDESIGN* T) (DEFCLASS FOO133 (FORWARDCLASS03) NIL) (DEFPARAMETER *FORWARDCLASS* (FIRST (CLASS-DIRECT-SUPERCLASSES (FIND-CLASS 'FOO133)))) T)
EQL-OK: T
(TYPEP 1 *FORWARDCLASS*)
[SIMPLE-ERROR]: TYPEP: invalid type specification #1=#<FORWARD-REFERENCED-CLASS FORWARDCLASS03>
EQL-OK: ERROR
(LOCALLY (DECLARE (COMPILE)) (TYPEP 1 *FORWARDCLASS*))
[SIMPLE-ERROR]: TYPEP: invalid type specification #1=#<FORWARD-REFERENCED-CLASS FORWARDCLASS03>
EQL-OK: ERROR
(TYPE-EXPAND *FORWARDCLASS*)
[SIMPLE-ERROR]: TYPE-EXPAND: invalid type specification #1=#<FORWARD-REFERENCED-CLASS FORWARDCLASS03>
EQL-OK: ERROR
(SUBTYPEP *FORWARDCLASS* 'T)
[SIMPLE-ERROR]: SUBTYPEP: invalid type specification #1=#<FORWARD-REFERENCED-CLASS FORWARDCLASS03>
EQL-OK: ERROR
(SUBTYPEP 'NIL *FORWARDCLASS*)
[SIMPLE-ERROR]: SUBTYPEP: invalid type specification #1=#<FORWARD-REFERENCED-CLASS FORWARDCLASS03>
EQL-OK: ERROR
(SYSTEM::SUBTYPE-INTEGER *FORWARDCLASS*)
[SIMPLE-ERROR]: SUBTYPEP: invalid type specification #1=#<FORWARD-REFERENCED-CLASS FORWARDCLASS03>
EQL-OK: ERROR
(SYSTEM::SUBTYPE-SEQUENCE *FORWARDCLASS*)
EQL-OK: NIL
(WRITE-TO-STRING *FORWARDCLASS* :READABLY T)
[SIMPLE-PRINT-NOT-READABLE]: PRINT: Despite *PRINT-READABLY*, #1=#<FORWARD-REFERENCED-CLASS FORWARDCLASS03> cannot be printed readably.

EQL-OK: ERROR
(SETF (FIND-CLASS 'FOO133A) *FORWARDCLASS*)
[SIMPLE-TYPE-ERROR]: (SETF FIND-CLASS): #1=#<FORWARD-REFERENCED-CLASS FORWARDCLASS03> is not a class
EQL-OK: ERROR
(CLASS-NAME *FORWARDCLASS*)
EQL-OK: FORWARDCLASS03
(SETF (CLASS-NAME *FORWARDCLASS*) 'FORWARDCLASS03CHANGED)
[SIMPLE-ERROR]: REINITIALIZE-INSTANCE: It is not allowed to reinitialize #1=#<FORWARD-REFERENCED-CLASS FORWARDCLASS03>
EQL-OK: ERROR
(CLASS-NAME *FORWARDCLASS*)
EQL-OK: FORWARDCLASS03
(CLASS-DIRECT-SUPERCLASSES *FORWARDCLASS*)
WARNING: CLASS-DIRECT-SUPERCLASSES being called on
          #1=#<FORWARD-REFERENCED-CLASS FORWARDCLASS03>
         , but class FORWARDCLASS03 is not yet defined.
EQL-OK: NIL
(CLASS-DIRECT-SLOTS *FORWARDCLASS*)
WARNING: CLASS-DIRECT-SLOTS being called on
          #1=#<FORWARD-REFERENCED-CLASS FORWARDCLASS03>
         , but class FORWARDCLASS03 is not yet defined.
EQL-OK: NIL
(CLASS-DIRECT-DEFAULT-INITARGS *FORWARDCLASS*)
WARNING: CLASS-DIRECT-DEFAULT-INITARGS being called on
          #1=#<FORWARD-REFERENCED-CLASS FORWARDCLASS03>
         , but class FORWARDCLASS03 is not yet defined.
EQL-OK: NIL
(CLASS-PRECEDENCE-LIST *FORWARDCLASS*)
[METHOD-CALL-TYPE-ERROR]: NO-APPLICABLE-METHOD: When calling #1=#<STANDARD-GENERIC-FUNCTION CLASS-PRECEDENCE-LIST> with arguments #2=(#3=#<FORWARD-REFERENCED-CLASS FORWARDCLASS03>), no method is applicable.
EQL-OK: ERROR
(CLASS-SLOTS *FORWARDCLASS*)
[METHOD-CALL-TYPE-ERROR]: NO-APPLICABLE-METHOD: When calling #1=#<STANDARD-GENERIC-FUNCTION CLASS-SLOTS> with arguments #2=(#3=#<FORWARD-REFERENCED-CLASS FORWARDCLASS03>), no method is applicable.
EQL-OK: ERROR
(CLASS-DEFAULT-INITARGS *FORWARDCLASS*)
[METHOD-CALL-TYPE-ERROR]: NO-APPLICABLE-METHOD: When calling #1=#<STANDARD-GENERIC-FUNCTION CLASS-DEFAULT-INITARGS> with arguments #2=(#3=#<FORWARD-REFERENCED-CLASS FORWARDCLASS03>), no method is applicable.
EQL-OK: ERROR
(CLASS-FINALIZED-P *FORWARDCLASS*)
EQL-OK: NIL
(CLASS-PROTOTYPE *FORWARDCLASS*)
[METHOD-CALL-TYPE-ERROR]: NO-APPLICABLE-METHOD: When calling #1=#<STANDARD-GENERIC-FUNCTION CLASS-PROTOTYPE> with arguments #2=(#3=#<FORWARD-REFERENCED-CLASS FORWARDCLASS03>), no method is applicable.
EQL-OK: ERROR
(FINALIZE-INHERITANCE *FORWARDCLASS*)
[METHOD-CALL-TYPE-ERROR]: NO-APPLICABLE-METHOD: When calling #1=#<STANDARD-GENERIC-FUNCTION FINALIZE-INHERITANCE> with arguments #2=(#3=#<FORWARD-REFERENCED-CLASS FORWARDCLASS03>), no method is applicable.
EQL-OK: ERROR
(CLASS-FINALIZED-P *FORWARDCLASS*)
EQL-OK: NIL
(EVAL `(DEFMETHOD FOO133A ((X ,*FORWARDCLASS*))))
[SIMPLE-SOURCE-PROGRAM-ERROR]: DEFMETHOD FOO133A: Invalid specializer #1=#<FORWARD-REFERENCED-CLASS FORWARDCLASS03> in lambda list #2=((X #1#))
EQL-OK: ERROR
(PROGN (DEFGENERIC FOO133B (X) (:METHOD ((X INTEGER)) X)) (ADD-METHOD #'FOO133B (MAKE-INSTANCE 'STANDARD-METHOD :QUALIFIERS 'NIL :LAMBDA-LIST '(X) :SPECIALIZERS (LIST *FORWARDCLASS*) :FUNCTION #'(LAMBDA (ARGS NEXT-METHODS) (FIRST ARGS)))))
[SIMPLE-ERROR]: (INITIALIZE-INSTANCE STANDARD-METHOD): The element #1=#<FORWARD-REFERENCED-CLASS FORWARDCLASS03> of the :SPECIALIZERS argument is not yet defined.
EQL-OK: ERROR
(NOT (NOT (TYPEP *FORWARDCLASS* 'CLASS)))
EQL-OK: T
(NOT (NOT (TYPEP *FORWARDCLASS* 'SPECIALIZER)))
EQL-OK: T
(SUBTYPEP 'FORWARD-REFERENCED-CLASS 'CLASS)
EQL-OK: T
(SUBTYPEP 'FORWARD-REFERENCED-CLASS 'SPECIALIZER)
EQL-OK: T
(PROGN (SETQ *FORWARD-REFERENCED-CLASS-MISDESIGN* NIL) (DEFCLASS FOO134 (FORWARDCLASS04) NIL) (DEFPARAMETER *FORWARDCLASS* (FIRST (CLASS-DIRECT-SUPERCLASSES (FIND-CLASS 'FOO134)))) T)
EQL-OK: T
(TYPEP 1 *FORWARDCLASS*)
[SIMPLE-ERROR]: TYPEP: invalid type specification #1=#<FORWARD-REFERENCED-CLASS FORWARDCLASS04>
EQL-OK: ERROR
(LOCALLY (DECLARE (COMPILE)) (TYPEP 1 *FORWARDCLASS*))
[SIMPLE-ERROR]: TYPEP: invalid type specification #1=#<FORWARD-REFERENCED-CLASS FORWARDCLASS04>
EQL-OK: ERROR
(TYPE-EXPAND *FORWARDCLASS*)
[SIMPLE-ERROR]: TYPE-EXPAND: invalid type specification #1=#<FORWARD-REFERENCED-CLASS FORWARDCLASS04>
EQL-OK: ERROR
(SUBTYPEP *FORWARDCLASS* 'T)
[SIMPLE-ERROR]: SUBTYPEP: invalid type specification #1=#<FORWARD-REFERENCED-CLASS FORWARDCLASS04>
EQL-OK: ERROR
(SUBTYPEP 'NIL *FORWARDCLASS*)
[SIMPLE-ERROR]: SUBTYPEP: invalid type specification #1=#<FORWARD-REFERENCED-CLASS FORWARDCLASS04>
EQL-OK: ERROR
(SYSTEM::SUBTYPE-INTEGER *FORWARDCLASS*)
[SIMPLE-ERROR]: SUBTYPEP: invalid type specification #1=#<FORWARD-REFERENCED-CLASS FORWARDCLASS04>
EQL-OK: ERROR
(SYSTEM::SUBTYPE-SEQUENCE *FORWARDCLASS*)
EQL-OK: NIL
(WRITE-TO-STRING *FORWARDCLASS* :READABLY T)
[SIMPLE-PRINT-NOT-READABLE]: PRINT: Despite *PRINT-READABLY*, #1=#<FORWARD-REFERENCED-CLASS FORWARDCLASS04> cannot be printed readably.

EQL-OK: ERROR
(SETF (FIND-CLASS 'FOO134A) *FORWARDCLASS*)
[SIMPLE-TYPE-ERROR]: (SETF FIND-CLASS): #1=#<FORWARD-REFERENCED-CLASS FORWARDCLASS04> is not a class
EQL-OK: ERROR
(CLASS-NAME *FORWARDCLASS*)
EQL-OK: FORWARDCLASS04
(SETF (CLASS-NAME *FORWARDCLASS*) 'FORWARDCLASS04CHANGED)
[METHOD-CALL-TYPE-ERROR]: NO-APPLICABLE-METHOD: When calling #1=#<STANDARD-GENERIC-FUNCTION (SETF CLASS-NAME)> with arguments #2=(FORWARDCLASS04CHANGED #3=#<FORWARD-REFERENCED-CLASS FORWARDCLASS04>), no method is applicable.
EQL-OK: ERROR
(CLASS-NAME *FORWARDCLASS*)
EQL-OK: FORWARDCLASS04
(CLASS-DIRECT-SUPERCLASSES *FORWARDCLASS*)
WARNING: CLASS-DIRECT-SUPERCLASSES being called on
          #1=#<FORWARD-REFERENCED-CLASS FORWARDCLASS04>
         , but class FORWARDCLASS04 is not yet defined.
EQL-OK: NIL
(CLASS-DIRECT-SLOTS *FORWARDCLASS*)
WARNING: CLASS-DIRECT-SLOTS being called on
          #1=#<FORWARD-REFERENCED-CLASS FORWARDCLASS04>
         , but class FORWARDCLASS04 is not yet defined.
EQL-OK: NIL
(CLASS-DIRECT-DEFAULT-INITARGS *FORWARDCLASS*)
WARNING: CLASS-DIRECT-DEFAULT-INITARGS being called on
          #1=#<FORWARD-REFERENCED-CLASS FORWARDCLASS04>
         , but class FORWARDCLASS04 is not yet defined.
EQL-OK: NIL
(CLASS-PRECEDENCE-LIST *FORWARDCLASS*)
[METHOD-CALL-TYPE-ERROR]: NO-APPLICABLE-METHOD: When calling #1=#<STANDARD-GENERIC-FUNCTION CLASS-PRECEDENCE-LIST> with arguments #2=(#3=#<FORWARD-REFERENCED-CLASS FORWARDCLASS04>), no method is applicable.
EQL-OK: ERROR
(CLASS-SLOTS *FORWARDCLASS*)
[METHOD-CALL-TYPE-ERROR]: NO-APPLICABLE-METHOD: When calling #1=#<STANDARD-GENERIC-FUNCTION CLASS-SLOTS> with arguments #2=(#3=#<FORWARD-REFERENCED-CLASS FORWARDCLASS04>), no method is applicable.
EQL-OK: ERROR
(CLASS-DEFAULT-INITARGS *FORWARDCLASS*)
[METHOD-CALL-TYPE-ERROR]: NO-APPLICABLE-METHOD: When calling #1=#<STANDARD-GENERIC-FUNCTION CLASS-DEFAULT-INITARGS> with arguments #2=(#3=#<FORWARD-REFERENCED-CLASS FORWARDCLASS04>), no method is applicable.
EQL-OK: ERROR
(CLASS-FINALIZED-P *FORWARDCLASS*)
EQL-OK: NIL
(CLASS-PROTOTYPE *FORWARDCLASS*)
[METHOD-CALL-TYPE-ERROR]: NO-APPLICABLE-METHOD: When calling #1=#<STANDARD-GENERIC-FUNCTION CLASS-PROTOTYPE> with arguments #2=(#3=#<FORWARD-REFERENCED-CLASS FORWARDCLASS04>), no method is applicable.
EQL-OK: ERROR
(FINALIZE-INHERITANCE *FORWARDCLASS*)
[METHOD-CALL-TYPE-ERROR]: NO-APPLICABLE-METHOD: When calling #1=#<STANDARD-GENERIC-FUNCTION FINALIZE-INHERITANCE> with arguments #2=(#3=#<FORWARD-REFERENCED-CLASS FORWARDCLASS04>), no method is applicable.
EQL-OK: ERROR
(CLASS-FINALIZED-P *FORWARDCLASS*)
EQL-OK: NIL
(EVAL `(DEFMETHOD FOO134A ((X ,*FORWARDCLASS*))))
[SIMPLE-SOURCE-PROGRAM-ERROR]: DEFMETHOD FOO134A: Invalid specializer #1=#<FORWARD-REFERENCED-CLASS FORWARDCLASS04> in lambda list #2=((X #1#))
EQL-OK: ERROR
(PROGN (DEFGENERIC FOO134B (X) (:METHOD ((X INTEGER)) X)) (ADD-METHOD #'FOO134B (MAKE-INSTANCE 'STANDARD-METHOD :QUALIFIERS 'NIL :LAMBDA-LIST '(X) :SPECIALIZERS (LIST *FORWARDCLASS*) :FUNCTION #'(LAMBDA (ARGS NEXT-METHODS) (FIRST ARGS)))))
[SIMPLE-ERROR]: (INITIALIZE-INSTANCE STANDARD-METHOD): The element #1=#<FORWARD-REFERENCED-CLASS FORWARDCLASS04> of the :SPECIALIZERS argument is not of type SPECIALIZER.
EQL-OK: ERROR
(NOT (NOT (TYPEP *FORWARDCLASS* 'CLASS)))
EQL-OK: NIL
(NOT (NOT (TYPEP *FORWARDCLASS* 'SPECIALIZER)))
EQL-OK: NIL
(SUBTYPEP 'FORWARD-REFERENCED-CLASS 'CLASS)
EQL-OK: NIL
(SUBTYPEP 'FORWARD-REFERENCED-CLASS 'SPECIALIZER)
EQL-OK: NIL
(LET ((F (MAKE-INSTANCE 'FUNCALLABLE-STANDARD-OBJECT))) (SET-FUNCALLABLE-INSTANCE-FUNCTION F #'CONS) (FUNCALL F 'A 'B))
EQUAL-OK: (A . B)
(LET ((F (MAKE-INSTANCE 'FUNCALLABLE-STANDARD-OBJECT))) (SET-FUNCALLABLE-INSTANCE-FUNCTION F #'(LAMBDA (X Y) (DECLARE (COMPILE)) (CONS X Y))) (FUNCALL F 'A 'B))
EQUAL-OK: (A . B)
(LET ((F (MAKE-INSTANCE 'FUNCALLABLE-STANDARD-OBJECT))) (SET-FUNCALLABLE-INSTANCE-FUNCTION F #'(LAMBDA (X Y) (DECLARE (COMPILE)) (LIST 'START X Y 'END))) (FUNCALL F 'A 'B))
EQUAL-OK: (START A B END)
(LET ((F (MAKE-INSTANCE 'FUNCALLABLE-STANDARD-OBJECT))) (SET-FUNCALLABLE-INSTANCE-FUNCTION F #'(LAMBDA (X Y) (CONS X Y))) (FUNCALL F 'A 'B))
EQUAL-OK: (A . B)
(LET ((F (MAKE-INSTANCE 'FUNCALLABLE-STANDARD-OBJECT))) (DEFGENERIC TEST-FUNCALLABLE-01 (X Y) (:METHOD (X Y) (CONS X Y))) (SET-FUNCALLABLE-INSTANCE-FUNCTION F #'TEST-FUNCALLABLE-01) (FUNCALL F 'A 'B))
EQUAL-OK: (A . B)
(PROGN (DEFCLASS MY-GF-CLASS (STANDARD-GENERIC-FUNCTION) ((MYSLOT :INITFORM 17 :ACCESSOR MY-MYSLOT)) (:METACLASS FUNCALLABLE-STANDARD-CLASS)) T)
EQL-OK: T
(PROGN (DEFGENERIC FOO110 (X)) (DEFMETHOD FOO110 ((X INTEGER)) (* X X)) (DEFGENERIC FOO110 (X) (:GENERIC-FUNCTION-CLASS MY-GF-CLASS)) (DEFMETHOD FOO110 ((X FLOAT)) (* X X X)) (LIST (FOO110 10) (FOO110 3.0) (MY-MYSLOT #'FOO110)))
EQUAL-OK: (100 27.0 17)
(PROGN (DEFGENERIC FOO111 (X)) (DEFMETHOD FOO111 ((X INTEGER)) (* X X)) (DEFGENERIC FOO111 (X) (:GENERIC-FUNCTION-CLASS MY-GF-CLASS)) (GC) (DEFMETHOD FOO111 ((X FLOAT)) (* X X X)) (LIST (FOO111 10) (FOO111 3.0) (MY-MYSLOT #'FOO111) (EQ (SYSTEM::%RECORD-REF #'FOO111 0) (CLOS::CLASS-CURRENT-VERSION (FIND-CLASS 'MY-GF-CLASS)))))
EQUAL-OK: (100 27.0 17 T)
(PROGN (DEFGENERIC FOO112 (X)) (DEFMETHOD FOO112 ((X INTEGER)) (* X X)) (DEFGENERIC FOO112 (X) (:GENERIC-FUNCTION-CLASS MY-GF-CLASS)) (DEFMETHOD FOO112 ((X FLOAT)) (* X X X)) (GC) (LIST (FOO112 10) (FOO112 3.0) (MY-MYSLOT #'FOO112) (EQ (SYSTEM::%RECORD-REF #'FOO112 0) (CLOS::CLASS-CURRENT-VERSION (FIND-CLASS 'MY-GF-CLASS)))))
EQUAL-OK: (100 27.0 17 T)
(PROGN (ENSURE-GENERIC-FUNCTION 'FOO113 :DECLARE '((OPTIMIZE (SPEED 3)))) (GENERIC-FUNCTION-DECLARATIONS #'FOO113))
EQUAL-OK: ((OPTIMIZE (SPEED 3)))
(PROGN (ENSURE-GENERIC-FUNCTION 'FOO114 :DECLARATIONS '((OPTIMIZE (SPEED 3)))) (GENERIC-FUNCTION-DECLARATIONS #'FOO114))
EQUAL-OK: ((OPTIMIZE (SPEED 3)))
(PROGN (ENSURE-GENERIC-FUNCTION 'FOO115) (DEFMETHOD FOO115 (X Y) (LIST X Y)) (FOO115 3 4))
EQUAL-OK: (3 4)
(PROGN (DEFCLASS OPTION-CLASS (STANDARD-CLASS) ((OPTION :ACCESSOR CL-OPTION :INITARG :MY-OPTION))) (MACROLET ((EVAL-SUCCEEDS (FORM) `(NOT (NTH-VALUE 1 (IGNORE-ERRORS (EVAL ',FORM)))))) (LIST (EVAL-SUCCEEDS (DEFCLASS TESTCLASS02A NIL NIL (:MY-OPTION FOO) (:METACLASS OPTION-CLASS))) (CL-OPTION (FIND-CLASS 'TESTCLASS02A)) (EVAL-SUCCEEDS (DEFCLASS TESTCLASS02B NIL NIL (:MY-OPTION BAR) (:MY-OPTION BAZ) (:METACLASS OPTION-CLASS))) (EVAL-SUCCEEDS (DEFCLASS TESTCLASS02C NIL NIL (:OTHER-OPTION FOO) (:METACLASS OPTION-CLASS))))))
EQUAL-OK: (T (FOO) NIL NIL)
(PROGN (DEFCLASS OPTION-SLOT-DEFINITION (STANDARD-DIRECT-SLOT-DEFINITION) ((OPTION :ACCESSOR SL-OPTION :INITARG :MY-OPTION))) (DEFCLASS OPTION-SLOT-CLASS (STANDARD-CLASS) NIL) (DEFMETHOD DIRECT-SLOT-DEFINITION-CLASS ((C OPTION-SLOT-CLASS) &REST ARGS) (DECLARE (IGNORE ARGS)) (FIND-CLASS 'OPTION-SLOT-DEFINITION)) (MACROLET ((EVAL-SUCCEEDS (FORM) `(NOT (NTH-VALUE 1 (IGNORE-ERRORS (EVAL ',FORM)))))) (LIST (EVAL-SUCCEEDS (DEFCLASS TESTCLASS03A NIL ((X :MY-OPTION FOO)) (:METACLASS OPTION-SLOT-CLASS))) (SL-OPTION (FIRST (CLASS-DIRECT-SLOTS (FIND-CLASS 'TESTCLASS03A)))) (EVAL-SUCCEEDS (DEFCLASS TESTCLASS03B NIL ((X :MY-OPTION BAR :MY-OPTION BAZ)) (:METACLASS OPTION-SLOT-CLASS))) (SL-OPTION (FIRST (CLASS-DIRECT-SLOTS (FIND-CLASS 'TESTCLASS03B)))) (EVAL-SUCCEEDS (DEFCLASS TESTCLASS03C NIL ((X :OTHER-OPTION FOO)) (:METACLASS OPTION-SLOT-CLASS))) (EVAL-SUCCEEDS (DEFCLASS TESTCLASS03D NIL ((X :MY-OPTION FOO)) (:MY-OPTION BAR) (:METACLASS OPTION-SLOT-CLASS))))))
EQUAL-OK: (T FOO T (BAR BAZ) NIL NIL)
(PROGN (DEFCLASS EXTENDED-SLOT-DEFINITION (STANDARD-DIRECT-SLOT-DEFINITION) ((OPTION1 :INITARG :OPTION1) (OPTION2 :INITARG :OPTION2))) (DEFCLASS EXTENDED-SLOT-CLASS (STANDARD-CLASS) NIL) (DEFMETHOD DIRECT-SLOT-DEFINITION-CLASS ((C EXTENDED-SLOT-CLASS) &REST ARGS) (DECLARE (IGNORE ARGS)) (FIND-CLASS 'EXTENDED-SLOT-DEFINITION)) (DEFCLASS TESTCLASS03E NIL ((X :OPTION1 BAR)) (:METACLASS EXTENDED-SLOT-CLASS)) (DEFCLASS TESTCLASS03E NIL ((X :OPTION2 BAZ)) (:METACLASS EXTENDED-SLOT-CLASS)) (LET ((CL (FIND-CLASS 'TESTCLASS03E))) (LIST (LENGTH (CLASS-DIRECT-SLOTS CL)) (SLOT-BOUNDP (FIRST (CLASS-DIRECT-SLOTS CL)) 'OPTION1) (SLOT-BOUNDP (FIRST (CLASS-DIRECT-SLOTS CL)) 'OPTION2))))
EQUAL-OK: (1 NIL T)
(PROGN (DEFCLASS TESTCLASS51 (STANDARD-CLASS) NIL (:DEFAULT-INITARGS :DOCUMENTATION "some doc")) (MAPCAR #'(LAMBDA (X) (DOCUMENTATION X 'TYPE)) (LIST (DEFCLASS TESTCLASS51A NIL NIL) (DEFCLASS TESTCLASS51B NIL NIL (:METACLASS TESTCLASS51)) (DEFCLASS TESTCLASS51C NIL NIL (:DOCUMENTATION "some other doc") (:METACLASS TESTCLASS51)))))
EQUAL-OK: (NIL "some doc" "some other doc")
(PROGN (DEFCLASS OPTION-GENERIC-FUNCTION (STANDARD-GENERIC-FUNCTION) ((OPTION :ACCESSOR GF-OPTION :INITARG :MY-OPTION)) (:METACLASS FUNCALLABLE-STANDARD-CLASS)) (MACROLET ((EVAL-SUCCEEDS (FORM) `(NOT (NTH-VALUE 1 (IGNORE-ERRORS (EVAL ',FORM)))))) (LIST (EVAL-SUCCEEDS (DEFGENERIC TESTGF04A (X Y) (:MY-OPTION FOO) (:GENERIC-FUNCTION-CLASS OPTION-GENERIC-FUNCTION))) (GF-OPTION #'TESTGF04A) (EVAL-SUCCEEDS (DEFGENERIC TESTGF04B (X Y) (:MY-OPTION BAR) (:MY-OPTION BAZ) (:GENERIC-FUNCTION-CLASS OPTION-GENERIC-FUNCTION))) (EVAL-SUCCEEDS (DEFGENERIC TESTGF04C (X Y) (:MY-OPTION BAR) (:OTHER-OPTION BAZ) (:GENERIC-FUNCTION-CLASS OPTION-GENERIC-FUNCTION))))))
EQUAL-OK: (T (FOO) NIL NIL)
(PROGN (DEFCLASS TESTMETHOD50 (STANDARD-METHOD) NIL) (DEFCLASS TESTGENERICFUNCTION50 (STANDARD-GENERIC-FUNCTION) NIL (:DEFAULT-INITARGS :METHOD-CLASS (FIND-CLASS 'TESTMETHOD50)) (:METACLASS FUNCALLABLE-STANDARD-CLASS)) (MAPCAR #'CLASS-NAME (MAPCAR #'GENERIC-FUNCTION-METHOD-CLASS (LIST (DEFGENERIC TESTGF50A (X)) (DEFGENERIC TESTGF50B (X) (:GENERIC-FUNCTION-CLASS TESTGENERICFUNCTION50)) (DEFGENERIC TESTGF50C (X) (:METHOD-CLASS STANDARD-METHOD) (:GENERIC-FUNCTION-CLASS TESTGENERICFUNCTION50)) (DEFGENERIC TESTGF50D (X) (:METHOD-CLASS TESTMETHOD50) (:GENERIC-FUNCTION-CLASS TESTGENERICFUNCTION50))))))
EQUAL-OK: (STANDARD-METHOD TESTMETHOD50 STANDARD-METHOD TESTMETHOD50)
(PROGN (DEFCLASS DEPENDENT05 NIL ((COUNTER :INITFORM 0))) (DEFCLASS TESTCLASS05 NIL NIL) (DEFMETHOD UPDATE-DEPENDENT ((C CLASS) (D DEPENDENT05) &REST ARGS) (INCF (SLOT-VALUE D 'COUNTER))) (LET ((TESTCLASS (FIND-CLASS 'TESTCLASS05)) (DEP1 (MAKE-INSTANCE 'DEPENDENT05)) (DEP2 (MAKE-INSTANCE 'DEPENDENT05)) (DEP3 (MAKE-INSTANCE 'DEPENDENT05))) (ADD-DEPENDENT TESTCLASS DEP1) (ADD-DEPENDENT TESTCLASS DEP2) (ADD-DEPENDENT TESTCLASS DEP3) (ADD-DEPENDENT TESTCLASS DEP1) (REINITIALIZE-INSTANCE TESTCLASS :NAME 'TESTCLASS05-RENAMED) (REMOVE-DEPENDENT TESTCLASS DEP2) (REINITIALIZE-INSTANCE TESTCLASS :NAME 'TESTCLASS05-RERENAMED) (LIST (SLOT-VALUE DEP1 'COUNTER) (SLOT-VALUE DEP2 'COUNTER) (SLOT-VALUE DEP3 'COUNTER))))
EQUAL-OK: (2 1 2)
(PROGN (DEFCLASS DEPENDENT06 NIL ((HISTORY :INITFORM 'NIL))) (DEFGENERIC TESTGF06 (X)) (DEFMETHOD UPDATE-DEPENDENT ((GF GENERIC-FUNCTION) (D DEPENDENT06) &REST ARGS) (PUSH ARGS (SLOT-VALUE D 'HISTORY))) (LET ((TESTGF #'TESTGF06) (DEP1 (MAKE-INSTANCE 'DEPENDENT06)) (DEP2 (MAKE-INSTANCE 'DEPENDENT06)) (DEP3 (MAKE-INSTANCE 'DEPENDENT06))) (ADD-DEPENDENT TESTGF DEP1) (ADD-DEPENDENT TESTGF DEP2) (ADD-DEPENDENT TESTGF DEP3) (ADD-DEPENDENT TESTGF DEP1) (REINITIALIZE-INSTANCE TESTGF :NAME 'TESTGF06-RENAMED) (DEFMETHOD TESTGF06 ((X INTEGER))) (REMOVE-DEPENDENT TESTGF DEP2) (DEFMETHOD TESTGF06 ((X REAL))) (REMOVE-METHOD TESTGF (FIND-METHOD TESTGF 'NIL (LIST (FIND-CLASS 'INTEGER)))) (MAPCAR #'(LAMBDA (HISTORY) (MAPCAR #'(LAMBDA (EVENT) (MAPCAR #'(LAMBDA (X) (IF (TYPEP X 'METHOD) (LIST 'METHOD (MAPCAR #'CLASS-NAME (METHOD-SPECIALIZERS X))) X)) EVENT)) HISTORY)) (LIST (REVERSE (SLOT-VALUE DEP1 'HISTORY)) (REVERSE (SLOT-VALUE DEP2 'HISTORY)) (REVERSE (SLOT-VALUE DEP3 'HISTORY))))))
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION UPDATE-DEPENDENT> is
         being modified, but has already been called.
EQUAL-OK: (((:NAME TESTGF06-RENAMED) (ADD-METHOD (METHOD (INTEGER))) (ADD-METHOD (METHOD (REAL))) (REMOVE-METHOD (METHOD (INTEGER)))) ((:NAME TESTGF06-RENAMED) (ADD-METHOD (METHOD (INTEGER)))) ((:NAME TESTGF06-RENAMED) (ADD-METHOD (METHOD (INTEGER))) (ADD-METHOD (METHOD (REAL))) (REMOVE-METHOD (METHOD (INTEGER)))))
(PROGN (DEFPARAMETER *TIMESTAMP* 0) (DEFCLASS PRIORITIZED-DEPENDENT NIL ((PRIORITY :TYPE REAL :INITFORM 0 :INITARG :PRIORITY :READER DEPENDENT-PRIORITY))) (DEFCLASS PRIORITIZED-DISPATCHER NIL ((DEPENDENTS :TYPE LIST :INITFORM NIL))) (DEFMETHOD ADD-DEPENDENT ((METAOBJECT PRIORITIZED-DISPATCHER) (DEPENDENT PRIORITIZED-DEPENDENT)) (UNLESS (MEMBER DEPENDENT (SLOT-VALUE METAOBJECT 'DEPENDENTS)) (SETF (SLOT-VALUE METAOBJECT 'DEPENDENTS) (SORT (CONS DEPENDENT (SLOT-VALUE METAOBJECT 'DEPENDENTS)) #'> :KEY #'DEPENDENT-PRIORITY)))) (DEFMETHOD REMOVE-DEPENDENT ((METAOBJECT PRIORITIZED-DISPATCHER) (DEPENDENT PRIORITIZED-DEPENDENT)) (SETF (SLOT-VALUE METAOBJECT 'DEPENDENTS) (DELETE DEPENDENT (SLOT-VALUE METAOBJECT 'DEPENDENTS)))) (DEFMETHOD MAP-DEPENDENTS ((METAOBJECT PRIORITIZED-DISPATCHER) FUNCTION) (DOLIST (DEPENDENT (SLOT-VALUE METAOBJECT 'DEPENDENTS)) (FUNCALL FUNCTION DEPENDENT) (INCF *TIMESTAMP*))) T)
EQL-OK: T
(PROGN (SETQ *TIMESTAMP* 0) (DEFCLASS PRIORITIZED-CLASS (PRIORITIZED-DISPATCHER STANDARD-CLASS) NIL) (DEFCLASS TESTCLASS07 NIL NIL (:METACLASS PRIORITIZED-CLASS)) (DEFCLASS DEPENDENT07 (PRIORITIZED-DEPENDENT) ((HISTORY :INITFORM NIL))) (DEFMETHOD UPDATE-DEPENDENT ((C CLASS) (D DEPENDENT07) &REST ARGS) (PUSH (CONS *TIMESTAMP* ARGS) (SLOT-VALUE D 'HISTORY))) (LET ((TESTCLASS (FIND-CLASS 'TESTCLASS07)) (DEP1 (MAKE-INSTANCE 'DEPENDENT07 :PRIORITY 5)) (DEP2 (MAKE-INSTANCE 'DEPENDENT07 :PRIORITY 10)) (DEP3 (MAKE-INSTANCE 'DEPENDENT07 :PRIORITY 1))) (ADD-DEPENDENT TESTCLASS DEP1) (ADD-DEPENDENT TESTCLASS DEP2) (ADD-DEPENDENT TESTCLASS DEP3) (ADD-DEPENDENT TESTCLASS DEP1) (REINITIALIZE-INSTANCE TESTCLASS :NAME 'TESTCLASS07-RENAMED) (REMOVE-DEPENDENT TESTCLASS DEP2) (REINITIALIZE-INSTANCE TESTCLASS :NAME 'TESTCLASS07-RERENAMED) (LIST (REVERSE (SLOT-VALUE DEP1 'HISTORY)) (REVERSE (SLOT-VALUE DEP2 'HISTORY)) (REVERSE (SLOT-VALUE DEP3 'HISTORY)))))
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION UPDATE-DEPENDENT> is
         being modified, but has already been called.
EQUAL-OK: (((1 :NAME TESTCLASS07-RENAMED) (3 :NAME TESTCLASS07-RERENAMED)) ((0 :NAME TESTCLASS07-RENAMED)) ((2 :NAME TESTCLASS07-RENAMED) (4 :NAME TESTCLASS07-RERENAMED)))
(PROGN (SETQ *TIMESTAMP* 0) (DEFCLASS PRIORITIZED-GENERIC-FUNCTION (PRIORITIZED-DISPATCHER STANDARD-GENERIC-FUNCTION) NIL (:METACLASS FUNCALLABLE-STANDARD-CLASS)) (DEFGENERIC TESTGF08 (X) (:GENERIC-FUNCTION-CLASS PRIORITIZED-GENERIC-FUNCTION)) (DEFCLASS DEPENDENT08 (PRIORITIZED-DEPENDENT) ((HISTORY :INITFORM 'NIL))) (DEFMETHOD UPDATE-DEPENDENT ((GF GENERIC-FUNCTION) (D DEPENDENT08) &REST ARGS) (PUSH (CONS *TIMESTAMP* ARGS) (SLOT-VALUE D 'HISTORY))) (LET ((TESTGF #'TESTGF08) (DEP1 (MAKE-INSTANCE 'DEPENDENT08 :PRIORITY 1)) (DEP2 (MAKE-INSTANCE 'DEPENDENT08 :PRIORITY 10)) (DEP3 (MAKE-INSTANCE 'DEPENDENT08 :PRIORITY 5))) (ADD-DEPENDENT TESTGF DEP1) (ADD-DEPENDENT TESTGF DEP2) (ADD-DEPENDENT TESTGF DEP3) (ADD-DEPENDENT TESTGF DEP1) (REINITIALIZE-INSTANCE TESTGF :NAME 'TESTGF08-RENAMED) (DEFMETHOD TESTGF08 ((X INTEGER))) (REMOVE-DEPENDENT TESTGF DEP2) (DEFMETHOD TESTGF08 ((X REAL))) (REMOVE-METHOD TESTGF (FIND-METHOD TESTGF 'NIL (LIST (FIND-CLASS 'INTEGER)))) (MAPCAR #'(LAMBDA (HISTORY) (MAPCAR #'(LAMBDA (EVENT) (MAPCAR #'(LAMBDA (X) (IF (TYPEP X 'METHOD) (LIST 'METHOD (MAPCAR #'CLASS-NAME (METHOD-SPECIALIZERS X))) X)) EVENT)) HISTORY)) (LIST (REVERSE (SLOT-VALUE DEP1 'HISTORY)) (REVERSE (SLOT-VALUE DEP2 'HISTORY)) (REVERSE (SLOT-VALUE DEP3 'HISTORY))))))
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION UPDATE-DEPENDENT> is
         being modified, but has already been called.
EQUAL-OK: (((2 :NAME TESTGF08-RENAMED) (5 ADD-METHOD (METHOD (INTEGER))) (7 ADD-METHOD (METHOD (REAL))) (9 REMOVE-METHOD (METHOD (INTEGER)))) ((0 :NAME TESTGF08-RENAMED) (3 ADD-METHOD (METHOD (INTEGER)))) ((1 :NAME TESTGF08-RENAMED) (4 ADD-METHOD (METHOD (INTEGER))) (6 ADD-METHOD (METHOD (REAL))) (8 REMOVE-METHOD (METHOD (INTEGER)))))
(PROGN (DEFCLASS REINIT-INSTANCE-CLASS (STANDARD-CLASS) NIL) (DEFMETHOD VALIDATE-SUPERCLASS ((CLASS REINIT-INSTANCE-CLASS) (SUPERCLASS STANDARD-CLASS)) T) (DEFPARAMETER *FINALIZE-INHERITANCE-COUNT* 0) (DEFMETHOD FINALIZE-INHERITANCE :BEFORE ((CLASS REINIT-INSTANCE-CLASS)) (INCF *FINALIZE-INHERITANCE-COUNT*)) (DEFCLASS REINIT-INSTANCE-OBJECT NIL ((A-SLOT)) (:METACLASS REINIT-INSTANCE-CLASS)) (UNLESS (CLASS-FINALIZED-P (FIND-CLASS 'REINIT-INSTANCE-OBJECT)) (FINALIZE-INHERITANCE (FIND-CLASS 'REINIT-INSTANCE-OBJECT))) (REINITIALIZE-INSTANCE (FIND-CLASS 'REINIT-INSTANCE-OBJECT)) *FINALIZE-INHERITANCE-COUNT*)
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION FINALIZE-INHERITANCE>
         is being modified, but has already been called.
EQL-OK: 2
(LET ((<T> (FIND-CLASS 'T)) (OPERATION-COUNTER 0)) (DEFMETHOD ADD-DIRECT-METHOD ((SPECIALIZER (EQL <T>)) (METHOD METHOD)) (INCF OPERATION-COUNTER)) (DEFMETHOD REMOVE-DIRECT-METHOD ((SPECIALIZER (EQL <T>)) (METHOD METHOD)) (INCF OPERATION-COUNTER)) (DEFMETHOD SPECIALIZER-DIRECT-GENERIC-FUNCTIONS ((CLASS (EQL <T>))) 'NIL) (DEFMETHOD SPECIALIZER-DIRECT-METHODS ((CLASS (EQL <T>))) 'NIL) (SETQ OPERATION-COUNTER 0) (FMAKUNBOUND 'TESTGF09) (DEFMETHOD TESTGF09 (X Y Z) (+ X Y Z)) (LIST (NULL (SPECIALIZER-DIRECT-GENERIC-FUNCTIONS (FIND-CLASS 'T))) (NULL (SPECIALIZER-DIRECT-METHODS (FIND-CLASS 'T))) OPERATION-COUNTER))
EQUAL-OK: (T T 3)
(PROGN (DEFGENERIC FOO142 (X) (:METHOD ((X T)))) (DEFGENERIC FOO142 (X)) (NULL (MEMBER #'FOO142 (SPECIALIZER-DIRECT-GENERIC-FUNCTIONS (FIND-CLASS 'T)))))
EQL-OK: T
(PROGN (DEFCLASS VOLATILE-CLASS (STANDARD-CLASS) ((INSTANTIATED :TYPE BOOLEAN :INITFORM NIL))) (DEFPARAMETER *VOLATILE-CLASS-HACK* NIL) (DEFMETHOD ADD-DIRECT-SUBCLASS :AROUND ((SUPERCLASS VOLATILE-CLASS) (SUBCLASS VOLATILE-CLASS)) (WHEN *VOLATILE-CLASS-HACK* (CALL-NEXT-METHOD))) (DEFMETHOD REMOVE-DIRECT-SUBCLASS :AROUND ((SUPERCLASS VOLATILE-CLASS) (SUBCLASS VOLATILE-CLASS)) NIL) (DEFUN NOTE-VOLATILE-CLASS-INSTANTIATED (CLASS) (UNLESS (SLOT-VALUE CLASS 'INSTANTIATED) (SETF (SLOT-VALUE CLASS 'INSTANTIATED) T) (DOLIST (SUPERCLASS (CLASS-DIRECT-SUPERCLASSES CLASS)) (WHEN (TYPEP SUPERCLASS 'VOLATILE-CLASS) (UNLESS (MEMBER CLASS (CLASS-DIRECT-SUBCLASSES SUPERCLASS)) (LET ((*VOLATILE-CLASS-HACK* T)) (ADD-DIRECT-SUBCLASS SUPERCLASS CLASS)) (NOTE-VOLATILE-CLASS-INSTANTIATED SUPERCLASS)))))) (DEFMETHOD ALLOCATE-INSTANCE :AFTER ((CLASS VOLATILE-CLASS) &REST INITARGS) (NOTE-VOLATILE-CLASS-INSTANTIATED CLASS)) (DEFCLASS TESTCLASS10 NIL NIL (:METACLASS VOLATILE-CLASS)) (DEFCLASS TESTCLASS10A (TESTCLASS10) NIL (:METACLASS VOLATILE-CLASS)) (DEFCLASS TESTCLASS10B (TESTCLASS10) NIL (:METACLASS VOLATILE-CLASS)) (DEFCLASS TESTCLASS10C (TESTCLASS10) NIL (:METACLASS VOLATILE-CLASS)) (DEFCLASS TESTCLASS10D (TESTCLASS10B) NIL (:METACLASS VOLATILE-CLASS)) (LET ((RESULTS 'NIL)) (PUSH (CLASS-DIRECT-SUBCLASSES (FIND-CLASS 'TESTCLASS10)) RESULTS) (PUSH (CLASS-DIRECT-SUBCLASSES (FIND-CLASS 'TESTCLASS10A)) RESULTS) (PUSH (CLASS-DIRECT-SUBCLASSES (FIND-CLASS 'TESTCLASS10B)) RESULTS) (PUSH (CLASS-DIRECT-SUBCLASSES (FIND-CLASS 'TESTCLASS10C)) RESULTS) (PUSH (CLASS-DIRECT-SUBCLASSES (FIND-CLASS 'TESTCLASS10D)) RESULTS) (MAKE-INSTANCE 'TESTCLASS10D) (PUSH (CLASS-DIRECT-SUBCLASSES (FIND-CLASS 'TESTCLASS10)) RESULTS) (PUSH (CLASS-DIRECT-SUBCLASSES (FIND-CLASS 'TESTCLASS10A)) RESULTS) (PUSH (CLASS-DIRECT-SUBCLASSES (FIND-CLASS 'TESTCLASS10B)) RESULTS) (PUSH (CLASS-DIRECT-SUBCLASSES (FIND-CLASS 'TESTCLASS10C)) RESULTS) (PUSH (CLASS-DIRECT-SUBCLASSES (FIND-CLASS 'TESTCLASS10D)) RESULTS) (MAPCAR #'(LAMBDA (L) (MAPCAR #'CLASS-NAME L)) (NREVERSE RESULTS))))
EQUAL-OK: (NIL NIL NIL NIL NIL (TESTCLASS10B) NIL (TESTCLASS10D) NIL NIL)
(PROGN (DEFCLASS MSL-GENERIC-FUNCTION (STANDARD-GENERIC-FUNCTION) NIL (:METACLASS FUNCALLABLE-STANDARD-CLASS)) (DEFUN REVERSE-METHOD-LIST (METHODS) (LET ((RESULT 'NIL)) (DOLIST (METHOD METHODS) (IF (AND (CONSP RESULT) (EQUAL (METHOD-QUALIFIERS METHOD) (METHOD-QUALIFIERS (CAAR RESULT)))) (PUSH METHOD (CAR RESULT)) (PUSH (LIST METHOD) RESULT))) (REDUCE #'APPEND RESULT))) (DEFMETHOD COMPUTE-APPLICABLE-METHODS ((GF MSL-GENERIC-FUNCTION) ARGUMENTS) (REVERSE-METHOD-LIST (CALL-NEXT-METHOD))) (DEFMETHOD COMPUTE-APPLICABLE-METHODS-USING-CLASSES ((GF MSL-GENERIC-FUNCTION) CLASSES) (REVERSE-METHOD-LIST (CALL-NEXT-METHOD))) (DEFGENERIC TESTGF11 (X) (:GENERIC-FUNCTION-CLASS MSL-GENERIC-FUNCTION) (:METHOD ((X INTEGER)) (CONS 'INTEGER (IF (NEXT-METHOD-P) (CALL-NEXT-METHOD)))) (:METHOD ((X REAL)) (CONS 'REAL (IF (NEXT-METHOD-P) (CALL-NEXT-METHOD)))) (:METHOD ((X NUMBER)) (CONS 'NUMBER (IF (NEXT-METHOD-P) (CALL-NEXT-METHOD)))) (:METHOD :AROUND ((X INTEGER)) (COERCE (CALL-NEXT-METHOD) 'VECTOR))) (LIST (TESTGF11 5.0) (TESTGF11 17)))
EQUALP-OK: ((NUMBER REAL) #(NUMBER REAL INTEGER))
(PROGN (DEFCLASS NONUMBER-GENERIC-FUNCTION (STANDARD-GENERIC-FUNCTION) NIL (:METACLASS FUNCALLABLE-STANDARD-CLASS)) (DEFUN NONUMBER-METHOD-LIST (METHODS) (REMOVE-IF #'(LAMBDA (METHOD) (MEMBER (FIND-CLASS 'NUMBER) (METHOD-SPECIALIZERS METHOD))) METHODS)) (DEFMETHOD COMPUTE-APPLICABLE-METHODS ((GF NONUMBER-GENERIC-FUNCTION) ARGUMENTS) (NONUMBER-METHOD-LIST (CALL-NEXT-METHOD))) (DEFMETHOD COMPUTE-APPLICABLE-METHODS-USING-CLASSES ((GF NONUMBER-GENERIC-FUNCTION) CLASSES) (NONUMBER-METHOD-LIST (CALL-NEXT-METHOD))) (DEFGENERIC TESTGF12 (X) (:GENERIC-FUNCTION-CLASS NONUMBER-GENERIC-FUNCTION) (:METHOD ((X INTEGER)) (CONS 'INTEGER (IF (NEXT-METHOD-P) (CALL-NEXT-METHOD)))) (:METHOD ((X REAL)) (CONS 'REAL (IF (NEXT-METHOD-P) (CALL-NEXT-METHOD)))) (:METHOD ((X NUMBER)) (CONS 'NUMBER (IF (NEXT-METHOD-P) (CALL-NEXT-METHOD)))) (:METHOD :AROUND ((X INTEGER)) (COERCE (CALL-NEXT-METHOD) 'VECTOR))) (LIST (TESTGF12 5.0) (TESTGF12 17)))
EQUALP-OK: ((REAL) #(INTEGER REAL))
(PROGN (DEFCLASS BFS-CLASS (STANDARD-CLASS) NIL) (DEFMETHOD COMPUTE-CLASS-PRECEDENCE-LIST ((CLASS BFS-CLASS)) (LET ((QUEUE (LIST CLASS)) (NEXT-QUEUE 'NIL) (CPL 'NIL)) (LOOP (WHEN (NULL QUEUE) (SETQ QUEUE (REVERSE NEXT-QUEUE) NEXT-QUEUE 'NIL) (WHEN (NULL QUEUE) (RETURN))) (LET ((C (POP QUEUE))) (UNLESS (MEMBER C CPL) (PUSH C CPL) (SETQ NEXT-QUEUE (REVAPPEND (CLASS-DIRECT-SUPERCLASSES C) NEXT-QUEUE))))) (NREVERSE CPL))) (DEFCLASS TESTCLASS13A NIL NIL (:METACLASS BFS-CLASS)) (DEFCLASS TESTCLASS13B (TESTCLASS13A) NIL (:METACLASS BFS-CLASS)) (DEFCLASS TESTCLASS13C (TESTCLASS13B) NIL (:METACLASS BFS-CLASS)) (DEFCLASS TESTCLASS13D (TESTCLASS13A) NIL (:METACLASS BFS-CLASS)) (DEFCLASS TESTCLASS13E (TESTCLASS13D) NIL (:METACLASS BFS-CLASS)) (DEFCLASS TESTCLASS13F (TESTCLASS13C TESTCLASS13E) NIL (:METACLASS BFS-CLASS)) (UNLESS (CLASS-FINALIZED-P (FIND-CLASS 'TESTCLASS13F)) (FINALIZE-INHERITANCE (FIND-CLASS 'TESTCLASS13F))) (MAPCAR #'CLASS-NAME (SUBSEQ (CLASS-PRECEDENCE-LIST (FIND-CLASS 'TESTCLASS13F)) 0 6)))
EQUAL-OK: (TESTCLASS13F TESTCLASS13C TESTCLASS13E TESTCLASS13B TESTCLASS13D TESTCLASS13A)
(PROGN (DEFPARAMETER *EXTRA-VALUE* 'EXTRA) (DEFCLASS CUSTOM-DEFAULT-INITARGS-CLASS (STANDARD-CLASS) NIL) (DEFMETHOD COMPUTE-DEFAULT-INITARGS ((CLASS CUSTOM-DEFAULT-INITARGS-CLASS)) (LET ((ORIGINAL-DEFAULT-INITARGS (REMOVE-DUPLICATES (REDUCE #'APPEND (MAPCAR #'CLASS-DIRECT-DEFAULT-INITARGS (CLASS-PRECEDENCE-LIST CLASS))) :KEY #'CAR :FROM-END T))) (CONS (LIST ':EXTRA '*EXTRA-VALUE* #'(LAMBDA NIL *EXTRA-VALUE*)) (REMOVE ':EXTRA ORIGINAL-DEFAULT-INITARGS :KEY #'CAR)))) (DEFCLASS TESTCLASS14 NIL ((SLOT :INITARG :EXTRA)) (:METACLASS CUSTOM-DEFAULT-INITARGS-CLASS)) (SLOT-VALUE (MAKE-INSTANCE 'TESTCLASS14) 'SLOT))
EQL-OK: EXTRA
(PROGN (DEFCLASS AUTO-ACCESSORS-2-CLASS (STANDARD-CLASS) NIL) (DEFMETHOD COMPUTE-DIRECT-SLOT-DEFINITION-INITARGS ((CLASS AUTO-ACCESSORS-2-CLASS) &REST SLOT-SPEC) (IF (AND (NULL (GETF SLOT-SPEC ':READERS)) (NULL (GETF SLOT-SPEC ':WRITERS))) (LET* ((CONTAINING-CLASS-NAME (CLASS-NAME CLASS)) (ACCESSOR-NAME (INTERN (CONCATENATE 'STRING (SYMBOL-NAME CONTAINING-CLASS-NAME) "-" (SYMBOL-NAME (GETF SLOT-SPEC ':NAME))) (SYMBOL-PACKAGE CONTAINING-CLASS-NAME)))) (LIST* :READERS (LIST ACCESSOR-NAME) :WRITERS (LIST (LIST 'SETF ACCESSOR-NAME)) (CALL-NEXT-METHOD))) (CALL-NEXT-METHOD))) (DEFCLASS TESTCLASS15 NIL ((X :INITARG :X) (Y)) (:METACLASS AUTO-ACCESSORS-2-CLASS)) (LET ((INST (MAKE-INSTANCE 'TESTCLASS15 :X 12))) (LIST (TESTCLASS15-X INST) (SETF (TESTCLASS15-Y INST) 13))))
EQUAL-OK: (12 13)
(PROGN (DEFCLASS TRACED-GENERIC-FUNCTION (STANDARD-GENERIC-FUNCTION) NIL (:METACLASS FUNCALLABLE-STANDARD-CLASS)) (DEFVAR *LAST-TRACED-ARGUMENTS* NIL) (DEFVAR *LAST-TRACED-VALUES* NIL) (DEFMETHOD COMPUTE-DISCRIMINATING-FUNCTION ((GF TRACED-GENERIC-FUNCTION)) (LET ((ORIG-DF (CALL-NEXT-METHOD)) (NAME (GENERIC-FUNCTION-NAME GF))) #'(LAMBDA (&REST ARGUMENTS) (DECLARE (COMPILE)) (FORMAT *TRACE-OUTPUT* "~%=> ~S arguments: ~:S" NAME ARGUMENTS) (SETQ *LAST-TRACED-ARGUMENTS* ARGUMENTS) (LET ((VALUES (MULTIPLE-VALUE-LIST (APPLY ORIG-DF ARGUMENTS)))) (FORMAT *TRACE-OUTPUT* "~%<= ~S values: ~:S" NAME VALUES) (SETQ *LAST-TRACED-VALUES* VALUES) (VALUES-LIST VALUES))))) (DEFGENERIC TESTGF15 (X) (:GENERIC-FUNCTION-CLASS TRACED-GENERIC-FUNCTION) (:METHOD ((X NUMBER)) (VALUES X (- X) (* X X) (/ X)))) (TESTGF15 5) (LIST *LAST-TRACED-ARGUMENTS* *LAST-TRACED-VALUES*))

=> TESTGF15 arguments: (5)
<= TESTGF15 values: (5 -5 25 1/5)
EQUAL-OK: ((5) (5 -5 25 1/5))
(PROGN (DEFUN PROMPT-FOR-NEW-VALUES NIL (FORMAT *DEBUG-IO* "~&New values: ") (LIST (READ *DEBUG-IO*))) (DEFUN ADD-METHOD-RESTARTS (FORM METHOD) (LET ((BLOCK (GENSYM)) (TAG (GENSYM))) `(BLOCK ,BLOCK (TAGBODY ,TAG (RETURN-FROM ,BLOCK (RESTART-CASE ,FORM (METHOD-REDO NIL :REPORT (LAMBDA (STREAM) (FORMAT STREAM "Try calling ~S again." ,METHOD)) (GO ,TAG)) (METHOD-RETURN (L) :REPORT (LAMBDA (STREAM) (FORMAT STREAM "Specify return values for ~S call." ,METHOD)) :INTERACTIVE (LAMBDA NIL (PROMPT-FOR-NEW-VALUES)) (RETURN-FROM ,BLOCK (VALUES-LIST L))))))))) (DEFUN CONVERT-EFFECTIVE-METHOD (EFM) (IF (CONSP EFM) (IF (EQ (CAR EFM) 'CALL-METHOD) (LET ((METHOD-LIST (THIRD EFM))) (IF (OR (TYPEP (FIRST METHOD-LIST) 'METHOD) (REST METHOD-LIST)) (CONVERT-EFFECTIVE-METHOD `(CALL-METHOD ,(SECOND EFM) ((MAKE-METHOD (CALL-METHOD ,(FIRST METHOD-LIST) ,(REST METHOD-LIST)))))) (IF (TYPEP (SECOND EFM) 'METHOD) (ADD-METHOD-RESTARTS (CONS (CONVERT-EFFECTIVE-METHOD (CAR EFM)) (CONVERT-EFFECTIVE-METHOD (CDR EFM))) (SECOND EFM)) (CONS (CONVERT-EFFECTIVE-METHOD (CAR EFM)) (CONVERT-EFFECTIVE-METHOD (CDR EFM)))))) (CONS (CONVERT-EFFECTIVE-METHOD (CAR EFM)) (CONVERT-EFFECTIVE-METHOD (CDR EFM)))) EFM)) (DEFCLASS DEBUGGABLE-GENERIC-FUNCTION (STANDARD-GENERIC-FUNCTION) NIL (:METACLASS FUNCALLABLE-STANDARD-CLASS)) (DEFMETHOD COMPUTE-EFFECTIVE-METHOD ((GF DEBUGGABLE-GENERIC-FUNCTION) METHOD-COMBINATION METHODS) (CONVERT-EFFECTIVE-METHOD (CALL-NEXT-METHOD))) (DEFGENERIC TESTGF16 (X) (:GENERIC-FUNCTION-CLASS DEBUGGABLE-GENERIC-FUNCTION)) (DEFCLASS TESTCLASS16A NIL NIL) (DEFCLASS TESTCLASS16B (TESTCLASS16A) NIL) (DEFCLASS TESTCLASS16C (TESTCLASS16A) NIL) (DEFCLASS TESTCLASS16D (TESTCLASS16B TESTCLASS16C) NIL) (DEFMETHOD TESTGF16 ((X TESTCLASS16A)) (LIST 'A (NOT (NULL (FIND-RESTART 'METHOD-REDO))) (NOT (NULL (FIND-RESTART 'METHOD-RETURN))))) (DEFMETHOD TESTGF16 ((X TESTCLASS16B)) (CONS 'B (CALL-NEXT-METHOD))) (DEFMETHOD TESTGF16 ((X TESTCLASS16C)) (CONS 'C (CALL-NEXT-METHOD))) (DEFMETHOD TESTGF16 ((X TESTCLASS16D)) (CONS 'D (CALL-NEXT-METHOD))) (TESTGF16 (MAKE-INSTANCE 'TESTCLASS16D)))
WARNING: Replacing method
          #1=#<STANDARD-METHOD (#2=#<STANDARD-CLASS TESTCLASS16A>)>
         in #<DEBUGGABLE-GENERIC-FUNCTION TESTGF16>

WARNING: Replacing method
          #1=#<STANDARD-METHOD (#2=#<STANDARD-CLASS TESTCLASS16B>)>
         in #<DEBUGGABLE-GENERIC-FUNCTION TESTGF16>

WARNING: Replacing method
          #1=#<STANDARD-METHOD (#2=#<STANDARD-CLASS TESTCLASS16C>)>
         in #<DEBUGGABLE-GENERIC-FUNCTION TESTGF16>

WARNING: Replacing method
          #1=#<STANDARD-METHOD (#2=#<STANDARD-CLASS TESTCLASS16D>)>
         in #<DEBUGGABLE-GENERIC-FUNCTION TESTGF16>
EQUAL-OK: (D B C A T T)
(PROGN (DEFCLASS AUTO-INITARGS-CLASS (STANDARD-CLASS) NIL) (DEFMETHOD COMPUTE-EFFECTIVE-SLOT-DEFINITION ((CLASS AUTO-INITARGS-CLASS) NAME DIRECT-SLOT-DEFINITIONS) (LET ((EFF-SLOT (CALL-NEXT-METHOD))) (UNLESS (SLOT-DEFINITION-INITARGS EFF-SLOT) (SETF (SLOT-DEFINITION-INITARGS EFF-SLOT) (LIST (INTERN (SYMBOL-NAME (SLOT-DEFINITION-NAME EFF-SLOT)) (FIND-PACKAGE "KEYWORD"))))) (UNLESS (SLOT-DEFINITION-INITFUNCTION EFF-SLOT) (SETF (SLOT-DEFINITION-INITFUNCTION EFF-SLOT) #'(LAMBDA NIL 42) (SLOT-DEFINITION-INITFORM EFF-SLOT) '42)) EFF-SLOT)) (DEFCLASS TESTCLASS17 NIL ((X) (Y)) (:METACLASS AUTO-INITARGS-CLASS)) (LET ((INST (MAKE-INSTANCE 'TESTCLASS17 :X 17))) (LIST (SLOT-VALUE INST 'X) (SLOT-VALUE INST 'Y))))
EQUAL-OK: (17 42)
(PROGN (DEFCLASS AUTO-INITARGS-2-CLASS (STANDARD-CLASS) NIL) (DEFMETHOD COMPUTE-EFFECTIVE-SLOT-DEFINITION-INITARGS ((CLASS AUTO-INITARGS-2-CLASS) DIRECT-SLOT-DEFINITIONS) (LET ((INITARGS (CALL-NEXT-METHOD))) (UNLESS (GETF INITARGS ':INITARGS) (SETQ INITARGS (LIST* ':INITARGS (LIST (INTERN (SYMBOL-NAME (GETF INITARGS ':NAME)) (FIND-PACKAGE "KEYWORD"))) INITARGS))) (UNLESS (GETF INITARGS ':INITFUNCTION) (SETQ INITARGS (LIST* ':INITFUNCTION #'(LAMBDA NIL 42) ':INITFORM '42 INITARGS))) INITARGS)) (DEFCLASS TESTCLASS17-2 NIL ((X) (Y)) (:METACLASS AUTO-INITARGS-2-CLASS)) (LET ((INST (MAKE-INSTANCE 'TESTCLASS17-2 :X 17))) (LIST (SLOT-VALUE INST 'X) (SLOT-VALUE INST 'Y))))
EQUAL-OK: (17 42)
(PROGN (DEFCLASS TESTCLASS18B (TESTCLASS18A) NIL) (DEFMETHOD COMPUTE-SLOTS ((CLASS (EQL (FIND-CLASS 'TESTCLASS18B)))) (APPEND (CALL-NEXT-METHOD) (LIST (MAKE-INSTANCE 'STANDARD-EFFECTIVE-SLOT-DEFINITION :NAME 'Y :ALLOCATION :INSTANCE)))) (DEFCLASS TESTCLASS18A NIL ((X :ALLOCATION :CLASS))) (FINALIZE-INHERITANCE (FIND-CLASS 'TESTCLASS18B)) (APPEND (MAPCAR #'(LAMBDA (SLOT) (LIST (SLOT-DEFINITION-NAME SLOT) (INTEGERP (SLOT-DEFINITION-LOCATION SLOT)))) (CLASS-SLOTS (FIND-CLASS 'TESTCLASS18B))) (LET ((INST1 (MAKE-INSTANCE 'TESTCLASS18B)) (INST2 (MAKE-INSTANCE 'TESTCLASS18B))) (SETF (SLOT-VALUE INST1 'Y) 'ABC) (SETF (SLOT-VALUE INST2 'Y) 'DEF) (LIST (SLOT-VALUE INST1 'Y) (SLOT-VALUE INST2 'Y)))))
EQUAL-OK: ((X NIL) (Y T) ABC DEF)
(PROGN (DEFCLASS TESTCLASS19B (TESTCLASS19A) NIL) (DEFMETHOD COMPUTE-SLOTS ((CLASS (EQL (FIND-CLASS 'TESTCLASS19B)))) (APPEND (CALL-NEXT-METHOD) (LIST (MAKE-INSTANCE 'STANDARD-EFFECTIVE-SLOT-DEFINITION :NAME 'Y :ALLOCATION :CLASS)))) (DEFCLASS TESTCLASS19A NIL ((X :ALLOCATION :CLASS))) (FINALIZE-INHERITANCE (FIND-CLASS 'TESTCLASS19B)) (APPEND (MAPCAR #'(LAMBDA (SLOT) (LIST (SLOT-DEFINITION-NAME SLOT) (INTEGERP (SLOT-DEFINITION-LOCATION SLOT)))) (CLASS-SLOTS (FIND-CLASS 'TESTCLASS19B))) (LET ((INST1 (MAKE-INSTANCE 'TESTCLASS19B)) (INST2 (MAKE-INSTANCE 'TESTCLASS19B))) (SETF (SLOT-VALUE INST1 'Y) 'ABC) (SETF (SLOT-VALUE INST2 'Y) 'DEF) (LIST (SLOT-VALUE INST1 'Y) (SLOT-VALUE INST2 'Y)))))
EQUAL-OK: ((X NIL) (Y NIL) DEF DEF)
(PROGN (DEFCLASS AUTO-ACCESSORS-DIRECT-SLOT-DEFINITION-CLASS (STANDARD-CLASS) ((CONTAINING-CLASS-NAME :INITARG :CONTAINING-CLASS-NAME))) (DEFCLASS AUTO-ACCESSORS-CLASS (STANDARD-CLASS) NIL) (DEFMETHOD DIRECT-SLOT-DEFINITION-CLASS ((CLASS AUTO-ACCESSORS-CLASS) &REST INITARGS) (LET ((DSD-CLASS-NAME (GENSYM))) (ENSURE-CLASS DSD-CLASS-NAME :METACLASS (FIND-CLASS 'AUTO-ACCESSORS-DIRECT-SLOT-DEFINITION-CLASS) :DIRECT-SUPERCLASSES (LIST (FIND-CLASS 'STANDARD-DIRECT-SLOT-DEFINITION)) :CONTAINING-CLASS-NAME (CLASS-NAME CLASS)) (EVAL `(DEFMETHOD INITIALIZE-INSTANCE :AROUND ((DSD ,DSD-CLASS-NAME) &REST ARGS) (IF (AND (NULL (GETF ARGS ':READERS)) (NULL (GETF ARGS ':WRITERS))) (LET* ((CONTAINING-CLASS-NAME (SLOT-VALUE (CLASS-OF DSD) 'CONTAINING-CLASS-NAME)) (ACCESSOR-NAME (INTERN (CONCATENATE 'STRING (SYMBOL-NAME CONTAINING-CLASS-NAME) "-" (SYMBOL-NAME (GETF ARGS ':NAME))) (SYMBOL-PACKAGE CONTAINING-CLASS-NAME)))) (APPLY #'CALL-NEXT-METHOD DSD :READERS (LIST ACCESSOR-NAME) :WRITERS (LIST (LIST 'SETF ACCESSOR-NAME)) ARGS)) (CALL-NEXT-METHOD)))) (FIND-CLASS DSD-CLASS-NAME))) (DEFCLASS TESTCLASS20 NIL ((X :INITARG :X) (Y)) (:METACLASS AUTO-ACCESSORS-CLASS)) (LET ((INST (MAKE-INSTANCE 'TESTCLASS20 :X 12))) (LIST (TESTCLASS20-X INST) (SETF (TESTCLASS20-Y INST) 13))))
EQUAL-OK: (12 13)
(PROGN (DEFPARAMETER *EXTERNAL-SLOT-VALUES* 'NIL) (DEFCLASS EXTERNAL-SLOT-DEFINITION (STANDARD-EFFECTIVE-SLOT-DEFINITION) NIL) (LET ((UNBOUND (GENSYM "UNBOUND"))) (DEFMETHOD SLOT-VALUE-USING-CLASS ((CLASS STANDARD-CLASS) INSTANCE (SLOT EXTERNAL-SLOT-DEFINITION)) (LET ((VALUE (GETF (GETF *EXTERNAL-SLOT-VALUES* INSTANCE) (SLOT-DEFINITION-NAME SLOT) UNBOUND))) (IF (EQ VALUE UNBOUND) (SLOT-UNBOUND CLASS INSTANCE (SLOT-DEFINITION-NAME SLOT)) VALUE))) (DEFMETHOD (SETF SLOT-VALUE-USING-CLASS) (NEW-VALUE (CLASS STANDARD-CLASS) INSTANCE (SLOT EXTERNAL-SLOT-DEFINITION)) (SETF (GETF (GETF *EXTERNAL-SLOT-VALUES* INSTANCE) (SLOT-DEFINITION-NAME SLOT)) NEW-VALUE)) (DEFMETHOD SLOT-BOUNDP-USING-CLASS ((CLASS STANDARD-CLASS) INSTANCE (SLOT EXTERNAL-SLOT-DEFINITION)) (LET ((VALUE (GETF (GETF *EXTERNAL-SLOT-VALUES* INSTANCE) (SLOT-DEFINITION-NAME SLOT) UNBOUND))) (NOT (EQ VALUE UNBOUND)))) (DEFMETHOD SLOT-MAKUNBOUND-USING-CLASS ((CLASS STANDARD-CLASS) INSTANCE (SLOT EXTERNAL-SLOT-DEFINITION)) (REMF (GETF *EXTERNAL-SLOT-VALUES* INSTANCE) (SLOT-DEFINITION-NAME SLOT)) INSTANCE)) (DEFCLASS EXTERNAL-SLOT-DEFINITION-CLASS (STANDARD-CLASS) NIL) (DEFMETHOD EFFECTIVE-SLOT-DEFINITION-CLASS ((CLASS EXTERNAL-SLOT-DEFINITION-CLASS) &REST ARGS) (FIND-CLASS 'EXTERNAL-SLOT-DEFINITION)) (DEFCLASS TESTCLASS22 NIL ((X :INITARG :X) (Y :INITARG :Y)) (:METACLASS EXTERNAL-SLOT-DEFINITION-CLASS)) (LET ((INST1 (MAKE-INSTANCE 'TESTCLASS22 :X 3 :Y 4)) (INST2 (MAKE-INSTANCE 'TESTCLASS22 :X 5 :Y 12)) (RESULTS 'NIL)) (PUSH (SLOT-VALUE INST1 'X) RESULTS) (PUSH (SLOT-VALUE INST2 'X) RESULTS) (PUSH (SLOT-VALUE INST1 'Y) RESULTS) (PUSH (SLOT-VALUE INST2 'Y) RESULTS) (PUSH (OR (EQUAL *EXTERNAL-SLOT-VALUES* (LIST INST2 (LIST 'X 5 'Y 12) INST1 (LIST 'X 3 'Y 4))) (EQUAL *EXTERNAL-SLOT-VALUES* (LIST INST2 (LIST 'Y 12 'X 5) INST1 (LIST 'Y 4 'X 3)))) RESULTS) (SETF (SLOT-VALUE INST2 'X) -5) (PUSH (SLOT-VALUE INST2 'X) RESULTS) (SLOT-MAKUNBOUND INST1 'Y) (PUSH (LIST (SLOT-BOUNDP INST1 'X) (SLOT-BOUNDP INST1 'Y)) RESULTS) (SLOT-MAKUNBOUND INST1 'X) (PUSH (OR (EQUAL *EXTERNAL-SLOT-VALUES* (LIST INST2 (LIST 'X -5 'Y 12) INST1 NIL)) (EQUAL *EXTERNAL-SLOT-VALUES* (LIST INST2 (LIST 'Y 12 'X -5) INST1 NIL))) RESULTS) (NREVERSE RESULTS)))
EQUAL-OK: (3 5 4 12 T -5 (T NIL) T)
(PROGN (DEFPARAMETER *DOC-DATABASE* '((TESTCLASS23 . "This is a dumb class for testing.") (TESTGF24 . "This is a dumb generic function for testing."))) (DEFCLASS EXTERNALLY-DOCUMENTED-CLASS (STANDARD-CLASS) NIL) (DOLIST (GIVEN-NAME (MAPCAR #'CAR *DOC-DATABASE*)) (DEFMETHOD ENSURE-CLASS-USING-CLASS ((CLASS CLASS) (NAME (EQL GIVEN-NAME)) &REST ARGS &KEY DOCUMENTATION &ALLOW-OTHER-KEYS) (IF (AND (NULL DOCUMENTATION) (SETQ DOCUMENTATION (CDR (ASSOC NAME *DOC-DATABASE*)))) (APPLY #'CALL-NEXT-METHOD CLASS NAME (LIST* ':DOCUMENTATION DOCUMENTATION ARGS)) (CALL-NEXT-METHOD))) (DEFMETHOD ENSURE-CLASS-USING-CLASS ((CLASS NULL) (NAME (EQL GIVEN-NAME)) &REST ARGS &KEY DOCUMENTATION &ALLOW-OTHER-KEYS) (IF (AND (NULL DOCUMENTATION) (SETQ DOCUMENTATION (CDR (ASSOC NAME *DOC-DATABASE*)))) (APPLY #'CALL-NEXT-METHOD CLASS NAME (LIST* ':DOCUMENTATION DOCUMENTATION ARGS)) (CALL-NEXT-METHOD)))) (DEFCLASS TESTCLASS23 NIL NIL (:METACLASS EXTERNALLY-DOCUMENTED-CLASS)) (DOCUMENTATION 'TESTCLASS23 'TYPE))
EQUAL-OK: "This is a dumb class for testing."
(PROGN (DEFPARAMETER *DOC-DATABASE* '((TESTCLASS23 . "This is a dumb class for testing.") (TESTGF24 . "This is a dumb generic function for testing."))) (DEFCLASS EXTERNALLY-DOCUMENTED-GENERIC-FUNCTION (STANDARD-GENERIC-FUNCTION) NIL (:METACLASS FUNCALLABLE-STANDARD-CLASS)) (DOLIST (GIVEN-NAME (MAPCAR #'CAR *DOC-DATABASE*)) (DEFMETHOD ENSURE-GENERIC-FUNCTION-USING-CLASS ((GF GENERIC-FUNCTION) (NAME (EQL GIVEN-NAME)) &REST ARGS &KEY DOCUMENTATION &ALLOW-OTHER-KEYS) (IF (AND (NULL DOCUMENTATION) (SETQ DOCUMENTATION (CDR (ASSOC NAME *DOC-DATABASE* :TEST #'EQUAL)))) (APPLY #'CALL-NEXT-METHOD GF NAME (LIST* ':DOCUMENTATION DOCUMENTATION ARGS)) (CALL-NEXT-METHOD))) (DEFMETHOD ENSURE-GENERIC-FUNCTION-USING-CLASS ((GF NULL) (NAME (EQL GIVEN-NAME)) &REST ARGS &KEY DOCUMENTATION &ALLOW-OTHER-KEYS) (IF (AND (NULL DOCUMENTATION) (SETQ DOCUMENTATION (CDR (ASSOC NAME *DOC-DATABASE* :TEST #'EQUAL)))) (APPLY #'CALL-NEXT-METHOD GF NAME (LIST* ':DOCUMENTATION DOCUMENTATION ARGS)) (CALL-NEXT-METHOD)))) (DEFGENERIC TESTGF24 (X) (:GENERIC-FUNCTION-CLASS EXTERNALLY-DOCUMENTED-GENERIC-FUNCTION)) (DOCUMENTATION 'TESTGF24 'FUNCTION))
EQUAL-OK: "This is a dumb generic function for testing."
(PROGN (DEFCLASS TYPECHECKING-READER-METHOD (STANDARD-READER-METHOD) NIL) (DEFMETHOD INITIALIZE-INSTANCE ((METHOD TYPECHECKING-READER-METHOD) &REST INITARGS &KEY SLOT-DEFINITION) (LET ((NAME (SLOT-DEFINITION-NAME SLOT-DEFINITION)) (TYPE (SLOT-DEFINITION-TYPE SLOT-DEFINITION))) (APPLY #'CALL-NEXT-METHOD METHOD :FUNCTION #'(LAMBDA (ARGS NEXT-METHODS) (DECLARE (IGNORE NEXT-METHODS)) (DECLARE (COMPILE)) (APPLY #'(LAMBDA (INSTANCE) (LET ((VALUE (SLOT-VALUE INSTANCE NAME))) (UNLESS (TYPEP VALUE TYPE) (ERROR "Slot ~S of ~S is not of type ~S: ~S" NAME INSTANCE TYPE VALUE)) VALUE)) ARGS)) INITARGS))) (DEFCLASS TYPECHECKING-READER-CLASS (STANDARD-CLASS) NIL) (DEFMETHOD READER-METHOD-CLASS ((CLASS TYPECHECKING-READER-CLASS) DIRECT-SLOT &REST ARGS) (FIND-CLASS 'TYPECHECKING-READER-METHOD)) (DEFCLASS TESTCLASS25 NIL ((PAIR :TYPE (CONS SYMBOL (CONS SYMBOL NULL)) :INITARG :PAIR :ACCESSOR TESTCLASS25-PAIR)) (:METACLASS TYPECHECKING-READER-CLASS)) (MACROLET ((SUCCEEDS (FORM) `(NOT (NTH-VALUE 1 (IGNORE-ERRORS ,FORM))))) (LET ((P (LIST 'ABC 'DEF)) (X (MAKE-INSTANCE 'TESTCLASS25))) (LIST (SUCCEEDS (MAKE-INSTANCE 'TESTCLASS25 :PAIR '(SEVENTEEN 17))) (SUCCEEDS (SETF (TESTCLASS25-PAIR X) P)) (SUCCEEDS (SETF (SECOND P) 456)) (SUCCEEDS (TESTCLASS25-PAIR X)) (SUCCEEDS (SLOT-VALUE X 'PAIR))))))
EQUAL-OK: (T T T NIL T)
(PROGN (DEFCLASS TYPECHECKING-WRITER-METHOD (STANDARD-WRITER-METHOD) NIL) (DEFMETHOD INITIALIZE-INSTANCE ((METHOD TYPECHECKING-WRITER-METHOD) &REST INITARGS &KEY SLOT-DEFINITION) (LET ((NAME (SLOT-DEFINITION-NAME SLOT-DEFINITION)) (TYPE (SLOT-DEFINITION-TYPE SLOT-DEFINITION))) (APPLY #'CALL-NEXT-METHOD METHOD :FUNCTION #'(LAMBDA (ARGS NEXT-METHODS) (DECLARE (IGNORE NEXT-METHODS)) (DECLARE (COMPILE)) (APPLY #'(LAMBDA (NEW-VALUE INSTANCE) (UNLESS (TYPEP NEW-VALUE TYPE) (ERROR "Slot ~S of ~S: new value is not of type ~S: ~S" NAME INSTANCE TYPE NEW-VALUE)) (SETF (SLOT-VALUE INSTANCE NAME) NEW-VALUE)) ARGS)) INITARGS))) (DEFCLASS TYPECHECKING-WRITER-CLASS (STANDARD-CLASS) NIL) (DEFMETHOD WRITER-METHOD-CLASS ((CLASS TYPECHECKING-WRITER-CLASS) DIRECT-SLOT &REST ARGS) (FIND-CLASS 'TYPECHECKING-WRITER-METHOD)) (DEFCLASS TESTCLASS26 NIL ((PAIR :TYPE (CONS SYMBOL (CONS SYMBOL NULL)) :INITARG :PAIR :ACCESSOR TESTCLASS26-PAIR)) (:METACLASS TYPECHECKING-WRITER-CLASS)) (MACROLET ((SUCCEEDS (FORM) `(NOT (NTH-VALUE 1 (IGNORE-ERRORS ,FORM))))) (LET ((P (LIST 'ABC 'DEF)) (X (MAKE-INSTANCE 'TESTCLASS26))) (LIST (SUCCEEDS (MAKE-INSTANCE 'TESTCLASS26 :PAIR '(SEVENTEEN 17))) (SUCCEEDS (SETF (TESTCLASS26-PAIR X) P)) (SUCCEEDS (SETF (SECOND P) 456)) (SUCCEEDS (TESTCLASS26-PAIR X)) (SUCCEEDS (SETF (TESTCLASS26-PAIR X) P)) (SUCCEEDS (SETF (SLOT-VALUE X 'PAIR) P))))))
EQUAL-OK: (T T T T NIL T)
(PROGN (DEFMETHOD VALIDATE-SUPERCLASS ((C1 STANDARD-CLASS) (C2 FUNCALLABLE-STANDARD-CLASS)) T) (DEFCLASS UNCALLABLE-GENERIC-FUNCTION (STANDARD-GENERIC-FUNCTION) NIL (:METACLASS STANDARD-CLASS)) (LET ((INST (MAKE-INSTANCE 'UNCALLABLE-GENERIC-FUNCTION :NAME 'TESTGF27 :LAMBDA-LIST '(X Y) :METHOD-CLASS (FIND-CLASS 'STANDARD-METHOD) :METHOD-COMBINATION (FIND-METHOD-COMBINATION #'PRINT-OBJECT 'STANDARD NIL)))) (LIST (TYPEP INST 'STANDARD-OBJECT) (TYPEP INST 'FUNCALLABLE-STANDARD-OBJECT) (TYPEP (CLASS-OF INST) 'STANDARD-CLASS) (TYPEP (CLASS-OF INST) 'FUNCALLABLE-STANDARD-CLASS))))
[SIMPLE-ERROR]: (DEFCLASS UNCALLABLE-GENERIC-FUNCTION): superclass #1=#<FUNCALLABLE-STANDARD-CLASS STANDARD-GENERIC-FUNCTION> should be of class STANDARD-CLASS
EQL-OK: ERROR
(PROGN (DEFPARAMETER *COUNTER27* 0) (DEFCLASS COUNTED27-CLASS (STANDARD-CLASS) NIL) (DEFMETHOD MAKE-INSTANCE :AFTER ((C COUNTED27-CLASS) &REST ARGS) (INCF *COUNTER27*)) (DEFCLASS TESTCLASS27A NIL NIL (:METACLASS COUNTED27-CLASS)) (MAKE-INSTANCE 'TESTCLASS27A) (DEFMETHOD VALIDATE-SUPERCLASS ((C1 STANDARD-CLASS) (C2 COUNTED27-CLASS)) T) (DEFCLASS TESTCLASS27B (TESTCLASS27A) NIL (:METACLASS STANDARD-CLASS)) (MAKE-INSTANCE 'TESTCLASS27B) (MAKE-INSTANCE 'TESTCLASS27B) *COUNTER27*)
EQL-OK: 1
(LET ((FINALIZE-INHERITANCE-HISTORY 'NIL)) (WITHOUT-PACKAGE-LOCK ("CLOS") (DEFMETHOD FINALIZE-INHERITANCE :AFTER ((CLASS CLASS)) (PUSH (CLASS-NAME CLASS) FINALIZE-INHERITANCE-HISTORY))) (DEFCLASS TESTCLASS52A NIL NIL) (DEFCLASS TESTCLASS52C (TESTCLASS52A TESTCLASS52B) NIL) (DEFCLASS TESTCLASS52D (TESTCLASS52C) NIL) (DEFCLASS TESTCLASS52B NIL NIL) (MAKE-INSTANCE 'TESTCLASS52D) (PROG1 FINALIZE-INHERITANCE-HISTORY (REMOVE-METHOD #'FINALIZE-INHERITANCE (FIND-METHOD #'FINALIZE-INHERITANCE '(:AFTER) (LIST (FIND-CLASS 'CLASS))))))
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION FINALIZE-INHERITANCE>
         is being modified, but has already been called.

WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION FINALIZE-INHERITANCE>
         is being modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-METHOD :AFTER (#2=#<STANDARD-CLASS CLASS>)>
         in #<STANDARD-GENERIC-FUNCTION FINALIZE-INHERITANCE>
EQUAL-OK: (TESTCLASS52D TESTCLASS52C TESTCLASS52B TESTCLASS52A)
(LET ((*SAMPCLASS* (DEFCLASS SAMPCLASS01 NIL NIL))) (DEFMETHOD CLASS-DEFAULT-INITARGS ((C (EQL *SAMPCLASS*))) (CALL-NEXT-METHOD)) (UNLESS (CLASS-FINALIZED-P *SAMPCLASS*) (FINALIZE-INHERITANCE *SAMPCLASS*)) (CLASS-DEFAULT-INITARGS *SAMPCLASS*) T)
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION CLASS-DEFAULT-INITARGS>
         is being modified, but has already been called.
EQL-OK: T
(LET ((*SAMPCLASS* (DEFCLASS SAMPCLASS02 NIL NIL))) (LET ((BADMETHOD (DEFMETHOD CLASS-DEFAULT-INITARGS ((C (EQL *SAMPCLASS*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNLESS (CLASS-FINALIZED-P *SAMPCLASS*) (FINALIZE-INHERITANCE *SAMPCLASS*)) (UNWIND-PROTECT (NTH-VALUE 1 (CLASS-DEFAULT-INITARGS *SAMPCLASS*)) (REMOVE-METHOD #'CLASS-DEFAULT-INITARGS BADMETHOD))))
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION CLASS-DEFAULT-INITARGS>
         is being modified, but has already been called.
[SIMPLE-ERROR]: CLASS-DEFAULT-INITARGS: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: NIL
Values returned by the extending method: NIL, T
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION CLASS-DEFAULT-INITARGS>
         is being modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-METHOD ((EQL #2=#<STANDARD-CLASS SAMPCLASS02>))>
         in #<STANDARD-GENERIC-FUNCTION CLASS-DEFAULT-INITARGS>
EQL-OK: ERROR
(LET ((*SAMPCLASS* (DEFCLASS SAMPCLASS03 NIL NIL))) (DEFMETHOD CLASS-DIRECT-DEFAULT-INITARGS ((C (EQL *SAMPCLASS*))) (CALL-NEXT-METHOD)) (CLASS-DIRECT-DEFAULT-INITARGS *SAMPCLASS*) T)
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION CLASS-DIRECT-DEFAULT-INITARGS>
         is being modified, but has already been called.
EQL-OK: T
(LET ((*SAMPCLASS* (DEFCLASS SAMPCLASS04 NIL NIL))) (LET ((BADMETHOD (DEFMETHOD CLASS-DIRECT-DEFAULT-INITARGS ((C (EQL *SAMPCLASS*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNWIND-PROTECT (NTH-VALUE 1 (CLASS-DIRECT-DEFAULT-INITARGS *SAMPCLASS*)) (REMOVE-METHOD #'CLASS-DIRECT-DEFAULT-INITARGS BADMETHOD))))
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION CLASS-DIRECT-DEFAULT-INITARGS>
         is being modified, but has already been called.
[SIMPLE-ERROR]: CLASS-DIRECT-DEFAULT-INITARGS: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: NIL
Values returned by the extending method: NIL, T
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION CLASS-DIRECT-DEFAULT-INITARGS>
         is being modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-METHOD ((EQL #2=#<STANDARD-CLASS SAMPCLASS04>))>
         in #<STANDARD-GENERIC-FUNCTION CLASS-DIRECT-DEFAULT-INITARGS>
EQL-OK: ERROR
(LET ((*SAMPCLASS* (DEFCLASS SAMPCLASS05 NIL NIL))) (DEFMETHOD CLASS-DIRECT-SLOTS ((C (EQL *SAMPCLASS*))) (CALL-NEXT-METHOD)) (CLASS-DIRECT-SLOTS *SAMPCLASS*) T)
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION CLASS-DIRECT-SLOTS>
         is being modified, but has already been called.
EQL-OK: T
(LET ((*SAMPCLASS* (DEFCLASS SAMPCLASS06 NIL NIL))) (LET ((BADMETHOD (DEFMETHOD CLASS-DIRECT-SLOTS ((C (EQL *SAMPCLASS*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNWIND-PROTECT (NTH-VALUE 1 (CLASS-DIRECT-SLOTS *SAMPCLASS*)) (REMOVE-METHOD #'CLASS-DIRECT-SLOTS BADMETHOD))))
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION CLASS-DIRECT-SLOTS>
         is being modified, but has already been called.
[SIMPLE-ERROR]: CLASS-DIRECT-SLOTS: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: NIL
Values returned by the extending method: NIL, T
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION CLASS-DIRECT-SLOTS>
         is being modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-METHOD ((EQL #2=#<STANDARD-CLASS SAMPCLASS06>))>
         in #<STANDARD-GENERIC-FUNCTION CLASS-DIRECT-SLOTS>
EQL-OK: ERROR
(LET ((*SAMPCLASS* (DEFCLASS SAMPCLASS07 NIL NIL))) (DEFMETHOD CLASS-DIRECT-SUPERCLASSES ((C (EQL *SAMPCLASS*))) (CALL-NEXT-METHOD)) (CLASS-DIRECT-SUPERCLASSES *SAMPCLASS*) T)
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION CLASS-DIRECT-SUPERCLASSES>
         is being modified, but has already been called.
EQL-OK: T
(LET ((*SAMPCLASS* (DEFCLASS SAMPCLASS08 NIL NIL))) (LET ((BADMETHOD (DEFMETHOD CLASS-DIRECT-SUPERCLASSES ((C (EQL *SAMPCLASS*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNWIND-PROTECT (NTH-VALUE 1 (CLASS-DIRECT-SUPERCLASSES *SAMPCLASS*)) (REMOVE-METHOD #'CLASS-DIRECT-SUPERCLASSES BADMETHOD))))
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION CLASS-DIRECT-SUPERCLASSES>
         is being modified, but has already been called.
[SIMPLE-ERROR]: CLASS-DIRECT-SUPERCLASSES: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: #1=(#2=#<STANDARD-CLASS STANDARD-OBJECT>)
Values returned by the extending method: #1#, T
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION CLASS-DIRECT-SUPERCLASSES>
         is being modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-METHOD ((EQL #2=#<STANDARD-CLASS SAMPCLASS08>))>
         in #<STANDARD-GENERIC-FUNCTION CLASS-DIRECT-SUPERCLASSES>
EQL-OK: ERROR
(LET ((*SAMPCLASS* (DEFCLASS SAMPCLASS09 NIL NIL))) (DEFMETHOD CLASS-FINALIZED-P ((C (EQL *SAMPCLASS*))) (CALL-NEXT-METHOD)) (CLASS-FINALIZED-P *SAMPCLASS*) T)
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION CLASS-FINALIZED-P>
         is being modified, but has already been called.
EQL-OK: T
(LET ((*SAMPCLASS* (DEFCLASS SAMPCLASS10 NIL NIL))) (LET ((BADMETHOD (DEFMETHOD CLASS-FINALIZED-P ((C (EQL *SAMPCLASS*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNWIND-PROTECT (NTH-VALUE 1 (CLASS-FINALIZED-P *SAMPCLASS*)) (REMOVE-METHOD #'CLASS-FINALIZED-P BADMETHOD))))
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION CLASS-FINALIZED-P>
         is being modified, but has already been called.
[SIMPLE-ERROR]: CLASS-FINALIZED-P: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: T
Values returned by the extending method: T, T
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION CLASS-FINALIZED-P>
         is being modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-METHOD ((EQL #2=#<STANDARD-CLASS SAMPCLASS10>))>
         in #<STANDARD-GENERIC-FUNCTION CLASS-FINALIZED-P>
EQL-OK: ERROR
(LET ((*SAMPCLASS* (DEFCLASS SAMPCLASS11 NIL NIL))) (DEFMETHOD CLASS-PRECEDENCE-LIST ((C (EQL *SAMPCLASS*))) (CALL-NEXT-METHOD)) (UNLESS (CLASS-FINALIZED-P *SAMPCLASS*) (FINALIZE-INHERITANCE *SAMPCLASS*)) (CLASS-PRECEDENCE-LIST *SAMPCLASS*) T)
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION CLASS-PRECEDENCE-LIST>
         is being modified, but has already been called.
EQL-OK: T
(LET ((*SAMPCLASS* (DEFCLASS SAMPCLASS12 NIL NIL))) (LET ((BADMETHOD (DEFMETHOD CLASS-PRECEDENCE-LIST ((C (EQL *SAMPCLASS*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNLESS (CLASS-FINALIZED-P *SAMPCLASS*) (FINALIZE-INHERITANCE *SAMPCLASS*)) (UNWIND-PROTECT (NTH-VALUE 1 (CLASS-PRECEDENCE-LIST *SAMPCLASS*)) (REMOVE-METHOD #'CLASS-PRECEDENCE-LIST BADMETHOD))))
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION CLASS-PRECEDENCE-LIST>
         is being modified, but has already been called.
[SIMPLE-ERROR]: CLASS-PRECEDENCE-LIST: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: #1=(#2=#<STANDARD-CLASS SAMPCLASS12> #3=#<STANDARD-CLASS STANDARD-OBJECT> #4=#<BUILT-IN-CLASS T>)
Values returned by the extending method: #1#, T
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION CLASS-PRECEDENCE-LIST>
         is being modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-METHOD ((EQL #2=#<STANDARD-CLASS SAMPCLASS12>))>
         in #<STANDARD-GENERIC-FUNCTION CLASS-PRECEDENCE-LIST>
EQL-OK: ERROR
(LET ((*SAMPCLASS* (DEFCLASS SAMPCLASS13 NIL NIL))) (DEFMETHOD CLASS-PROTOTYPE ((C (EQL *SAMPCLASS*))) (CALL-NEXT-METHOD)) (UNLESS (CLASS-FINALIZED-P *SAMPCLASS*) (FINALIZE-INHERITANCE *SAMPCLASS*)) (CLASS-PROTOTYPE *SAMPCLASS*) T)
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION CLASS-PROTOTYPE> is
         being modified, but has already been called.
EQL-OK: T
(LET ((*SAMPCLASS* (DEFCLASS SAMPCLASS14 NIL NIL))) (LET ((BADMETHOD (DEFMETHOD CLASS-PROTOTYPE ((C (EQL *SAMPCLASS*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNLESS (CLASS-FINALIZED-P *SAMPCLASS*) (FINALIZE-INHERITANCE *SAMPCLASS*)) (UNWIND-PROTECT (NTH-VALUE 1 (CLASS-PROTOTYPE *SAMPCLASS*)) (REMOVE-METHOD #'CLASS-PROTOTYPE BADMETHOD))))
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION CLASS-PROTOTYPE> is
         being modified, but has already been called.
[SIMPLE-ERROR]: CLASS-PROTOTYPE: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: #1=#<SAMPCLASS14 #x000333EB1618>
Values returned by the extending method: #1#, T
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION CLASS-PROTOTYPE> is
         being modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-METHOD ((EQL #2=#<STANDARD-CLASS SAMPCLASS14>))>
         in #<STANDARD-GENERIC-FUNCTION CLASS-PROTOTYPE>
EQL-OK: ERROR
(LET ((*SAMPCLASS* (DEFCLASS SAMPCLASS15 NIL NIL))) (DEFMETHOD CLASS-SLOTS ((C (EQL *SAMPCLASS*))) (CALL-NEXT-METHOD)) (UNLESS (CLASS-FINALIZED-P *SAMPCLASS*) (FINALIZE-INHERITANCE *SAMPCLASS*)) (CLASS-SLOTS *SAMPCLASS*) T)
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION CLASS-SLOTS> is
         being modified, but has already been called.
EQL-OK: T
(LET ((*SAMPCLASS* (DEFCLASS SAMPCLASS16 NIL NIL))) (LET ((BADMETHOD (DEFMETHOD CLASS-SLOTS ((C (EQL *SAMPCLASS*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNLESS (CLASS-FINALIZED-P *SAMPCLASS*) (FINALIZE-INHERITANCE *SAMPCLASS*)) (UNWIND-PROTECT (NTH-VALUE 1 (CLASS-SLOTS *SAMPCLASS*)) (REMOVE-METHOD #'CLASS-SLOTS BADMETHOD))))
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION CLASS-SLOTS> is
         being modified, but has already been called.
[SIMPLE-ERROR]: CLASS-SLOTS: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: NIL
Values returned by the extending method: NIL, T
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION CLASS-SLOTS> is
         being modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-METHOD ((EQL #2=#<STANDARD-CLASS SAMPCLASS16>))>
         in #<STANDARD-GENERIC-FUNCTION CLASS-SLOTS>
EQL-OK: ERROR
(LET ((*SAMPCLASS* (DEFCLASS SAMPCLASS17 NIL NIL))) (DEFMETHOD (SETF CLASS-NAME) (NEW-VALUE (C (EQL *SAMPCLASS*))) (CALL-NEXT-METHOD)) (SETF (CLASS-NAME *SAMPCLASS*) 'SAMPCLASS17RENAMED) T)
EQL-OK: T
(LET ((*SAMPCLASS* (DEFCLASS SAMPCLASS18 NIL NIL))) (LET ((BADMETHOD (DEFMETHOD (SETF CLASS-NAME) (NEW-VALUE (C (EQL *SAMPCLASS*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNWIND-PROTECT (NTH-VALUE 1 (SETF (CLASS-NAME *SAMPCLASS*) 'SAMPCLASS18RENAMED)) (REMOVE-METHOD #'(SETF CLASS-NAME) BADMETHOD))))
[SIMPLE-ERROR]: #1=(SETF CLASS-NAME): Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: SAMPCLASS18RENAMED
Values returned by the extending method: SAMPCLASS18RENAMED, T
EQL-OK: ERROR
(LET ((*SAMPCLASS* (DEFCLASS SAMPCLASS19 NIL NIL))) (DEFMETHOD FINALIZE-INHERITANCE ((C (EQL *SAMPCLASS*))) (CALL-NEXT-METHOD)) (FINALIZE-INHERITANCE *SAMPCLASS*) T)
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION FINALIZE-INHERITANCE>
         is being modified, but has already been called.
EQL-OK: T
(LET ((*SAMPCLASS* (DEFCLASS SAMPCLASS20 NIL NIL))) (LET ((BADMETHOD (DEFMETHOD FINALIZE-INHERITANCE ((C (EQL *SAMPCLASS*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNWIND-PROTECT (NTH-VALUE 1 (FINALIZE-INHERITANCE *SAMPCLASS*)) (REMOVE-METHOD #'FINALIZE-INHERITANCE BADMETHOD))))
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION FINALIZE-INHERITANCE>
         is being modified, but has already been called.
[SIMPLE-ERROR]: FINALIZE-INHERITANCE: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: #1=#<STANDARD-CLASS SAMPCLASS20>
Values returned by the extending method: #1#, T
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION FINALIZE-INHERITANCE>
         is being modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-METHOD ((EQL #2=#<STANDARD-CLASS SAMPCLASS20>))>
         in #<STANDARD-GENERIC-FUNCTION FINALIZE-INHERITANCE>
EQL-OK: ERROR
(LET ((*SAMPGF* (DEFGENERIC SAMPGF01 (X Y)))) (DEFMETHOD FIND-METHOD-COMBINATION ((GF (EQL *SAMPGF*)) NAME OPTIONS) (CALL-NEXT-METHOD)) (FIND-METHOD-COMBINATION *SAMPGF* 'STANDARD NIL) T)
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION FIND-METHOD-COMBINATION>
         is being modified, but has already been called.
EQL-OK: T
(LET ((*SAMPGF* (DEFGENERIC SAMPGF02 (X Y)))) (LET ((BADMETHOD (DEFMETHOD FIND-METHOD-COMBINATION ((GF (EQL *SAMPGF*)) NAME OPTIONS) (VALUES (CALL-NEXT-METHOD) T)))) (UNWIND-PROTECT (NTH-VALUE 1 (FIND-METHOD-COMBINATION *SAMPGF* 'STANDARD NIL)) (REMOVE-METHOD #'FIND-METHOD-COMBINATION BADMETHOD))))
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION FIND-METHOD-COMBINATION>
         is being modified, but has already been called.
[SIMPLE-ERROR]: FIND-METHOD-COMBINATION: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: #1=#<METHOD-COMBINATION STANDARD #x000333B82278>
Values returned by the extending method: #1#, T
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION FIND-METHOD-COMBINATION>
         is being modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-METHOD ((EQL #<STANDARD-GENERIC-FUNCTION SAMPGF02>) #2=#<BUILT-IN-CLASS T> #2#)>
         in #<STANDARD-GENERIC-FUNCTION FIND-METHOD-COMBINATION>
EQL-OK: ERROR
(LET ((*SAMPGF* (DEFGENERIC SAMPGF03 (X Y)))) (DEFMETHOD GENERIC-FUNCTION-ARGUMENT-PRECEDENCE-ORDER ((GF (EQL *SAMPGF*))) (CALL-NEXT-METHOD)) (GENERIC-FUNCTION-ARGUMENT-PRECEDENCE-ORDER *SAMPGF*) T)
EQL-OK: T
(LET ((*SAMPGF* (DEFGENERIC SAMPGF04 (X Y)))) (LET ((BADMETHOD (DEFMETHOD GENERIC-FUNCTION-ARGUMENT-PRECEDENCE-ORDER ((GF (EQL *SAMPGF*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNWIND-PROTECT (NTH-VALUE 1 (GENERIC-FUNCTION-ARGUMENT-PRECEDENCE-ORDER *SAMPGF*)) (REMOVE-METHOD #'GENERIC-FUNCTION-ARGUMENT-PRECEDENCE-ORDER BADMETHOD))))
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION GENERIC-FUNCTION-ARGUMENT-PRECEDENCE-ORDER>
         is being modified, but has already been called.
[SIMPLE-ERROR]: GENERIC-FUNCTION-ARGUMENT-PRECEDENCE-ORDER: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: #1=(X Y)
Values returned by the extending method: #1#, T
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION GENERIC-FUNCTION-ARGUMENT-PRECEDENCE-ORDER>
         is being modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-METHOD ((EQL #<STANDARD-GENERIC-FUNCTION SAMPGF04>))>
         in
          #<STANDARD-GENERIC-FUNCTION GENERIC-FUNCTION-ARGUMENT-PRECEDENCE-ORDER>

EQL-OK: ERROR
(LET ((*SAMPGF* (DEFGENERIC SAMPGF05 (X Y)))) (DEFMETHOD GENERIC-FUNCTION-DECLARATIONS ((GF (EQL *SAMPGF*))) (CALL-NEXT-METHOD)) (GENERIC-FUNCTION-DECLARATIONS *SAMPGF*) T)
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION GENERIC-FUNCTION-DECLARATIONS>
         is being modified, but has already been called.
EQL-OK: T
(LET ((*SAMPGF* (DEFGENERIC SAMPGF06 (X Y)))) (LET ((BADMETHOD (DEFMETHOD GENERIC-FUNCTION-DECLARATIONS ((GF (EQL *SAMPGF*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNWIND-PROTECT (NTH-VALUE 1 (GENERIC-FUNCTION-DECLARATIONS *SAMPGF*)) (REMOVE-METHOD #'GENERIC-FUNCTION-DECLARATIONS BADMETHOD))))
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION GENERIC-FUNCTION-DECLARATIONS>
         is being modified, but has already been called.
[SIMPLE-ERROR]: GENERIC-FUNCTION-DECLARATIONS: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: NIL
Values returned by the extending method: NIL, T
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION GENERIC-FUNCTION-DECLARATIONS>
         is being modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-METHOD ((EQL #<STANDARD-GENERIC-FUNCTION SAMPGF06>))>
         in #<STANDARD-GENERIC-FUNCTION GENERIC-FUNCTION-DECLARATIONS>
EQL-OK: ERROR
(LET ((*SAMPGF* (DEFGENERIC SAMPGF07 (X Y)))) (DEFMETHOD GENERIC-FUNCTION-LAMBDA-LIST ((GF (EQL *SAMPGF*))) (CALL-NEXT-METHOD)) (GENERIC-FUNCTION-LAMBDA-LIST *SAMPGF*) T)
EQL-OK: T
(LET ((*SAMPGF* (DEFGENERIC SAMPGF08 (X Y)))) (LET ((BADMETHOD (DEFMETHOD GENERIC-FUNCTION-LAMBDA-LIST ((GF (EQL *SAMPGF*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNWIND-PROTECT (NTH-VALUE 1 (GENERIC-FUNCTION-LAMBDA-LIST *SAMPGF*)) (REMOVE-METHOD #'GENERIC-FUNCTION-LAMBDA-LIST BADMETHOD))))
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION GENERIC-FUNCTION-LAMBDA-LIST>
         is being modified, but has already been called.
[SIMPLE-ERROR]: GENERIC-FUNCTION-LAMBDA-LIST: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: #1=(X Y)
Values returned by the extending method: #1#, T
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION GENERIC-FUNCTION-LAMBDA-LIST>
         is being modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-METHOD ((EQL #<STANDARD-GENERIC-FUNCTION SAMPGF08>))>
         in #<STANDARD-GENERIC-FUNCTION GENERIC-FUNCTION-LAMBDA-LIST>
EQL-OK: ERROR
(LET ((*SAMPGF* (DEFGENERIC SAMPGF09 (X Y)))) (DEFMETHOD GENERIC-FUNCTION-METHOD-CLASS ((GF (EQL *SAMPGF*))) (CALL-NEXT-METHOD)) (GENERIC-FUNCTION-METHOD-CLASS *SAMPGF*) T)
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION GENERIC-FUNCTION-METHOD-CLASS>
         is being modified, but has already been called.
EQL-OK: T
(LET ((*SAMPGF* (DEFGENERIC SAMPGF10 (X Y)))) (LET ((BADMETHOD (DEFMETHOD GENERIC-FUNCTION-METHOD-CLASS ((GF (EQL *SAMPGF*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNWIND-PROTECT (NTH-VALUE 1 (GENERIC-FUNCTION-METHOD-CLASS *SAMPGF*)) (REMOVE-METHOD #'GENERIC-FUNCTION-METHOD-CLASS BADMETHOD))))
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION GENERIC-FUNCTION-METHOD-CLASS>
         is being modified, but has already been called.
[SIMPLE-ERROR]: GENERIC-FUNCTION-METHOD-CLASS: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: #1=#<STANDARD-CLASS STANDARD-METHOD>
Values returned by the extending method: #1#, T
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION GENERIC-FUNCTION-METHOD-CLASS>
         is being modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-METHOD ((EQL #<STANDARD-GENERIC-FUNCTION SAMPGF10>))>
         in #<STANDARD-GENERIC-FUNCTION GENERIC-FUNCTION-METHOD-CLASS>
EQL-OK: ERROR
(LET ((*SAMPGF* (DEFGENERIC SAMPGF11 (X Y)))) (DEFMETHOD GENERIC-FUNCTION-METHOD-COMBINATION ((GF (EQL *SAMPGF*))) (CALL-NEXT-METHOD)) (GENERIC-FUNCTION-METHOD-COMBINATION *SAMPGF*) T)
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION GENERIC-FUNCTION-METHOD-COMBINATION>
         is being modified, but has already been called.
EQL-OK: T
(LET ((*SAMPGF* (DEFGENERIC SAMPGF12 (X Y)))) (LET ((BADMETHOD (DEFMETHOD GENERIC-FUNCTION-METHOD-COMBINATION ((GF (EQL *SAMPGF*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNWIND-PROTECT (NTH-VALUE 1 (GENERIC-FUNCTION-METHOD-COMBINATION *SAMPGF*)) (REMOVE-METHOD #'GENERIC-FUNCTION-METHOD-COMBINATION BADMETHOD))))
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION GENERIC-FUNCTION-METHOD-COMBINATION>
         is being modified, but has already been called.
[SIMPLE-ERROR]: GENERIC-FUNCTION-METHOD-COMBINATION: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: #1=#<METHOD-COMBINATION STANDARD #x000333B82278>
Values returned by the extending method: #1#, T
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION GENERIC-FUNCTION-METHOD-COMBINATION>
         is being modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-METHOD ((EQL #<STANDARD-GENERIC-FUNCTION SAMPGF12>))>
         in #<STANDARD-GENERIC-FUNCTION GENERIC-FUNCTION-METHOD-COMBINATION>
EQL-OK: ERROR
(LET ((*SAMPGF* (DEFGENERIC SAMPGF13 (X Y)))) (DEFMETHOD GENERIC-FUNCTION-METHODS ((GF (EQL *SAMPGF*))) (CALL-NEXT-METHOD)) (GENERIC-FUNCTION-METHODS *SAMPGF*) T)
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION GENERIC-FUNCTION-METHODS>
         is being modified, but has already been called.
EQL-OK: T
(LET ((*SAMPGF* (DEFGENERIC SAMPGF14 (X Y)))) (LET ((BADMETHOD (DEFMETHOD GENERIC-FUNCTION-METHODS ((GF (EQL *SAMPGF*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNWIND-PROTECT (NTH-VALUE 1 (GENERIC-FUNCTION-METHODS *SAMPGF*)) (REMOVE-METHOD #'GENERIC-FUNCTION-METHODS BADMETHOD))))
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION GENERIC-FUNCTION-METHODS>
         is being modified, but has already been called.
[SIMPLE-ERROR]: GENERIC-FUNCTION-METHODS: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: NIL
Values returned by the extending method: NIL, T
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION GENERIC-FUNCTION-METHODS>
         is being modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-METHOD ((EQL #<STANDARD-GENERIC-FUNCTION SAMPGF14>))>
         in #<STANDARD-GENERIC-FUNCTION GENERIC-FUNCTION-METHODS>
EQL-OK: ERROR
(LET ((*SAMPGF* (DEFGENERIC SAMPGF15 (X Y)))) (DEFMETHOD GENERIC-FUNCTION-NAME ((GF (EQL *SAMPGF*))) (CALL-NEXT-METHOD)) (GENERIC-FUNCTION-NAME *SAMPGF*) T)
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION GENERIC-FUNCTION-NAME>
         is being modified, but has already been called.
EQL-OK: T
(LET ((*SAMPGF* (DEFGENERIC SAMPGF16 (X Y)))) (LET ((BADMETHOD (DEFMETHOD GENERIC-FUNCTION-NAME ((GF (EQL *SAMPGF*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNWIND-PROTECT (NTH-VALUE 1 (GENERIC-FUNCTION-NAME *SAMPGF*)) (REMOVE-METHOD #'GENERIC-FUNCTION-NAME BADMETHOD))))
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION GENERIC-FUNCTION-NAME>
         is being modified, but has already been called.
[SIMPLE-ERROR]: GENERIC-FUNCTION-NAME: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: SAMPGF16
Values returned by the extending method: SAMPGF16, T
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION GENERIC-FUNCTION-NAME>
         is being modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-METHOD ((EQL #<STANDARD-GENERIC-FUNCTION SAMPGF16>))>
         in #<STANDARD-GENERIC-FUNCTION GENERIC-FUNCTION-NAME>
EQL-OK: ERROR
(LET ((*SAMPGF* (DEFGENERIC SAMPGF17 (X Y)))) (DEFMETHOD (SETF GENERIC-FUNCTION-NAME) (NEW-VALUE (GF (EQL *SAMPGF*))) (CALL-NEXT-METHOD)) (SETF (GENERIC-FUNCTION-NAME *SAMPGF*) 'SAMPGF17RENAMED) T)
EQL-OK: T
(LET ((*SAMPGF* (DEFGENERIC SAMPGF18 (X Y)))) (LET ((BADMETHOD (DEFMETHOD (SETF GENERIC-FUNCTION-NAME) (NEW-VALUE (GF (EQL *SAMPGF*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNWIND-PROTECT (NTH-VALUE 1 (SETF (GENERIC-FUNCTION-NAME *SAMPGF*) 'SAMPGF18RENAMED)) (REMOVE-METHOD #'(SETF GENERIC-FUNCTION-NAME) BADMETHOD))))
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION (SETF GENERIC-FUNCTION-NAME)>
         is being modified, but has already been called.
[SIMPLE-ERROR]: #1=(SETF GENERIC-FUNCTION-NAME): Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: SAMPGF18RENAMED
Values returned by the extending method: SAMPGF18RENAMED, T
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION (SETF GENERIC-FUNCTION-NAME)>
         is being modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-METHOD (#2=#<BUILT-IN-CLASS T> (EQL #<STANDARD-GENERIC-FUNCTION SAMPGF18RENAMED>))>
         in #<STANDARD-GENERIC-FUNCTION (SETF GENERIC-FUNCTION-NAME)>
EQL-OK: ERROR
(LET ((*SAMPMETHOD* (DEFMETHOD SAMPGF19 NIL 'BAR))) (DEFMETHOD METHOD-FUNCTION ((METHOD (EQL *SAMPMETHOD*))) (CALL-NEXT-METHOD)) (METHOD-FUNCTION *SAMPMETHOD*) T)
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION METHOD-FUNCTION> is
         being modified, but has already been called.
EQL-OK: T
(LET ((*SAMPMETHOD* (DEFMETHOD SAMPGF20 NIL 'BAR))) (LET ((BADMETHOD (DEFMETHOD METHOD-FUNCTION ((METHOD (EQL *SAMPMETHOD*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNWIND-PROTECT (NTH-VALUE 1 (METHOD-FUNCTION *SAMPMETHOD*)) (REMOVE-METHOD #'METHOD-FUNCTION BADMETHOD))))
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION METHOD-FUNCTION> is
         being modified, but has already been called.
[SIMPLE-ERROR]: METHOD-FUNCTION: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: #1=#<COMPILED-FUNCTION CLOS::STD-METHOD-FUNCTION-OR-SUBSTITUTE-1>
Values returned by the extending method: #1#, T
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION METHOD-FUNCTION> is
         being modified, but has already been called.

WARNING: Removing method #1=#<STANDARD-METHOD ((EQL #<STANDARD-METHOD NIL>))>
         in #<STANDARD-GENERIC-FUNCTION METHOD-FUNCTION>
EQL-OK: ERROR
(LET ((*SAMPMETHOD* (DEFMETHOD SAMPGF21 NIL 'BAR))) (DEFMETHOD METHOD-GENERIC-FUNCTION ((METHOD (EQL *SAMPMETHOD*))) (CALL-NEXT-METHOD)) (METHOD-GENERIC-FUNCTION *SAMPMETHOD*) T)
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION METHOD-GENERIC-FUNCTION>
         is being modified, but has already been called.
EQL-OK: T
(LET ((*SAMPMETHOD* (DEFMETHOD SAMPGF22 NIL 'BAR))) (LET ((BADMETHOD (DEFMETHOD METHOD-GENERIC-FUNCTION ((METHOD (EQL *SAMPMETHOD*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNWIND-PROTECT (NTH-VALUE 1 (METHOD-GENERIC-FUNCTION *SAMPMETHOD*)) (REMOVE-METHOD #'METHOD-GENERIC-FUNCTION BADMETHOD))))
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION METHOD-GENERIC-FUNCTION>
         is being modified, but has already been called.
[SIMPLE-ERROR]: METHOD-GENERIC-FUNCTION: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: #1=#<STANDARD-GENERIC-FUNCTION SAMPGF22>
Values returned by the extending method: #1#, T
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION METHOD-GENERIC-FUNCTION>
         is being modified, but has already been called.

WARNING: Removing method #1=#<STANDARD-METHOD ((EQL #<STANDARD-METHOD NIL>))>
         in #<STANDARD-GENERIC-FUNCTION METHOD-GENERIC-FUNCTION>
EQL-OK: ERROR
(LET ((*SAMPMETHOD* (DEFMETHOD SAMPGF23 NIL 'BAR))) (DEFMETHOD METHOD-LAMBDA-LIST ((METHOD (EQL *SAMPMETHOD*))) (CALL-NEXT-METHOD)) (METHOD-LAMBDA-LIST *SAMPMETHOD*) T)
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION METHOD-LAMBDA-LIST>
         is being modified, but has already been called.
EQL-OK: T
(LET ((*SAMPMETHOD* (DEFMETHOD SAMPGF24 NIL 'BAR))) (LET ((BADMETHOD (DEFMETHOD METHOD-LAMBDA-LIST ((METHOD (EQL *SAMPMETHOD*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNWIND-PROTECT (NTH-VALUE 1 (METHOD-LAMBDA-LIST *SAMPMETHOD*)) (REMOVE-METHOD #'METHOD-LAMBDA-LIST BADMETHOD))))
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION METHOD-LAMBDA-LIST>
         is being modified, but has already been called.
[SIMPLE-ERROR]: METHOD-LAMBDA-LIST: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: NIL
Values returned by the extending method: NIL, T
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION METHOD-LAMBDA-LIST>
         is being modified, but has already been called.

WARNING: Removing method #1=#<STANDARD-METHOD ((EQL #<STANDARD-METHOD NIL>))>
         in #<STANDARD-GENERIC-FUNCTION METHOD-LAMBDA-LIST>
EQL-OK: ERROR
(LET ((*SAMPMETHOD* (DEFMETHOD SAMPGF25 NIL 'BAR))) (DEFMETHOD METHOD-SPECIALIZERS ((METHOD (EQL *SAMPMETHOD*))) (CALL-NEXT-METHOD)) (METHOD-SPECIALIZERS *SAMPMETHOD*) T)
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION METHOD-SPECIALIZERS>
         is being modified, but has already been called.
EQL-OK: T
(LET ((*SAMPMETHOD* (DEFMETHOD SAMPGF26 NIL 'BAR))) (LET ((BADMETHOD (DEFMETHOD METHOD-SPECIALIZERS ((METHOD (EQL *SAMPMETHOD*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNWIND-PROTECT (NTH-VALUE 1 (METHOD-SPECIALIZERS *SAMPMETHOD*)) (REMOVE-METHOD #'METHOD-SPECIALIZERS BADMETHOD))))
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION METHOD-SPECIALIZERS>
         is being modified, but has already been called.
[SIMPLE-ERROR]: METHOD-SPECIALIZERS: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: NIL
Values returned by the extending method: NIL, T
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION METHOD-SPECIALIZERS>
         is being modified, but has already been called.

WARNING: Removing method #1=#<STANDARD-METHOD ((EQL #<STANDARD-METHOD NIL>))>
         in #<STANDARD-GENERIC-FUNCTION METHOD-SPECIALIZERS>
EQL-OK: ERROR
(LET ((*SAMPMETHOD* (PROGN (DEFCLASS SAMPCLASS21 NIL ((X :READER SAMPCLASS21X))) (FIRST (GENERIC-FUNCTION-METHODS #'SAMPCLASS21X))))) (DEFMETHOD ACCESSOR-METHOD-SLOT-DEFINITION ((METHOD (EQL *SAMPMETHOD*))) (CALL-NEXT-METHOD)) (ACCESSOR-METHOD-SLOT-DEFINITION *SAMPMETHOD*) T)
EQL-OK: T
(LET ((*SAMPMETHOD* (PROGN (DEFCLASS SAMPCLASS22 NIL ((X :READER SAMPCLASS22X))) (FIRST (GENERIC-FUNCTION-METHODS #'SAMPCLASS22X))))) (LET ((BADMETHOD (DEFMETHOD ACCESSOR-METHOD-SLOT-DEFINITION ((SLOTDEF (EQL *SAMPMETHOD*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNWIND-PROTECT (NTH-VALUE 1 (ACCESSOR-METHOD-SLOT-DEFINITION *SAMPMETHOD*)) (REMOVE-METHOD #'ACCESSOR-METHOD-SLOT-DEFINITION BADMETHOD))))
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION ACCESSOR-METHOD-SLOT-DEFINITION>
         is being modified, but has already been called.
[SIMPLE-ERROR]: ACCESSOR-METHOD-SLOT-DEFINITION: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: #1=#<STANDARD-DIRECT-SLOT-DEFINITION X #x000333F0C5F0>
Values returned by the extending method: #1#, T
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION ACCESSOR-METHOD-SLOT-DEFINITION>
         is being modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-METHOD ((EQL #2=#<STANDARD-READER-METHOD (#3=#<STANDARD-CLASS SAMPCLASS22>)>))>
         in #<STANDARD-GENERIC-FUNCTION ACCESSOR-METHOD-SLOT-DEFINITION>
EQL-OK: ERROR
(LET ((*SAMPSLOT* (FIRST (CLASS-DIRECT-SLOTS (DEFCLASS SAMPCLASS23 NIL ((X))))))) (DEFMETHOD SLOT-DEFINITION-ALLOCATION ((SLOTDEF (EQL *SAMPSLOT*))) (CALL-NEXT-METHOD)) (SLOT-DEFINITION-ALLOCATION *SAMPSLOT*) T)
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-ALLOCATION>
         is being modified, but has already been called.
EQL-OK: T
(LET ((*SAMPSLOT* (FIRST (CLASS-DIRECT-SLOTS (DEFCLASS SAMPCLASS24 NIL ((X))))))) (LET ((BADMETHOD (DEFMETHOD SLOT-DEFINITION-ALLOCATION ((SLOTDEF (EQL *SAMPSLOT*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNWIND-PROTECT (NTH-VALUE 1 (SLOT-DEFINITION-ALLOCATION *SAMPSLOT*)) (REMOVE-METHOD #'SLOT-DEFINITION-ALLOCATION BADMETHOD))))
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-ALLOCATION>
         is being modified, but has already been called.
[SIMPLE-ERROR]: SLOT-DEFINITION-ALLOCATION: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: :INSTANCE
Values returned by the extending method: :INSTANCE, T
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-ALLOCATION>
         is being modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-METHOD ((EQL #2=#<STANDARD-DIRECT-SLOT-DEFINITION X #x000333E7DC18>))>
         in #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-ALLOCATION>
EQL-OK: ERROR
(LET ((*SAMPSLOT* (FIRST (CLASS-DIRECT-SLOTS (DEFCLASS SAMPCLASS25 NIL ((X))))))) (DEFMETHOD SLOT-DEFINITION-INITARGS ((SLOTDEF (EQL *SAMPSLOT*))) (CALL-NEXT-METHOD)) (SLOT-DEFINITION-INITARGS *SAMPSLOT*) T)
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-INITARGS>
         is being modified, but has already been called.
EQL-OK: T
(LET ((*SAMPSLOT* (FIRST (CLASS-DIRECT-SLOTS (DEFCLASS SAMPCLASS26 NIL ((X))))))) (LET ((BADMETHOD (DEFMETHOD SLOT-DEFINITION-INITARGS ((SLOTDEF (EQL *SAMPSLOT*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNWIND-PROTECT (NTH-VALUE 1 (SLOT-DEFINITION-INITARGS *SAMPSLOT*)) (REMOVE-METHOD #'SLOT-DEFINITION-INITARGS BADMETHOD))))
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-INITARGS>
         is being modified, but has already been called.
[SIMPLE-ERROR]: SLOT-DEFINITION-INITARGS: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: NIL
Values returned by the extending method: NIL, T
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-INITARGS>
         is being modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-METHOD ((EQL #2=#<STANDARD-DIRECT-SLOT-DEFINITION X #x000333EF97D0>))>
         in #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-INITARGS>
EQL-OK: ERROR
(LET ((*SAMPSLOT* (FIRST (CLASS-DIRECT-SLOTS (DEFCLASS SAMPCLASS27 NIL ((X))))))) (DEFMETHOD SLOT-DEFINITION-INITFORM ((SLOTDEF (EQL *SAMPSLOT*))) (CALL-NEXT-METHOD)) (SLOT-DEFINITION-INITFORM *SAMPSLOT*) T)
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-INITFORM>
         is being modified, but has already been called.
EQL-OK: T
(LET ((*SAMPSLOT* (FIRST (CLASS-DIRECT-SLOTS (DEFCLASS SAMPCLASS28 NIL ((X))))))) (LET ((BADMETHOD (DEFMETHOD SLOT-DEFINITION-INITFORM ((SLOTDEF (EQL *SAMPSLOT*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNWIND-PROTECT (NTH-VALUE 1 (SLOT-DEFINITION-INITFORM *SAMPSLOT*)) (REMOVE-METHOD #'SLOT-DEFINITION-INITFORM BADMETHOD))))
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-INITFORM>
         is being modified, but has already been called.
[SIMPLE-ERROR]: SLOT-DEFINITION-INITFORM: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: NIL
Values returned by the extending method: NIL, T
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-INITFORM>
         is being modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-METHOD ((EQL #2=#<STANDARD-DIRECT-SLOT-DEFINITION X #x000333E7FBE8>))>
         in #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-INITFORM>
EQL-OK: ERROR
(LET ((*SAMPSLOT* (FIRST (CLASS-DIRECT-SLOTS (DEFCLASS SAMPCLASS29 NIL ((X))))))) (DEFMETHOD SLOT-DEFINITION-INITFUNCTION ((SLOTDEF (EQL *SAMPSLOT*))) (CALL-NEXT-METHOD)) (SLOT-DEFINITION-INITFUNCTION *SAMPSLOT*) T)
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-INITFUNCTION>
         is being modified, but has already been called.
EQL-OK: T
(LET ((*SAMPSLOT* (FIRST (CLASS-DIRECT-SLOTS (DEFCLASS SAMPCLASS30 NIL ((X))))))) (LET ((BADMETHOD (DEFMETHOD SLOT-DEFINITION-INITFUNCTION ((SLOTDEF (EQL *SAMPSLOT*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNWIND-PROTECT (NTH-VALUE 1 (SLOT-DEFINITION-INITFUNCTION *SAMPSLOT*)) (REMOVE-METHOD #'SLOT-DEFINITION-INITFUNCTION BADMETHOD))))
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-INITFUNCTION>
         is being modified, but has already been called.
[SIMPLE-ERROR]: SLOT-DEFINITION-INITFUNCTION: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: NIL
Values returned by the extending method: NIL, T
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-INITFUNCTION>
         is being modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-METHOD ((EQL #2=#<STANDARD-DIRECT-SLOT-DEFINITION X #x000333ED1060>))>
         in #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-INITFUNCTION>
EQL-OK: ERROR
(LET ((*SAMPSLOT* (FIRST (CLASS-DIRECT-SLOTS (DEFCLASS SAMPCLASS31 NIL ((X))))))) (DEFMETHOD SLOT-DEFINITION-NAME ((SLOTDEF (EQL *SAMPSLOT*))) (CALL-NEXT-METHOD)) (SLOT-DEFINITION-NAME *SAMPSLOT*) T)
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-NAME>
         is being modified, but has already been called.
EQL-OK: T
(LET ((*SAMPSLOT* (FIRST (CLASS-DIRECT-SLOTS (DEFCLASS SAMPCLASS32 NIL ((X))))))) (LET ((BADMETHOD (DEFMETHOD SLOT-DEFINITION-NAME ((SLOTDEF (EQL *SAMPSLOT*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNWIND-PROTECT (NTH-VALUE 1 (SLOT-DEFINITION-NAME *SAMPSLOT*)) (REMOVE-METHOD #'SLOT-DEFINITION-NAME BADMETHOD))))
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-NAME>
         is being modified, but has already been called.
[SIMPLE-ERROR]: SLOT-DEFINITION-NAME: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: X
Values returned by the extending method: X, T
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-NAME>
         is being modified, but has already been called.

WARNING: Removing method
[SIMPLE-ERROR]: SLOT-DEFINITION-NAME: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: X
Values returned by the extending method: X, T

          #1=#<STANDARD-METHOD ((EQL #2=#<STANDARD-DIRECT-SLOT-DEFINITION 
EQL-OK: ERROR
(LET ((*SAMPSLOT* (FIRST (CLASS-DIRECT-SLOTS (DEFCLASS SAMPCLASS33 NIL ((X))))))) (DEFMETHOD SLOT-DEFINITION-TYPE ((SLOTDEF (EQL *SAMPSLOT*))) (CALL-NEXT-METHOD)) (SLOT-DEFINITION-TYPE *SAMPSLOT*) T)
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-TYPE>
         is being modified, but has already been called.
EQL-OK: T
(LET ((*SAMPSLOT* (FIRST (CLASS-DIRECT-SLOTS (DEFCLASS SAMPCLASS34 NIL ((X))))))) (LET ((BADMETHOD (DEFMETHOD SLOT-DEFINITION-TYPE ((SLOTDEF (EQL *SAMPSLOT*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNWIND-PROTECT (NTH-VALUE 1 (SLOT-DEFINITION-TYPE *SAMPSLOT*)) (REMOVE-METHOD #'SLOT-DEFINITION-TYPE BADMETHOD))))
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-TYPE>
         is being modified, but has already been called.
[SIMPLE-ERROR]: SLOT-DEFINITION-TYPE: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: T
Values returned by the extending method: T, T
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-TYPE>
         is being modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-METHOD ((EQL #2=#<STANDARD-DIRECT-SLOT-DEFINITION X #x000333EF0100>))>
         in #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-TYPE>
EQL-OK: ERROR
(LET ((*SAMPSLOT* (FIRST (CLASS-DIRECT-SLOTS (DEFCLASS SAMPCLASS35 NIL ((X))))))) (DEFMETHOD SLOT-DEFINITION-READERS ((SLOTDEF (EQL *SAMPSLOT*))) (CALL-NEXT-METHOD)) (SLOT-DEFINITION-READERS *SAMPSLOT*) T)
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-READERS>
         is being modified, but has already been called.
EQL-OK: T
(LET ((*SAMPSLOT* (FIRST (CLASS-DIRECT-SLOTS (DEFCLASS SAMPCLASS36 NIL ((X))))))) (LET ((BADMETHOD (DEFMETHOD SLOT-DEFINITION-READERS ((SLOTDEF (EQL *SAMPSLOT*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNWIND-PROTECT (NTH-VALUE 1 (SLOT-DEFINITION-READERS *SAMPSLOT*)) (REMOVE-METHOD #'SLOT-DEFINITION-READERS BADMETHOD))))
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-READERS>
         is being modified, but has already been called.
[SIMPLE-ERROR]: SLOT-DEFINITION-READERS: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: NIL
Values returned by the extending method: NIL, T
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-READERS>
         is being modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-METHOD ((EQL #2=#<STANDARD-DIRECT-SLOT-DEFINITION X #x000333E841D8>))>
         in #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-READERS>
EQL-OK: ERROR
(LET ((STRUCT (DEFSTRUCT STRUCT04 SLOT1))) (NCONC (MAPCAR #'SLOT-DEFINITION-READERS (CLASS-DIRECT-SLOTS (FIND-CLASS STRUCT))) (MAPCAR #'SLOT-DEFINITION-WRITERS (CLASS-DIRECT-SLOTS (FIND-CLASS STRUCT)))))
EQUAL-OK: ((STRUCT04-SLOT1) ((SETF STRUCT04-SLOT1)))
(LET ((STRUCT (DEFSTRUCT STRUCT04RO (SLOT1 T :READ-ONLY T)))) (NCONC (MAPCAR #'SLOT-DEFINITION-READERS (CLASS-DIRECT-SLOTS (FIND-CLASS STRUCT))) (MAPCAR #'SLOT-DEFINITION-WRITERS (CLASS-DIRECT-SLOTS (FIND-CLASS STRUCT)))))
EQUAL-OK: ((STRUCT04RO-SLOT1) NIL)
(LET ((STRUCT (DEFSTRUCT (STRUCT04V (:TYPE VECTOR)) SLOT1))) (NCONC (MAPCAR #'SLOT-DEFINITION-READERS (STRUCTURE-DIRECT-SLOTS STRUCT)) (MAPCAR #'SLOT-DEFINITION-WRITERS (STRUCTURE-DIRECT-SLOTS STRUCT))))
EQUAL-OK: ((STRUCT04V-SLOT1) ((SETF STRUCT04V-SLOT1)))
(LET ((STRUCT (DEFSTRUCT (STRUCT04ROV (:TYPE VECTOR)) (SLOT1 T :READ-ONLY T)))) (NCONC (MAPCAR #'SLOT-DEFINITION-READERS (STRUCTURE-DIRECT-SLOTS STRUCT)) (MAPCAR #'SLOT-DEFINITION-WRITERS (STRUCTURE-DIRECT-SLOTS STRUCT))))
EQUAL-OK: ((STRUCT04ROV-SLOT1) NIL)
(LET* ((F "defstruct-test.lisp") (*SUPPRESS-CHECK-REDEFINITION* NIL) (*BREAK-ON-SIGNALS* T)) (WITH-OPEN-FILE (S F :DIRECTION :OUTPUT :IF-EXISTS :SUPERSEDE) (WRITE '(DEFSTRUCT STRUCT05 SLOT) :STREAM S) (TERPRI S) (WRITE '(DEFSTRUCT (STRUCT05V (:TYPE VECTOR)) SLOTV) :STREAM S) (TERPRI S)) (UNWIND-PROTECT (PROGN (COMPILE-FILE F) NIL) (POST-COMPILE-FILE-CLEANUP F)))
;; Compiling file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/defstruct-test.lisp ...

;; Wrote file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/src/tests/defstruct-test.fas
0 errors, 0 warnings
EQL-OK: NIL
(LET ((*SAMPSLOT* (FIRST (CLASS-DIRECT-SLOTS (DEFCLASS SAMPCLASS37 NIL ((X))))))) (DEFMETHOD SLOT-DEFINITION-WRITERS ((SLOTDEF (EQL *SAMPSLOT*))) (CALL-NEXT-METHOD)) (SLOT-DEFINITION-WRITERS *SAMPSLOT*) T)
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-WRITERS>
         is being modified, but has already been called.
EQL-OK: T
(LET ((*SAMPSLOT* (FIRST (CLASS-DIRECT-SLOTS (DEFCLASS SAMPCLASS38 NIL ((X))))))) (LET ((BADMETHOD (DEFMETHOD SLOT-DEFINITION-WRITERS ((SLOTDEF (EQL *SAMPSLOT*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNWIND-PROTECT (NTH-VALUE 1 (SLOT-DEFINITION-WRITERS *SAMPSLOT*)) (REMOVE-METHOD #'SLOT-DEFINITION-WRITERS BADMETHOD))))
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-WRITERS>
         is being modified, but has already been called.
[SIMPLE-ERROR]: SLOT-DEFINITION-WRITERS: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: NIL
Values returned by the extending method: NIL, T
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-WRITERS>
         is being modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-METHOD ((EQL #2=#<STANDARD-DIRECT-SLOT-DEFINITION X #x000333E8F1D8>))>
         in #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-WRITERS>
EQL-OK: ERROR
(LET ((*SAMPCLASS* (DEFCLASS SAMPCLASS39 NIL ((X))))) (UNLESS (CLASS-FINALIZED-P *SAMPCLASS*) (FINALIZE-INHERITANCE *SAMPCLASS*)) (LET ((*SAMPSLOT* (FIRST (CLASS-SLOTS *SAMPCLASS*)))) (DEFMETHOD SLOT-DEFINITION-LOCATION ((SLOTDEF (EQL *SAMPSLOT*))) (CALL-NEXT-METHOD)) (SLOT-DEFINITION-LOCATION *SAMPSLOT*) T))
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-LOCATION>
         is being modified, but has already been called.
EQL-OK: T
(LET ((*SAMPCLASS* (DEFCLASS SAMPCLASS39 NIL ((X))))) (UNLESS (CLASS-FINALIZED-P *SAMPCLASS*) (FINALIZE-INHERITANCE *SAMPCLASS*)) (LET ((*SAMPSLOT* (FIRST (CLASS-SLOTS *SAMPCLASS*)))) (LET ((BADMETHOD (DEFMETHOD SLOT-DEFINITION-LOCATION ((SLOTDEF (EQL *SAMPSLOT*))) (VALUES (CALL-NEXT-METHOD) T)))) (UNWIND-PROTECT (NTH-VALUE 1 (SLOT-DEFINITION-LOCATION *SAMPSLOT*)) (REMOVE-METHOD #'SLOT-DEFINITION-LOCATION BADMETHOD)))))
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-LOCATION>
         is being modified, but has already been called.
[SIMPLE-ERROR]: SLOT-DEFINITION-LOCATION: Extending a standardized method is only allowed if it returns the same values as the next method.
Original values: 1
Values returned by the extending method: 1, T
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-LOCATION>
         is being modified, but has already been called.

WARNING: Removing method
          #1=#<STANDARD-METHOD ((EQL #2=#<STANDARD-EFFECTIVE-SLOT-DEFINITION X #x000333F14FC8>))>
         in #<STANDARD-GENERIC-FUNCTION SLOT-DEFINITION-LOCATION>
EQL-OK: ERROR
(LET ((ADD-METHOD-CALLED NIL)) (DEFCLASS TESTGENERICFUNCTION142 (STANDARD-GENERIC-FUNCTION) NIL (:METACLASS FUNCALLABLE-STANDARD-CLASS)) (DEFMETHOD ADD-METHOD :BEFORE ((GF TESTGENERICFUNCTION142) (METHOD STANDARD-METHOD)) (SETQ ADD-METHOD-CALLED T)) (DEFGENERIC TESTGF142 (X) (:GENERIC-FUNCTION-CLASS TESTGENERICFUNCTION142)) (DEFMETHOD TESTGF142 (X) (DECLARE (IGNORE X))) ADD-METHOD-CALLED)
EQL-OK: T
(LET ((REMOVE-METHOD-CALLED NIL)) (DEFCLASS TESTGENERICFUNCTION143 (STANDARD-GENERIC-FUNCTION) NIL (:METACLASS FUNCALLABLE-STANDARD-CLASS)) (DEFMETHOD REMOVE-METHOD :BEFORE ((GF TESTGENERICFUNCTION143) (METHOD STANDARD-METHOD)) (SETQ REMOVE-METHOD-CALLED T)) (DEFGENERIC TESTGF143 (X) (:GENERIC-FUNCTION-CLASS TESTGENERICFUNCTION143)) (DEFMETHOD TESTGF143 (X) (DECLARE (IGNORE X)) 17) (DEFMETHOD TESTGF143 (X) (DECLARE (IGNORE X)) 19) REMOVE-METHOD-CALLED)
WARNING: Replacing method #<STANDARD-METHOD (#1=#<BUILT-IN-CLASS T>)> in
          #<TESTGENERICFUNCTION143 TESTGF143>

EQL-OK: T
(PROGN (DEFGENERIC FOO141 (X) (:METHOD ((X INTEGER)) (ISQRT X)) (:METHOD ((X REAL)) (- X))) (LET ((MY-METHOD (FIND-METHOD #'FOO141 NIL (LIST (FIND-CLASS 'REAL)))) (MY-ARGLIST (LIST 43))) (FUNCALL (METHOD-FUNCTION MY-METHOD) MY-ARGLIST 'NIL)))
EQL-OK: -43
(PROGN (DEFCLASS CUSTOM-METHOD (METHOD) ((QUALIFIERS :READER METHOD-QUALIFIERS :WRITER (SETF CUSTOM-METHOD-QUALIFIERS)) (LAMBDA-LIST :READER METHOD-LAMBDA-LIST :WRITER (SETF CUSTOM-METHOD-LAMBDA-LIST)) (SPECIALIZERS :READER METHOD-SPECIALIZERS :WRITER (SETF CUSTOM-METHOD-SPECIALIZERS)) (FUNCTION :READER METHOD-FUNCTION :WRITER (SETF CUSTOM-METHOD-FUNCTION)) (DOCUMENTATION :ACCESSOR CUSTOM-METHOD-DOCUMENTATION) (GENERIC-FUNCTION :READER METHOD-GENERIC-FUNCTION :WRITER (SETF CUSTOM-METHOD-GENERIC-FUNCTION)))) (DEFMETHOD SHARED-INITIALIZE ((METHOD CUSTOM-METHOD) SITUATION &REST ARGS &KEY (QUALIFIERS NIL QUALIFIERS-P) (LAMBDA-LIST NIL LAMBDA-LIST-P) (SPECIALIZERS NIL SPECIALIZERS-P) (FUNCTION NIL FUNCTION-P) (DOCUMENTATION NIL DOCUMENTATION-P)) (CALL-NEXT-METHOD) (WHEN (OR (EQ SITUATION 'T) QUALIFIERS-P) (SETF (CUSTOM-METHOD-QUALIFIERS METHOD) QUALIFIERS)) (WHEN (OR (EQ SITUATION 'T) LAMBDA-LIST-P) (SETF (CUSTOM-METHOD-LAMBDA-LIST METHOD) LAMBDA-LIST)) (WHEN (OR (EQ SITUATION 'T) SPECIALIZERS-P) (SETF (CUSTOM-METHOD-SPECIALIZERS METHOD) SPECIALIZERS)) (WHEN (OR (EQ SITUATION 'T) FUNCTION-P) (SETF (CUSTOM-METHOD-FUNCTION METHOD) FUNCTION)) (WHEN (OR (EQ SITUATION 'T) DOCUMENTATION-P) (SETF (CUSTOM-METHOD-DOCUMENTATION METHOD) DOCUMENTATION)) (WHEN (EQ SITUATION 'T) (SETF (CUSTOM-METHOD-GENERIC-FUNCTION METHOD) NIL)) METHOD) (DEFMETHOD DOCUMENTATION ((X CUSTOM-METHOD) (DOC-TYPE (EQL 'T))) (DECLARE (IGNORE DOC-TYPE)) (CUSTOM-METHOD-DOCUMENTATION X)) (DEFMETHOD (SETF DOCUMENTATION) (NEW-VALUE (X CUSTOM-METHOD) (DOC-TYPE (EQL 'T))) (DECLARE (IGNORE DOC-TYPE)) (SETF (CUSTOM-METHOD-DOCUMENTATION X) NEW-VALUE)) (DEFMETHOD (SETF METHOD-GENERIC-FUNCTION) (NEW-GF (METHOD CUSTOM-METHOD)) (SETF (CUSTOM-METHOD-GENERIC-FUNCTION METHOD) NEW-GF)) (LET ((RESULT 'NIL)) (DEFGENERIC TESTGF30 (A B) (:METHOD ((A INTEGER) (B INTEGER)) (- (CALL-NEXT-METHOD) (FLOOR A B))) (:METHOD ((A REAL) (B REAL)) (/ (FLOAT A) (FLOAT B))) (:METHOD-CLASS CUSTOM-METHOD)) (PUSH (NOT (FIND-METHOD #'TESTGF30 NIL (LIST (FIND-CLASS 'INTEGER) (FIND-CLASS 'INTEGER)) NIL)) RESULT) (PUSH (TESTGF30 17 2) RESULT) (DEFGENERIC TESTGF30 (A B) (:METHOD ((A REAL) (B REAL)) (/ (FLOAT A) (FLOAT B))) (:METHOD-CLASS CUSTOM-METHOD)) (PUSH (NOT (FIND-METHOD #'TESTGF30 NIL (LIST (FIND-CLASS 'INTEGER) (FIND-CLASS 'INTEGER)) NIL)) RESULT) (PUSH (TESTGF30 17 2) RESULT) (NREVERSE RESULT)))
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION METHOD-LAMBDA-LIST>
         is being modified, but has already been called.

WARNING: The generic function #<STANDARD-GENERIC-FUNCTION METHOD-SPECIALIZERS>
         is being modified, but has already been called.

WARNING: The generic function #<STANDARD-GENERIC-FUNCTION METHOD-FUNCTION> is
         being modified, but has already been called.

WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION METHOD-GENERIC-FUNCTION>
         is being modified, but has already been called.

WARNING: The generic function #<STANDARD-GENERIC-FUNCTION TESTGF30> is being
         modified, but has already been called.
EQUAL-OK: (NIL 0.5 T 8.5)
(PROGN (DEFGENERIC TESTGF34 (X)) (DEFMETHOD TESTGF34 ((X INTEGER)) 'OLD-INTEGER) (DEFMETHOD TESTGF34 ((X REAL)) 'REAL) (LIST* (TESTGF34 3) (TESTGF34 22/7) (PROGN (LET ((METHOD (FIND-METHOD #'TESTGF34 'NIL (LIST (FIND-CLASS 'INTEGER))))) (CHANGE-CLASS METHOD (FIND-CLASS 'CUSTOM-METHOD) :QUALIFIERS 'NIL :LAMBDA-LIST '(X) :SPECIALIZERS (LIST (FIND-CLASS 'RATIONAL)) :FUNCTION #'(LAMBDA (ARGUMENTS NEXT-METHODS) 'NEW-RATIONAL) :DOCUMENTATION NIL)) (LIST (TESTGF34 3) (TESTGF34 22/7)))))
EQUAL-OK: (OLD-INTEGER REAL NEW-RATIONAL NEW-RATIONAL)
(PROGN (DEFGENERIC TESTGF35 (X)) (DEFMETHOD TESTGF35 ((X INTEGER)) (CONS 'INTEGER (IF (NEXT-METHOD-P) (CALL-NEXT-METHOD)))) (DEFMETHOD TESTGF35 ((X REAL)) (CONS 'REAL (IF (NEXT-METHOD-P) (CALL-NEXT-METHOD)))) (DEFCLASS CUSTOMIZED5-GENERIC-FUNCTION (STANDARD-GENERIC-FUNCTION) NIL (:METACLASS FUNCALLABLE-STANDARD-CLASS)) (DEFMETHOD COMPUTE-EFFECTIVE-METHOD ((GF CUSTOMIZED5-GENERIC-FUNCTION) METHOD-COMBINATION METHODS) `(REVERSE ,(CALL-NEXT-METHOD))) (LIST (TESTGF35 3) (PROGN (CHANGE-CLASS #'TESTGF35 'CUSTOMIZED5-GENERIC-FUNCTION) (TESTGF35 3))))
EQUAL-OK: ((INTEGER REAL) (REAL INTEGER))
(PROGN (DEFGENERIC TESTGF36 (X)) (DEFMETHOD TESTGF36 ((X INTEGER)) (CONS 'INTEGER (IF (NEXT-METHOD-P) (CALL-NEXT-METHOD)))) (DEFMETHOD TESTGF36 ((X REAL)) (CONS 'REAL (IF (NEXT-METHOD-P) (CALL-NEXT-METHOD)))) (DEFCLASS CUSTOMIZED6-GENERIC-FUNCTION (STANDARD-GENERIC-FUNCTION) NIL (:METACLASS FUNCALLABLE-STANDARD-CLASS)) (DEFMETHOD COMPUTE-DISCRIMINATING-FUNCTION ((GF CUSTOMIZED6-GENERIC-FUNCTION)) (LET ((ORIG-DF (CALL-NEXT-METHOD))) #'(LAMBDA (&REST ARGUMENTS) (REVERSE (APPLY ORIG-DF ARGUMENTS))))) (LIST (TESTGF36 3) (PROGN (CHANGE-CLASS #'TESTGF36 'CUSTOMIZED6-GENERIC-FUNCTION) (TESTGF36 3))))
EQUAL-OK: ((INTEGER REAL) (REAL INTEGER))
(PROGN (DEFCLASS TYPECHECKED-SLOT-DEFINITION (STANDARD-EFFECTIVE-SLOT-DEFINITION) NIL) (DEFMETHOD SLOT-VALUE-USING-CLASS ((CLASS STANDARD-CLASS) INSTANCE (SLOT TYPECHECKED-SLOT-DEFINITION)) (LET ((VALUE (CALL-NEXT-METHOD))) (UNLESS (TYPEP VALUE (SLOT-DEFINITION-TYPE SLOT)) (ERROR "Slot ~S of ~S has changed, no longer of type ~S" (SLOT-DEFINITION-NAME SLOT) INSTANCE (SLOT-DEFINITION-TYPE SLOT))) VALUE)) (DEFMETHOD (SETF SLOT-VALUE-USING-CLASS) (NEW-VALUE (CLASS STANDARD-CLASS) INSTANCE (SLOT TYPECHECKED-SLOT-DEFINITION)) (UNLESS (TYPEP NEW-VALUE (SLOT-DEFINITION-TYPE SLOT)) (ERROR "Slot ~S of ~S: new value is not of type ~S: ~S" (SLOT-DEFINITION-NAME SLOT) INSTANCE (SLOT-DEFINITION-TYPE SLOT) NEW-VALUE)) (CALL-NEXT-METHOD)) (DEFCLASS TYPECHECKED-SLOT-DEFINITION-CLASS (STANDARD-CLASS) NIL) (DEFMETHOD EFFECTIVE-SLOT-DEFINITION-CLASS ((CLASS TYPECHECKED-SLOT-DEFINITION-CLASS) &REST ARGS) (FIND-CLASS 'TYPECHECKED-SLOT-DEFINITION)) (DEFCLASS TESTCLASS28 NIL ((PAIR :TYPE (CONS SYMBOL (CONS SYMBOL NULL)) :INITARG :PAIR :ACCESSOR TESTCLASS28-PAIR)) (:METACLASS TYPECHECKED-SLOT-DEFINITION-CLASS)) (MACROLET ((SUCCEEDS (FORM) `(NOT (NTH-VALUE 1 (IGNORE-ERRORS ,FORM))))) (LET ((P (LIST 'ABC 'DEF)) (X (MAKE-INSTANCE 'TESTCLASS28))) (LIST (SUCCEEDS (MAKE-INSTANCE 'TESTCLASS28 :PAIR '(SEVENTEEN 17))) (SUCCEEDS (SETF (TESTCLASS28-PAIR X) P)) (SUCCEEDS (SETF (SECOND P) 456)) (SUCCEEDS (TESTCLASS28-PAIR X)) (SUCCEEDS (SLOT-VALUE X 'PAIR))))))
EQUAL-OK: (NIL T T NIL NIL)
(PROGN (DEFCLASS CLASS-SUPPORTING-CLASSOF-SLOTS (STANDARD-CLASS) ((SLOTNAME-TO-DUMMYSLOTNAME :TYPE LIST :INITFORM NIL))) (DEFCLASS CLASSOF-DIRECT-SLOT-DEFINITION-MIXIN NIL NIL) (LET ((ADD-MIXIN-TABLE (MAKE-HASH-TABLE :TEST 'STABLEHASH-EQ))) (DEFUN ADD-CLASSOF-DIRECT-MIXIN (SLOT-CLASS) (IF (SUBTYPEP SLOT-CLASS (FIND-CLASS 'CLASSOF-DIRECT-SLOT-DEFINITION-MIXIN)) SLOT-CLASS (OR (GETHASH SLOT-CLASS ADD-MIXIN-TABLE) (SETF (GETHASH SLOT-CLASS ADD-MIXIN-TABLE) (ENSURE-CLASS (MAKE-SYMBOL (CONCATENATE 'STRING (SYMBOL-NAME (CLASS-NAME SLOT-CLASS)) "-WITH-CLASSOF-SUPPORT")) :METACLASS (CLASS-OF SLOT-CLASS) :DIRECT-SUPERCLASSES (LIST SLOT-CLASS (FIND-CLASS 'CLASSOF-DIRECT-SLOT-DEFINITION-MIXIN)))))))) (DEFMETHOD DIRECT-SLOT-DEFINITION-CLASS ((CLASS CLASS-SUPPORTING-CLASSOF-SLOTS) &REST INITARGS) (IF (GETF INITARGS ':PER-SUBCLASS) (ADD-CLASSOF-DIRECT-MIXIN (CALL-NEXT-METHOD)) (CALL-NEXT-METHOD))) (DEFMETHOD INITIALIZE-INSTANCE :AFTER ((SLOT CLASSOF-DIRECT-SLOT-DEFINITION-MIXIN) &REST INITARGS &KEY PER-SUBCLASS) (DECLARE (IGNORE PER-SUBCLASS))) (DEFMETHOD COMPUTE-EFFECTIVE-SLOT-DEFINITION-INITARGS ((CLASS CLASS-SUPPORTING-CLASSOF-SLOTS) DIRECT-SLOT-DEFINITIONS) (IF (TYPEP (FIRST DIRECT-SLOT-DEFINITIONS) 'CLASSOF-DIRECT-SLOT-DEFINITION-MIXIN) (APPEND (CALL-NEXT-METHOD) (LIST ':PER-SUBCLASS T)) (CALL-NEXT-METHOD))) (DEFCLASS CLASSOF-EFFECTIVE-SLOT-DEFINITION-MIXIN NIL ((VALUE-SLOT-NAME :TYPE SYMBOL))) (LET ((ADD-MIXIN-TABLE (MAKE-HASH-TABLE :TEST 'STABLEHASH-EQ))) (DEFUN ADD-CLASSOF-EFFECTIVE-MIXIN (SLOT-CLASS) (IF (SUBTYPEP SLOT-CLASS (FIND-CLASS 'CLASSOF-EFFECTIVE-SLOT-DEFINITION-MIXIN)) SLOT-CLASS (OR (GETHASH SLOT-CLASS ADD-MIXIN-TABLE) (SETF (GETHASH SLOT-CLASS ADD-MIXIN-TABLE) (ENSURE-CLASS (MAKE-SYMBOL (CONCATENATE 'STRING (SYMBOL-NAME (CLASS-NAME SLOT-CLASS)) "-WITH-CLASSOF-SUPPORT")) :METACLASS (CLASS-OF SLOT-CLASS) :DIRECT-SUPERCLASSES (LIST SLOT-CLASS (FIND-CLASS 'CLASSOF-EFFECTIVE-SLOT-DEFINITION-MIXIN)))))))) (DEFMETHOD EFFECTIVE-SLOT-DEFINITION-CLASS ((CLASS CLASS-SUPPORTING-CLASSOF-SLOTS) &REST INITARGS) (IF (GETF INITARGS ':PER-SUBCLASS) (ADD-CLASSOF-EFFECTIVE-MIXIN (CALL-NEXT-METHOD)) (CALL-NEXT-METHOD))) (DEFMETHOD INITIALIZE-INSTANCE :AFTER ((SLOT CLASSOF-EFFECTIVE-SLOT-DEFINITION-MIXIN) &REST INITARGS &KEY PER-SUBCLASS) (DECLARE (IGNORE PER-SUBCLASS))) (DEFMETHOD COMPUTE-SLOTS ((CLASS CLASS-SUPPORTING-CLASSOF-SLOTS)) (LET* ((SLOTS (CALL-NEXT-METHOD)) (DUMMY-SLOTS (LET ((OLD-DUMMYSLOTNAMES (SLOT-VALUE CLASS 'SLOTNAME-TO-DUMMYSLOTNAME)) (NEW-DUMMYSLOTNAMES 'NIL)) (PROG1 (MAPCAN #'(LAMBDA (SLOT) (IF (TYPEP SLOT 'CLASSOF-EFFECTIVE-SLOT-DEFINITION-MIXIN) (LET* ((VALUE-SLOT-NAME (OR (GETF OLD-DUMMYSLOTNAMES (SLOT-DEFINITION-NAME SLOT)) (MAKE-SYMBOL (CONCATENATE 'STRING "VALUE-OF-" (SYMBOL-NAME (SLOT-DEFINITION-NAME SLOT)) "-IN-" (SYMBOL-NAME (CLASS-NAME CLASS)))))) (VALUE-SLOT (MAKE-INSTANCE 'STANDARD-EFFECTIVE-SLOT-DEFINITION :NAME VALUE-SLOT-NAME :ALLOCATION :CLASS :INITFORM (SLOT-DEFINITION-INITFORM SLOT) :INITFUNCTION (SLOT-DEFINITION-INITFUNCTION SLOT) :TYPE (SLOT-DEFINITION-TYPE SLOT)))) (SETF (SLOT-VALUE SLOT 'VALUE-SLOT-NAME) VALUE-SLOT-NAME) (SETF (GETF NEW-DUMMYSLOTNAMES (SLOT-DEFINITION-NAME SLOT)) VALUE-SLOT-NAME) (LIST VALUE-SLOT)) 'NIL)) SLOTS) (SETF (SLOT-VALUE CLASS 'SLOTNAME-TO-DUMMYSLOTNAME) NEW-DUMMYSLOTNAMES))))) (APPEND SLOTS DUMMY-SLOTS))) (DEFMETHOD SLOT-VALUE-USING-CLASS ((CLASS STANDARD-CLASS) OBJECT (SLOT CLASSOF-EFFECTIVE-SLOT-DEFINITION-MIXIN)) (SLOT-VALUE OBJECT (SLOT-VALUE SLOT 'VALUE-SLOT-NAME))) (DEFMETHOD (SETF SLOT-VALUE-USING-CLASS) (NEW-VALUE (CLASS STANDARD-CLASS) OBJECT (SLOT CLASSOF-EFFECTIVE-SLOT-DEFINITION-MIXIN)) (SETF (SLOT-VALUE OBJECT (SLOT-VALUE SLOT 'VALUE-SLOT-NAME)) NEW-VALUE)) (DEFMETHOD SLOT-BOUNDP-USING-CLASS ((CLASS STANDARD-CLASS) OBJECT (SLOT CLASSOF-EFFECTIVE-SLOT-DEFINITION-MIXIN)) (SLOT-BOUNDP OBJECT (SLOT-VALUE SLOT 'VALUE-SLOT-NAME))) (DEFMETHOD SLOT-MAKUNBOUND-USING-CLASS ((CLASS STANDARD-CLASS) OBJECT (SLOT CLASSOF-EFFECTIVE-SLOT-DEFINITION-MIXIN)) (SLOT-MAKUNBOUND OBJECT (SLOT-VALUE SLOT 'VALUE-SLOT-NAME))) (DEFGENERIC INITIALIZE-CLASSOF-SLOT (CLASS SLOT) (:METHOD ((CLASS CLASS-SUPPORTING-CLASSOF-SLOTS) (SLOT CLASSOF-EFFECTIVE-SLOT-DEFINITION-MIXIN)))) (DEFMETHOD INITIALIZE-INSTANCE :AFTER ((CLASS CLASS-SUPPORTING-CLASSOF-SLOTS) &REST INITARGS) (DOLIST (SLOT (CLASS-SLOTS CLASS)) (WHEN (AND (TYPEP SLOT 'CLASSOF-EFFECTIVE-SLOT-DEFINITION-MIXIN) (NOT (SLOT-BOUNDP (CLASS-PROTOTYPE CLASS) (SLOT-DEFINITION-NAME SLOT)))) (INITIALIZE-CLASSOF-SLOT CLASS SLOT)))) (DEFCLASS TESTCLASS29A NIL ((X :ALLOCATION :INSTANCE) (Y :ALLOCATION :CLASS :PER-SUBCLASS T) (Z :ALLOCATION :CLASS)) (:METACLASS CLASS-SUPPORTING-CLASSOF-SLOTS)) (DEFCLASS TESTCLASS29B (TESTCLASS29A) NIL (:METACLASS CLASS-SUPPORTING-CLASSOF-SLOTS)) (LET ((INSTA1 (MAKE-INSTANCE 'TESTCLASS29A)) (INSTA2 (MAKE-INSTANCE 'TESTCLASS29A)) (INSTB1 (MAKE-INSTANCE 'TESTCLASS29B)) (INSTB2 (MAKE-INSTANCE 'TESTCLASS29B))) (SETF (SLOT-VALUE INSTA1 'X) 'X1) (SETF (SLOT-VALUE INSTA1 'Y) 'Y1) (SETF (SLOT-VALUE INSTA1 'Z) 'Z1) (SETF (SLOT-VALUE INSTB1 'X) 'X2) (SETF (SLOT-VALUE INSTB1 'Y) 'Y2) (SETF (SLOT-VALUE INSTB1 'Z) 'Z2) (SETF (SLOT-VALUE INSTB2 'X) 'X3) (SETF (SLOT-VALUE INSTB2 'Y) 'Y3) (SETF (SLOT-VALUE INSTB2 'Z) 'Z3) (SETF (SLOT-VALUE INSTA2 'X) 'X4) (SETF (SLOT-VALUE INSTA2 'Y) 'Y4) (SETF (SLOT-VALUE INSTA2 'Z) 'Z4) (LIST (SLOT-VALUE INSTA1 'X) (SLOT-VALUE INSTA1 'Y) (SLOT-VALUE INSTA1 'Z) (SLOT-VALUE INSTA2 'X) (SLOT-VALUE INSTA2 'Y) (SLOT-VALUE INSTA2 'Z) (SLOT-VALUE INSTB1 'X) (SLOT-VALUE INSTB1 'Y) (SLOT-VALUE INSTB1 'Z) (SLOT-VALUE INSTB2 'X) (SLOT-VALUE INSTB2 'Y) (SLOT-VALUE INSTB2 'Z))))
EQUAL-OK: (X1 Y4 Z4 X4 Y4 Z4 X2 Y3 Z4 X3 Y3 Z4)
(PROGN (LOAD (MERGE-PATHNAMES "mop-aux.lisp" *RUN-TEST-TRUENAME*)) (LOAD (MERGE-PATHNAMES "hash-classes.lisp" *RUN-TEST-TRUENAME*)) T)
;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/tests/mop-aux.lisp ...

;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/tests/mop-aux.lisp

;; Loading file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/tests/hash-classes.lisp ...

;; Loaded file /home/gunter/GM_LANGUAGES/AI_RESEARCH/EMA_XPA/RUN_TIME/tmp/clisp-2.45/tests/hash-classes.lisp
EQL-OK: T
(PROGN (DEFCLASS VIRTUAL-CLASS (CLASS-SUPPORTING-CLASSOF-SLOTS STANDARD-CLASS) NIL) (DEFCLASS VIRTUAL-BASE-CLASS (VIRTUAL-CLASS) ((VT-FUNCTIONS :TYPE VECTOR :ACCESSOR VTBASE-VT-FUNCTIONS) (VT-SLOT-NAME :TYPE SYMBOL :ACCESSOR VTBASE-VT-SLOT-NAME))) (DEFMETHOD VALIDATE-SUPERCLASS ((C1 VIRTUAL-CLASS) (C2 VIRTUAL-BASE-CLASS)) T) (DEFMETHOD INITIALIZE-INSTANCE ((CLASS VIRTUAL-BASE-CLASS) &REST INITARGS &KEY (DIRECT-SLOTS 'NIL)) (SETF (VTBASE-VT-FUNCTIONS CLASS) (MAKE-ARRAY 10 :ADJUSTABLE T :FILL-POINTER 0)) (SETF (VTBASE-VT-SLOT-NAME CLASS) (GENSYM "VTABLE")) (APPLY #'CALL-NEXT-METHOD CLASS :DIRECT-SLOTS (CONS (LIST ':NAME (VTBASE-VT-SLOT-NAME CLASS) ':ALLOCATION ':CLASS ':PER-SUBCLASS T ':BASE-CLASS CLASS) DIRECT-SLOTS) INITARGS)) (DEFCLASS VIRTUAL-TABLE-DIRECT-SLOT-DEFINITION (STANDARD-DIRECT-SLOT-DEFINITION CLASSOF-DIRECT-SLOT-DEFINITION-MIXIN) ((BASE-CLASS :INITARG :BASE-CLASS))) (DEFCLASS VIRTUAL-TABLE-EFFECTIVE-SLOT-DEFINITION (STANDARD-EFFECTIVE-SLOT-DEFINITION CLASSOF-EFFECTIVE-SLOT-DEFINITION-MIXIN) ((BASE-CLASS :INITARG :BASE-CLASS))) (DEFMETHOD DIRECT-SLOT-DEFINITION-CLASS ((CLASS VIRTUAL-BASE-CLASS) &REST INITARGS) (IF (GETF INITARGS ':BASE-CLASS) (FIND-CLASS 'VIRTUAL-TABLE-DIRECT-SLOT-DEFINITION) (CALL-NEXT-METHOD))) (DEFMETHOD COMPUTE-EFFECTIVE-SLOT-DEFINITION-INITARGS ((CLASS VIRTUAL-CLASS) DIRECT-SLOT-DEFINITIONS) (IF (TYPEP (FIRST DIRECT-SLOT-DEFINITIONS) 'VIRTUAL-TABLE-DIRECT-SLOT-DEFINITION) (APPEND (CALL-NEXT-METHOD) (LIST ':BASE-CLASS (SLOT-VALUE (FIRST DIRECT-SLOT-DEFINITIONS) 'BASE-CLASS))) (CALL-NEXT-METHOD))) (DEFMETHOD EFFECTIVE-SLOT-DEFINITION-CLASS ((CLASS VIRTUAL-CLASS) &REST INITARGS) (IF (GETF INITARGS ':BASE-CLASS) (FIND-CLASS 'VIRTUAL-TABLE-EFFECTIVE-SLOT-DEFINITION) (CALL-NEXT-METHOD))) (DEFUN COMPUTE-VIRTUAL-GENERIC-FUNCTION-EFFECTIVE-METHOD (GF CLASS) (MULTIPLE-VALUE-BIND (METHODS CERTAIN) (COMPUTE-APPLICABLE-METHODS-USING-CLASSES GF (CONS CLASS (MAKE-LIST (1- (LENGTH (GENERIC-FUNCTION-ARGUMENT-PRECEDENCE-ORDER GF))) :INITIAL-ELEMENT (FIND-CLASS 'T)))) (UNLESS CERTAIN (ERROR "Problem determining the applicable methods of ~S on ~S" GF CLASS)) (COMPUTE-EFFECTIVE-METHOD-AS-FUNCTION GF METHODS (CONS (CLASS-PROTOTYPE CLASS) (MAKE-LIST (1- (LENGTH (GENERIC-FUNCTION-ARGUMENT-PRECEDENCE-ORDER GF))) :INITIAL-ELEMENT NIL))))) (DEFMETHOD INITIALIZE-CLASSOF-SLOT ((CLASS VIRTUAL-CLASS) (SLOT VIRTUAL-TABLE-EFFECTIVE-SLOT-DEFINITION)) (SETF (SLOT-VALUE (CLASS-PROTOTYPE CLASS) (SLOT-DEFINITION-NAME SLOT)) (LET* ((BASE-CLASS (SLOT-VALUE SLOT 'BASE-CLASS)) (CURRENT-LENGTH (LENGTH (VTBASE-VT-FUNCTIONS BASE-CLASS))) (VTABLE (MAKE-ARRAY CURRENT-LENGTH :ADJUSTABLE T :FILL-POINTER CURRENT-LENGTH))) (DOTIMES (I CURRENT-LENGTH) (SETF (AREF VTABLE I) (COMPUTE-VIRTUAL-GENERIC-FUNCTION-EFFECTIVE-METHOD (AREF (VTBASE-VT-FUNCTIONS BASE-CLASS) I) CLASS))) VTABLE))) (DEFUN COLLECT-ALL-SUBCLASSES (CLASS) (LET ((RESULT 'NIL) (TODO (LIST CLASS))) (LOOP (UNLESS TODO (RETURN)) (LET ((LAST-TODO TODO)) (SETQ TODO 'NIL) (DOLIST (C LAST-TODO) (UNLESS (MEMBER C RESULT) (SETQ TODO (REVAPPEND (CLASS-DIRECT-SUBCLASSES C) TODO)) (PUSH C RESULT))))) (NREVERSE RESULT))) (DEFCLASS VIRTUAL-GENERIC-FUNCTION (STANDARD-GENERIC-FUNCTION) ((BASE-CLASS :TYPE CLASS :ACCESSOR VTGF-BASE-CLASS) (VT-INDEX :TYPE FIXNUM :ACCESSOR VTGF-VT-INDEX)) (:METACLASS FUNCALLABLE-STANDARD-CLASS)) (DEFMETHOD SHARED-INITIALIZE ((GF VIRTUAL-GENERIC-FUNCTION) SITUATION &REST ARGS &KEY (BASE-CLASS NIL BASE-CLASS-P)) (CALL-NEXT-METHOD) (WHEN BASE-CLASS-P (WHEN (CONSP BASE-CLASS) (SETQ BASE-CLASS (CAR BASE-CLASS))) (UNLESS (TYPEP BASE-CLASS 'CLASS) (SETQ BASE-CLASS (FIND-CLASS BASE-CLASS))) (SETF (VTGF-BASE-CLASS GF) BASE-CLASS) (SETF (VTGF-VT-INDEX GF) (OR (POSITION GF (VTBASE-VT-FUNCTIONS BASE-CLASS)) (LET ((INDEX (VECTOR-PUSH-EXTEND GF (VTBASE-VT-FUNCTIONS BASE-CLASS))) (VT-SLOT-NAME (VTBASE-VT-SLOT-NAME BASE-CLASS))) (DOLIST (CL (COLLECT-ALL-SUBCLASSES BASE-CLASS)) (LET ((CL-PROTO (CLASS-PROTOTYPE CL))) (ASSERT (= (FILL-POINTER (SLOT-VALUE CL-PROTO VT-SLOT-NAME)) INDEX)) (VECTOR-PUSH-EXTEND '#:NOT-YET-UPDATED (SLOT-VALUE CL-PROTO VT-SLOT-NAME)))) INDEX)))) GF) (DEFUN UPDATE-VIRTUAL-GENERIC-FUNCTION (GF &OPTIONAL (CLASS (VTGF-BASE-CLASS GF))) (LET ((VT-SLOT-NAME (VTBASE-VT-SLOT-NAME (VTGF-BASE-CLASS GF))) (VT-INDEX (VTGF-VT-INDEX GF))) (DOLIST (CL (COLLECT-ALL-SUBCLASSES CLASS)) (SETF (AREF (SLOT-VALUE (CLASS-PROTOTYPE CL) VT-SLOT-NAME) VT-INDEX) (COMPUTE-VIRTUAL-GENERIC-FUNCTION-EFFECTIVE-METHOD GF CL))))) (DEFCLASS VIRTUAL-GENERIC-FUNCTION-UPDATER NIL NIL) (DEFPARAMETER *VIRTUAL-GENERIC-FUNCTION-UPDATER* (MAKE-INSTANCE 'VIRTUAL-GENERIC-FUNCTION-UPDATER)) (DEFMETHOD UPDATE-DEPENDENT ((GF VIRTUAL-GENERIC-FUNCTION) (DEPENDENT VIRTUAL-GENERIC-FUNCTION-UPDATER) &REST DETAILS) (DECLARE (IGNORE DETAILS)) (UPDATE-VIRTUAL-GENERIC-FUNCTION GF)) (DEFMETHOD INITIALIZE-INSTANCE :AFTER ((GF VIRTUAL-GENERIC-FUNCTION) &REST ARGS) (UPDATE-VIRTUAL-GENERIC-FUNCTION GF) (ADD-DEPENDENT GF *VIRTUAL-GENERIC-FUNCTION-UPDATER*)) (DEFMETHOD ADD-METHOD ((GF VIRTUAL-GENERIC-FUNCTION) (METHOD METHOD)) (LET ((<T> (FIND-CLASS 'T))) (UNLESS (EVERY #'(LAMBDA (SPECIALIZER) (EQ SPECIALIZER <T>)) (REST (METHOD-SPECIALIZERS METHOD))) (ERROR "invalid method for ~S: ~S. May only dispatch on the first argument." GF METHOD))) (UNLESS (TYPEP (FIRST (METHOD-SPECIALIZERS METHOD)) 'CLASS) (ERROR "invalid method for ~S: ~S. The specializer on the first argument must be a class." GF METHOD)) (CALL-NEXT-METHOD)) (DEFMETHOD COMPUTE-DISCRIMINATING-FUNCTION ((GF VIRTUAL-GENERIC-FUNCTION)) (LET ((VT-SLOT-NAME (VTBASE-VT-SLOT-NAME (VTGF-BASE-CLASS GF))) (VT-INDEX (VTGF-VT-INDEX GF))) (ASSERT (EQ (AREF (VTBASE-VT-FUNCTIONS (VTGF-BASE-CLASS GF)) VT-INDEX) GF)) #'(LAMBDA (FIRST-ARG &REST OTHER-ARGS) (APPLY (AREF (SLOT-VALUE FIRST-ARG VT-SLOT-NAME) VT-INDEX) FIRST-ARG OTHER-ARGS)))) (DEFCLASS TESTCLASS30A NIL NIL (:METACLASS VIRTUAL-BASE-CLASS)) (DEFCLASS TESTCLASS30B (TESTCLASS30A) NIL (:METACLASS VIRTUAL-CLASS)) (DEFCLASS TESTCLASS30C NIL NIL (:METACLASS VIRTUAL-BASE-CLASS)) (DEFGENERIC TESTGF30F (X) (:METHOD ((X TESTCLASS30A)) "f on A") (:GENERIC-FUNCTION-CLASS VIRTUAL-GENERIC-FUNCTION) (:BASE-CLASS TESTCLASS30A)) (DEFGENERIC TESTGF30G (X Y) (:METHOD ((X TESTCLASS30A) Y) (LIST "g on A" Y)) (:METHOD ((X TESTCLASS30B) Y) (LIST "g on B" Y)) (:GENERIC-FUNCTION-CLASS VIRTUAL-GENERIC-FUNCTION) (:BASE-CLASS TESTCLASS30A)) (DEFGENERIC TESTGF30H (X Y) (:METHOD ((X TESTCLASS30C) Y) (LIST "h on C" Y)) (:GENERIC-FUNCTION-CLASS VIRTUAL-GENERIC-FUNCTION) (:BASE-CLASS TESTCLASS30C)) (DEFCLASS TESTCLASS30D (TESTCLASS30B TESTCLASS30C) NIL (:METACLASS VIRTUAL-CLASS)) (DEFMETHOD TESTGF30G ((X TESTCLASS30D) Y) (LIST "g on D" Y)) (DEFMETHOD TESTGF30H ((X TESTCLASS30D) Y) (LIST "h on D" Y)) (LET ((INSTA (MAKE-INSTANCE 'TESTCLASS30A)) (INSTC (MAKE-INSTANCE 'TESTCLASS30C)) (INSTD (MAKE-INSTANCE 'TESTCLASS30D))) (LIST (TESTGF30F INSTA) (TESTGF30F INSTD) (TESTGF30G INSTA 10) (TESTGF30G INSTD 20) (TESTGF30H INSTC 30) (TESTGF30H INSTD 40))))
WARNING: The generic function
          #<STANDARD-GENERIC-FUNCTION INITIALIZE-CLASSOF-SLOT>
         is being modified, but has already been called.

WARNING: The generic function #<STANDARD-GENERIC-FUNCTION UPDATE-DEPENDENT> is
         being modified, but has already been called.
EQUAL-OK: ("f on A" "f on A" ("g on A" 10) ("g on D" 20) ("h on C" 30) ("h on D" 40))
(PROGN (DEFCLASS PERSON NIL ((NAME :INITARG :NAME :ALLOCATION :HASH :ACCESSOR PERSON-NAME) (ADDRESS :INITARG :ADDRESS :ALLOCATION :HASH :ACCESSOR PERSON-ADDRESS)) (:METACLASS HASH-CLASSES:HASH-CLASS)) (LET ((DILBERT (MAKE-INSTANCE 'PERSON :NAME "Dilbert"))) (LIST (STRING= (PERSON-NAME DILBERT) "Dilbert") (SLOT-BOUNDP DILBERT 'NAME) (SLOT-BOUNDP DILBERT 'ADDRESS) (SLOT-EXISTS-P DILBERT 'FOO) (STRING= (GETHASH 'NAME (SLOT-VALUE DILBERT 'HASH-CLASSES::HASH-SLOTS)) "Dilbert") (PROGN (REMHASH 'NAME (SLOT-VALUE DILBERT 'HASH-CLASSES::HASH-SLOTS)) (SLOT-BOUNDP DILBERT 'NAME)))))
EQUAL-OK: (T T NIL NIL T NIL)
(PROGN (DEFCLASS CLASS-BAD-SLOT NIL ((BAD-SLOT :ALLOCATION :BAD-ALLOCATION))) (MAKE-INSTANCE 'CLASS-BAD-SLOT))
[SIMPLE-ERROR]: CLOS::%INITIALIZE-INSTANCE: Invalid location NIL of slot #1=#<STANDARD-EFFECTIVE-SLOT-DEFINITION BAD-SLOT #x000333F460B8> in #<CLASS-BAD-SLOT #x000333F466A0> (check the :ALLOCATION slot option)

EQL-OK: ERROR
(LET (CONSTRUCTOR) (DEFCLASS CONSTRUCTOR NIL ((NAME :INITARG :NAME :ACCESSOR CONSTRUCTOR-NAME) (FIELDS :INITARG :FIELDS :ACCESSOR CONSTRUCTOR-FIELDS)) (:METACLASS FUNCALLABLE-STANDARD-CLASS)) (DEFMETHOD INITIALIZE-INSTANCE :AFTER ((C CONSTRUCTOR) &KEY) (WITH-SLOTS (NAME FIELDS) C (SET-FUNCALLABLE-INSTANCE-FUNCTION C #'(LAMBDA NIL (LET ((NEW (MAKE-ARRAY (1+ (LENGTH FIELDS))))) (SETF (AREF NEW 0) NAME) NEW))))) (SETQ CONSTRUCTOR (MAKE-INSTANCE 'CONSTRUCTOR :NAME 'POSITION :FIELDS '(X Y))) (LIST (STRINGP (WITH-OUTPUT-TO-STRING (*STANDARD-OUTPUT*) (DESCRIBE CONSTRUCTOR))) (FUNCALL CONSTRUCTOR)))
EQUALP-OK: (T #(POSITION NIL NIL))
(PROGN (DEFCLASS TESTGF38CLASS (STANDARD-GENERIC-FUNCTION) NIL (:METACLASS FUNCALLABLE-STANDARD-CLASS) (:DEFAULT-INITARGS :METHOD-COMBINATION (FIND-METHOD-COMBINATION (CLASS-PROTOTYPE (FIND-CLASS 'TESTGF38CLASS)) '+ 'NIL))) (DEFGENERIC TESTGF38 (X) (:GENERIC-FUNCTION-CLASS TESTGF38CLASS)) (DEFMETHOD TESTGF38 + (X) 0) T)
EQL-OK: T
(LET ((BOOK-COUNTER 0) (SALE-STATS (MAKE-HASH-TABLE :TEST 'EQUAL)) (ALREADY-CALLED 0) (REPLACING-METHOD 0)) (DEFMETHOD INITIALIZE-INSTANCE :AFTER ((O GF-ALREADY-CALLED-WARNING) &REST OPTS) (INCF ALREADY-CALLED)) (DEFMETHOD INITIALIZE-INSTANCE :AFTER ((O GF-REPLACING-METHOD-WARNING) &REST OPTS) (INCF REPLACING-METHOD)) (DEFCLASS WARE NIL ((TITLE :INITARG :TITLE :ACCESSOR TITLE))) (DEFCLASS BOOK (WARE) NIL) (DEFCLASS COMPACT-DISK (WARE) NIL) (DEFCLASS DVD (WARE) NIL) (DEFGENERIC ADD-TO-INVENTORY (OBJECT)) (DEFMETHOD ADD-TO-INVENTORY ((OBJECT WARE)) NIL) (ADD-TO-INVENTORY (MAKE-INSTANCE 'BOOK :TITLE "CLtL1")) (DEFMETHOD ADD-TO-INVENTORY ((OBJECT BOOK)) (INCF BOOK-COUNTER)) (ADD-TO-INVENTORY (MAKE-INSTANCE 'BOOK :TITLE "CLtL2")) (DEFMETHOD ADD-TO-INVENTORY ((OBJECT BOOK)) (SETF (GETHASH (TITLE OBJECT) SALE-STATS) (CONS 0 0))) (ADD-TO-INVENTORY (MAKE-INSTANCE 'BOOK :TITLE "AMOP")) (LIST BOOK-COUNTER (HASH-TABLE-COUNT SALE-STATS) ALREADY-CALLED REPLACING-METHOD))
WARNING: The generic function #<STANDARD-GENERIC-FUNCTION ADD-TO-INVENTORY> is
         being modified, but has already been called.

WARNING: The generic function #<STANDARD-GENERIC-FUNCTION ADD-TO-INVENTORY> is
         being modified, but has already been called.

WARNING: Replacing method #1=#<STANDARD-METHOD (#2=#<STANDARD-CLASS BOOK>)> in
          #<STANDARD-GENERIC-FUNCTION ADD-TO-INVENTORY>

EQUAL-OK: (1 1 2 1)
(SETF (FIND-CLASS 'CLASS-BAD-SLOT) NIL (FIND-CLASS 'WARE) NIL (FIND-CLASS 'BOOK) NIL (FIND-CLASS 'COMPACT-DISK) NIL (FIND-CLASS 'DVD) NIL (FIND-CLASS 'CONSTRUCTOR) NIL (FIND-CLASS 'PERSON) NIL (FIND-CLASS 'COUNTED1-CLASS) NIL (FIND-CLASS 'COUNTED1-RECTANGLE) NIL (FIND-CLASS 'RECTANGLE2) NIL (FIND-CLASS 'COUNTED2-CLASS) NIL (FIND-CLASS 'COUNTED2-RECTANGLE) NIL (FIND-CLASS 'COUNTER) NIL (FIND-CLASS 'COUNTED-OBJECT) NIL (FIND-CLASS 'STRUCTURE01) NIL (FIND-CLASS 'STRUCTURE02B) NIL (FIND-CLASS 'STRUCTURE03A) NIL (FIND-CLASS 'STRUCTURE03C) NIL (FIND-CLASS 'FOO135B) NIL (FIND-CLASS 'FOO135B) NIL (FIND-CLASS 'FOO133) NIL (FIND-CLASS 'FOO134) NIL (FIND-CLASS 'MY-GF-CLASS) NIL (FIND-CLASS 'OPTION-CLASS) NIL (FIND-CLASS 'TESTCLASS02A) NIL (FIND-CLASS 'TESTCLASS02B) NIL (FIND-CLASS 'TESTCLASS02C) NIL (FIND-CLASS 'OPTION-SLOT-DEFINITION) NIL (FIND-CLASS 'OPTION-SLOT-CLASS) NIL (FIND-CLASS 'TESTCLASS03A) NIL (FIND-CLASS 'TESTCLASS03B) NIL (FIND-CLASS 'TESTCLASS03C) NIL (FIND-CLASS 'TESTCLASS03D) NIL (FIND-CLASS 'EXTENDED-SLOT-DEFINITION) NIL (FIND-CLASS 'EXTENDED-SLOT-CLASS) NIL (FIND-CLASS 'TESTCLASS03E) NIL (FIND-CLASS 'TESTCLASS03E) NIL (FIND-CLASS 'TESTCLASS51) NIL (FIND-CLASS 'TESTCLASS51A) NIL (FIND-CLASS 'TESTCLASS51B) NIL (FIND-CLASS 'TESTCLASS51C) NIL (FIND-CLASS 'OPTION-GENERIC-FUNCTION) NIL (FIND-CLASS 'TESTMETHOD50) NIL (FIND-CLASS 'TESTGENERICFUNCTION50) NIL (FIND-CLASS 'TESTMETHOD51) NIL (FIND-CLASS 'TESTGENERICFUNCTION51) NIL (FIND-CLASS 'DEPENDENT05) NIL (FIND-CLASS 'TESTCLASS05) NIL (FIND-CLASS 'DEPENDENT06) NIL (FIND-CLASS 'PRIORITIZED-DEPENDENT) NIL (FIND-CLASS 'PRIORITIZED-DISPATCHER) NIL (FIND-CLASS 'PRIORITIZED-CLASS) NIL (FIND-CLASS 'TESTCLASS07) NIL (FIND-CLASS 'DEPENDENT07) NIL (FIND-CLASS 'PRIORITIZED-GENERIC-FUNCTION) NIL (FIND-CLASS 'DEPENDENT08) NIL (FIND-CLASS 'REINIT-INSTANCE-CLASS) NIL (FIND-CLASS 'REINIT-INSTANCE-OBJECT) NIL (FIND-CLASS 'VOLATILE-CLASS) NIL (FIND-CLASS 'TESTCLASS10) NIL (FIND-CLASS 'TESTCLASS10A) NIL (FIND-CLASS 'TESTCLASS10B) NIL (FIND-CLASS 'TESTCLASS10C) NIL (FIND-CLASS 'TESTCLASS10D) NIL (FIND-CLASS 'MSL-GENERIC-FUNCTION) NIL (FIND-CLASS 'NONUMBER-GENERIC-FUNCTION) NIL (FIND-CLASS 'BFS-CLASS) NIL (FIND-CLASS 'TESTCLASS13A) NIL (FIND-CLASS 'TESTCLASS13B) NIL (FIND-CLASS 'TESTCLASS13C) NIL (FIND-CLASS 'TESTCLASS13D) NIL (FIND-CLASS 'TESTCLASS13E) NIL (FIND-CLASS 'TESTCLASS13F) NIL (FIND-CLASS 'CUSTOM-DEFAULT-INITARGS-CLASS) NIL (FIND-CLASS 'TESTCLASS14) NIL (FIND-CLASS 'AUTO-ACCESSORS-2-CLASS) NIL (FIND-CLASS 'TESTCLASS15) NIL (FIND-CLASS 'TRACED-GENERIC-FUNCTION) NIL (FIND-CLASS 'DEBUGGABLE-GENERIC-FUNCTION) NIL (FIND-CLASS 'TESTCLASS16A) NIL (FIND-CLASS 'TESTCLASS16B) NIL (FIND-CLASS 'TESTCLASS16C) NIL (FIND-CLASS 'TESTCLASS16D) NIL (FIND-CLASS 'AUTO-INITARGS-CLASS) NIL (FIND-CLASS 'TESTCLASS17) NIL (FIND-CLASS 'AUTO-INITARGS-2-CLASS) NIL (FIND-CLASS 'TESTCLASS17-2) NIL (FIND-CLASS 'TESTCLASS18B) NIL (FIND-CLASS 'TESTCLASS18A) NIL (FIND-CLASS 'TESTCLASS19B) NIL (FIND-CLASS 'TESTCLASS19A) NIL (FIND-CLASS 'AUTO-ACCESSORS-DIRECT-SLOT-DEFINITION-CLASS) NIL (FIND-CLASS 'AUTO-ACCESSORS-CLASS) NIL (FIND-CLASS 'TESTCLASS20) NIL (FIND-CLASS 'EXTERNAL-SLOT-DEFINITION) NIL (FIND-CLASS 'EXTERNAL-SLOT-DEFINITION-CLASS) NIL (FIND-CLASS 'TESTCLASS22) NIL (FIND-CLASS 'EXTERNALLY-DOCUMENTED-CLASS) NIL (FIND-CLASS 'TESTCLASS23) NIL (FIND-CLASS 'EXTERNALLY-DOCUMENTED-GENERIC-FUNCTION) NIL (FIND-CLASS 'TYPECHECKING-READER-METHOD) NIL (FIND-CLASS 'TYPECHECKING-READER-CLASS) NIL (FIND-CLASS 'TESTCLASS25) NIL (FIND-CLASS 'TYPECHECKING-WRITER-METHOD) NIL (FIND-CLASS 'TYPECHECKING-WRITER-CLASS) NIL (FIND-CLASS 'TESTCLASS26) NIL (FIND-CLASS 'UNCALLABLE-GENERIC-FUNCTION) NIL (FIND-CLASS 'COUNTED27-CLASS) NIL (FIND-CLASS 'TESTCLASS27A) NIL (FIND-CLASS 'TESTCLASS27B) NIL (FIND-CLASS 'TESTCLASS52A) NIL (FIND-CLASS 'TESTCLASS52C) NIL (FIND-CLASS 'TESTCLASS52D) NIL (FIND-CLASS 'TESTCLASS52B) NIL (FIND-CLASS 'SAMPCLASS01) NIL (FIND-CLASS 'SAMPCLASS02) NIL (FIND-CLASS 'SAMPCLASS03) NIL (FIND-CLASS 'SAMPCLASS04) NIL (FIND-CLASS 'SAMPCLASS05) NIL (FIND-CLASS 'SAMPCLASS06) NIL (FIND-CLASS 'SAMPCLASS07) NIL (FIND-CLASS 'SAMPCLASS08) NIL (FIND-CLASS 'SAMPCLASS09) NIL (FIND-CLASS 'SAMPCLASS10) NIL (FIND-CLASS 'SAMPCLASS11) NIL (FIND-CLASS 'SAMPCLASS12) NIL (FIND-CLASS 'SAMPCLASS13) NIL (FIND-CLASS 'SAMPCLASS14) NIL (FIND-CLASS 'SAMPCLASS15) NIL (FIND-CLASS 'SAMPCLASS16) NIL (FIND-CLASS 'SAMPCLASS17) NIL (FIND-CLASS 'SAMPCLASS18) NIL (FIND-CLASS 'SAMPCLASS19) NIL (FIND-CLASS 'SAMPCLASS20) NIL (FIND-CLASS 'SAMPCLASS21) NIL (FIND-CLASS 'SAMPCLASS22) NIL (FIND-CLASS 'SAMPCLASS23) NIL (FIND-CLASS 'SAMPCLASS24) NIL (FIND-CLASS 'SAMPCLASS25) NIL (FIND-CLASS 'SAMPCLASS26) NIL (FIND-CLASS 'SAMPCLASS27) NIL (FIND-CLASS 'SAMPCLASS28) NIL (FIND-CLASS 'SAMPCLASS29) NIL (FIND-CLASS 'SAMPCLASS30) NIL (FIND-CLASS 'SAMPCLASS31) NIL (FIND-CLASS 'SAMPCLASS32) NIL (FIND-CLASS 'SAMPCLASS33) NIL (FIND-CLASS 'SAMPCLASS34) NIL (FIND-CLASS 'SAMPCLASS35) NIL (FIND-CLASS 'SAMPCLASS36) NIL (FIND-CLASS 'SAMPCLASS37) NIL (FIND-CLASS 'SAMPCLASS38) NIL (FIND-CLASS 'SAMPCLASS39) NIL (FIND-CLASS 'SAMPCLASS39) NIL (FIND-CLASS 'TESTGENERICFUNCTION142) NIL (FIND-CLASS 'TESTGENERICFUNCTION143) NIL (FIND-CLASS 'CUSTOM-METHOD) NIL (FIND-CLASS 'CUSTOMIZED5-GENERIC-FUNCTION) NIL (FIND-CLASS 'CUSTOMIZED6-GENERIC-FUNCTION) NIL (FIND-CLASS 'CUSTOMIZED1-GENERIC-FUNCTION) NIL (FIND-CLASS 'CUSTOMIZED2-GENERIC-FUNCTION) NIL (FIND-CLASS 'CUSTOMIZED3-GENERIC-FUNCTION) NIL (FIND-CLASS 'TYPECHECKED-SLOT-DEFINITION) NIL (FIND-CLASS 'TYPECHECKED-SLOT-DEFINITION-CLASS) NIL (FIND-CLASS 'TESTCLASS28) NIL (FIND-CLASS 'CLASS-SUPPORTING-CLASSOF-SLOTS) NIL (FIND-CLASS 'CLASSOF-DIRECT-SLOT-DEFINITION-MIXIN) NIL (FIND-CLASS 'CLASSOF-EFFECTIVE-SLOT-DEFINITION-MIXIN) NIL (FIND-CLASS 'TESTCLASS29A) NIL (FIND-CLASS 'TESTCLASS29B) NIL (FIND-CLASS 'VIRTUAL-CLASS) NIL (FIND-CLASS 'VIRTUAL-BASE-CLASS) NIL (FIND-CLASS 'VIRTUAL-TABLE-DIRECT-SLOT-DEFINITION) NIL (FIND-CLASS 'VIRTUAL-TABLE-EFFECTIVE-SLOT-DEFINITION) NIL (FIND-CLASS 'VIRTUAL-GENERIC-FUNCTION) NIL (FIND-CLASS 'VIRTUAL-GENERIC-FUNCTION-UPDATER) NIL (FIND-CLASS 'TESTCLASS30A) NIL (FIND-CLASS 'TESTCLASS30B) NIL (FIND-CLASS 'TESTCLASS30C) NIL (FIND-CLASS 'TESTCLASS30D) NIL)
EQL-OK: NIL
RUN-TEST: finished "mop" (0 errors out of 220 tests)
RUN-TEST: started #<INPUT BUFFERED FILE-STREAM CHARACTER #P"number.tst" @1>
(+ 17009115185923538769 -12047631083067675031)
EQL-OK: 4961484102855863738
(+ 12677011568664239747 3269056182420253574)
EQL-OK: 15946067751084493321
(+ 9315504781982082433 13857624532376678678)
EQL-OK: 23173129314358761111
(+ 15226508728194069537 11481952022080775416)
EQL-OK: 26708460750274844953
(+ 7461641943684774743 12249026721402718630)
EQL-OK: 19710668665087493373
(+ 1180469445886971055 -3208456171287181032)
EQL-OK: -2027986725400209977
(+ 18358552990465743315 221529797579218180385160273426219343697)
EQL-OK: 221529797579218180403518826416685087012
(+ -14819874956616484359 30498815629431206969122152847973230849)
EQL-OK: 30498815629431206954302277891356746490
(+ -11781881800334342169 112219460388643619332860331282276228017)
EQL-OK: 112219460388643619321078449481941885848
(+ 3570694277032201957 284821691832196381859344006870088122712)
EQL-OK: 284821691832196381862914701147120324669
(+ -17005463295060938595 69162171850264911722979835561124066203)
EQL-OK: 69162171850264911705974372266063127608
(+ 15647113311796203488 150750467185419235519670165664526735459)
EQL-OK: 150750467185419235535317278976322938947
(+ -14330150541101371097 -13054027994001826312503071338715966858478218093171762021549815587520723118772963817341751396703629529810372702877555022105594068768886421335353882155416908)
EQL-OK: -13054027994001826312503071338715966858478218093171762021549815587520723118772963817341751396703629529810372702877555022105594068768886435665504423256788005
(+ 7406427184711759740 -4059250217961011548005203450962458026528281798230141192186669580689721046971433745892994467792118611646113962840750314719233572760336084100766391093756252)
EQL-OK: -4059250217961011548005203450962458026528281798230141192186669580689721046971433745892994467792118611646113962840750314719233572760336076694339206381996512
(+ 8819522415901031498 7274905269237471130619913887005155660991437201841760414347836177003483932007334374478344594178179032728521106519295465031750530183363793325150672647162846)
EQL-OK: 7274905269237471130619913887005155660991437201841760414347836177003483932007334374478344594178179032728521106519295465031750530183363802144673088548194344
(+ -7242932332215698200 -10558564312909325527488520195600871241245891651644550509993750377630234801225525279855157008009255586978047154906058790342845859331159009687703010657137320)
EQL-OK: -10558564312909325527488520195600871241245891651644550509993750377630234801225525279855157008009255586978047154906058790342845859331159016930635342872835520
(+ 9794320575955609492 13380937715397052566925484435342184213544885758759259410983243841206628594840271850190097746775475837233042430565529099681550277688470325394342993771343357)
EQL-OK: 13380937715397052566925484435342184213544885758759259410983243841206628594840271850190097746775475837233042430565529099681550277688470335188663569726952849
(+ -18404048401680891243 6690884608978704096379677348142836785900717005050936986370615083929607190833180925295418079551348559691161519822750772440155040888224482801864925665484770)
EQL-OK: 6690884608978704096379677348142836785900717005050936986370615083929607190833180925295418079551348559691161519822750772440155040888224464397816523984593527
(+ -10763220363947284865 -30985722824355332972176356513316569304601382411274079243859710673739383446566598659878378034375348869471278415635671865753349734809209959160389615096293457362383744562507969316522225741589739150453090393424063226271167062127000223628785686999799282795143706407082119829140399988180879618548495395684946331608899565543458192773899200054228140747414544792128323269250618482622488195333106891323515989863192944848391405358725993695671970811097285270641251816244586360288952156538400321933146150313939864593445583603568771077260174826348411367609521412133720180359748539721570562669201065857989876521301209899829037444385)
EQL-OK: -30985722824355332972176356513316569304601382411274079243859710673739383446566598659878378034375348869471278415635671865753349734809209959160389615096293457362383744562507969316522225741589739150453090393424063226271167062127000223628785686999799282795143706407082119829140399988180879618548495395684946331608899565543458192773899200054228140747414544792128323269250618482622488195333106891323515989863192944848391405358725993695671970811097285270641251816244586360288952156538400321933146150313939864593445583603568771077260174826348411367609521412133720180359748539721570562669201065857989876521311973120192984729250
(+ -12742462236537568498 8711131313747826394504271797986775572294949693272674156076339989631171694968899228610359983845552623710580616605402899155485071497929100432998183040757832449369366844015907530612334721882095163137705867337969942902346066961718232788529860214990099385213558935023241940238638069647809530490438245386869385682221280939688108487754251075630026707075310465788398213293782900699868609660892232563106662995330591906155134237356516622436517046191466823447743155250482328613449506396571170001248589926831956459700467126756876526930443317428628239358666456771112897986098390410773312792390699312960051747534683311506465130527)
EQL-OK: 8711131313747826394504271797986775572294949693272674156076339989631171694968899228610359983845552623710580616605402899155485071497929100432998183040757832449369366844015907530612334721882095163137705867337969942902346066961718232788529860214990099385213558935023241940238638069647809530490438245386869385682221280939688108487754251075630026707075310465788398213293782900699868609660892232563106662995330591906155134237356516622436517046191466823447743155250482328613449506396571170001248589926831956459700467126756876526930443317428628239358666456771112897986098390410773312792390699312960051747521940849269927562029
(+ 9991390529516174614 7879872958436992955898278403297937595295396115022400543178444946646147916754852888072481665174663073269556311758611700754643170639645548596647557683044355930340624784190093631808382820554407595007761070026239341594197877214157118335743842022627898879376346092898666610367809537340994845045475091410516226225078052019727419030585524815982151736622865401299588936172760762386183577504972623377661437665668080131418564228642443266935225613702941906491478788336262289516199380144218708241406077806669686589734333554945412904560108150202389909124657090061223183441083590340175629756198442568877659538345749595968764873879)
EQL-OK: 7879872958436992955898278403297937595295396115022400543178444946646147916754852888072481665174663073269556311758611700754643170639645548596647557683044355930340624784190093631808382820554407595007761070026239341594197877214157118335743842022627898879376346092898666610367809537340994845045475091410516226225078052019727419030585524815982151736622865401299588936172760762386183577504972623377661437665668080131418564228642443266935225613702941906491478788336262289516199380144218708241406077806669686589734333554945412904560108150202389909124657090061223183441083590340175629756198442568877659538355740986498281048493
(+ 831234034418847630 -744676478858160349467117341859049692149463503380690495147216354303526704924280287782902146026018180364963325847811379182950159627878800024734206345960410146056000392683000433501805629464626281031086102425271022388473812300724085127447081771317912465921636737545371909901577246384446144919253141375367648958387948463576516115079816552636772639965957498569187848459747361493535081532845254971492261148968198806736512864867151355002902241562014241077734122599581732704243705918200179789271894804233542502502119523149682814025979598424744685548054183678652651244898867735764030968089217841214778606507809487462642341164)
EQL-OK: -744676478858160349467117341859049692149463503380690495147216354303526704924280287782902146026018180364963325847811379182950159627878800024734206345960410146056000392683000433501805629464626281031086102425271022388473812300724085127447081771317912465921636737545371909901577246384446144919253141375367648958387948463576516115079816552636772639965957498569187848459747361493535081532845254971492261148968198806736512864867151355002902241562014241077734122599581732704243705918200179789271894804233542502502119523149682814025979598424744685548054183678652651244898867735764030968089217841214778606506978253428223493534
(+ -6996572501442843347 -16567158719848992553565776505785820491834685475229611199353714982570065913508303466008005931649515528390057456882757990896824841386431756898386429000065518724021230756426613661219891419166146764347562529640689229693578574350948436847247856000438153789455857903402883189892697143647998643667467614427922009931545254965075041050860609824086811877108940020349157317276288348430058535959434983921323332907180869396258655826781438419383792024592535415693101119109484610789291889841197827977530804650015884500878613240443324806805475203272442094530735476095374446946252236490708915034012846683015547314889561060687692538144)
EQL-OK: -16567158719848992553565776505785820491834685475229611199353714982570065913508303466008005931649515528390057456882757990896824841386431756898386429000065518724021230756426613661219891419166146764347562529640689229693578574350948436847247856000438153789455857903402883189892697143647998643667467614427922009931545254965075041050860609824086811877108940020349157317276288348430058535959434983921323332907180869396258655826781438419383792024592535415693101119109484610789291889841197827977530804650015884500878613240443324806805475203272442094530735476095374446946252236490708915034012846683015547314896557633189135381491
(+ -8920936222630165483 -18738991973681679876688842391791783563249057933653045519186959571392922172943405646958686202208790537612746921398028331540617848217445632123805070077600768524509025758950743971128222843292926773668584735575066246660802064630842300367821042873152766467703905048558085377302000898639290554395913805527529259855535801856020623830262396582180677933562523957295341539162448074423901242873918231922121053192425691524797238343327318801359521456598967984637483081312932069399045363737622797213185099130529375169698811801965974416555301085043300426947769193582129151016159057101028336667142913854943018973494705119572045938607)
EQL-OK: -18738991973681679876688842391791783563249057933653045519186959571392922172943405646958686202208790537612746921398028331540617848217445632123805070077600768524509025758950743971128222843292926773668584735575066246660802064630842300367821042873152766467703905048558085377302000898639290554395913805527529259855535801856020623830262396582180677933562523957295341539162448074423901242873918231922121053192425691524797238343327318801359521456598967984637483081312932069399045363737622797213185099130529375169698811801965974416555301085043300426947769193582129151016159057101028336667142913854943018973503626055794676104090
(+ -243510292488206214847646757340020705642 5940577100149745132)
EQL-OK: -243510292488206214841706180239870960510
(+ 35446324064743728955945058978206455057 -6248622708755929572)
EQL-OK: 35446324064743728949696436269450525485
(+ -285342226760657637664173494795024413673 -11942737781617905307)
EQL-OK: -285342226760657637676116232576642318980
(+ 180790435817422032042321866247362452865 12401641959336396832)
EQL-OK: 180790435817422032054723508206698849697
(+ -179994871947239535956826388240542999950 13573822506399140772)
EQL-OK: -179994871947239535943252565734143859178
(+ -308198027295905163635866438671452347268 -8790069282378476990)
EQL-OK: -308198027295905163644656507953830824258
(+ -139324757925833055762410227358605285566 -190622873846936719063564661032771271922)
EQL-OK: -329947631772769774825974888391376557488
(+ 332866352618304570046318203427223999347 147978646177673305481282943528696833018)
EQL-OK: 480844998795977875527601146955920832365
(+ -39471620476300923970352914034802271156 28992893610776120142668950821916856486)
EQL-OK: -10478726865524803827683963212885414670
(+ 274120253734611965146455315763505869288 254675910805265090692978775702306142625)
EQL-OK: 528796164539877055839434091465812011913
(+ -122086811464559635596206661886176775901 287312583034687582188356355813963609701)
EQL-OK: 165225771570127946592149693927786833800
(+ 288576174771266329955482943556556984728 -57843540651903655425270706396868707777)
EQL-OK: 230732634119362674530212237159688276951
(+ -47977736580820486006305788441965482221 984809271313988066640898939725532304075331399066274624928410251834520283291912387208948664716457549646483445981126881113426109906085249657168046936670489)
EQL-OK: 984809271313988066640898939725532304075331399066274624928410251834520283291912387208948664716457549646483445981126833135689529085599243351379604971188268
(+ 21225484205143479814642328762121362291 11839789093732539327981861490012713257538550745921177905266671749716203131127256902110452504526721633943016923389974867770082516862899595554460170417713940)
EQL-OK: 11839789093732539327981861490012713257538550745921177905266671749716203131127256902110452504526721633943016923389974888995566722006379410196788932539076231
(+ -193095363331703875886398909106293703000 4389392021031719669078675478621418677903292147307684123866099084349756491860737402449105804868232530632178577388168068485304437343508442251302846768269976)
EQL-OK: 4389392021031719669078675478621418677903292147307684123866099084349756491860737402449105804868232530632178577388167875389941105639632555852393740474566976
(+ -14827657635864183514988182371035598180 -7256545787852407071411458891023580461638051949278710509801472046178301830006724297747051044450550248499056073213660185258676369175307019300952192657194576)
EQL-OK: -7256545787852407071411458891023580461638051949278710509801472046178301830006724297747051044450550248499056073213660200086334005039490534289134563692792756
(+ 54301423175725658626298504084995819705 -13385853291610595576947504757201441006088030688464261540642594993520424631577281077984278942244446266776534612440941312995898184903431893212829646845766101)
EQL-OK: -13385853291610595576947504757201441006088030688464261540642594993520424631577281077984278942244446266776534612440941258694475009177773266914325561849946396
(+ 195114404067053480147948948510253723990 -8373866462448797623435948949281383906369538962237624940506813188612614128993186653340202956656303504523161255703176374041758276069255591562198514767063594)
EQL-OK: -8373866462448797623435948949281383906369538962237624940506813188612614128993186653340202956656303504523161255703176178927354209015775443613250004513339604
(+ -308030589512186791277525017840002670741 -11922204352024596469278978325035646517433105521287613403902396944414655739824695945028308092245747333098422116078042326104667969967224788442970266049942774583538734406057081597034454910987815490244451193242377705191422489528853976486607580169986057592557285271953385769215318545520155212402919465580052078255078759756709086185424029620805084776442744700501748376290562843380642608395240491162047933014854466267084965223593172702334466729933986413870670083326499598274393380692146118979961818816348097032083332695128587696590646086980241100792624502607816103195636761141133903550454815591457829485684936036414823492160)
EQL-OK: -11922204352024596469278978325035646517433105521287613403902396944414655739824695945028308092245747333098422116078042326104667969967224788442970266049942774583538734406057081597034454910987815490244451193242377705191422489528853976486607580169986057592557285271953385769215318545520155212402919465580052078255078759756709086185424029620805084776442744700501748376290562843380642608395240491162047933014854466267084965223593172702334466729933986413870670083326499598274393380692146118979961818816348097032083332695128587696590646086980241100792624502607816103195636761141133903550762846180970016276962461054254826162901
(+ -172649878347923210775992373331623646864 22180935775581457002090790736532281654456312526625354262953960635330604551829750571440878712430708012807252279301365732385899228826740712544768476577874129759972563823209525283326887563301081200476495752033290851190327066070873711444930389093339915885090143783170994309089448293499799071372787520776773788274677288230540162485916160484352398851925328125588729604931589867889917097887951581817207079060016091919559509735997493084833476849835444339835031436580214492450731100723026312163752403946315983551266206214298679421644737804098691991631489261658890937663698502561036246447760919715595005106669653475931803053499)
EQL-OK: 22180935775581457002090790736532281654456312526625354262953960635330604551829750571440878712430708012807252279301365732385899228826740712544768476577874129759972563823209525283326887563301081200476495752033290851190327066070873711444930389093339915885090143783170994309089448293499799071372787520776773788274677288230540162485916160484352398851925328125588729604931589867889917097887951581817207079060016091919559509735997493084833476849835444339835031436580214492450731100723026312163752403946315983551266206214298679421644737804098691991631489261658890937663698502561036246447588269837247081895893661102600179406635
(+ 17539006966816771902104329685391462527 15609797782337099611892065465036826453911053690739041627254619195700021040383385710184052653282070244915503750549545390475671883312314708978681904377133928647935359080875691628246716591529028104762422990155477702994042953196747769893182153631482194578269859879402160062955490194674372351117284129320011166238130774752386987036267064693133554447596069886693581191241594745541512444806003236372840085705813835001957163976961730871756250344335996073970142337882238844723800849054637237549515249957267772181010402413375667537558243971058326641257721901094391380667244006959028327507917720426571969997513984360849930719808)
EQL-OK: 15609797782337099611892065465036826453911053690739041627254619195700021040383385710184052653282070244915503750549545390475671883312314708978681904377133928647935359080875691628246716591529028104762422990155477702994042953196747769893182153631482194578269859879402160062955490194674372351117284129320011166238130774752386987036267064693133554447596069886693581191241594745541512444806003236372840085705813835001957163976961730871756250344335996073970142337882238844723800849054637237549515249957267772181010402413375667537558243971058326641257721901094391380667244006959028327507935259433538786769416088690535322182335
(+ 244901855797156286376563377540855746602 -22138106346578776369849317622304392466030036563754663379976505966920461958652141160336156065177498990718609170201272980114106671808245437660234479124938853665375934080221740523696180221118540569603989748587853373569525751680828044059607889572522502629277877343410298879764820905044284757389006201848194571453112545228115550224254565141563427486518108434758694923122284117299374156393942906293546318323661938734959824887786185558612820887463537294120950912969343488704744978847504513710882720654330147775174336365363311173472002077960424794151168301281665765411704505095008907760396535767621855642720080219960822554492)
EQL-OK: -22138106346578776369849317622304392466030036563754663379976505966920461958652141160336156065177498990718609170201272980114106671808245437660234479124938853665375934080221740523696180221118540569603989748587853373569525751680828044059607889572522502629277877343410298879764820905044284757389006201848194571453112545228115550224254565141563427486518108434758694923122284117299374156393942906293546318323661938734959824887786185558612820887463537294120950912969343488704744978847504513710882720654330147775174336365363311173472002077960424794151168301281665765411704505095008907760151633911824699356343516842419966807890
(+ -119403662992279138748600939857239307122 26272999248235953724172008428088697264933069743507017434844709711501131900922919455931092196539942532993887162365511473221418376205773427597933886270411672062672089518774390132453916538404354895529975888201032175628249480896964400801763570333497287321002961557096975786141940970260074557095118887294558700145949117395512768347250531196100831164663613049206690894640391431616112104502483838173255614981302462548882276825096564828583591963617871547373532874400764134244496979962241959713525053686209002866840900623246072884125102845824992994967009109046451949348656842486048332953732384499190437432898387573320391878853)
EQL-OK: 26272999248235953724172008428088697264933069743507017434844709711501131900922919455931092196539942532993887162365511473221418376205773427597933886270411672062672089518774390132453916538404354895529975888201032175628249480896964400801763570333497287321002961557096975786141940970260074557095118887294558700145949117395512768347250531196100831164663613049206690894640391431616112104502483838173255614981302462548882276825096564828583591963617871547373532874400764134244496979962241959713525053686209002866840900623246072884125102845824992994967009109046451949348656842486048332953612980836198158294149786633463152571731
(+ 313963939617834410089002930298454269912 23286645405607099799151331553995799851855144387826191186590140820016670502830395945076644578998873585162998873396623634135231418574284200209367505115739462344028303923666952261030907434438322884189133236837089851688275865098623902644385995630973049587854251981548128145516004461191094062488421288607625783540996659060285661398859383778209495884203323937672739376151794507745282074538961033778823733980759695886879886017489555795079194346438911010371103435094677167286870898482214310646392174423422237727456012197253183422715313378603607058548706460095379882633958651034759773864354021315490712575535559549015858088608)
EQL-OK: 23286645405607099799151331553995799851855144387826191186590140820016670502830395945076644578998873585162998873396623634135231418574284200209367505115739462344028303923666952261030907434438322884189133236837089851688275865098623902644385995630973049587854251981548128145516004461191094062488421288607625783540996659060285661398859383778209495884203323937672739376151794507745282074538961033778823733980759695886879886017489555795079194346438911010371103435094677167286870898482214310646392174423422237727456012197253183422715313378603607058548706460095379882633958651034759773864667985255108546985624562479314312358520
(+ 2000877973959266893810594143560134441447453310844726478119781029700338468704683515329516333146806175216349912753585564808803731447160643580198590073658869 -17993015014355471903)
EQL-OK: 2000877973959266893810594143560134441447453310844726478119781029700338468704683515329516333146806175216349912753585564808803731447160625587183575718186966
(+ 5492930533666246223206322654398877802091439062008700770880939594548305919677404080859141226095489505872709347538974725998600861651942609010590873980143878 15372278140141207703)
EQL-OK: 5492930533666246223206322654398877802091439062008700770880939594548305919677404080859141226095489505872709347538974725998600861651942624382869014121351581
(+ -13405500833215428652808705089190188280715732437731292502890523313631564795139560159124390691283401484515088713758307366404145018349044148223082253439210893 -14793401891248640808)
EQL-OK: -13405500833215428652808705089190188280715732437731292502890523313631564795139560159124390691283401484515088713758307366404145018349044163016484144687851701
(+ 9945195259699924701593703207751086973468898794114625092150620088406276196469184233537941913755508476427888065765634203723512911676149274871082481174186606 8699133332160461067)
EQL-OK: 9945195259699924701593703207751086973468898794114625092150620088406276196469184233537941913755508476427888065765634203723512911676149283570215813334647673
(+ -1785165974800693006461065312083337532938610906605533088558498259067461510781028452552786542598361030690629530721209490413999022804146471920873844686294838 -13079925952361275418)
EQL-OK: -1785165974800693006461065312083337532938610906605533088558498259067461510781028452552786542598361030690629530721209490413999022804146485000799797047570256
(+ -4861207515430071951958387366611380234482792653010151054346367776006873932152600469133110239669746470475230906073865131648496652783311445471793936775767736 -9381557743227419896)
EQL-OK: -4861207515430071951958387366611380234482792653010151054346367776006873932152600469133110239669746470475230906073865131648496652783311454853351680003187632
(+ -6638723469626495957966112633999375479181736600737250559572415894485618850919815869703127084789143821420728194272094956858541960962483734293877093635361160 277811698220276334443479876776376776138)
EQL-OK: -6638723469626495957966112633999375479181736600737250559572415894485618850919815869703127084789143821420728194272094679046843740686149290814000317258585022
(+ 1983880417172931934469534542170437296262471214582817006917470485544552211448284732460451903536334682269123998240709059499894818265755197559390728940140016 -118940994129137705779355371753506018694)
EQL-OK: 1983880417172931934469534542170437296262471214582817006917470485544552211448284732460451903536334682269123998240708940558900689128049418204018975434121322
(+ -9354509264984586574958285335910611806441061705184818350015454221731287473282231343722010109181841005578131927454778025302197744540571159656556971614966757 120224841184491944160266976391113485817)
EQL-OK: -9354509264984586574958285335910611806441061705184818350015454221731287473282231343722010109181841005578131927454777905077356560048626999389580580501480940
(+ 4389359421234641412950681847970318834150108533025088077429496538447029921663033978550089607257809597829358374972237448178553189381274150213236222139873594 106674783386899772113212633712093787897)
EQL-OK: 4389359421234641412950681847970318834150108533025088077429496538447029921663033978550089607257809597829358374972237554853336576281046263425869934233661491
(+ -9319417879153488839579936799737117639058244394679644240663244688680826325564084529474537634510092069422987165268448907193562300482925125162731530249763801 192969103435503875767216559494769734726)
EQL-OK: -9319417879153488839579936799737117639058244394679644240663244688680826325564084529474537634510092069422987165268448714224458864979049357946172035480029075
(+ 1394404616168163951844558734723678125985464491792846741433683801962971891047718103736551854371207400145441134823994228143957746922511631911996296931168332 -211230038021470285136061932161632203274)
EQL-OK: 1394404616168163951844558734723678125985464491792846741433683801962971891047718103736551854371207400145441134823994016913919725452226495850064135298965058
(+ -2935941510094051560788359387128767361559188973149773593522440619832472030019457317998381634585179453958737810428870232715146002408187749944694186205812791 -1221176156661231926164756142840452419679061324806989304452215660535991083923207702827717652226257158321829748247784282139952864899457896871473184473608543)
EQL-OK: -4157117666755283486953115529969219781238250297956762897974656280368463113942665020826099286811436612280567558676654514855098867307645646816167370679421334
(+ -1338674579024795395027232680327531457830908239605718353094975139226848400289367913459076082700361212506196070727982446232782659114647371030398516119682505 -1298372177520411182435886041880377054374169787570856408996533471838082317927648953576721017727347029007573543972764860712708420553928791798580799809858729)
EQL-OK: -2637046756545206577463118722207908512205078027176574762091508611064930718217016867035797100427708241513769614700747306945491079668576162828979315929541234
(+ -2072456075229532951804023218627137969798924912365258263779029006567941400203608770518731715660383378937120213112973528605594220795605977413985543331908189 -9744489461776287963808523409593616918248399004543154581056479712028497082820841423941781438667661074968238703192056877665754560746003512076830245760254982)
EQL-OK: -11816945537005820915612546628220754888047323916908412844835508718596438483024450194460513154328044453905358916305030406271348781541609489490815789092163171
(+ -2570682164188734368809161664810917340861573482754788446510182252413437925852206735928397938304353826925422441004271229738766803460790995673395984247950088 656920705293329551826685120408221577679101260931105312141757138825917579070505267306626244216341686712802796891966598838285570807961966448181138356047523)
EQL-OK: -1913761458895404816982476544402695763182472221823683134368425113587520346781701468621771694088012140212619644112304630900481232652829029225214845891902565
(+ 7846359203342053693101523606887617345982401999003795257520576318451663998927274759872692123323796450295314377046602880394071105863527900699633560551732837 3683380639347829102597675045842249667669675715600522157867595962635108482512780509393310714588544837398923613138772339053021025559943198965234376657126821)
EQL-OK: 11529739842689882795699198652729867013652077714604317415388172281086772481440055269266002837912341287694237990185375219447092131423471099664867937208859658
(+ -11692323148567132684205145901751681947225824260005631214936266006610207543813382900867093989444659986091234552140689684476541703112098935301322850961583953 -8534276689564199122569555420819240948691777228327984555753862457592427992599992931175844172478864477440165366128106812103785256271256853749622592560655914)
EQL-OK: -20226599838131331806774701322570922895917601488333615770690128464202635536413375832042938161923524463531399918268796496580326959383355789050945443522239867
(+ -10734754884168724884333968138739681643742524619139397687680049322697740991391014196697040576174049452737571835233123127815762146577096625434481167057340772 17059878151450238567815178684522345445687980385106446646013863901583786249398194029757376950491550197185231926262467028755342392379269039238766592672298850588065335172902157386017520689203005559576263548017475991638498600879259882041932152385436968424098224966518534467302264172016376096778201462205990822825056602379115848799619564610033123837036507127427054121975400703490855123544706355545059512146550901507159940126280812512339749605195422987937677650572797378799103456094203126081464905326203083057134061673694975250599375795827437561275156235513192978645909947341297774926450637694325145427434486258223666250272)
EQL-OK: 17059878151450238567815178684522345445687980385106446646013863901583786249398194029757376950491550197185231926262467028755342392379269039238766592672298850588065335172902157386017520689203005559576263548017475991638498600879259882041932152385436968424098224966518534467302264172016376096778201462205990822825056602379115848799619564610033123837036507127427054121975400703490855123544706355545059512146550901507159940126280812512339749605195422987937677650572797368064348571925478241747496766586521439314609442534297287570550053098086446170260959538472616804596457209769462541803322821932178568330809051777056608909500
(+ 1982582032974021971225071139786536402936929744496433027195224299475980201425925452469321205602618940472354066218156609448199804973454183972974358405933935 -5591374624026484498020036332218412149978824230210339582240360391202660977358546150723165491729699122647688030937226316069237264083850854032732663284717882873051337566653841254365703461654061656817936193716386141166210237666314879751427421825450110467888973152907618520704486700443275358649289847595635931220181024199692771066498714511145489237541761266539978351840438236927937894376002981658065431416811632941197501676956304254109064936038146674412392128883565757325842468006824235119684861972224857533964558963441079998949499582965764591461900562931342373507763081479989957632695010603500633322408246084430203281475)
EQL-OK: -5591374624026484498020036332218412149978824230210339582240360391202660977358546150723165491729699122647688030937226316069237264083850854032732663284717882873051337566653841254365703461654061656817936193716386141166210237666314879751427421825450110467888973152907618520704486700443275358649289847595635931220181024199692771066498714511145489237541761266539978351840438236927937894376002981658065431416811632941197501676956304254109064936038146674412392128883565755343260435032802263894613722185688454597034814467008052803725200106985563165536448093610136770888822609125923739476085562403695659868224273110071797347540
(+ 11532228364136654310006206557545352284448588590560137249197311142901246089838098630841794341370689745410654263817911440601934362503092628725755210859171724 -25776236925500995542036591604259749301547568770017466769502569415611770276300787105037848049555500555975152877716727294374436703766730618054071617947449695177320842403963009384468257891933593584757723535299746543328292715942626303315235241470269740287031317322772461137186093930239744879822272349431389779234805703118929710210161489122272898252221025966631463842234537744822906696719691188223105175714602909117904182229960075276443648211003011686250829474364425483901920822837775032295913486152631638908227467242772081310515646217115760180349854601959031626524004201825198439309850266508687796415478396821644422350208)
EQL-OK: -25776236925500995542036591604259749301547568770017466769502569415611770276300787105037848049555500555975152877716727294374436703766730618054071617947449695177320842403963009384468257891933593584757723535299746543328292715942626303315235241470269740287031317322772461137186093930239744879822272349431389779234805703118929710210161489122272898252221025966631463842234537744822906696719691188223105175714602909117904182229960075276443648211003011686250829474364425472369692458701120722289706928607279354459638876682634832113204503315869670342251223760164690255834258791170934621398409664574325293322849671066433563178484
(+ -2603756427337798371354526130541868239006085657393372011847827118826669474695402075575479286172808099892726251004549675772420422527946534088483901153485670 -10844269742362409682236511127219508926736627172993604953084481596070757241623728297275447608738915355190715664012379562650777199088096670239050254578284071100042116609747208178716191571268815994455064584659920497876052406993834873124981417288518101426395560764186717660091472734401090302285129741058888303693710456902635092811413971399734306158050053239768185860958896447298052082493590498954512083131068867270078638929796561440903919430094619437872896595720463663570751134804664228918188923926951933302878771189484614604311920655871182974081898031051411394311700207305532216445616083858025977851570522763537300875989)
EQL-OK: -10844269742362409682236511127219508926736627172993604953084481596070757241623728297275447608738915355190715664012379562650777199088096670239050254578284071100042116609747208178716191571268815994455064584659920497876052406993834873124981417288518101426395560764186717660091472734401090302285129741058888303693710456902635092811413971399734306158050053239768185860958896447298052082493590498954512083131068867270078638929796561440903919430094619437872896595720463666174507562142462600272715054468820172308964428582856626452139039482540657669483973606530697567119800100031783220995291856278448505798104611247438454361659
(+ -5929887196386997518766568868806997104240129372360669348628384183712406620199102166145939206783172815805659513128544493795329100599632286529420772709366102 24544958491142793859949310604465694574872439331169358241746200808802938771527900616394258199996170862256988647191747967628756772368808644819831481350919782560499270148419601775750932556119448001824346026042068416905254113155445053931789404515589532235225580737103411251232560863878948880220469490014568323308965914171394449781093816607870593225534700167342589927524232815571862258490314644577819742372918446373756857848586825568514909823940075182825283229026250682015641747568282510036326125505522447591703308661608718100933027549520132308555240654655887041040427813131621391320267698106519650611462269033902177180035)
EQL-OK: 24544958491142793859949310604465694574872439331169358241746200808802938771527900616394258199996170862256988647191747967628756772368808644819831481350919782560499270148419601775750932556119448001824346026042068416905254113155445053931789404515589532235225580737103411251232560863878948880220469490014568323308965914171394449781093816607870593225534700167342589927524232815571862258490314644577819742372918446373756857848586825568514909823940075182825283229026250676085754551181284991269757256698525343351573936300939369472548843837113512109453074508716680257867612007472108262775773902777419050979175739613129467813933
(+ -8848084327536592532063677611386811805244460767433749071435930786126721080365289638381557872263825830664387392539638767251180242665642373539064690745095464 -15917950175678012281826361248776190984758236997789474333609547749168308439513527143790323694526378056113636462939674273462177686456811495629631337058042159570336251822399402513133598701991665209363955263097315081570618652783181494594400709239428597117944511110842795526862595552977665064029517628515465251448116061875878430407784298951946811321795808932206846491091803276390661869369638950672478828532423383951689632136029256108992610781912267083149156104328033893238864631158195280554850035949666897861529711006187241710164902350100555999894332438423857208747342184052953230247487231455921360593096823760117493579248)
EQL-OK: -15917950175678012281826361248776190984758236997789474333609547749168308439513527143790323694526378056113636462939674273462177686456811495629631337058042159570336251822399402513133598701991665209363955263097315081570618652783181494594400709239428597117944511110842795526862595552977665064029517628515465251448116061875878430407784298951946811321795808932206846491091803276390661869369638950672478828532423383951689632136029256108992610781912267083149156104328033902086948958694787812618527647336478703105990478439936313146095688476821636365183970819981729472573172848440345769886254482636164026235470362824808238674712
(+ -16314775600714318471451792035636584056297958597339492996728118376578145765736873313518831390349547274517050864260054903974054712997529177834428786007341762649083404743713562157667828894017440065599882523458121037421757904691003094608420565550031561905074671735751685371533975894842331113347413787808917193134135744321547478500861021485075363990553639161661734684228250909589741380076008551020384304303171431833670236949934603973673998262066558668396388979463892768199916011368116729432353268535563246463324517035331079693172060671712718486388759443825620676228470068291448236914050793177812037679396721657020438979754 12553426083939460917)
EQL-OK: -16314775600714318471451792035636584056297958597339492996728118376578145765736873313518831390349547274517050864260054903974054712997529177834428786007341762649083404743713562157667828894017440065599882523458121037421757904691003094608420565550031561905074671735751685371533975894842331113347413787808917193134135744321547478500861021485075363990553639161661734684228250909589741380076008551020384304303171431833670236949934603973673998262066558668396388979463892768199916011368116729432353268535563246463324517035331079693172060671712718486388759443825620676228470068291448236914050793177812037679384168230936499518837
(+ 20637030084881771176788188367974505419050866216433677435050410899110162793040751338330447574748263391136356400036001988938659722098883893353523409458775455519257672423829361150611806294256710309281788819450225670112435352092313483086404714074567539245791066202051788986426960935796927738180831688497683293306590464598379493141645539253898709000874685535467854788184424886911457134522632486730390913239660179785071885982403741669161655812015114272497907946919026898579927936299607156006210124954460880383605958519412435713868501997649784658832599101777001703519408664662715322044086646014163774269660274683400619225321 11620128128044940816)
EQL-OK: 20637030084881771176788188367974505419050866216433677435050410899110162793040751338330447574748263391136356400036001988938659722098883893353523409458775455519257672423829361150611806294256710309281788819450225670112435352092313483086404714074567539245791066202051788986426960935796927738180831688497683293306590464598379493141645539253898709000874685535467854788184424886911457134522632486730390913239660179785071885982403741669161655812015114272497907946919026898579927936299607156006210124954460880383605958519412435713868501997649784658832599101777001703519408664662715322044086646014163774269671894811528664166137
(+ -9838804688358141062268493389453191808060717708062736103828856866310283812230958467655270667206937622979717683919584610288962829724022506216738929136418489468786902364550847498615864720240589837282441807174290461916292258263929411081218952357662703079709351365960916688275651864441386750529258343003652300629003597744958152243494244227986280506395347894285277364095898602965258114321853474000520432831298793365139040664543928707100657375292032051256485942532600998813627925626928634068613637417702688610315924917761411247617905738119218110678854564441914784262998574445847209847985439514580300936248281049628734475702 2380166482232871816)
EQL-OK: -9838804688358141062268493389453191808060717708062736103828856866310283812230958467655270667206937622979717683919584610288962829724022506216738929136418489468786902364550847498615864720240589837282441807174290461916292258263929411081218952357662703079709351365960916688275651864441386750529258343003652300629003597744958152243494244227986280506395347894285277364095898602965258114321853474000520432831298793365139040664543928707100657375292032051256485942532600998813627925626928634068613637417702688610315924917761411247617905738119218110678854564441914784262998574445847209847985439514580300936245900883146501603886
(+ -30961575335426221869515496362216292453766907587859856766456625722888557357647164641922707199324601608700561081422636642523431947551124957385652791834855425829101761914145137205962610515642614866296480715893528289170482422505734612327038754622917335073993027434927547277037587173529054849390646376806910407207016292483185533697336599641898250465186168797820802225861771331652801064811222606773495565340386327294310913503461903243119204619412324538886439122443769008953829820425376589389335553937319588224864611583436327810214798652896733118881040503785110481197462772022447173744898802421806800203373153221004361953729 -10586442965055062759)
EQL-OK: -30961575335426221869515496362216292453766907587859856766456625722888557357647164641922707199324601608700561081422636642523431947551124957385652791834855425829101761914145137205962610515642614866296480715893528289170482422505734612327038754622917335073993027434927547277037587173529054849390646376806910407207016292483185533697336599641898250465186168797820802225861771331652801064811222606773495565340386327294310913503461903243119204619412324538886439122443769008953829820425376589389335553937319588224864611583436327810214798652896733118881040503785110481197462772022447173744898802421806800203383739663969417016488
(+ 8835746018617511846981408800319983340292665114153404569022025834059427359831684523399830234196625160662387716033871154398104436720494608541518837969397374272734698261557358249258503982414578618525420572597611597792132117034895074841909295420434392963714805547538976612884853497014341345150095544449860198192757839489063747595073430612069212219930749783824683135433987509303139260133564905961552149844964215891730262218278214035649706577154652729844092199333026620127958228847111442161350881527928460177763370427262298116900358910460957772350452949782281117704005514462730290063772968929608448642592954601418753021512 -12227722924075527556)
EQL-OK: 8835746018617511846981408800319983340292665114153404569022025834059427359831684523399830234196625160662387716033871154398104436720494608541518837969397374272734698261557358249258503982414578618525420572597611597792132117034895074841909295420434392963714805547538976612884853497014341345150095544449860198192757839489063747595073430612069212219930749783824683135433987509303139260133564905961552149844964215891730262218278214035649706577154652729844092199333026620127958228847111442161350881527928460177763370427262298116900358910460957772350452949782281117704005514462730290063772968929608448642580726878494677493956
(+ -5455184800550144006991157215735481579353213544152145628297990102571936052187486515129266239245491863623978659179559754999567936067584384479787934704340911556625153536160778495579370425428019248950494107696016864499055854257192071541354806671987402367524770228296322497224645429524493838356022616251290117624472061673033274133156467148770562815676767117605001434288573911556053311048284534341905722947046607192815465807736361991479044698448267471087552952494477144251510778491315012457514838113324210534577956298926109164909779987221094000880908857594198276812276890284008572664102792405452379662935026125770444036994 -7349798942312432150)
EQL-OK: -5455184800550144006991157215735481579353213544152145628297990102571936052187486515129266239245491863623978659179559754999567936067584384479787934704340911556625153536160778495579370425428019248950494107696016864499055854257192071541354806671987402367524770228296322497224645429524493838356022616251290117624472061673033274133156467148770562815676767117605001434288573911556053311048284534341905722947046607192815465807736361991479044698448267471087552952494477144251510778491315012457514838113324210534577956298926109164909779987221094000880908857594198276812276890284008572664102792405452379662942375924712756469144
(+ 27233955893140063612427006607965940109569052437681267421929959186535416115028420267622879017163568256526042146282241931623674996867133390355390677118211537487769195270234259640386625552763891339073878417517169618832945750393661600092643257470064376916337734385887099957095417541169462231630821139075814859604097878094729685589777579267192538715202397220666651307185763054526407234767132218634060693076054116575833737797189157152326979078121760900891899319809724675232853322526718686306470372869701173824664984405178677187081936624687293494821338781534163633206006387449585716391843039459733925494003066841874935048611 -66646390577667468207341453008390168215)
EQL-OK: 27233955893140063612427006607965940109569052437681267421929959186535416115028420267622879017163568256526042146282241931623674996867133390355390677118211537487769195270234259640386625552763891339073878417517169618832945750393661600092643257470064376916337734385887099957095417541169462231630821139075814859604097878094729685589777579267192538715202397220666651307185763054526407234767132218634060693076054116575833737797189157152326979078121760900891899319809724675232853322526718686306470372869701173824664984405178677187081936624687293494821338781534163633206006387449585716391776393069156258025795725388866544880396
(+ 15030400024888781078933103028897733817304421960545019199443871381537070197157227994520524631721701055962609956080413517776229513420814407790533237358129529547793422514837651333555776540939235592155512951229106778709351772195248438493792786143040421233061520515971787881798980515709417481015662862327435825812557205663033601853937647320838585333754027488605638576977560072206293290493215523194883494322543800546276353830683084405428005815296131527861252717516620765986589669237487765523936713749717927502645633123584240464131140829496052170285171610845098023517906586134613874506419828208611247177336492131262918439281 -164048419232636429449474429717211197442)
EQL-OK: 15030400024888781078933103028897733817304421960545019199443871381537070197157227994520524631721701055962609956080413517776229513420814407790533237358129529547793422514837651333555776540939235592155512951229106778709351772195248438493792786143040421233061520515971787881798980515709417481015662862327435825812557205663033601853937647320838585333754027488605638576977560072206293290493215523194883494322543800546276353830683084405428005815296131527861252717516620765986589669237487765523936713749717927502645633123584240464131140829496052170285171610845098023517906586134613874506255779789378610747887017701545707241839
(+ -10227062646189307616073129048534031298512434237226774743330733206156788005874968173984804649812506029813402205606562016228122184161577517837608957023376079537037472977098465137152327215807765130656192272994478964341604278041664840636982572214751638093860605132350960802560601354006634296348422600320863531059118477125143903734159707623839282511184908969206873548650544269932394344952983661665472663102992782521888857016369837211403335306200813816060883478434441858442549261115972947741929087886423170398410216855322384956160289855500229952405068604320121652911887067414460828300146993858360430784079225137421074839819 117460076430162201914796277915447781936)
EQL-OK: -10227062646189307616073129048534031298512434237226774743330733206156788005874968173984804649812506029813402205606562016228122184161577517837608957023376079537037472977098465137152327215807765130656192272994478964341604278041664840636982572214751638093860605132350960802560601354006634296348422600320863531059118477125143903734159707623839282511184908969206873548650544269932394344952983661665472663102992782521888857016369837211403335306200813816060883478434441858442549261115972947741929087886423170398410216855322384956160289855500229952405068604320121652911887067414460828300029533781930268582164428859505627057883
(+ 27989453264793973121573869640708223239762902243991948581280654553806618470632044367386680716040316895884976837122054709584963028986161694425215067648887944710852278135008221491665079705797192389681328802747226171436158375378499411314855257919224316919346771317457123252623293612958336691335423245293660257386649100685560072354549579281852792682734916555498283053758141666658137856828164206947320523255487437004565021167276952652515632644458005291855624829941937578229983628962137595011570216766689546500517528191189928660433013004254032861383790553611840534023221000900694995707453499030166286828319347894538505334235 -59175168207571178843658955348404514921)
EQL-OK: 27989453264793973121573869640708223239762902243991948581280654553806618470632044367386680716040316895884976837122054709584963028986161694425215067648887944710852278135008221491665079705797192389681328802747226171436158375378499411314855257919224316919346771317457123252623293612958336691335423245293660257386649100685560072354549579281852792682734916555498283053758141666658137856828164206947320523255487437004565021167276952652515632644458005291855624829941937578229983628962137595011570216766689546500517528191189928660433013004254032861383790553611840534023221000900694995707394323861958715649475688939190100819314
(+ 1178650930337394440162727078866515771626896502845852711186000991913866844090831426017480263676964607121490209778220339316756171449922437605552456088105443130477974682689512446683178356259305893852096425478878588001446154476458310269704392486398646169362313605456233489086567865316333034897433650974160168545492823208575634152241341906068149887959566983066154182855136114289266802474404127414747112706158621650063987662749553991791509795764642256261917497984177610694405881831052199417235241109412927893781778469398975117797578753730248539151297798807326284978255001046995523851829184120171969918537718488250577987049 -151873924489040812813761508259707631973)
EQL-OK: 1178650930337394440162727078866515771626896502845852711186000991913866844090831426017480263676964607121490209778220339316756171449922437605552456088105443130477974682689512446683178356259305893852096425478878588001446154476458310269704392486398646169362313605456233489086567865316333034897433650974160168545492823208575634152241341906068149887959566983066154182855136114289266802474404127414747112706158621650063987662749553991791509795764642256261917497984177610694405881831052199417235241109412927893781778469398975117797578753730248539151297798807326284978255001046995523851677310195682929105723956979990870355076
(+ 28233332719950979786871881804755080223325040620170668729385709165879717973040387558150293205758215739710262749733170837042434162049732587908182282319848154049410849721309988807368466228286699721201975848741931128639324322061892706638973259354962358866000024260698793885547287093369940035337370984725857550291339492871017395328145015077506882578124550084937438336881072124376107623716831044079223921566902242543198986921476998895559488862309653154914291349588095330683589871173449191854284433182368052817373384461363574550061788800329400860372148193491004593903732351395815409821222597665222975816418433744748143385431 -43245950360315656184924888243641533635)
EQL-OK: 28233332719950979786871881804755080223325040620170668729385709165879717973040387558150293205758215739710262749733170837042434162049732587908182282319848154049410849721309988807368466228286699721201975848741931128639324322061892706638973259354962358866000024260698793885547287093369940035337370984725857550291339492871017395328145015077506882578124550084937438336881072124376107623716831044079223921566902242543198986921476998895559488862309653154914291349588095330683589871173449191854284433182368052817373384461363574550061788800329400860372148193491004593903732351395815409821179351714862660160233508856504501851796
(+ 17311283930487575047109155431670372891723312431004343097275158353815289445461275098157423001160013464866170709729134076291306322952612660169010483426086431377525432637844274608988581691477819008626983761905899834444008235608280930166913911248710072733217113558125600345343437000427963292980921009445490627620344145866648036116660335905940809860199697939729919140888034303887423527841395304960072549430314367914315102150378504502158659627719016733307736583749830415574905929299482373462584995162798576853564481617711234957058703455021082855018642616999836886763535412642684228990890160568207941504887072856663966242787 1954009743321912552050341299974626734964446274711484506734354360114801426013796892421541915293157994203607853436799102383078659985249097057923578528366737)
EQL-OK: 17311283930487575047109155431670372891723312431004343097275158353815289445461275098157423001160013464866170709729134076291306322952612660169010483426086431377525432637844274608988581691477819008626983761905899834444008235608280930166913911248710072733217113558125600345343437000427963292980921009445490627620344145866648036116660335905940809860199697939729919140888034303887423527841395304960072549430314367914315102150378504502158659627719016733307736583749830417528915672621394925512926295137425311818010756329195741691413063569822508868815535038541752179921529616250537665789992543646867926753984130780242494609524
(+ 1135960177108146621604027872788612991247811085764456406834564014092038611848908717507207251239454266163702244932570537009884467598603226302482406831131219148530146321028801515381981782506355042255201016953375149829517466449677312249611502599434850555618739830488706171667035140895674806873502543300909514568759918040129665855731078258004983486524477103833885001539135541445685573269814159175744401893663504523858005835387122082112362666991112899837534230326730196110477118156871579503345757821268248575583821695674912517830056856597644827244194658166928026249459511837772775196175188368236573504643083995409774002567 -5513982495816270388232134254127393284677692173792609278582774509636977743203029647121158805174638642867428501907786521939155900331399058909602425073976766)
EQL-OK: 1135960177108146621604027872788612991247811085764456406834564014092038611848908717507207251239454266163702244932570537009884467598603226302482406831131219148530146321028801515381981782506355042255201016953375149829517466449677312249611502599434850555618739830488706171667035140895674806873502543300909514568759918040129665855731078258004983486524477103833885001539135541445685573269814159175744401893663504523858005835387122082112362666991112899837534230326730190596494622340601191271211503693874963897891647903065633935055547219619901624214547537008122851610816644409270867409653249212336242105584174392984700025801
(+ -30369736932762868789456108597366835061749107555998091727589163626331595118680326568212941898571309672187038272915036839449380083450246957904300051802617002374912724325419651633014408152565340519439718081357147324136023867003917288524338643759680061563616479323818330115572573568245719292922176485298767387601922362893307843067637295955606642841006993776777666041277965868780958830666697755738164183356399977211227424725670822944234275611849032230010745799964550976844117943559190671369193871330514473741920389633762695829790016565565261170688485790141638094160105909405353382982945608773290740598479367828342651860878 3451570547959142767282758882796967240086418127970526029661337442068316209707489088420708984628065070358319478649952710478991064476168799556496237099109563)
EQL-OK: -30369736932762868789456108597366835061749107555998091727589163626331595118680326568212941898571309672187038272915036839449380083450246957904300051802617002374912724325419651633014408152565340519439718081357147324136023867003917288524338643759680061563616479323818330115572573568245719292922176485298767387601922362893307843067637295955606642841006993776777666041277965868780958830666697755738164183356399977211227424725670822944234275611849032230010745799964550973392547395600047904086434988533547233655502261663236666168452574497249051463199397369432653466095035551085874733030235129782226264429679811332105552751315
(+ 24749014370880469345815230363662696846133977441600857690896762642529872426102613384561609594131771018575590861342023688138502403609639138062665279129058939911797019091643704220495944170754490238422880589600838613701783818105188827633578438439212856537589855796204839275633245851474930725845096235668385012500773524750522781174430369067441632028068262240870795850561389232369373523415592833273932285308223863420210049445377497367753786125779044716949754454461623397410528064697616617917065021866397277409044449982605591256067763430930720398889239414812509701319783809830072841056369381573100589260104551934136733317845 -9461623592584966196513107657889418526847060851423069480904645009418813160370721071067349946095573698635859409908288864150475056170059858850823883834932131)
EQL-OK: 24749014370880469345815230363662696846133977441600857690896762642529872426102613384561609594131771018575590861342023688138502403609639138062665279129058939911797019091643704220495944170754490238422880589600838613701783818105188827633578438439212856537589855796204839275633245851474930725845096235668385012500773524750522781174430369067441632028068262240870795850561389232369373523415592833273932285308223863420210049445377497367753786125779044716949754454461623387948904472112650421403957363976978750561983598559536110351422754012117560028168168347462563605746085173970662932767505231098044419200245701110252898385714
(+ 19070246171469235561279483225919489206942407814032615339351735800304747459507922411906751965555240682457214768298108831815622470433175555196912899313888991765436434867025639919521068437191248198117664398275835972573354886915721765715992151871453808224011999677700078879590132676060988550961950472536029228350169237717222998397029428440792110955380302156159849645211726041489206565536560827557279129751110297078563108009278363910936720061216511798518178957070787710331228500533067546198458251241005176280410230146430275074766072259256583499095689284871987010372039977403712023630453400259082684930755893684499232318008 12330599952818018622104330691506128012101935028731995985677032980931398338453806827555760801312052792065671886621851470997557806941112316627790755867100463)
EQL-OK: 19070246171469235561279483225919489206942407814032615339351735800304747459507922411906751965555240682457214768298108831815622470433175555196912899313888991765436434867025639919521068437191248198117664398275835972573354886915721765715992151871453808224011999677700078879590132676060988550961950472536029228350169237717222998397029428440792110955380302156159849645211726041489206565536560827557279129751110297078563108009278363910936720061216511798518178957070787722661828453351086168302788942747133188382345258878426260751799053190654921952902516840632788322424832043075598645481924397816889626043072521475255099418471
(+ -20895998178036569919774658790651496115060841511658297683195804524712012347695091074325978179977718571444320688167469052862702339462089668992243209990795362064005869602003990235714500149401994013174762139297327430396441552225926368085284222509085197484452650071390132794942944512235132641643003294762547138305644086106533258432786768644384855008506026923783604514268955071498269812887794817192371944269611642901807443894686178438687102834127061425955994253034824027771176714559050403098437684091684851207513969915720607528045624635094984539637789113651579846373399975502788877555747414523231999341294756679330384323996 764238600803843266244444637050072967342049538611688895792923539838804953492110953673720766879606601435939162680753428779068917662740403667549850724878795)
EQL-OK: -20895998178036569919774658790651496115060841511658297683195804524712012347695091074325978179977718571444320688167469052862702339462089668992243209990795362064005869602003990235714500149401994013174762139297327430396441552225926368085284222509085197484452650071390132794942944512235132641643003294762547138305644086106533258432786768644384855008506026923783604514268955071498269812887794817192371944269611642901807443894686178438687102834127061425955994253034824027006938113755207136853993047041611883865464431304031711735122084796290031047526835439930812966766798539563626196802318635454314336600891089129479659445201
(+ 6243894672855694190803081952962387322599009058758027960092936187687064819462191583137945440936085088260632250436567758576422207449236613172605950116622271404444221039084346501796818945639456207912207604248991842124079786471250102192718092353598850889806607728696519257402580732995770031331187089424192803722612735557735028710899438934171272639518928194764526910590046378401600819132587804143949995694950116915803127294011661411525934100144319021440919928013617766507409909846670172516021888661284467975865076091834094160862228180625536450124272957206172214541444266874056050295270719541605687740822711659847211976891 11877496607682442993105675644902145742318375725225741293060927105303783712520284640625374957608051032540491531573337817824773543104969422017506696018037874641947740606655370938613842356322585858034851150595788166740174872996252792014218946552442572806242471174234462119454014379628228878122072189387777413014452140618318641689597452676091677588204537830401725113931418426919671512011822864583481449136550835952005765386885680701637038206002172218712504732572449659704181315669255320876647592649071711438131711904976335957846353867776093588236311654631696625859173554395714740218099921290128795607292259527492722462071)
EQL-OK: 18121391280538137183908757597864533064917384783983769253153863292990848531982476223763320398544136120801123782009905576401195750554206035190112646134660146046391961645739717440410661301962042065947058754844780008864254659467502894206937038906041423696049078902930981376856595112623998909453259278811970216737064876176053670400496891610262950227723466025166252024521464805321272331144410668727431444831500952867808892680897342113162972306146491240153424660586067426211591225515925493392669481310356179413996787996810430118708582048401630038360584611837868840400617821269770790513370640831734483348114971187339934438962
(+ -24023960171862805266003610953999097357395283354964456554686635290239019705581779621120391229617494503580661676939681517550103414632840981987397485411400553792707518662609532504246677658012933762605038799352109564432278094548068984563394926376371580465135388578139331334464060067790936072127680597181415407099723844313625277987147283697141407959289588588489162704824409673099509423520008795428217612706997355591985894255450783091681112776112997887084157623388943538145736618168104404283342039105202585543852590302154958791010622670839015475427693311663800177428904406869645066988663292128104453773413982185343111560886 -31939808827732134714870375774276102357277346245583282398423150631754622253109692213928642228787888509211781331649081002266227303203259124984426497846441848502574293640959494009564992092503141598640200823656998243767453860939156780549404892392521391484933772285520949470194562525777116137058001008184603332597820522016200623301007194309404025522056113671560767212894303567191067178003014955596425115379852712737129325098876542459702682095445350281859042779889411325882123213577906096942649941285655935053362468972482748617111598313960198743596285343178242282172686940700127068972627110105953098737923773182254460772630)
EQL-OK: -55963768999594939980873986728275199714672629600547738953109785921993641958691471835049033458405383012792443008588762519816330717836100106971823983257842402295281812303569026513811669750516075361245239623009107808199731955487225765112799818768892971950069160863660280804658622593568052209185681605366018739697544366329825901288154478006545433481345702260049929917718713240290576601523023751024642728086850068329115219354327325551383794871558348168943200403278354864027859831746010501225991980390858520597215059274637707408122220984799214219023978654842042459601591347569772135961290402234057552511337755367597572333516
(+ 14513652183174940741664411990199277445706189147726874603036586212536012746892966848269748909379750612027025331446918381470766609543142456872580466135425754204680927122749772612276850998180593344389487924747722210296498854143380696064338777945015153982467675141485724865534995199700908286263993697988986805404864429385840512740226775506122190698806967785494289035976495492863456705096841250592980439363856397663738211335801835896091823148249303370609165910779981271035234045185574995335952208702661648744928539539455138167482396767268362221492607154709559716065850417221174683768503217544145599044845325824451589309835 -12814535978730024053359592817368712576084646962861720729844389627130663192435154658607204342320327460695280260731620465435530495952836598646143907272825807563512741964987882356778796849529260646503692618525570185450780889283642116889481314560395290434301143877809550098309214046129802023655714098730144464028249594406616074059558969757405392170810220921023905546104487938441503430332099605473144930508420331873995741851604525954472341693863067199617721032815462094767522339305487934030130207039176659398466616780628644572276059410087128533031562978399689702766028716401176531098447698206272762966470643604141938670152)
EQL-OK: 1699116204444916688304819172830564869621542184865153873192196585405349554457812189662544567059423151331745070715297916035236113590305858226436558862599946641168185157761890255498054148651332697885795306222152024845717964859738579174857463384619863548166531263676174767225781153571106262608279599258842341376614834979224438680667805748716798527996746864470383489872007554421953274764741645119835508855436065789742469484197309941619481454386236170991444877964519176267711705880087061305822001663484989346461922758826493595206337357181233688461044176309870013299821700819998152670055519337872836078374682220309650639683
(+ 11356479761814008572465147431830778885327227506593483181241437802252618729479905490826767363633131720717461693888023278837835457496021519184903984385091047829540007466025527592005114414671285638168997562037691602144751434208304408870143450743278437854754504713023422097017723330207792526222436928747286558205279330508360438281011315147578105966454344087225699378388309094140949428028313539634103047841948634832398526343605363013644180832752120081735152285507591096001749463421326282317713079361827765412853023201330345752038722069405404812511739634687282327711258974520622248165974215116400638833123609666501349513623 -2451734542868054449539778460457497703609327132304922810342762480808881050209276687756391911546806187586640918078231508181876445466503459873508196878629364924241891220686182517218825181707207808769770392864734466652524094735160185556148554260517746279303022469784592528209667497664672945900929888144529727881050106027775707933311860110618130543481573815538047460723253898548348335762406437618625388229555824532715231231491787570056329865617082709588903922431713098922691537317839185452018617461891748518176708607861270770493263960554805373552348256747200291438630960804647686832667981625018361034564086859426490014044)
EQL-OK: 8904745218945954122925368971373281181717900374288560370898675321443737679270628803070375452086325533130820775809791770655959012029518059311395787506461682905298116245339345074786289232964077829399227169172957135492227339473144223313994896482760691575451482243238829568808055832543119580321507040602756830324229224480584730347699455036959975422972770271687651917665055195592601092265907102015477659612392810299683295112113575443587850967135037372146248363075877997079057926103487096865694461899936016894676314593469074981545458108850599438959391377940082036272628013715974561333306233491382277798559522807074859499579
(+ -1814184401790217165873937825605141478060935014868566665644215718762341535891730598045990231798382966074312671040257824056876679135909008140059087311700216658095793352051583071432744886316274989901835606602224927350560604355249919901932382803472476702792978322468747380191775778902733911968522382089332819162367884984027854067607561808704316828316820133400099093450636968732151876570835173932998599031643640476109466728761033062776578175554441947411139184426213290292577467587355369954997241091769769542810051228504545831588488726789173405585678190671534386784806998695797717346491308862362775748058331375692317599945 15466182953987394334491149436346080039471412309427279110582769586053943302670765125931570041904640518032832554998553018838321871748542118021556398569294085708441934948186080236498081517178574839977996802813431873543309853609838200338534343580791382510179184571852290959723696010410340740895530535423959476873857191548113125728667781953125153120447892632916574768078583174099545013854248664119997703948998871566374080719541931440495888606776561795893839624084254684939434035018741535261951124673664746010067859317726891535170781460914710499572006592206360512398012457295755926986236618644330364227754380084585899275327)
EQL-OK: 13651998552197177168617211610740938561410477294558712444938553867291601766779034527885579810106257551958519883958295194781445192612633109881497311257593869050346141596134497165065336630862299850076161196211206946192749249254588280436601960777318905807386206249383543579531920231507606828927008153334626657711489306564085271661060220144420836292131072499516475674627946205367393137283413490186999104917355231090264613990780898377719310431222119848482700439658041394646856567431386165306953883581894976467257808089222345703582292734125537093986328401534826125613205458599958209639745309781967588479696048708893581675382
(+ -27127130599753372624001250456405972983012981437652156246797208697430661165612459362971759027335854588888552031022264244768883843080959804690580574272908031271224646245152017114094021048441971097191444782106551075175878815012595015584723250801765859461211934306789890718268168352614164589637346918581658850565274510502652089457352942736418509881708568727739912127781455473660768550022762222130489047215089836402367851853412705556570667960548570630054608024914653686223423908494006675057953013815512203710764854485332282975729323105427143207127239069826750682633272289409910001698385240596625059970587393681128674617278 5719655139276246085992066702308194672442413085748146924567717361937179810269300239821879673460959112727066470468217892213025828988023367028158410455624528688729907493639908638553730770145274142147983721694721139760883483821883267129411125364089207412089113869427479340283853501026803387874124668123626271531796990801822527792189514551888019206405597994403243358155410088320317141454525417323186389587327532772638942220300149829241141659063128602316305332848477566686425551944956989370838072872906293845914921103561360871571846865478762953536949621421094416539099628942010528483544062050170673327754206501716239719529)
EQL-OK: -21407475460477126538009183754097778310570568351904009322229491335493481355343159123149879353874895476161485560554046352555858014092936437662422163817283502582494738751512108475540290278296696955043461060411829935414995331190711748455312125437676652049122820437362411377984314851587361201763222250458032579033477519700829561665163428184530490675302970733336668769626045385340451408568236804807302657627762303629728909633112555727329526301485442027738302692066176119536998356549049685687114940942605909864849933381770922104157476239948380253590289448405656266094172660467899473214841178546454386642833187179412434897749
(- 3872339191937382556 13437882608410293981)
EQL-OK: -9565543416472911425
(- 12702320881720530101 13823645380834800545)
EQL-OK: -1121324499114270444
(- 10222969257152373972 -3454292165863475982)
EQL-OK: 13677261423015849954
(- 591233951053628288 -17639978232337836611)
EQL-OK: 18231212183391464899
(- -7878405903223218778 9050739027069287469)
EQL-OK: -16929144930292506247
(- 11347120771894057376 8443917396834074370)
EQL-OK: 2903203375059983006
(- 7831959259127703467 -257470007821066702597399141202130667973)
EQL-OK: 257470007821066702605231100461258371440
(- 1092406341647857980 -325710450166845666190895573961860069495)
EQL-OK: 325710450166845666191987980303507927475
(- -4220606126689357919 73461013742902296577411907972196819778)
EQL-OK: -73461013742902296581632514098886177697
(- -5112059189225304080 334306213789148650102245018234146620793)
EQL-OK: -334306213789148650107357077423371924873
(- 3093346224554776175 -204967241927023874963787190016588249299)
EQL-OK: 204967241927023874966880536241143025474
(- -5735747638156472357 -3881750746805128137401544408305666047)
EQL-OK: 3881750746805128131665796770149193690
(- 17639095392510638323 13312205908441007415860933757605397223142073616822325142416364932887680287063250296996056787873086490231950036662943632990219865746131453861285495087665017)
EQL-OK: -13312205908441007415860933757605397223142073616822325142416364932887680287063250296996056787873086490231950036662943632990219865746131436222190102577026694
(- 16304056910692545233 1463591032326743052350022746892396184459320617971409440301562638996633667625451301419074212369365394140737678584830314878769698416417465834928609990708982)
EQL-OK: -1463591032326743052350022746892396184459320617971409440301562638996633667625451301419074212369365394140737678584830314878769698416417449530871699298163749
(- -10347586523508777315 12614325304787850623826535169596975975360455924114817820074336137897280818245940873677389644701038550150832199897314137414727161192173691528917744363375331)
EQL-OK: -12614325304787850623826535169596975975360455924114817820074336137897280818245940873677389644701038550150832199897314137414727161192173701876504267872152646
(- 16875252323587344863 -10230183557696638447600885112945653217398839137450096120772416948425622105048400944465287395231588821521217980407867153259741079758527788318592431794213674)
EQL-OK: 10230183557696638447600885112945653217398839137450096120772416948425622105048400944465287395231588821521217980407867153259741079758527805193844755381558537
(- 8574302739232756920 2945205250727759066959418729185252318153395797902208079569164623770839848878181416073351760975066439564334127158302281471631001294503759011790017443478716)
EQL-OK: -2945205250727759066959418729185252318153395797902208079569164623770839848878181416073351760975066439564334127158302281471631001294503750437487278210721796
(- -17657597319577965851 -470389901349206124503884936612357721199915776516939967013182926735009022045917047211666512521578494339222795740836335004070464944715357800461845632614015)
EQL-OK: 470389901349206124503884936612357721199915776516939967013182926735009022045917047211666512521578494339222795740836335004070464944715340142864526054648164
(- 11472336850218354926 16764018932433717867649699977474298016589762238077229911249331402108995850754999065988360217500238643747316139204767820295123085026049273617874157749889925712672510963712964034497935503076689670786498045302562704435768723916334451317158760704743066709581593570757498670622547878516907127632802801541072452593999435195637193819500375063696114131057474475407791672955417184592088612921927282233762919112197264895445408873539746256555444555901857369535350160665235184955438709679669964546134487688796078142789125799020704969226557493354453298489954288702387159956161243151013189140749021799388406290339231792790773612376)
EQL-OK: -16764018932433717867649699977474298016589762238077229911249331402108995850754999065988360217500238643747316139204767820295123085026049273617874157749889925712672510963712964034497935503076689670786498045302562704435768723916334451317158760704743066709581593570757498670622547878516907127632802801541072452593999435195637193819500375063696114131057474475407791672955417184592088612921927282233762919112197264895445408873539746256555444555901857369535350160665235184955438709679669964546134487688796078142789125799020704969226557493354453298489954288702387159956161243151013189140749021799388406290327759455940555257450
(- 12682607562584942903 32133619583510009354538204193505267426986629771080807813988708187761849276650847958886764459302043799013813125903744946349479743277662066609741649009023451783267511140245797235200413941774959851628239089013586399425314412329003636059313583335807925401822165199322334470452126484173417518861322963430951772895619791799137157183662289329901964728384697377777905235894234370773419160283767144177627084271804319157013765325677633945370597318765372346484383325176768117059688792498687750479618961541872574768601477738410497806623403054372221338126223825515939164627992974469102910882915893925327931884157735553718792115929)
EQL-OK: -32133619583510009354538204193505267426986629771080807813988708187761849276650847958886764459302043799013813125903744946349479743277662066609741649009023451783267511140245797235200413941774959851628239089013586399425314412329003636059313583335807925401822165199322334470452126484173417518861322963430951772895619791799137157183662289329901964728384697377777905235894234370773419160283767144177627084271804319157013765325677633945370597318765372346484383325176768117059688792498687750479618961541872574768601477738410497806623403054372221338126223825515939164627992974469102910882915893925327931884145052946156207173026
(- 14621880654476679971 -10075923784619510279100488003620810539888599376089081798647754628017452762406215094511315867213396543200861274584884759429891242650999761503100661310915213260386281412125687376866399124849043409890009033179987278297335571911640353059036551139958369871790768643514550179661619387008678118363266091945225880595898524898713646458647465935791224159084684209727153050053537752111696883536364966526666445737103854446009305531519860527938394412863332757413309423156200192973778629503534709731073637828912608835085933003410694216843775182940057891552358942312728978810053715387504707194992816961400377579655168106377696154728)
EQL-OK: 10075923784619510279100488003620810539888599376089081798647754628017452762406215094511315867213396543200861274584884759429891242650999761503100661310915213260386281412125687376866399124849043409890009033179987278297335571911640353059036551139958369871790768643514550179661619387008678118363266091945225880595898524898713646458647465935791224159084684209727153050053537752111696883536364966526666445737103854446009305531519860527938394412863332757413309423156200192973778629503534709731073637828912608835085933003410694216843775182940057891552358942312728978810053715387504707194992816961400377579669789987032172834699
(- -3220156644655019630 -8347829670073174550775641165362740628312221836466572623516708794243074870361401136762432100726575330214254748615114820602945887237367461962207075265579588481261313345359877816874924645801358760718027997416917747796144940020489321523749233377708490614979453376328244189926517907474704635785063100359787580409065317918203485474119227673185211436285930586838616288721370975925191964611302275354365110550116042403226844820172448647475637867255305805337047967053177320593337377763657329816935516961201488840745892529800883680912275812320160312651894919502389242002380151562481051684439333368396132543667539444686619670713)
EQL-OK: 8347829670073174550775641165362740628312221836466572623516708794243074870361401136762432100726575330214254748615114820602945887237367461962207075265579588481261313345359877816874924645801358760718027997416917747796144940020489321523749233377708490614979453376328244189926517907474704635785063100359787580409065317918203485474119227673185211436285930586838616288721370975925191964611302275354365110550116042403226844820172448647475637867255305805337047967053177320593337377763657329816935516961201488840745892529800883680912275812320160312651894919502389242002380151562481051684439333368396132543664319288041964651083
(- 11628988978410243120 21091260149209133824278525560739673446778991946138130571540201996950100883736332286627324787663044982195445635023357027423513202277912840570399895946346028843517588470258087913846945044832851780108963206182331994065720076983528527849542421619745503796476103034657238118665288185878258232226731582201217795631247916614224227701409259346052937919425072595891571572960468193421257458185693656090215937518204243652916583730260295885562094977775951577484951577581277292356830523013216949489797535362720471761788697932265967910160407593278848113303674799017334692501935041730808945554336564957621028111014116286675587727714)
EQL-OK: -21091260149209133824278525560739673446778991946138130571540201996950100883736332286627324787663044982195445635023357027423513202277912840570399895946346028843517588470258087913846945044832851780108963206182331994065720076983528527849542421619745503796476103034657238118665288185878258232226731582201217795631247916614224227701409259346052937919425072595891571572960468193421257458185693656090215937518204243652916583730260295885562094977775951577484951577581277292356830523013216949489797535362720471761788697932265967910160407593278848113303674799017334692501935041730808945554336564957621028111002487297697177484594
(- -15960716439913426281 18799211173341989380260980155501104944815245973352765317821146163884181375747259542484535639646490774929026134833947975785613727050541297797675705933339289016115326958150660323801621778641184271728990164666383865587422591755046779736996211052149338115836473967202556153668963815595875844414662034458693455631979862997316049580586739835122770408911308146605671192538040301857163633538268589024651373766021087864982140201615461513687698136663128896835597598904095187715456109340116329587986878167776146023396961265667934659006280575496363066974484893764810659481361856335795455814679851690737943592227795474197104696127)
EQL-OK: -18799211173341989380260980155501104944815245973352765317821146163884181375747259542484535639646490774929026134833947975785613727050541297797675705933339289016115326958150660323801621778641184271728990164666383865587422591755046779736996211052149338115836473967202556153668963815595875844414662034458693455631979862997316049580586739835122770408911308146605671192538040301857163633538268589024651373766021087864982140201615461513687698136663128896835597598904095187715456109340116329587986878167776146023396961265667934659006280575496363066974484893764810659481361856335795455814679851690737943592243756190637018122408
(- -181065640455671431985325539445069267017 14120143334024043377)
EQL-OK: -181065640455671431999445682779093310394
(- -91295299684959299024846233061686623774 6891102275697080803)
EQL-OK: -91295299684959299031737335337383704577
(- -252582289949155881579950873916766853744 883304029266526072)
EQL-OK: -252582289949155881580834177946033379816
(- -10104159950635417603045689770006558103 17251490913777465304)
EQL-OK: -10104159950635417620297180683784023407
(- 288463495341489091297108607960869684860 -16376960611483226267)
EQL-OK: 288463495341489091313485568572352911127
(- 204661965092367792468062569536290631004 7774991291341524479)
EQL-OK: 204661965092367792460287578244949106525
(- 174559967167400201536723778015754014369 168183438971818617783400303174116396891)
EQL-OK: 6376528195581583753323474841637617478
(- -253300708624436983509156598368557395374 -77166863757693227553099778725240875400)
EQL-OK: -176133844866743755956056819643316519974
(- -38587765028356074196061530813295290944 5999161273284748726648331130480323187)
EQL-OK: -44586926301640822922709861943775614131
(- -236400856885875891058508662756360145662 222191413471626205952456600591947275777)
EQL-OK: -458592270357502097010965263348307421439
(- 212937903940173587742882129816769611096 336470165768472077447806282475185249734)
EQL-OK: -123532261828298489704924152658415638638
(- -264812595676159375893264580577855253845 -247068943830535581577267897204259299723)
EQL-OK: -17743651845623794315996683373595954122
(- -1725732715479127274526681751197327660 -2279805492899538651574406423954277869507456204136276822451602661149698386520868702017367409743272511010382761246500508887739763323997191435566266331339917)
EQL-OK: 2279805492899538651574406423954277869507456204136276822451602661149698386520868702017367409743272511010382761246500507162007047844869916908884515134012257
(- -220007189346579184019349894240059989979 9116030813176547770422918633286023943039811682891023288884273747820892639481842291616424036020927750322528731882517057595815179415042385175627374957565803)
EQL-OK: -9116030813176547770422918633286023943039811682891023288884273747820892639481842291616424036020927750322528731882517277603004525994226404525521615017555782
(- 139683266109784685815165642637380856544 5782493350903499652295971390391981928106911831248674750993968151944332845911526084530951283012280786005612601970108688202931002414214353708335212597807345)
EQL-OK: -5782493350903499652295971390391981928106911831248674750993968151944332845911526084530951283012280786005612601970108548519664892629528538542692575216950801
(- 239160165978290709841254489756277328273 5152132850125501873897264811465207492706871561577273155117982457627773151595716641409297120994045059130053034927464958986304380141364542178714472948085275)
EQL-OK: -5152132850125501873897264811465207492706871561577273155117982457627773151595716641409297120994045059130053034927464719826138401850654700924224716670757002
(- 315772704643232632782106484978382006176 -3689252327480456512393153800679864208480329729627292260734151097785848947569336194072922395859496552999163037466184616218582046814434719444842678248982224)
EQL-OK: 3689252327480456512393153800679864208480329729627292260734151097785848947569336194072922395859496552999163037466184931991286690047067501551327656630988400
(- 82735713197488344149642668226610301853 -12473025194535761005577066561696471986140205263843017221991729197337093872383371857001077050460827652296473928714097816492579684543651922277865558518876774)
EQL-OK: 12473025194535761005577066561696471986140205263843017221991729197337093872383371857001077050460827652296473928714097899228292882031996071920533785129178627
(- 63472235942371758467270296983419551089 -7866520408163137968600317959735552406794938230345293650627055135268307695389903092041438746530663083967329111232451176014649873249349534808700483360707382397988918594143264031213181385790969271527978925616276399184489007642142996251807222768397530946779296600805549276528669432847672215219943599871223372831999133812100481632278022608906065923652981249057846548868473376683960144009223047416366697876553049362242497225174860431577034875737250719899362881567590934060155436179316063810148362442197071642183371654740845983314705249832168923202400873364289483910868432511677656218937984504828452980698439495961392749596)
EQL-OK: 7866520408163137968600317959735552406794938230345293650627055135268307695389903092041438746530663083967329111232451176014649873249349534808700483360707382397988918594143264031213181385790969271527978925616276399184489007642142996251807222768397530946779296600805549276528669432847672215219943599871223372831999133812100481632278022608906065923652981249057846548868473376683960144009223047416366697876553049362242497225174860431577034875737250719899362881567590934060155436179316063810148362442197071642183371654740845983314705249832168923202400873364289483910868432511677656219001456740770824739165709792944812300685
(- -284018520801241078671538235859630240269 -5529748211779294240854894683633173443789067073881249229985499707296461959655918837051490512357840133495603640185675483847478587849599477020706893805485599954539589062532211767295361120129440287144117406526027552427750375526095104163474774446716012360038076376952619723549765229763943818011605991300849052030142173100367582906381575666628005795818339029350398340616624791399526643991489247585213423174803853961438830286737553181353007081438503238779644371968004083452645077716952159339978836669723137339898471600546912430030276920763475622536295311290657163861398519747560279682401429552174530714298081464588450842581)
EQL-OK: 5529748211779294240854894683633173443789067073881249229985499707296461959655918837051490512357840133495603640185675483847478587849599477020706893805485599954539589062532211767295361120129440287144117406526027552427750375526095104163474774446716012360038076376952619723549765229763943818011605991300849052030142173100367582906381575666628005795818339029350398340616624791399526643991489247585213423174803853961438830286737553181353007081438503238779644371968004083452645077716952159339978836669723137339898471600546912430030276920763475622536295311290657163861398519747560279682117411031373289635626543228728820602312
(- -171812101820192353275910956459431262142 11401673303315394031728944442295528921842441448377692701102691446500671963119794838260543877466107345474902885032629120622020177051592733148817057943390167845763358795044702079370835841331467130719834250134674578757640577473495192331790176510774020541399177011446664359866582351045889299070080989390219063301859447807907203943168891690028442190793548699886572720360741686677780644932612683647303776634496172481504075784427704287335805355801794320914944330891519283383694196486986108936857630373759865062862204149003789919218681050221366182434949855054760827976853645027544605870235074909890698574792562001595287630131)
EQL-OK: -11401673303315394031728944442295528921842441448377692701102691446500671963119794838260543877466107345474902885032629120622020177051592733148817057943390167845763358795044702079370835841331467130719834250134674578757640577473495192331790176510774020541399177011446664359866582351045889299070080989390219063301859447807907203943168891690028442190793548699886572720360741686677780644932612683647303776634496172481504075784427704287335805355801794320914944330891519283383694196486986108936857630373759865062862204149003789919218681050221366182434949855054760827976853645027544605870406887011710890928068472958054718892273
(- -243638660221338112796448050030955119997 -32214383478080953899491069562585164652288236626686985994647827422262342469970423345510055643470262764747630363450204055220886177681745412924556264758690138113272748656941509018308925555317383307928766093730384151056027828368474245304944063213926492719166086055718735381341569379006804236876950175122702350552198046290567043195716369691666842524594399597143281611765509174168738392889075290806378316647736667077047013214732267367344808724905727602402784621437141760604478301412768904784950365257469208085143467704875589485635570084387755189599791857576855454112556762755762408826226326879491415484319411662301650468948)
EQL-OK: 32214383478080953899491069562585164652288236626686985994647827422262342469970423345510055643470262764747630363450204055220886177681745412924556264758690138113272748656941509018308925555317383307928766093730384151056027828368474245304944063213926492719166086055718735381341569379006804236876950175122702350552198046290567043195716369691666842524594399597143281611765509174168738392889075290806378316647736667077047013214732267367344808724905727602402784621437141760604478301412768904784950365257469208085143467704875589485635570084387755189599791857576855454112556762755762408825982688219270077371522963612270695348951
(- -126332081511349770866908261827634312283 31497387372874133218238910173378055967910722258532087598053588964599898753455370244114881403020152175272452951858324158004662566613339529101292284073176382818309096142522412043073218657587031893636358434796164444941535757484360125937835242214199979245499374972029624710574236962978707708765065292759037309958875006017588240959790355958632745299212449602934380927677385974488564420550408281673927387615657765312151272852486266800510090872812376232597458154951925709496664568906509814364388823105469855516803225244972466742963619633076158367569109107733990828830121948130235858799809203410103682003414364238243553515261)
EQL-OK: -31497387372874133218238910173378055967910722258532087598053588964599898753455370244114881403020152175272452951858324158004662566613339529101292284073176382818309096142522412043073218657587031893636358434796164444941535757484360125937835242214199979245499374972029624710574236962978707708765065292759037309958875006017588240959790355958632745299212449602934380927677385974488564420550408281673927387615657765312151272852486266800510090872812376232597458154951925709496664568906509814364388823105469855516803225244972466742963619633076158367569109107733990828830121948130235858799935535491615031774281272500071187827544
(- 219979452670016849533060110266815720199 3900115048441644499033281842448985956665866771934663536385503692700586024397767816761943054115584011069129310718114010862034970648115172218305599786238607524420973404711138276011261135403209178420948996472570042497859127324157786975578751148348046315727383390370594954695454631662061021971027739429505825056455676233533511412589936865597034183410893428831818716136282201523804692574965779771140320669492229416601369453681528301333865290947482219850340728455965391492610516639151652595539203632139883064874286555941718154489936421274731413286355640404192677546692090304496817063325766995908926108582896362623757323811)
EQL-OK: -3900115048441644499033281842448985956665866771934663536385503692700586024397767816761943054115584011069129310718114010862034970648115172218305599786238607524420973404711138276011261135403209178420948996472570042497859127324157786975578751148348046315727383390370594954695454631662061021971027739429505825056455676233533511412589936865597034183410893428831818716136282201523804692574965779771140320669492229416601369453681528301333865290947482219850340728455965391492610516639151652595539203632139883064874286555941718154489936421274731413286355640404192677546692090304496817063105787543238909259049836252356941603612
(- 585873325961105129055557280004608765382109855007674169500308242261038324959928764512890600512016613154122762798104714052579267789493643522748210870974797 -1855792162818946202)
EQL-OK: 585873325961105129055557280004608765382109855007674169500308242261038324959928764512890600512016613154122762798104714052579267789493645378540373689920999
(- -3026050092505200332789765255096964033685859497096213532090644235603419347590512426830117415222669642053441336442247132403948783838396746566100575461602162 18009081534399282710)
EQL-OK: -3026050092505200332789765255096964033685859497096213532090644235603419347590512426830117415222669642053441336442247132403948783838396764575182109860884872
(- -11124638695599888462310706699308855434715251048597328942409434888923094027849143412724699165971400546471660924330688750607774759764580214088920441698992069 -4827559068742614723)
EQL-OK: -11124638695599888462310706699308855434715251048597328942409434888923094027849143412724699165971400546471660924330688750607774759764580209261361372956377346
(- 4950293428090696283711882613183655723616682297360442241017758383241177602498881186549809051670562038601658285833496694108818253845693871318067007752043113 17597810481352184048)
EQL-OK: 4950293428090696283711882613183655723616682297360442241017758383241177602498881186549809051670562038601658285833496694108818253845693853720256526399859065
(- -5733769947958740467479139247420201065087494801172241127791526686385518674532830661413722661802560247463032020003355494614502034002778775472609306735864748 -3892174127829225880)
EQL-OK: -5733769947958740467479139247420201065087494801172241127791526686385518674532830661413722661802560247463032020003355494614502034002778771580435178906638868
(- 8320894458193427045187598554188178307429755504967209344418448624882517461814957461249858674758807195827056824653471934409067429988676743031117653237018365 -12861394200627120797)
EQL-OK: 8320894458193427045187598554188178307429755504967209344418448624882517461814957461249858674758807195827056824653471934409067429988676755892511853864139162
(- 13033402737450594044106258936169013897237368708138118260402180886096095497725071502601849887805439844083105685971731015312020770945603825344926844435936044 236396022362585261770052671762207864597)
EQL-OK: 13033402737450594044106258936169013897237368708138118260402180886096095497725071502601849887805439844083105685971730778915998408360342055292255082228071447
(- 12170667278114656173974716189098171384426379753661081475485441559687661443127166543908925678856145097632475832903680828294561265828775791256812588754280222 -276673555533799047589626400978981416789)
EQL-OK: 12170667278114656173974716189098171384426379753661081475485441559687661443127166543908925678856145097632475832903681104968116799627823380883213567735697011
(- -12755594876262399860618168642932232021734362385933348033134635580177924615701078617214764415318471507488803810365565826229169313660087149542130819663319659 -157671440495648010763311068579191828684)
EQL-OK: -12755594876262399860618168642932232021734362385933348033134635580177924615701078617214764415318471507488803810365565668557728818012076386231062240471490975
(- 8664063140780163008577373335591938905735059211566906376953760862047748343846207426667781783874718320339071949903053785280430612875488847226724390758938740 54361107931665215623681874454167019934)
EQL-OK: 8664063140780163008577373335591938905735059211566906376953760862047748343846207426667781783874718320339071949903053730919322681210273223544849936591918806
(- 3699576825118349347309026261327541749454660339251578894574483235547605815416603169143590292164644149607672871236942391817131531474661895913650810587431606 -50508350367572393968128467319633674717)
EQL-OK: 3699576825118349347309026261327541749454660339251578894574483235547605815416603169143590292164644149607672871236942442325481899047055864042118130221106323
(- 5626548453644136572409808769267055618695663227750732922630041368983808478347120771651822300668480671524976882745306794511840379704578900504784165956486985 170502882789371639987361620116696459267)
EQL-OK: 5626548453644136572409808769267055618695663227750732922630041368983808478347120771651822300668480671524976882745306624008957590332938913143164049260027718
(- -10859007735074693411217019392659638207496329895257318665547454149984863458541990037760564769787816800806064437172810158051442267508476778676439633382657890 -7558060977666720080449823996328496253877735754811271086853901493753796001778345391546991917892931500169890406340928835457635973812901681485438886367096185)
EQL-OK: -3300946757407973330767195396331141953618594140446047578693552656231067456763644646213572851894885300636174030831881322593806293695575097191000747015561705
(- 9842028993407961669727766131360795288615020071102475108883839785397865740828387076847892646234215787999498419839351470775471313077046438080666908734795616 8259939762466350877481193620364896193464602165170783019804380181692322874550956777598992104871440502758410340359413403619753571535498118388286469082729503)
EQL-OK: 1582089230941610792246572510995899095150417905931692089079459603705542866277430299248900541362775285241088079479938067155717741541548319692380439652066113
(- 3122315115429970622394662815735050825423438028108957393747131991771456957037829402044934484343765915727397519247940959221091465331254497476137639859816450 10737995515603450913722681305571315249864367824351372254572936648132763616823019940208526402092654554035074813865303483747097673960803093638463005072804384)
EQL-OK: -7615680400173480291328018489836264424440929796242414860825804656361306659785190538163591917748888638307677294617362524526006208629548596162325365212987934
(- 11618335890332522671268040181306950825004789685088262996478365976802329054158653675768163009290064139158450983598701977173152384425333441365287895694522192 -13130287008197231017935223399369698658354829835061356451363818961959486828237111511740029441613108087354987794332115218978284937263725126538295501305403242)
EQL-OK: 24748622898529753689203263580676649483359619520149619447842184938761815882395765187508192450903172226513438777930817196151437321689058567903583396999925434
(- -4829477140897377009195646150061276059814366801005389903693533021027427566117360765323647260121062827801190746646296803957067548167571028717513392985791293 10716557117391614298810040587314742187092120526669273567183969821384063434473189717686678450880765426943205955814024872764413373364846268902370055526485180)
EQL-OK: -15546034258288991308005686737376018246906487327674663470877502842411491000590550483010325711001828254744396702460321676721480921532417297619883448512276473
(- 1560421244904974852620371975782132605421448226892487453928759432083522187778803424020804578027100625536441377609275030418285893555753560195716001014786650 -11797558308994912054526619290334311429749533070145154703018977152548370444659962978040151671210413666186432921816690953994784423526183449271023503069393845)
EQL-OK: 13357979553899886907146991266116444035170981297037642156947736584631892632438766402060956249237514291722874299425965984413070317081937009466739504084180495
(- -7701347923966912534344428538744620884561375267012102797292378941649984539207353887059064943586048644516121387166836442084007442716291792933061162738380376 5290969389374230541016502448421359606252744677802288901830045825873182202718418905866055323957065013553046698199939002159982374580735362593037515863844280108947533575824820196689891621498006303535207762625068798755031433921940066544809959896067184147997503827988613858484669349726945188167613248195147619673963531690938913245110754715059472477991342216448470339490385593605806518967792963339193162830698488489270925945408227996742278697477358272529028932771642478870844024835907350391770605391526921411004262446196112836319091260967898895009427182171643279100998182191816962677328417390867021108292139204864164048286)
EQL-OK: -5290969389374230541016502448421359606252744677802288901830045825873182202718418905866055323957065013553046698199939002159982374580735362593037515863844280108947533575824820196689891621498006303535207762625068798755031433921940066544809959896067184147997503827988613858484669349726945188167613248195147619673963531690938913245110754715059472477991342216448470339490385593605806518967792963339193162830698488489270925945408227996742278697477358272529028932771642486572191948802819884736199144136147805972379529458298910128698032910952438102363314241236586865149642698313204129513770501398309737400085072266026902428662
(- 9733743430220591762422540139212426729307515492818443460852332805653889275463385649305231919846970974905736816260992940027028218064265519723018527155353151 -29407855293830047984154639411082591337348779678279017647951764366455421210163494489475996514661359700145916243499452007595041420522019751347743105082745321262372977262641488359297167392118038994384136863563032667040671405618315550876997904307423736276844997706938133936081058323434935833614475654922773162140266784233792639117145232791514703532554345086520312281500696798706889025860427142771458666376271994240028586899592254884476941388776984078337603148583453255593120138178690189726206775893096279000909079330468718593887702543025737308336025198677457129910473491269839827087491228569718246503140134413881896746751)
EQL-OK: 29407855293830047984154639411082591337348779678279017647951764366455421210163494489475996514661359700145916243499452007595041420522019751347743105082745321262372977262641488359297167392118038994384136863563032667040671405618315550876997904307423736276844997706938133936081058323434935833614475654922773162140266784233792639117145232791514703532554345086520312281500696798706889025860427142771458666376271994240028586899592254884476941388776984078337603148583453265326863568399281952148746915105523008308424572148912179446220508196915012771721674503909376976881448397006656088080431255597936310768659857432409052099902
(- -276731217243271862683214238489380950428392903790808046630969592255272629537001990355375434170910931115552132394269672247616298060929507021008951190291387 100289083769237476480554074865040988004216167545459907207847010762380733541100608695693297149249375537088329431700364201275915507683345148401600569951338052791424407090330310974243070931256108167365334162914085216447196038922091547331474328250886730614683299908003398886233860613008266913065047699535081030427106800418656336608005860846045905149012346378286475449307630537665901621055008855374148058291266835796203075976592585729940879567246284967856356337849150102261744547461816282538319258966892339056695718919291240188920586288417893106046698069355647145603908383687239983874164793005765733782432717429040621674)
EQL-OK: -100289083769237476480554074865040988004216167545459907207847010762380733541100608695693297149249375537088329431700364201275915507683345148401600569951338052791424407090330310974243070931256108167365334162914085216447196038922091547331474328250886730614683299908003398886233860613008266913065047699535081030427106800418656336608005860846045905149012346378286475449307630537665901621055008855374148058291266835796203075976592585729940879567246284967856356337849150378992961790733678965752557748347842767449599509727337871158512841561047430108037053444789818056535023935819634253546412409303826663289453726380230913061
(- 8505070389896098095621766692413480203366379968950158493268895987250690600795955783113900096527432416791184386061684833478921638080978014176210898461637606 -16410711613672171332126342754193842244915477287016327757357714698751777287458963458682349581881560880814595167244857846847668988374679430572782121021084683986742283012573569894084166107235597351093334125816075658348307113218478800035703971671113417712009419861470917307849916674203301497919242668373376352901312309673053175315189945730756118172940886476343290174961420986113367531057713782438374928471960914578818951372282574754612716278516397754222547513576728677459134022062202283647690649100602260948409511070624300011106517649666031530376191755817891213910847547809248990517666613043010292627100428536737652546738)
EQL-OK: 16410711613672171332126342754193842244915477287016327757357714698751777287458963458682349581881560880814595167244857846847668988374679430572782121021084683986742283012573569894084166107235597351093334125816075658348307113218478800035703971671113417712009419861470917307849916674203301497919242668373376352901312309673053175315189945730756118172940886476343290174961420986113367531057713782438374928471960914578818951372282574754612716278516397754222547513576728685964204411958300379269457341514082464314789480020782793280002504900356632326331974869717987741343264338993635052202500091964648373605114604747636114184344
(- -12618010259109779267590315037969998053964054382853891516547435925972388025118492931596200697357628900783311183940584302426381939302632641549019984810957030 -30500906828861638007306362171210132987300359439962044769219457463653547834815716264412200930088623097530758080891972640000479943534665059199377729854850415258341537838023739964147532129877743393965857370995558748807382396090020006195649251292012405690725917389684473999400905751109361754679152179983739269026226054012963756892488872262522587481931950410504651253101938824790285623805566521723062029033001745636445860437154344665483641408727637784045030118212476306906983993748299291616038887011943864441807818857508443930272872365334665976442185494702520760793786640113779099219233665607521784524244604432396247693263)
EQL-OK: 30500906828861638007306362171210132987300359439962044769219457463653547834815716264412200930088623097530758080891972640000479943534665059199377729854850415258341537838023739964147532129877743393965857370995558748807382396090020006195649251292012405690725917389684473999400905751109361754679152179983739269026226054012963756892488872262522587481931950410504651253101938824790285623805566521723062029033001745636445860437154344665483641408727637784045030118212476294288973734638520024025723849041945810477753436003616927382836946392946640857949253898501823403164885856802595158634931239225582481891603055412411436736233
(- 793528769616879938852241178439496352527042950647521648629732169156958768358523029837406526207126598190786120139491813624819360632811627576064199559812277 -7357484069649002655190557040768215614708659708788999334802985986235721030962928900092675952032143512196279092521450986819067071570862007086586132687661085824939677603953832219860573980632016025218580608321648907608385784471745482257672314890331358256478273312255285010343369949412955387472116587504557483184506548209831317705115523967163525846685455369176657510129844566195941925821733027993620517287411895496215426174909366458092382652675628195464969405904518323018004882611048769247228828875493680284766874334247375868318795940759082324831733175858991629741478124633015067484305547002438816473086042218906532116413)
EQL-OK: 7357484069649002655190557040768215614708659708788999334802985986235721030962928900092675952032143512196279092521450986819067071570862007086586132687661085824939677603953832219860573980632016025218580608321648907608385784471745482257672314890331358256478273312255285010343369949412955387472116587504557483184506548209831317705115523967163525846685455369176657510129844566195941925821733027993620517287411895496215426174909366458092382652675628195464969405904518323811533652227928708099470007314990032811809824981769024498050965097717850683354763013265517836868076315419135206976119171821799449284713618283106091928690
(- 30958566711373255787092081401292877738974978442987704470984765018293851031728996862405055424093249924047528792113585028592262445810946419909807061004531455817427671594281537965628880611732831524185850161910304038646992464838306728350704966234151134620041799373762432970330864023007632010865749239024802839173884778578927209741320635135275002489733299806669933393428518104197594560039136096527206600870299327752296492029012993590212340409989598323540081430189567580333356380487749078595746626408529223195894600223743978246922817054226858311823994547784553612982586322603593335538875728113115443554199017672360091721648 9164115638960783470)
EQL-OK: 30958566711373255787092081401292877738974978442987704470984765018293851031728996862405055424093249924047528792113585028592262445810946419909807061004531455817427671594281537965628880611732831524185850161910304038646992464838306728350704966234151134620041799373762432970330864023007632010865749239024802839173884778578927209741320635135275002489733299806669933393428518104197594560039136096527206600870299327752296492029012993590212340409989598323540081430189567580333356380487749078595746626408529223195894600223743978246922817054226858311823994547784553612982586322603593335538875728113115443554189853556721130938178
(- -22540807692474380279530794404584230073523360203115293035869063366926380719566516089428840111682263403627532047214106171892715667227836310498366393991106231487046533598391969789120283294510723096483520917309134391072655861112766764278247568027435618337967113341863713181603534251049249873125130781073437913954718595729437608729446837417196899902194261111827656247095442897532040935029872731410799530408713850806239149348700486268275019296069828199088780767614008685960242354118969741283398882689239770114582524756296906388861630890288875920861344939520380841337675934551587994259348267613541166769237154904791412049964 16928681651977808800)
EQL-OK: -22540807692474380279530794404584230073523360203115293035869063366926380719566516089428840111682263403627532047214106171892715667227836310498366393991106231487046533598391969789120283294510723096483520917309134391072655861112766764278247568027435618337967113341863713181603534251049249873125130781073437913954718595729437608729446837417196899902194261111827656247095442897532040935029872731410799530408713850806239149348700486268275019296069828199088780767614008685960242354118969741283398882689239770114582524756296906388861630890288875920861344939520380841337675934551587994259348267613541166769254083586443389858764
(- -5403850875869356031749551669837202919756114555261706106905659104903792701565965475066159243529680606410723686422444947172225540145977333194008702465610630608545009270872541652430806931212184915840724378685979865349848151917650322286497417985248678815214889868576385900691591784772762893647315325310416150353725001943778473686980157692817497562783521120544549784746647104651038037129984152623720529803205580894126664077380391379306511348324442512538418658728022685805514196592544294177914956734669359073791151050869328577099869772182315103156047405800398706114122356939316464974680113324979723289916823063616573634058 -10755560408227106818)
EQL-OK: -5403850875869356031749551669837202919756114555261706106905659104903792701565965475066159243529680606410723686422444947172225540145977333194008702465610630608545009270872541652430806931212184915840724378685979865349848151917650322286497417985248678815214889868576385900691591784772762893647315325310416150353725001943778473686980157692817497562783521120544549784746647104651038037129984152623720529803205580894126664077380391379306511348324442512538418658728022685805514196592544294177914956734669359073791151050869328577099869772182315103156047405800398706114122356939316464974680113324979723289906067503208346527240
(- 16201587974698660164372991183566748501003872177894450603471850345714117528335101264234127789041855420954511595895378320972957964222386731614839583078498685801156670229700092209313747849610762975747730086443186821337319452128253859293962343891549207804191088925361935683615063225197130192492652062735684739784075955094308092423304262201429421582566117390598395895220976999990205945523225411701169301910362640419341608407294018105959688929256136725564385243617240412649023368133778798063226772467915584333795357813292935080009919284755332034998122912861893282865727947810588086156919649131720183722427134042574317487793 -126159569916621842)
EQL-OK: 16201587974698660164372991183566748501003872177894450603471850345714117528335101264234127789041855420954511595895378320972957964222386731614839583078498685801156670229700092209313747849610762975747730086443186821337319452128253859293962343891549207804191088925361935683615063225197130192492652062735684739784075955094308092423304262201429421582566117390598395895220976999990205945523225411701169301910362640419341608407294018105959688929256136725564385243617240412649023368133778798063226772467915584333795357813292935080009919284755332034998122912861893282865727947810588086156919649131720183722427260202144234109635
(- -9976758107386398142455037422077809088581080675608340830198269021688955930541332630075972471934165382030070969307731206728197760190279942894255740733209190331510591013089699837164445642396864912572863786290237335963836376543389815671640509582958465164874961381137096877288362944469137669502842448492172241151419831252572392809173900377271652074261706120638052379886108764460001026094198502028776365675088466580595870167840105746912975236851293882732079317535103041585285239081516202482201377111734010788198635874359396626004300532752450289119192633850562141516671742961938277967783337559307443617308447853505824391099 13449070890444925581)
EQL-OK: -9976758107386398142455037422077809088581080675608340830198269021688955930541332630075972471934165382030070969307731206728197760190279942894255740733209190331510591013089699837164445642396864912572863786290237335963836376543389815671640509582958465164874961381137096877288362944469137669502842448492172241151419831252572392809173900377271652074261706120638052379886108764460001026094198502028776365675088466580595870167840105746912975236851293882732079317535103041585285239081516202482201377111734010788198635874359396626004300532752450289119192633850562141516671742961938277967783337559307443617321896924396269316680
(- -8570952518585194406209873586517687582701183275108243979199329595605282282125006489076327154374449108678257552384372919282846744626955206382078850958298637157198962032090439427286914716782317030245513658212430127586764421559372214829010306717557679285031617989735914399954286846456953917915955558448774972943731602144914068097214910567329340361564904028964471241318105967747431610163083002382821902859161510204381788262611298660559327478615315484763561786397041779926288206767156863141140852268323253657685018587945456372648431446464389004257999049529945532453598011773843788498650935959375182414447893892341891463988 4431555062692055371)
EQL-OK: -8570952518585194406209873586517687582701183275108243979199329595605282282125006489076327154374449108678257552384372919282846744626955206382078850958298637157198962032090439427286914716782317030245513658212430127586764421559372214829010306717557679285031617989735914399954286846456953917915955558448774972943731602144914068097214910567329340361564904028964471241318105967747431610163083002382821902859161510204381788262611298660559327478615315484763561786397041779926288206767156863141140852268323253657685018587945456372648431446464389004257999049529945532453598011773843788498650935959375182414452325447404583519359
(- 4117976000917214601143188578494558474138167055110060832594841842655428229500889876131794484851166401425675703592388271925904534237338595998991043982676292549088043959446082382516734793718348862105938692342851330680670593768890094290655852108130945387988863730762717733881418314989528719379494082656897158942547008663543153236129762264443358316776532465284014215413819415615612452225913947961681691310132286840303081453109375175436902292224029179426794714036524361081174901146731799945483243427138748119832116750910126386838614645397770107366925613473924955965862778639046707637382775371488874447622330992324750207465 329466253508616383200261654231797136951)
EQL-OK: 4117976000917214601143188578494558474138167055110060832594841842655428229500889876131794484851166401425675703592388271925904534237338595998991043982676292549088043959446082382516734793718348862105938692342851330680670593768890094290655852108130945387988863730762717733881418314989528719379494082656897158942547008663543153236129762264443358316776532465284014215413819415615612452225913947961681691310132286840303081453109375175436902292224029179426794714036524361081174901146731799945483243427138748119832116750910126386838614645397770107366925613473924955965862778639046707637053309117980258064422069338092953070514
(- 28857935543824608075326348244201981931023939250259142606733822094071772153858420201297951828741003977413353359215638528196235956061529059419904405354390715114239219947402126760298132539402386106279333968395498788354937020337343839325588433318100331044091923709732742795159387846354148919054314582749477292946200912006940503778924320301062789466388997936618573519744795661160190636101768486096961991215006236190655062992372061052426455063703038765465688361316141792840153608145888307784845264037109867657483109819380082597605481013612040648149090345778910883349230476481347645708269410828528742743794495302359380494607 126536164564464424337714470705049463978)
EQL-OK: 28857935543824608075326348244201981931023939250259142606733822094071772153858420201297951828741003977413353359215638528196235956061529059419904405354390715114239219947402126760298132539402386106279333968395498788354937020337343839325588433318100331044091923709732742795159387846354148919054314582749477292946200912006940503778924320301062789466388997936618573519744795661160190636101768486096961991215006236190655062992372061052426455063703038765465688361316141792840153608145888307784845264037109867657483109819380082597605481013612040648149090345778910883349230476481347645708142874663964278319456780831654331030629
(- 3146199586408378667812619157270468624370984629500707476575291934586478540055436137993431548830607708293475788354970610669452058906009873485175438772484599603993015239438297747261356407887781450787482447252615210880612867127689283653562498484594955015919746443263740095372831444793239911996227663006098501180972347442107190398034048225264564325230296723559400768342331039755765597288518435463475921534765025262262798267314969774604439319964638461636007229819888743218820584570149249791727508891676067767073852694327748467914037392778283816153183422263956621516748627574334199731850712255885395479903525322397561293553 -169494171680584797187706369710105239124)
EQL-OK: 3146199586408378667812619157270468624370984629500707476575291934586478540055436137993431548830607708293475788354970610669452058906009873485175438772484599603993015239438297747261356407887781450787482447252615210880612867127689283653562498484594955015919746443263740095372831444793239911996227663006098501180972347442107190398034048225264564325230296723559400768342331039755765597288518435463475921534765025262262798267314969774604439319964638461636007229819888743218820584570149249791727508891676067767073852694327748467914037392778283816153183422263956621516748627574334199732020206427565980277091231692107666532677
(- -17024716654716744558842421452239026542281806678754026383430912733874686056449261218428541803113383766132449624540209841726047308927951820311213785345168358108138304716549475322223600292513384537980742126687035576531330089447100646214364923043445903103768701639992829171572718403272488931980504461938688955457870904289239032709146514866818331202329982821151580491257491540240579366183525075936339515949345815704583685855315810611089822402567649542290589282153225725537026309623090382054078872576985425957096858376112688308214148412270019118710904983829984589093557307164347051152307499446188262820058714564165108542508 -26845770031559702758807696432929071597)
EQL-OK: -17024716654716744558842421452239026542281806678754026383430912733874686056449261218428541803113383766132449624540209841726047308927951820311213785345168358108138304716549475322223600292513384537980742126687035576531330089447100646214364923043445903103768701639992829171572718403272488931980504461938688955457870904289239032709146514866818331202329982821151580491257491540240579366183525075936339515949345815704583685855315810611089822402567649542290589282153225725537026309623090382054078872576985425957096858376112688308214148412270019118710904983829984589093557307164347051152280653676156703117299906867732179470911
(- -20875354448001792153279041347864644172439177882677780548397567327274288309764204295853633150227327732322157811413794613378828291977852467550695289535036337326494269114787031260705326469002279939986228049380615128280814933748700667874022724707001736732724010699175779382411342385842744973636495738468838244099596215421975861650998954057316519632062827510021706536194961332185926551767127180751211669386674770139039516623606727799489291663572125587356845055646322930167536458093283930082765496058330805117442824718962237069840252138957395570892073194575112213410604881673785921789655406716271370732069643455590690035701 -321447426701397438572265325285879998363)
EQL-OK: -20875354448001792153279041347864644172439177882677780548397567327274288309764204295853633150227327732322157811413794613378828291977852467550695289535036337326494269114787031260705326469002279939986228049380615128280814933748700667874022724707001736732724010699175779382411342385842744973636495738468838244099596215421975861650998954057316519632062827510021706536194961332185926551767127180751211669386674770139039516623606727799489291663572125587356845055646322930167536458093283930082765496058330805117442824718962237069840252138957395570892073194575112213410604881673785921789333959289569973293497378130304810037338
(- -6750548706930727136186675393752693335334383613941059024795513640678178119089262068912855951615043660442324823673049951182143778744824110223137384940032268718291241014850714197673735719784663896993460156686600813524168487673234842233781654493200950459723884918456280719440022930492599128086690014332139955274261568563155723011697763382009890186816226119314994799655369791620499988988986590903148198659095740939986627235565633349906453726759224441608018598520571182643709143072528030332708598472074166415467718451869993686505339408706320298338691467040585228617379086727764240955696690287600957842671916189752415855520 132223863177855649509430852484092802671)
EQL-OK: -6750548706930727136186675393752693335334383613941059024795513640678178119089262068912855951615043660442324823673049951182143778744824110223137384940032268718291241014850714197673735719784663896993460156686600813524168487673234842233781654493200950459723884918456280719440022930492599128086690014332139955274261568563155723011697763382009890186816226119314994799655369791620499988988986590903148198659095740939986627235565633349906453726759224441608018598520571182643709143072528030332708598472074166415467718451869993686505339408706320298338691467040585228617379086727764240955828914150778813492181347042236508658191
(- 15737797902964168014939893286340956118635524170934156177365242966267432695262586636031957242055461736359478270642576860414422844075672388559647477705484719667060463718865742735598799928335211410004369240278699196301127699945374217439676378682879115442203681638050752745036508637214733712716867800216723838016099572951915042604603457902610639317648800296497583507890473114507231814851908526534709496988648572353272479026750068932474334642929727977996779536604912743446197670724757690108283368934769626461285961947257397454619164856011847736479229692086038931510067165282571276049292116713101550911614590774659556899356 -6114512833799784097991148713266650451765474382378581896952003894922931741133332233338460555227243451198289670274036744955599177213449957470212981501678055)
EQL-OK: 15737797902964168014939893286340956118635524170934156177365242966267432695262586636031957242055461736359478270642576860414422844075672388559647477705484719667060463718865742735598799928335211410004369240278699196301127699945374217439676378682879115442203681638050752745036508637214733712716867800216723838016099572951915042604603457902610639317648800296497583507890473114507231814851908526534709496988648572353272479026750068932474334642929727977996779536604912749560710504524541788099432082201420078226760344325839294406623059778943588869811463030546594158753518363572241550086037072312278764361572060987641058577411
(- -26633154627863501044020127597209297142657179797586777727331879111280843451446814109347357601013807189824906954310855123313836812409388745541128842840054310853220032505914307470215180950497357091093642400638925719682307925365402618310180378684705799724964274776149984064608716300479893889145492885897234574442542501896696821902329473018442082678749291668341477914681413039643187020003425962922948452894682558162414623956491734656939841377698702802567258906642912449969621455596132708975438173455827361542712483153981422051943690720556013580161324856788091093465837542336129629269227369781823515673967591796132853515009 3321161637038961370471515250185392889390643163295535903347391615170504064647249127732639364682803744773593849851778894972403397573953564801884397178069327)
EQL-OK: -26633154627863501044020127597209297142657179797586777727331879111280843451446814109347357601013807189824906954310855123313836812409388745541128842840054310853220032505914307470215180950497357091093642400638925719682307925365402618310180378684705799724964274776149984064608716300479893889145492885897234574442542501896696821902329473018442082678749291668341477914681413039643187020003425962922948452894682558162414623956491734656939841377698702802567258906642912453290783092635094079446953423641220250933355646449517325399335305891060078227410452589427455776269582315929979481048122342185221089627532393680530031584336
(- 27668394897866653012794531261739800318882766882548843941974485394983434533400277607364280566269718161470415771058329222680901477416257843578362127708934184467195154000133252468684612556324066063725677629160438683034201285122508880444372096430021219637788794365539396242345208611990491721052691567092029622640533057073151980959055665792776356282961971341363712186503783566960850166774438868528799819047163739437906559674823146932668464230936946321915236658512741918196732794332451120218658490129307932187658010681746557120172585093207839141764683325214902696969028472942954863209641597556494684135445935915485525220911 204625459185084436546676461283890328511903949966691877662249903659689934813784661695047569885195881142676761876303280806728760511429260843727967794322777)
EQL-OK: 27668394897866653012794531261739800318882766882548843941974485394983434533400277607364280566269718161470415771058329222680901477416257843578362127708934184467195154000133252468684612556324066063725677629160438683034201285122508880444372096430021219637788794365539396242345208611990491721052691567092029622640533057073151980959055665792776356282961971341363712186503783566960850166774438868528799819047163739437906559674823146932668464230936946321915236658512741917992107335147366683671982028845417603675754060715054679457922681433517904327980021630167332811773147330266192986906360790827734172706185092187517730898134
(- 18944451653774463090918576081661764936021793389045063662102219434278236461286997354190032851092512146937346521704215170240383659165117708716738711782597164244188741818096207452074083439983059414271417130274747048227795964884943105011205424198661201055104372863019759130697888820715782179466491256695453118035286889359217448004524564796840711987314064158194625731263591557915838970249677548534895064545467992194029425250039951132361639559343536937119283951538321037694842089561504643350632756961329867761604760788760440497535611072991056505806805291706178639395690245460397975614715123591611301423752799666149495108752 994321141213369910357526037382331323092462599623554452705525887587326552002660849455542761618020243106424015447778226642816634338781654345001677083881111)
EQL-OK: 18944451653774463090918576081661764936021793389045063662102219434278236461286997354190032851092512146937346521704215170240383659165117708716738711782597164244188741818096207452074083439983059414271417130274747048227795964884943105011205424198661201055104372863019759130697888820715782179466491256695453118035286889359217448004524564796840711987314064158194625731263591557915838970249677548534895064545467992194029425250039951132361639559343536937119283951538321036700520948348134732993106719578998544669142161165205987792009723485664504503145955836163417021375447139036382527836488480774976962642098454664472411227641
(- -25075128489482657321316021943980016828761861550379828525731288423212311433274066958090940464803020097932875912251380196071686918459370667428905844496548191635733867314315152547202859654044591981512687559437417616479425752991419002108503390319869665933757684966460526631533822984311725217788657567199485442486045019468844265484117570385156844404625735176559901986920712550964238722824122000259551821135404274194791706113272773768366572120227974096419295159271316157215551931810740200836725504693738229444336470213883741520460842708733150362983831267583568258736572295448486287825894301201018490203520738439038977754991 -7402949251688548738762242219263594861535354011996392637087346760786292549376145193266590582054224293289596877537643409310483743293801574030358189880866069)
EQL-OK: -25075128489482657321316021943980016828761861550379828525731288423212311433274066958090940464803020097932875912251380196071686918459370667428905844496548191635733867314315152547202859654044591981512687559437417616479425752991419002108503390319869665933757684966460526631533822984311725217788657567199485442486045019468844265484117570385156844404625735176559901986920712550964238722824122000259551821135404274194791706113272773768366572120227974096419295159271316149812602680122191462074483285430143367908982458217491104433114081922440600986838638000992986204512279005851608750182484990717275196401946708080849096888922
(- -26509487378481600038412836495388065888781507388737194948728047318975269277448073484403390476243134990463394380967295356958474984927721196047241216945988250219075749832868804186657201899994373052648345989716938779173325348547767647529160988985542438998030764420175306438858518207072038513664360905985908879070216069156102379349899544471658754952888660878997691670566078979940005195987259493512159628198906090101827331841914429358969184839073862821059400943312264269215878469013316796620921077244799814690434355127994011220041638393750697699141479399553359747084811371804524490919966410379714725200415331414459870271869 -9247155945465656153397925559476432992975541781462281935278489123804934847762489500833913193183733932905776020790478662969835879365116238125565077744775032)
EQL-OK: -26509487378481600038412836495388065888781507388737194948728047318975269277448073484403390476243134990463394380967295356958474984927721196047241216945988250219075749832868804186657201899994373052648345989716938779173325348547767647529160988985542438998030764420175306438858518207072038513664360905985908879070216069156102379349899544471658754952888660878997691670566078979940005195987259493512159628198906090101827331841914429358969184839073862821059400943312264259968722523547660643222995517768366821714892573665712075941552514588815849936651978565640166563350878466028503700441303440543835360084177205849382125496837
(- -17010604274474750006607667808593883725990508452473783283717890546525148212376267233909567638545898628257361383837671935903199638230375408397752251127816717091041943873728526445398525706450929660366518707254053655364610471112296477865068960744948010561798109833411657930112293904378353445961131058136287425064317621271289456901138718557297733713446119244533144377470099270824020439428168481914824420861176457152299497728390918971852021025089592998997807574907789524112450146545688385954763667980124432645276563626082835790429598328230426471161191074551543308732791287559033843466623138171520961684959997180979203053477 -17319079025684619178510812811805110270463447771889107440996086020812918555191263705580533644731591929176480040622705607552852994906782176254877135818109655911838591767583157894999741648979817400330572419476101372927546509769818404491634583907246692993992514876697330603464497645633398167129555001859772111887143352351860130929715392173452396253437927361301990735683539169040916027268831202732178553152351117118606495416985612909248422655861312689027789401950549626643389790516560291620711705848717875304929186131258525831197192620523261738944873398924939726689336762464320190834794155527335576391767307110012289717973)
EQL-OK: 308474751209869171903145003211226544472939319415324157278195474287770342814996471670966006185693300919118656785033671649653356676406767857124884690292938820796647893854631449601215942528887739964053712222047717562936038657521926626565623162298682432194405043285672673352203741255044721168423943723484686822825731080570674028576673616154662539991808116768846358213439898216895587840662720817354132291174659966306997688594693937396401630771719690029981827042760102530939643970871905665948037868593442659652622505175690040767594292292835267783682324373396417956545474905286347368171017355814614706807309929033086664496
(- -28362352496476494327713713233021518136860402239251781438945998574753662942796270292818595738100959519541952077905620088422871490191217157269435052965329201030095268586136492980900212955645939325800541690754639292707053269767151001292253701853012092829784482071789669480438026889625605099744553642207773753943711175375843649210118677569597324789367425691177169929576236753018329085700397911235750600921874606148324025962628852167093806152864269874177214562322576097931390470469397118268354868919899638376323751276807304678316688836173746719723312665764603485606350244811113608471530958617108833879194264695174468397461 -4081062111675377984305281082755054920741203741273067094307824323728798665450292976016160959354997082250970415737745853292134965575242789548167162064123232363464302136338349828801951197252612093077640695564825095503535921549690447893467349156939791370286866987224201115453216606688305427702274940837032716124925028835914047967887674858015919302546781010326385758988488478290741665427521820112231266659657169118374988259423444686317389869729817643396097464874333968181509317307320406521221309011946212308190273531009796563611621389720223920155554879800901239072885025170342349379379336047732368458185953903872634982504)
EQL-OK: -24281290384801116343408432150266463216119198497978714344638174251024864277345977316802434778745962437290981662167874235130736524615974367721267890901205968666630966449798143152098261758393327232722900995189814197203517348217460553398786352696072301459497615084565468364984810282937299672042278701370741037818786146539929601242231002711581405486820644680850784170587748274727587420272876091123519334262217437029949037703205407480776416283134452230781117097448242129749881153162076711747133559907953426068133477745797508114705067446453522799567757785963702246533465219640771259092151622569376465421008310791301833414957
(- 10367142604728811799331249565431331488313655422005202933702176605382043644320209814639311439871418581341534233560256605231366966869093495784665834232350567124110194965198962966795893926025854156729633358240069116588609932539289897499402463770167927610848388138020589286461244557962368497723086593344721146859584146431437967506007518396464517349944129896971137720357645026281243138165214047233258394590454775153944241555543594427555914116439316287902470043292624597940465373006598913770411505099332700167695871387948271302951230983772351549087620538875967635100644404345317626621438913980275970160864401622986870735123 -13323117602411502623386235160326625769048477819798659261203460002048250420188223753407093545503703207645050883770850457071863684414849353264890601744588860687970804808452855795406182324143949747985869939791374195222513169904228914579995165180964917538177994190229733465224857616114628815752065632238207474599531507602861647623695058640735949593381112671690796335596142010430124683781417828023076027476816068202219709673411776556090962187853799456968290579708094595903778622705850818245685205707447012659247018940946510378371952655457988959551256869060428488498330109152756599450626641948447980234503249330875085656261)
EQL-OK: 23690260207140314422717484725757957257362133241803862194905636607430294064508433568046404985375121788986585117331107062303230651283942849049556435976939427812080999773651818762202076250169803904715503298031443311811123102443518812079397628951132845149026382328250322751686102174076997313475152225582928621459115654034299615129702577037200466943325242568661934055953787036711367821946631875256334422067270843356163951228955370983646876304293115744870760623000719193844243995712449732016096710806779712826942890328894781681323183639230340508638877407936396123598974513498074226072065555928723950395367650953861956391384
(- -25321281404861286799950777949097462701962113587443565138655462269365151737118518315058035825695270231347401755128007072923189452859397209062457461602335603630181865680063451525170253746137368267674863889514153713728814272332433431604233690200451816570240227260445028630591376891139306370205846627093813889699170594185178241812081296510140572331372738998993116117098817936927692238682202717231675283209016857095739468507690090676681400453024293870135659990528969837132054786661560150259115734877162158755858653364070279937027014730947342216816307219127474721622123875699701715404820384545693058511056735799834754890692 -15870257059811626693754498423136372480069134596343998984549199283973854570508228359295418026089909378687774627821225399931314225867711515277913855368473873536462450935842786002269065816311054834857109074848803122494252885020527074586145467185882674518032764708782999568002770206995683800833252068328835778749976046128872525287656002968632147457840467536682726059599593635219947081138082647985895437016641903078766878782632503812736486529143041369932038649270950453231711525943737962179463585338023463992816994328519710963267459007592689204838965317062070771191372220277256094361390952025057574056586665509010902583686)
EQL-OK: -9451024345049660106196279525961090221892978991099566154106262985391297166610289955762617799605360852659627127306781672991875226991685693784543606233861730093719414744220665522901187929826313432817754814665350591234561387311906357018088223014569142052207462551662029062588606684143622569372594558764978110949194548056305716524425293541508424873532271462310390057499224301707745157544120069245779846192374954016972589725057586863944913923881252500203621341258019383900343260717822188079652149539138694763041659035550568973759555723354653011977341902065403950430751655422445621043429432520635484454470070290823852307006
(- -10064759312484387184876313010284016458560725440641239737323234767636591183611201479885347260175161165340917225306019885202675573016295152797559983194160634880140345743489989007821872426587698574795394887035658449467358615185057180305109018898637903449135520486663185036663238956537895356325733583128141439025002140924158670346599492383552938312402521066705186885506193758499006001382444818328802338159713646715901977137011576113434170842422373328479181457354927400927267448788528116619711184792932525071391797130057189079431487557270366699175956757661488296856660145077706273571985222726397848614141194988258117115194 -3689074607001776735792882994440038588887963294487080609346609068733026224735369468180206799966728461935654851527895876039403151156669223687679382665269013769686991783531091821265184956524448064027733731862929686596729449196238312997460578818232100254940830907672953344544031914926653652310468671685310332327057444910423081752028857828828473637496272809899061573593874011995802487442092326045415689987885712749026491545159340468151000027397821404233369034594141219014219707193746581364791219277489927025992135462852894714639406751538919395016165215641239054420028872350709704191189169571752512626755385998505584006855)
EQL-OK: -6375684705482610449083430015843977869672762146154159127976625698903564958875832011705140460208432703405262373778124009163272421859625929109880600528891621110453353959958897186556687470063250510767661155172728762870629165988818867307648440080405803194194689578990231692119207041611241704015264911442831106697944696013735588594570634554724464674906248256806125311912319746503203513940352492283386648171827933966875485591852235645283170815024551924245812422760786181913047741594781535254919965515442598045399661667204294364792080805731447304159791542020249242436631272726996569380796053154645335987385808989752533108339
(- -4621513851362114851854472268081584822344822740665629177305004335694395719163541988311496405455186973857145245414214464449674464879082042971313025249648887349614046805778335573547862191522938924075560443632614665169520240664970180760364771373836023824195690134618554368845612471858027311791638881380352344527105480173917778084361560336490212845414303819150625355111300877737042696291233444311426721588476948565949641149735838580313236869041013210454558557732497012037162735013212361842433337324577522358968152852532145622765032318936569346015498130151789662274686368870963891262060214274101000058555635785833724062234 20283847238128227963042817384468009365120280641032764409860857066215336820785816567924217697745867082423864450685360959383940995237907453126362378908108545669654749698030305432673477271848544313029448526561606175059997663752601262173667861202924953502866611309434183496911206954880840674239880495147451496219568787221129244201657487090244435562896841733049066453539864301122516559479757096183362477594406691085946787803323712522074578611082872627361465163804239673539339633332349145205596371287028267780080937728455742966681547897652607170788637996317683436193829274172400558140357237480809582038468874094877651383053)
EQL-OK: -24905361089490342814897289652549594187465103381698393587165861401909732539949358556235714103201054056281009696099575423833615460116989496097675404157757433019268796503808641006221339463371483237105008970194220840229517904417571442934032632576760977327062301444052737865756819426738867986031519376527803840746674267395047022286019047426734648408311145552199691808651165178859559255770990540494789199182883639651896428953059551102387815480123885837816023721536736685576502368345561507048029708611605790139049090580987888589446580216589176516804136126469473098468515643043364449402417451754910582097024509880711375445287
(* -1412797070596191471 -15492755620416346417)
EQL-OK: 21888119755986895161222137392796809407
(* 16686841096925954110 1491135775021813104)
EQL-OK: 24882345731730524499708005167300657440
(* 13262412958100188045 -18379071970155621919)
EQL-OK: -243750842254847872704698616507823758355
(* 889503034794263569 -16600674457216690894)
EQL-OK: -14766350309325860687849239111838240686
(* 3148165694020236318 -11771070679825280729)
EQL-OK: -37057280896113409834434531491271315822
(* -4443818546267181727 -12001052312087213799)
EQL-OK: 53330498839175802532024121011435050873
(* 8305259347214213793 -229351169208067535459370186456659711595)
EQL-OK: -1904820941859811670566233132773219565154696335396051029835
(* -18273334758510166901 290047155020180552782039318570071650475)
EQL-OK: -5300128759437251944808204783222405076790289915320785927975
(* -703280433697652940 91110448009482115063492795153459771021)
EQL-OK: -64076195390496041906141380919369524419358692517527451740
(* 15279634596127882146 -220998726467849290098339792307263567896)
EQL-OK: -3376779786638352686104608499923871317791563686466157184816
(* -4472497681184076830 325612942672822430032905460436166528379)
EQL-OK: -1456303131067722058341139305566346079551678140995111358570
(* -6180420673489141029 -161157288800853703711204405567379740552)
EQL-OK: 996019839388256252540244286609069684717518686623358308008
(* 14044956603588468379 10163190459901171254101452124764637970005230126310661589196828892266636678427020930101076689732526935899135126391465178494895371156141265424428405590113790)
EQL-OK: 142741568963316278148132287599703960511135825069792278910440475692913696263448088587778211787403889397993501704943449376875999977937418748662459138952952917221024170426846410
(* 2133283347509865817 10577710515843519541178984366353275630877942729579274295972091544607384358263130633386329706527832990861547566574369528634541156662300858851752195966167381)
EQL-OK: 22565253698228972909216255630133478029433774404794962869038558824053350969301054394347471181756471783852326407546652836376109109470959746153989521923555764579738243072315277
(* 7812722507014599311 -5055959518947106416800910724733658104378582281318226107212861190073091017493970778425583956006925004399967175604321778956828368132273155364830637407968648)
EQL-OK: -39500808728232764770485117356353304373275127104839804121600969932458363071148383405901570717732548020267052999198017578112731079638156026910705662052515278317807704170401528
(* -17560801708050275829 9842515227842383346577123873881045824143545509071137371075701856197189100217561683579562062872293951325890789283651221922663521213150065638405410634222129)
EQL-OK: -172842458224605375239887212582262805312641302639067963604956593404910080268476692854082531021580381176489626536608405283010496488558204787140272050713264572452317265305619941
(* 16743386830114877156 7347065846171565625701636575261347705942035850951855454324853850791855951431141198155170102434274509450315416946729031216385536668189501958761688618635668)
EQL-OK: 123014765528775807847206414290825117502032199391400884957413813554539073118943905948723779020186281150198999824020769031248882909461419778092564985979904308229718874140000208
(* 12697192948029671719 -11416780209809507417142822520376617951137069007568339428552592261458272400645205700952156716454820410468812274673183389934216970221062627926131479014990611)
EQL-OK: -144961061169197993494569769162151457365959287966302572862364500950127981616038900865036521107816831702945678695331078399461327412574397914795455218447174498277798426197230309
(* 17005139720743105479 -29990519259587469661876904501488342396062731024702923152492275204626478246142153608222329335341363164148761307659972897552084842238285026253664841395295138667328930482145590159132144957515157474957872335043653264146346772142483721767458961320947069718037828473530001033848282453826154763424789967441239969918856795769965946388666154136004597297855416503729657013008165049478441197537144135384444157408972370236442813734429031404855591324183846423588871065272526864866155918285777640819778251612915859290336548446745308788013234099839998683451658620461972798204104633072664604846231692505409653434538208644416538994256)
EQL-OK: -509992970306921990341332390474393215554862069848994183152714032617297815196921655222705396130464246880845576204295466273071779248718654338767559016551390771145212884412809612574391658668778295682412755916528976282396155832617323980694289208942491001345059122414240884660276842648466533488559879226195446807748573906940273568334343093922652142252689341425941673567630236228358747411926991658260241924294146562230425295426217833820067881064577380516936937782688004146531121831211284735538742160763820814174631414364095096099434285754767091040812242751724012532803037860394426031234340719537172735695313262283511554154662650333168783128624
(* -15877530153400521290 27863984127681242643954505352420303514833683768731313003271701952957204538094398204984051331105594788039352443762851136101330385230866919393696564428736685568762923746771275677491379334452751710169529933675128178840986001684425353245791752781476028565228371147542431713985092322787978914276414008774443194161599919167210582437024618824616489802661351916633993681556274980075051797120207655478780052593534285265078265845445633803877185868676955831374479850746658711791169579387317321983669227930929736238215792068273805543745311609083833407544342964285215427999724272264458975101474080574470499647168865409458531868592)
EQL-OK: -442411248181132450919255517905812929771246981404050821923231762557171158858876183536414772404562764742655092127161703706239729646027465795612501446223663310668879007072125975886873343449629108246953385822769744013416908613100114754904323190537317463286500657291202287742354250227377164455244103312266617146454847578457073139633297517170508179596166314955134347046515455569689877574427319658085169791949003021426613961459610227430636932814700361914589752207776142403364490846294795496119883683491811246550808038342285518518431538295199537270236275774546666026424361019715280652576803278928827199810150387207105149968313623040090578323680
(* -14162897687527555611 -23016403916121951319848021112075986869602408568431399211927062304968548663313037929311574133954267816204873252195499803324830278637331653769648377216095499136975244697758388851688873078022850203685120154634090802825656419418077380419130449990938627982123188424119187922828250625318327074513352279785514062876718714640725789938556578327139793467832731546881422469843509318627826856881082450937188956068348931459011923844607158528494902828851692203126881727638511348944908726926619613375594042390434147948508706733126737304560579515324106834237197081860910657003346633962662773394999353766192391746258372744063777808796)
EQL-OK: 325978973798843759388794644178802841408656469654887121096165875654577046313115917671847505813174070119516580105483409446057747653173640660143855580491229746795572929387698247460831363721394707501497262525550824977473864621747159715947297817600227665840640555029633517390896890601028716769035575763283168066843141870124768085499453574902575378368669494153555135898430469356384416638130459557518713454927909937610851489821263029886989981438507377741962130296498574556444168140838201069779040087521405032426995145166201901368032136008107323350679784004016321425234898132080844200202007395427054392280809376612533414505539109579739614954356
(* 10844738523441551664 13010289169828379103330191247192587220592807931898339555723704078985668371901953113936581573750666143303899278973814509164982887504269303358034042953769514772858989849512527461308415676004712388964136857232374888643347097138114199889581495448978914022318770898259317738823514820591042321773469959130347470144905381758960436645008051488666423115693738341045851119808222048272924385188356021826450267608127588500233526688704136268009202730309974485584784539415807259862449203760469406037505772435323036790641520939576046423540699016607317147689982042035523118533555744274806239272109508745089640043900389441390176681340)
EQL-OK: 141093184161152226992592021994885140117836445291515772908453669279294934817987511015413332614094493905560980363483549300117114491702466085602279965168041684355125886388302948336158133555051817733078300668260616983283027038746214728386770752826764135491650323133831923154477800324207350667020747545837613879364064704092093040155243919335078139087599906324684688427176309081290932504214653249366429592335409761783188358003723753633106574740731573467850133547164922532633897844647383889253777956821171583261238607289172489135768839436605233457738153233579088224808850428203888700116300637190661108848906846940291749737998056247719674749760
(* -16402132873169057380 8202725117980211375579199554494319645475746305836527475507064811368616698686329266053570766100878145903342129595869654087772486685252653587846560946850102095086896668181099435964053041678323706849735936082196618754721606824996486473796843333331029865501790248862590712245450877098960007272754260813822886287008295409755783478345202299352891066800825979067590290793893933819913530599309037639082839491869155044147367415785329077864525961799400923643936705317921900308490987828345313709179960659814100113658528990241758360711799009722683007157350272749544178688961738222930753008443755881419398858537860612954576778456)
EQL-OK: -134542187307192759584182063854799850608007421111316277594191532129597970622559949723743396309231347084450105499455916612009290113746722460358793168839937004812915757145655285798961178877391232945062437277255128401572171216279188126380587081673725314534095093062983435026047851041796084651601813918099532876684901239903769891552275465470747567830660442193995685219383258617057944010709906130655663966913354414611799232001438943448374556294933488875450563987147224709383408815994320229340710143082135667640802837699940654151297907451396297241124380508001357553893328703788960812706653503939250831164194874527033594779746890593262611805280
(* -12094905083549825231 -7303327854122277566083382629094740392048421584433028903125893639493993705575691832165314461496849401726460344615713884253150283931509897329926825128629833541892164122168618243719393446304446866677253728405617434021389128710195093788280203239300086905325641224801020413858421914412156234316517981228056539721130386645649016559425091470643854813419057026759188125291655398451427686659900364573485593902992038773538760663063071699966278379037038361219424927031644750173900916227834573604566165762753650347331082640552394430002401423199016978155236550541225512734287851807727860645247391524620773399994302380387697957581)
EQL-OK: 88333057189654571362020288527489792875655269960629008914349561689924145109953656394378545526256758871407020025766992398117775520525507898420898102744530402370720932219749861094609497366188371774072368034971851022164946370916317410415503705484491514312339956381120953283812334833067601825812118392757289250628861166579446800637104996060739031010579056633535166403083327528575504427815713481850979373113173151813491831551023902022537957860211597622343157802805275942920911544696695931809085743355666792408029743911424760065578742910735408262758198787195579745280191859776661700139596074108035867940154338953640690242795671183308201526211
(* -81618231044418675360403541307856740187 9751573706924018395)
EQL-OK: -795906195858402819552264165081526765614024708979523739865
(* -167600745660011044249531125104202473984 -12960244919927910377)
EQL-OK: 2172146712516287908809731894157839567367040369214826131968
(* 90306383312124738690336097936949488486 156109477991590792)
EQL-OK: 14097682358164298866835386043901377722456291173827620912
(* 126202800261728727198105694812165074067 -17404362862588500316)
EQL-OK: -2196479330029905727399352310201914876903532806486592905172
(* -80093647977875266525946940496137725572 -9499399805878278852)
EQL-OK: 760841584053111508349403804472960020663660465509267203344
(* 304052889577333477963637861956318521374 7233536405885618691)
EQL-OK: 2199377646072361697737485358722028853038393128548297401434
(* -124787646062877233829165925777950698937 -125798384154373172164515376683173327013)
EQL-OK: 15698084237137783175768362160964949930745617334715009097620154581879012485181
(* 259623502197082370239517374851053110076 307089583871541575627915295134832918432)
EQL-OK: 79727673252974285068387698133566605944659309374400074880377824560177225320832
(* -245358177397026033963771466683003477163 -285087883756432161967673595037725276963)
EQL-OK: 69948643556453419103498093570621669430956866597291662675473644085666220495969
(* 46731711386059374483493216849082745840 -216522280665540473581476116002923812173)
EQL-OK: -10118456728713381305690589407461434638634240429858378588644634276171257110320
(* -301422430661955757433852743238845048860 -737194742467573013847855072675441356)
EQL-OK: 222207031145790358162820429948896977201848379524899474475604149595884654160
(* 109781582310220385246795023904554278713 -273317662617851276579672019029762858338)
EQL-OK: -30005245475518685175699313262818315773200953201653075289648004177366787958994
(* -312236719893391897821327608828679767006 -661158307192284418474080017860142217763949256471548515134335997907628404839044913830388499435166012788226998900468665646723366842553747501004752506346280)
EQL-OK: 206437901167986463762021023207669068873036145952740267172145693855475451354717023377588805030022300923600718715029262618794758202955817341818233889201852381575043965927328029955969846754837680
(* -134379788461141842858846278268259347105 -5535479645589936472405910397299739073641612836770238183712206042659632410776896398062277742229906915852933418684231779996404071421767274180368154310128427)
EQL-OK: 743856583805332082970350662728998610690268824090148728726850517499798631519601137183443104910590855501252539324674812560702657332874686395923181633958702249128106139207076314713649515720653835
(* 278271843790644800793473851247546123375 -3845690285506025443856370771250487683891303505653819308540635173436088084480277686684743918745832832765066355874381847690771330587033980524869033600561589)
EQL-OK: -1070147326395532917564114389205677334125034378502074943828571411806344559859053091006175486397820822872698474899835730026158782698085673635033947150554253148685482702599776833910878579880042875
(* 22345490710865165412267189692679994671 -13168094845644809414256057134926669929759930873747535851687323456073141938879368460977723280750841588750507348317544461824280674332488497533955177541413394)
EQL-OK: -294247541053147552931885013427268298282376074124656716577088212043667912662239091316191145352314750820026626159649861330384837204227899202392764926604802655267738710003310052268554637728023374
(* -223445051950608517881717261787296926498 -2609806601119499724524852022247741111662431776874117401343811680374867931883996125145979162937751368655661775097445043144114599069842524778189198926688379)
EQL-OK: 583148371568187658089071213924575304457465978545376486297236105670932990897420147110485946155066725440999079357995678147717407410446012970360780626554347417807723098476525833332400212113766742
(* 12604140228725912459681435851589379433 10671266866958584640992033560488052420339425977492420594983497264069815016478448589306666811246532193922229713077112601565462530332258877522384022088660628)
EQL-OK: 134502144009302626262781543880199144227907004673612064586081220538754991037447647926963488301214672345398823354945333417956344119228084327815583754032364976497975702972112644238248704660063924
(* -221289678591114384943252477126208006780 20020996887149770966522122735176842174467884990518978494604707026520269232864200848420530223248762875769520715632742683760311747174524709550334825291720803698613541109690224185041740294906022358446325921538593105347423518731748623037078340006459454656405997570119591344894717789372844612253617591807770017562530034107842444403952657949565007792107071767260484233194674888488789619319597151367813735192433631007526015463229060702510632792171187339118004038505860316305860704455466207113207893106982258864355430481457640304138738182009363353560090082819036973601710432437342931523433079941958203038050750205966472435692)
EQL-OK: -4430439966231074415853738608900692925851705818190624801199561884242897308817127146763274284287396980593383317678766559004881552228480591814939402896201244425805503258878061459604511214900528594870260206969839682573246490602076070316760182753341371682323914671418233629420599310422437691170629449435494697829163966912842611408632129590129483811802031178053300073562716917597174161526976287351465154825036851645956354853960835948518860624747958440181683978083391663149733813297698623499283645627889274004656942800842013709298338912226207338477579862672216831422765369078886850523202897989792734789430796029206661261129141144642117177625405158700499049991760
(* 180785619668676509441152734583033930295 -11909038209406834057075682058438206007134213485822042209417443270921391661498900475635417780140585878716264253792335317341527677051828500780153492153490249297998660274828986996948999762620400587091118252205695562417522111840305140989214300921122857271717052213225664738544344394774362885331856170636862181712515248810239601812262573113794334115259873527539564296101166439562124016438281173202196876398090029995104489712272260608848551754611421227761245487365953257890749115194455096508613617028024932657498899001119282498614739316599704645009607294747043489655424155986912576002393048535846081096337705941547991821928)
EQL-OK: -2152982852345560218506186041143281789706715672110278207735389192913214838321097754496849942223194392302524369156102301165660674797665128931611291246607346536492650554391248756408556789391955568308599431054809433808337036546281323840555452571430884302696950144068129601527530304907460164571704857360215834011779559395577299313379666503707563751314135201994045874159291100986903645360754621200008830207429980872071814202801994486961737459218017354210479544121100423399040398021780750351097082070296255480707530391964970754186799748521538525274241709676878827522138880241734356460339681718690408853314007343934035505873192699052380699509877559455199604508760
(* -196121729286794751535600080816329923561 31755463535476988506639447113088283661031267977524968610501132544098607201258848456920865390506381665724254592728643925608893982794532243733117636645689751360224314774452374503339856173343683819017479955914451013484169313685311530532055735999039466721411777061709328450052490025363788971916050033904534189719389237878257877112162843506491071470067738867693853480174965212750301808781573369342701195147083717623066339671595077736036738235636996351642097684597005928843274525502529735435418805821748637387888409663397547514467435322454217015563134545731593492200855670248739786405074231658957946422903165662016649229286)
EQL-OK: -6227936422881500100190187768375947805694946596622670066116457374856427496311253030141271922822486386675428302332027411428470488965226898801659352566022706152307022438261392466548357753526474097246042956052374187605144719189465046544498482461077851578811186829094445089366592317045580466302238653533114619908864036973070346979261546801894831273337217021756025770590122176562027129481076270727248949609326868225755958667670279949371399535144788247565199415296122873444199709788941984099349149684384486618280260678252604631431089580057102263617056951788273430713908768738965854953667135156866028646584137788146112300214498814212865170902491169332389942607446
(* -149247491509558553673630984739524508601 -9241905448313719916485289537122695595500213295294799660583133638026091750542612875183284894676615989153030773719811347110864468582634048542108726080717551794580656021381515769591713295631818532114918070215760259364277583650102628486861397602958930509695263902920994329409932518607260720657755504091822028630927071374796474717671220452208310602827254296323761245420486376569048549643478954846020045263141546849795367522490793641049509748005893155533480849922847230018411440739584477452313387881413141538766185123978087175960946255649923135634987656065468774634483495944248865774633962770893338531522570776854773975281)
EQL-OK: 1379331204929344851843348280532786532350930013132149419346606977890849868537539899667631713548510207947097949976792337278764045110931774279794402312944786743575421497528669859045492875676005849752425421867514661792129580445000023570590786705609341859529483054902802038173138834528021423393677908655442991197348183257271932188161681770513283703502340499171444058119260228931558784004778969491586252899270869275893402714040693571919281494643765571068045362364213060063345212881008657925426024923296369533374671614852576576041747836643356665301762059898161073609265572267138950725010661453917338098901465732991316661901878681888138048552901254914604845891881
(* -246070233154436622785727814428081917418 29761582253452470642591719346200231425423204062498655510037025199574178834762931489817919404889920159374886981199608181795387339523762458361385170203883094308920011218315748466148953320570427838912637152446837553950810011344492780712558515815917745810385725989241835877316836808088478276603934260581342710503593237081689944686263274319354100341139245512159619947319496638082702549196795236216458749363904150768879765280332386830831409591769966706351022328535490587838695167807967607003680703048770719240872629379640571077329748828739281770075441660330884779539288220944313294762143588847790653176774089774033399559617)
EQL-OK: -7323439484151992757431054484912931979861244043627630118213112440051387392428853497035249623931234821362770902740177541812170377563064854590834087655133962963430877452052749127605572395112726398103244974178157574726551814002744001021805127518246639418981066588073652668879613252372759895389345727455380224104332342029151667860553645106555190741775758687650292791318963679857313030729683299101577207875499929500963723267185390425716927303375831321783415003339099100562942730763231688479910689887284950156875532151104047755803876078837921949287811575034368641167438367411569736575067233548122814012421044943430647665260439418887639347030312118291762161708906
(* 203826295936164259559522643510940430939 428315860474710981601019542870649234168732095026625500771233691514247613083810271191136212287636290276352210600151884730196161003906066671915478570992925366265552107746965374246537358349673161970290367972281768471743836339191023211359427335141701167253694144280251188008871929010775436125645541749886873478179599464478734149706121117222690271210887178499620737860802605991262799781279373870647695125320153193063528861104479576369448865373971847676465682752435142074973627172566791961541105525781297462635428308325033717669972726101583722868689418677558787287897456521530400671342257419067050354522203242849353639864)
EQL-OK: 87302035331271280954456598486072605056704393103691656908943847729634903654600322194677794243221825233700566108459784062758955025931450719283517278054268553004951352280583820782976072352456972931479389375165173986780482062859853305469143408707179895843295115510597584169486406323435925707638987591151227843652210256611991940374072593149367903739596883229844326054223707236369465710416960023659329202073724249764308867733476242261506975691004092043954515337899900837434270833782490145948781128533218641649564543508314976001614187701395586824982250794852925954991265270537649691628899148413763865280007928191637215283244406869662872539567459561720369352296
(* -5899540498246269366107488541138263797694914692322476860852796858749106720144552037986906792251681094769894732746138541066810195167688318229720888479512583 5834015210744942902)
EQL-OK: -34418009003174534626858248456163154666511779871358190892629413477534042866009573638264296461516598238780495750056279721797403178867717911762916049857737963922333901125535866
(* -7558198374656605586076446665394545534375963428962439959101805545423930654069723860456022097647139432324162475685494459942871728608277717748075653794546685 -2079670855873590264)
EQL-OK: 15718564882684481784074014915267371190416032453294568239793060140651422710113447422494938907375595456199203928496644205320139985222135619659630853564447794621716315309474840
(* -9442744083812363570102321552182535031605446031706376100893354933468482520577272174689455502380973733378565213055641110431767353396963744600184737808983381 -7204974197101757391)
EQL-OK: 68034727473703353914019458883709211780958983263702756416891835054494728840771498925306650413027883039860202168095834137357212487561983607389479135319040711944281262212918971
(* -10658732210276096534851972646242288663170038580488752611749460640657411087860047053151548660331707024718100598181073744715506934778234716535781332588396176 9193953347013373121)
EQL-OK: -97995886679587166046252015742839992974979220158813197140160489510432960510418039749924861744197553021702396544307690217470606424904065359660871469041838900287446937257585296
(* 3330096979672637104536573277593029682675932033891010715180474877149733802060455951241981993421466123791200840797318740359792251505430948855600408060492000 -9413190658845804679)
EQL-OK: -31346837782105095097578725347257193539696338226258990009265748336528353873277500144838721882313026604404426563737656928378230261942407473822851842589487713775609448642068000
(* 2224201331350479188470378485954814766783857696988331736807430786504130570570323948774102396158334805040994159865821844362926631687258969480929122732089195 10226747830478556903)
EQL-OK: 22746346139936030910929166328517425029735137934434969334578972386859485783192993228082340012742115893176871887387993591191632260444955081663604449277961804869872353878963085
(* -12394770820700925077767705800588617445613665027183406054209162910642613421436080064653443098327137503596792411463268187212855350864330592654862321763110243 336135860956209890623046930607725140868)
EQL-OK: -4166326961171213704571179876442248501325782360170764344978629523457550315208845439497110652079907652744850691289494398473488033083739905461347650605270023127087625641779424751335704552988710924
(* 11792778994619176404079667787533709801900490264171877873621265044313417667869688303207909681289642260521608966405181881416781694320672906600599581862090088 -197661229068721548419113517262926820105)
EQL-OK: -2330975190212228827672814304508257223671550753091700552243633152084831515892056240354560520878171696176381845689952044935988868477421447557890739834031207059212175922089523097911477486879619240
(* 11608994516281296345925963401821217560860934641820086911326880657644311461955556832927259499969983808078591149768068360172431078248807463030805586293656663 -40654941048774156019243747229920736005)
EQL-OK: -471962987694958552110784676392477007070112288398143925079396435246284471999814508543057304008480666763661066976653446723271982094424149279649226771823800871458389214002872916339341019732251315
(* 4821517917539756801293776911844480642406562140007084392649374723119190602353617113036081438891134008988421494142194891002983491670246762173236312873933599 -255528396376819316172341014108564420589)
EQL-OK: -1232034741571035406264710387186737842510579499938716343220834781077329515145216794636313459582844773420679078031627466542930137302257934575129329529129776153159694412903937370462708576694469811
(* 7638751115643228563298483305056828584775811590562130101723525925933790010789130133831569153863129513189315440899053288261039147463032870669035935364282061 114438828287750304954799140618669114911)
EQL-OK: 874169727255956505920153418854946321208907128396839975975317705220623267360648189969313978740314703015845506506608054761304647627635292132043887080298168302864314697920637105700927041824911571
(* -3653826017463740005170218884285271512636869606149686475539243914909566619638259666405831445823138528809165270360144267462878986866506114069923299116957450 215752050445782448772085819939961259625)
EQL-OK: -788320455239949216234629350585027855111249573063377172522422069903710014529292638311216050777840734448624510386643245486023092483841464815987597578151663227035102742664709136512524899527956250
(* -43242564273985683175827997542883970694363047476880657467026050730764924897992516355909421962249292250047896135687573746158665836208681548975073555418266 4424346097667245771102179669235543742385176589624011161914909311078645828684936231569739522607200308028372644149306431599085361996722603718517735348761218)
EQL-OK: -191320070498733614136284309000213964486426347688040889144514933290125387693498098446328694172047943298442181705949005984031677324306763731212307716485454004382079159622650481983102917517993601466178931324415483972311904823997211920702201161092866663969163567426868740120661073974542958600768774774949607988
(* -5093597555679260616199210906198149266592665304134802327659606846977583233938836318559188141955851256260954289429418183711191354912372372976165948043123133 -2240632735861652612028397136046974907251405868353380459030143407902436514978447480884513019736738955326732458088791830752499716417751919868492224207936623)
EQL-OK: 11412881426559848135724717164530530041659963797467536748076144863846600718211858527283843975968920120508569299672573958424908957105703597501013710262110218780710678312197455759181436286391257283676806548463507528765947919856827004176416634630489598937924092540289712219714362500246928243091408698274649199859
(* 6049789822056553589237940133475342650218069231558204589924996117723031491205673061674252841792149409384720347601549237626288416453061224734057079515141650 -826416247951451524584060567988229017033981218652490450160817307801130685352465013890931297548015267655971295627931896259998420078888499206031390299169584)
EQL-OK: -4999644605638856588581238481465237523157457201817697008198975191261856978252081380810200468420738807464233192102972784271159116426108806200426852134469939032473362689081653859652824862066224063273799612269941254948709760659691148103622071316554194507524610166457990087959160807415102946877307193349131573600
(* -1175978338162966145239180473229656000174129248706173549637767835154921467129547950144109700900405904250603515318348888619371004435353505449762899046094747 8633693716102199391202401198009047492431980605560930404972542822133579985462906768067706391388213605203282586546130434156768523403030127356256666478340720)
EQL-OK: -10153036788469908062299722391986722149392791936544969945546931764708792252481931153733789787389051773529081688846141949513463792442701686406966696738286561777611293604311491896230769507535896070984747493738525389837795316954065260075941524322954935690803870500012809797698319359975893462672845329776468197840
(* -5083395547684319640767882199938390155755986838939007846911062687871291096073452055061784159768637502151635665247461348347470360218957222873087414506633886 10813098236568616588240471432239693891825284805405416395976866126102880121934298269375465735278296789484402954117593716698067735458182402220278016922449294)
EQL-OK: -54967255432446073625448401244836956268872685687128644401372608170106281377801209665004925733448944141633739594240156882328181133879414641109484442890809130544146420476457200729843868300396656004198615619691952536924980482714767859804902602805398865249514544806725162402291122143659939645240358379962457176484
(* -8944626200084865988157251013718979706166428261352840753194709093968177704853157211364231059892647813839391802007588961807572842923682104089512428902387812 3814836951264415657788614449012480613328314590744410079075164918748648723114236698412482309581077603776489883375576245233128800002373843611668945838558629)
EQL-OK: -34122290543331565327874124324135450224668275222811493728051290368641401807963502623692504750924543845019291736982354932620821594287780848608647686402233097059022704206628297180782771812500512744911371653368388270442874670230118309469599458827222162362901084328510647514081302476000779049412605744638457029748
(* 5186176030253526423885531264483408352469356233262336223619904269047786350470477526433506158542551137478071074193659876898065998079440819597952826155782068 21428324964794197485898135923805540163916541943812058590308650649384013587098638034673796533027113673143959572855470411726978105342739938341516634354246514986124789451866589211982659199267654387148420461876524076040233779391563396552267276880650559148637067641021059664960876301072636635299261389450890094318429077561092553337025096293793433968243940381587994428364726938534453507046761494257538813861046058298873206568935790790373886840765817404479239485444563488020955730741209738203470138117422899051269778988135668626686262669881048094388220931264751830393793846372816717368806996496715219806062282836392457741918)
EQL-OK: 111131065300898907482632501071313138589398597291097276435916516379173430095773463468344138866282820740991088290299992221985607057347883717514843661030457396422379155394966857856069231504805779448809986906434617741485942621643754096548512120178021034054648207248963478122178145159262707381679354401629366698488021743300737044695960363216253889163551918513521913593214414139637549577618641974388739304727218804595402055185824193445089425262833385286117064481648652550355832014346131722965510192584901901111154083186713580209077544982897821477349293279848852596241762198202012197892321827305803333334823616660229870976569043453639028059771892706354703750763908127611939169337399882784092285804830644630059487027413697220038110815990084742241055099963659761569486906596326424
(* -12615422028124847936088012564413126213419674293830655240645918456932358053670311316461359727921727680491520480380615359506308571290338231702217134487397730 21538722931308708400287621200994476771789912594554241036641406577761480056366647329031140922034590767810855360008375309986798226712928670905618807986829790199948665185268081173685941421700542631395958882077936923141152528333121096909688700106365468854487023847026564219531968849793109908193037522063952753477768381591929787242143631287330811801315216116212154423972654430356675401769729358415036943501470085182304183033246682446978634892995900678975109490698283226559860736462409705544079080978470202336645384768211440438501339641775269445439018148409151795830925198162301321965042997632479354427154223366199106583051)
EQL-OK: -271720079725309675925162538296715595434811519956795637977932956405490708202732964133816538801099235844279338645471102896234318181092598033040518838847055114923365599862266767493227393553801736813141780001130539648588341196802606083178208108557367013886856183999712817955194261262279080641101769944037282423238147653270651419282545398168930625797556638625301898893565965773914460998322350526545278664715332414172614761548301364063397364632709194713561073496860524124460861314674679928692398440036071116570829193414179054372604203478369755566003622621281005164747628075596444178089558747835994702060740334079222508147598079351187013336751322569865313532407367116553748939535664259669808534100091049960040092785009707220249025633808590643620557093069849490009472441113874230
(* 10381022953674450046578890619826448644067144294659610359943634722044183130638243233110364436029778310048006743033299956844491228999113516347401915490861208 -20974871685432829994714153210121536409377362402944992609230062091789259307033495284524234519701670462495676590513192861649457148897274608767543942797542628100823017887236899471151903799837558453043431373811892813126194662218472834650841742305925226558315372771353677064933578639099452438843500601586038910108679737480263349221244638463171088589123712367802373159421798288708123925853179931628847579314900787361946716531755600236755527982132768286927549323465697241340003870259800347640599467922823203446834792229595507968354687630029075884034263531531423883902851487995214646322431057626558858528344843531280263328354)
EQL-OK: -217740624416854507100100919338835880277259264187442792458843251425095703739537223785767883764746809214920580060316177442387941385712712426957388995082877226019966428812240179251716274377143798847348759498926420314709056615470455134468678662646006408843897699718742372199854223008996321568642038054564397441209859567556502098420151667437837356649730396360374136203172669776530655738388121236079327354422138744456395348910073462618440421257604563050031602590345028438897601523520973759458890228893913090702884911857207117714231568437403212806578764580006787626657709435954760239671948147344463295520930250155876010414461245194991189183956653772752290656063730950237649394743456230607077768595983629559996700837383822873994717987698780007691157576205450973669241823945091632
(* -3984492646329789478973994496812455855595578196959138558282015917391108383154917581748539892089090551298072688793487597623310815918942283997753800645644511 22199897116873160263914990610762123553075230334116099569358672964060004245706770678771431369917479502828754815568950371273785689812698287446020480951417047185190067265849637510591502642000414540862689426343523077229502494771352820057572619644085930901096534031496492870227890836816886496090287321502805172125273822231241073590840684742085641304915656543831190976008986490532066597410386596132766422026234488163435487889876791504407434387555507637783709991326338482319227500686541368087892665100076351075069628862376686619537655838590687615291898971286325099164241688147975845320979841704002364545072665891829427213069)
EQL-OK: -88455326811459002089798581395024759975871889172872668466370443703433800509268320055453743803627754859670391415348970278548381190662701716228279482045339649051139909543850883613464992501666524385524517648069873862957915620016943364950043289963237718026629805297916194484838158010754666017024585366330526135823515744339445036315966714684052345462172808299142368905939297220895721123725415007532441824406115746741972351142687017849809593982432484296719999502992792447259391592152463664807498752410740679664044620898308783634092355737296495489953554685938970593890496829484673393665321572846542839714620847185428664388282452532264810310019327395691530430185946743995669191791841546685206884247468693248673484055915613115527492005264289557719000245333079386593840592027314259
(* -10672574004830373997900438516438419278676753890756925443116289034080220708922677740383425352837266631691319394850521121221541344600832530724104047804922665 -7307684417326792807224298894786988180161884427390942431653062127076829842696634441114228528164049031680536693195116703321494895319862805505304314401000204515985676763063862569446064343853536464020413910728442475032187317639476018710375702206456631041987826826225461927793241495220512935434301833094232834266749666697332380140380619185254354273073522191066457437931022783436360434167505326773192959291779779370530770935758482422581712556111319611455306383173529090289274267200543081481693078804068524057891845603351773722737987393428313340760607600482724483853560340630587029610437280601010173185018227638972500038072)
EQL-OK: 77991802747865927212086621295493124451256238920588746597961055391511562690441964216934615500942858653797884925704270904527938466874924049039962754703188019915846345804228044693122758075602494985337649496117180241872910247079655077012999375809878184011356481981590430241786534827516536543734645410817621964035091467871491521760928486006653992134635010794346993161329777270345449763927429735191213854873362673179799811714902439637861750855639857969259787075469241319618538795721956528400353086156169058060112255274542232054021662809196965752800525093125763127895334967094763817500702626282397394521201385439419885607578137159972521677923972708827090645776826953976605193554447841693259586575931864396484621463004541561908426383260772786784541411548146173991869741515701880
(* 1420855003086789510813111205540636553863493314684153860389816109865085846062678305775289632805233481596171530412925552158799875183492757047174905459819169 13897739053062356545217161606361735964779941697726983959749295377836209520566715597422965426908191354971972501742952706730523748574796773473606175934144970768662226027157110240776527834790487577863781140089347362129598158760833470434895693782503529955845076709376071972727346128409008293671217324995682020009675316075606538241192607139905488719485728099428376369506685875348346231688684483781160648420909364963718027571565217314827671844485031440079254478598236877074793221578612249882886835580737423192061550370069895525711885220268707201966615936769696379335772521903910689934596134239331592980694745008817040569590)
EQL-OK: 19746672065138309742065153069587996891492444461032276894328314121573439684229636534026409362850111716212254549198595854140809664451286626009917828620279583631575940837712663100442879662416765138504151063632823014639305658882804073655537352377258786105147057375069447099908107785635606190515362082317465738205179108333064680370909383338688734129396788764959056886328471374018961975554190739706996184818378586233017775166959010668462907838359485424792026496574369912033757997469014639705459505746723512361959074802456098328538419933637295482429555127226978561859965498424173552676019033370307387047798600024901453757451579262061785051932535359410827170361533603618131510421439128567361259204833501190218719779570258541358012741265599985490513564378203502703406698160470710
(* -25117824099635104147178796272946098711514362630774369209876335291088434247131228189812265510495277875692804180473811834186270331245779845635089547499275113671007257221593872123397418355506777725721168216892830217596134983713752526559153149600553468865338887605949011743043425900799896245185282419637806859906582214420191794114207677635194054239563071023206500505880052007267243210206807805387341085613436600843317096291021780624738422589234020279836961194869688005260369009833026575446099544900581955685627511787510900479881434909308757027825050977932238481841909425598834367032841935054158448815026264505726593064239 7846111496222858966)
EQL-OK: -197077248428250572361351389692146917243277049539013604789802566767174747369897711991559940484392921619974209620152008632450612546796556905740493507885376190913893140368029841033442857949219716681475253727058707723386016055991276120001690579154370788782636181079931076758384034193266737114305362492836167078199155929937891579224024229182935372106924021709421948701131654358516297806197381566809357458374057189773041520552821330635689748583803171230633654728360451100477472934847975252390985102859262992904778849652221553818627134153578436315973777720706502751232660284910468721430874674021521629540714057383398858244828214000543075116874
(* -12000343217458212092754251360179138661969968218789048702097501439124892987400633614429800307263114371624489988815324366411323242909652002510513570900627875514001409309670202055060404640758548257776155562167062337394219073071639153822126554525439988062676648294108951003012550815746564810508912122306190725453386412796036693387315128514162061147675205485143205925649214342646148112549805850530430229663418469577245456944558387628002442451042105749848177325651852669794048215063957689756465788955050513359977166122710392613631703123491357791351447110169966270916789849428298930624807758982400706608788793481972190953569 15463017349709835150)
EQL-OK: -185561515374029078700596518575548896805308728003103939537818954646551372890610870275966055765608887701776880889777402229764948269089126750201922167386201171243298907675542965323275634529293654817279957832652909009385491998537031060285890512199675273422070784691446251899120095880199298512230290860589352290462643231396804350623684034400741386070220057232978556614620855818271117742675632435727751812101639747357642295230273344552327870600519422276996860893842363996198017494117619585153346745838853026029459826407782259598477529242420507010652705302341725948095720110508044256096963772599572721279996322424269691990173052929936294150350
(* 20244597897909303129995907707212050478823487084391413473821544089492035634291726811145005824559631386634261268723753786161463497881725871168747275110149007801865428978596190887145324535224079986377522166727137028753272158887188902047835658826867304220850429481233026043496635847568448251753504834367809877190895369288045026559783632709799678639927825194847005181499299410953860627694080906167346078299421796974815616608326704894611151743720515377248152215241639534004099341398238713597030368980166731393247619511322804984829747216779359780372801101821087516269912916462719248736442644433057333788741151270815989388229 17931151643499274580)
EQL-OK: 363008954869078360197158713265773114114991766614027768774402465306840646219477262855625957403406166192075865834283840624408916170935610374573318606346031792128003204902147985329385955814330782527184421959263266167048755628089412213360508944817963403092490479480264538027768728303095523018598016863928762335410109567604756183580676503045557867957273324581082608248341332512325136675167966306268035077761004923732568405295901819511346235524577361289712297365403327125212199451099538443576479787130510546755789504852631291774614010584650672707483555436445926222945298928326313943231688436271883746272589347954697213098866117569339490918820
(* 18134862906191691435095953372467318196853760384894170022863300447691250350836421337333332682828557871096554531436829166444150586004379181099133295174348038948038399079336722004125999533719492457544642570217406286811480006881054375314838605871238868968956868878182133492469763282800195060849734382249696543089869191257451321764806079423169235271658993054867624410589213892458246001270123109841429271429275464249821855221014782727398959126117031823977229309775211695677345378510417534328974531801634095862859684508240122911023047425473036305928743193594967362216559973174709883576295373749738633873828863608550295977368 15082354452174510460)
EQL-OK: 273516430292774638949326170314933525797985748367549139070674899956657807928629067317576809269188258819686207094298714770978509118959142516619521080722291318367607601498107007447014759288176261262818034997399866363248136237609824401265450913244758024085739876914482935655100890803279961929047974391299795570244708811454483314898873277493486428279875241232025231140855860469097028388778917980779775554139507550577255217032521719099071084956515691364008526064349956553916033914728254580848198941020806723485184338914882588931083516851849558411503129184026079582257756707601984686901646494090820169212279581209612798749779318126482639269280
(* 19213874382308276075905228027166553836726993832150876980655958901416537033385379180983129528081628446454583401834309285184752924794893846406622935494758142810049493348116192315865522516744262115026742103678965417868790607689989205765793528434388393584537260717130892518011447327847533083474230074174308157934463971640826422302901570010591182715932658037868980053012095115562188975692530473556182305847290196895478280679341869546292639446526021874910117953225154204035612531584978136604161393474554294315903436682283787080297348697922389355209790646124024053098888687638640826064745026930980189268652291562437512941810 3155416591710364359)
EQL-OK: 60627778016974262766014671335614995348970065077989108071534610098195400001445248886220725085881796599270026085183075312353388418711598523030563716616967792282609748819081238929738105086199457414615236966895805539596649555457494710621217412773036416007129418290246899690911654008867819945724649185574237527152410775686803449108977881160831441280833577932476667657759420192656716352190871667386955409426879693856001112340390304980532208752863058384169885129364117656404549585836664647784765508649117301622797243353610345828189312360124462238989888436478381583689386509617357901461416012201469794664889076397809504626996523928173064949790
(* -6561903839860415551587224953276060627466820222543175464705113686962550773423611522044145975606965294164125376820288981286542044306677764776675868357117109664125730405280822770267329297542599719353907954399688197248115043785617436343303277493146049939491224480136371029084354063731401026459653680017632996944506546122253686805764620116169065663214526857151412139439538335533979733329962892417175374550305659302592107472151941922230309227785266745974334776462642676959433923828440435340579340133192678341787895007461237846313005612116885419002449356480017828933592324336731295317076205553526568668826499450826560670163 14908715577157091280)
EQL-OK: -97829557993133908713082095435440645457469053259814412551982534425389603663024461131358343104414088618618030154957456050473312402460589893359522167472060177968099538846750606564761307960896264958539903740023783283814849937681270591589750181462708056758506230073751440847913386576449367635057595344744119561166438538811561109125506233466453974371464999669336530949393433719456191822836826214814780222021267726528396849558417851727452246676857867278196266042327956933753121947589485377148388716839519782819642328655117625818256334190717182923260613562191698788004591479576661108985313450029332968584240383859113741485244318702724563478640
(* -10378013547095983701124686671659666242518351347561698092030999302329372512356819420877395264401390796163955327080881297568412490286247154759694714275858127906305200295043241717769593877683535229411640745872559018085757273530771413156968541499388413497221629366848027355125816131586610997516488552323667400115617175682996681969687885201321292153656071894385242141321468096793766926179134511319941715949712230831768643024119693594235207988046511542691719002262040067921088838755337917414526554050602539873232518619281766327369577617796816586064895744680567067970817494102948032924671421242699225194947982378019119315136 30004910492448871409155105619400474385)
EQL-OK: -311391367570036811050052853596227388481520279736812036769684195465110674594690412517879149770622679377262288447706750813509857551308594851067359841826754786725926298013483569424123912020079066150719085450400229896983461212531213110847425940968466564079253939695853896434719530729030897976597410468081535234663568150722646854183317007227669132983719314653861536414057481478039579810285535699518386214012059191958557306338432321511585867535008319640705419431310336566447165302011113284064246284641707577414470505948868362067233709611758700034131461348997580441628136979257037186480770286846026250437141175360847735150981343952303257191661069675154710791360
(* 6311357747888359229575837883366949670125882865462293491587368290797766017168248637163030339387377997726585769250585768079027576213724941259801478313127113803503561717311996500019522893295813684259416551410025111443510215766297835872165689077882298506134885487991732718254835036694083204758447948541157893533099634169589161496492972953698758234452126564385255035294546278732684663873459439615228706684138982066055370429797835904846166362278557095045056472775166294675997320598469599722704075215700819354957397052721573993997624711445698656580401684113096559767093466880001548887739825916626416328760047783071058963451 -212654096583990292869707082365869207538)
EQL-OK: -1342136080095566600483524091094048745061145155430997807005186206704767933140306297188996797343723817220160636373424666345108189275851749622201429179882167381735732553825696482751584102093819432866729465599060815670807282181979889263381844726842751894916887860819210652174987999919869623292751389157233409465756974677789790982740267208982768450215563288024088369480574425410032306456026930809228182100949940216614156925537929648841127727165386031716586596638254705402653861723407930666152691102484352058909219619985877341630210918347460471644327858114815713557305185589162775699323253049631349906791700893878999711846225062306568467992135934882289075693638
(* 25104391676237653962996674810232896003857294806799086059884413856421530328279649263948893056601611073815235439115612155497964541323584159786678357898152394779494741995735881624055133443980324145256438160990490767324719276757840825641421547232460969806196141938571103617707677351907526127993230143577974386169402623023560579220343920203666762052525898442578990183400559087522259053245822827313206196194989095468393682721753147596892214609346047051670610252732846805143964713621673722554204896154742594858056891979146566683467510164875593192581407047920719605560716270697985110227952698114701527191421628561835164291236 -205991315859231724218751687295926841150)
EQL-OK: -5171286675233738337789203670843122752625713948587464573381323151628930998435518250812603433784823922283042037694290795352461861058217142213862777203850665369756106838860420507328654214723398688455622487003912073924323587826356928211672752672052670663842775836967587150049181838707784871641183683742967716787111671792311389517753578360293551031540853470719098360013225516593755039537796518619542838794169319227197212817921098393499332268929332950035803734983497370378852859829228973012039890600437082235032378948656232679080766068869430262740600476498399803176452431728914806536862849281928869092524387549297345184969051926149006293586531930828748109161400
(* -25971587288596053786734900662696128734726180676323130693160397208008930123341700520454723462226657743365779183466120836187720332442041321870351823609046027805781414454998487673927365486893294110931852680018706479684281928396163669935417207859889405108139261480861908067489849403284000981453574189898304616775302917687860062501465417706095450121596418236563421425311420755550335597318818628123183624214438801254105808079227429950505879366254661664881055965092586612702279548151277733307180663770432418397550642136953750720624507617115504303570076531620003848642167562950736271141440609700821621532583527124386811144839 -182748557863603655835821910989658558236)
EQL-OK: 4746270122419629115710902425435990509747636609113505336611751359043717100752575149404352359855260443259846554733621122684788488984010741203981300775978945529551335641218319619542248418128319220383298229263331638090009313676486209764655429828385994626323209879925281409485074778611946493692237774852428345451174837474328995186242262565013937544898941834362941815633750896882758939509605799422068815435202904271722442099465950700886702949580264958171808372530471918175963644209760378395316412115175988232945569517230829200985652504383431054550902852797293952515652017940918628980037316292352828228005975466732028971159947131994753006597870175664981312344004
(* 2117427896392849163304163145095251890404997781812823978967013619233450901604407363671467658244435728579079751353560538034596183240362499870272373308111405924505741579887345118857908796509418246599428633956038017783178050402412769812823236255234302205027282366926174916871858199918908361186936687654278623156607813451034087735179167324944824913226799346886951212979149617678949292799645035425029596869092844906629996914674904522806258932192931217652241231736891642224851547474205131131019084734780208254203537633402057673465583362982905095029133132240839391503135932501785844503813910210348239157828902668852795945482 -296778668392678698960782643314222141731)
EQL-OK: -628407431508980610909134894336322264939705333430111861505965183839156278363647883745193463537783397824947515214540990712455315080515980803996660089847066076833542492719707493333185909990202372284811233272987993068106356248349054482194817336258302692039392400931536481136340269417905505366385505196886218794044229758585631131853635721528813397816307666671727692971421531381290925317161326036075629905443938124481334173158440927555118173661486114828362551889594188958723424604273078091320087897088472418346754088900034854230711982602435635574895960156993014703292551046970069204857846207328434544990709459402656908170089318995291341536347275682867153109342
(* 24743327715258194976385899813930363006464428087412805068703455203318769863096919192538751530954777047772548306936907016751357570434930538612382851621309732767199276228580401695793317612267605312672263736938703887622824117576912830029817460033437752668221355377879837833796222831371174014543622739933433581963103361464022058091243110136610854806189138108937004805781857031030005354158991203388998364340053773883952742645161560754545458260688560269655272249435540890073696261770299845722705104648358053080678920468895189601731801025555650490534399590288852165862135571140382055044665678298182909026026068995867606241201 309156501491030456401354118244509785044)
EQL-OK: 7649560631695275371386748526795333430293346807872366006552933839286343590101586516802834568317627508914888989005968805867728947519409222814667350103434422356009252082456906520988877859152125402282765775845766265340707473525444185795403554160270722809642681642831847296672303556012796775586274347178092325226458743113317655523655255626670958156216225968018208281266858684283741496986683426354716284780229004376492833583965647875097951642088252875535823145900129967026856898970545720526282798418382467634180690243423325770596949644122541224189780082061715230852249880601371985342796525016176048518593825361248232406051886794538203297084423942036889326397844
(* 31345149697924857384985323414506591310628538098830133854928154990821019223495435414394178930529373634315044777562902565397455028894455733092896622048288278424884040917250546068175763309233883078972879622697667174865833277342334219810618450605650614585133187005110148963483824629405555603493157452295284935004578187488673124814714326405406894084902824045787647963172437833905574178160343833139650913077173865287057167288286708807322607983179910358234015596109655900840652230258122852488289951986129788952718105898226951651151495867246384586164892018870981480003722043190639707903266193064807571586900961788679579912089 2067227180806746570739122295766566373146995767544546241400900414826379465803168632854028593293108913670556431832056563218709444199286888840721753894461468)
EQL-OK: 64797545442006646811970698282511426059102976298051534827345388707272469591333019870381858263624490336448197115781363489554169207652559213486772008013638214870324260793199674746523791257170452738018910619029072942848422098770309928561867618844814267276213608306045020686764830302020953883994906997293368193331696747777630621086600981981357507299729947717565760536305785574555255589190221698706036770081438750974356437738060098906046001271392354762036427049946092656701257615490057677558059955825843182799904828201890893555678855718728417223845757559310912618029462136640226686626513375024547351747669476392735304999046232068947570708757930233036922714350584650744960478326257916948676866148362166017752159953504981324652709881831381637989229842766220141292801807437886652
(* 1965759082776833678304908699214846485256126608825750175641683294458978302204367346739996602241053060915897480812220051082619942907491598551933638540412113496542245474287364500698693202553692963910123752514310355402167440783023542848697962967771951714434359320001430281377747193083851165947498546085410216620013287853719686698746328198021011905482303248172483782066908570502837009924228011993318265674390462360820566174204659723461994730913995303015012684826295802887547970851558451858623353950391701673651959262042520584275132971807158231859672678070714276061110616753309305801080136339206017351200193800253572481467 -11092241138073130060021642325471345789108575712118027611362686690749327689527135459714040658411176246054106270789083336195599640521602432629024562630323934)
EQL-OK: -21804673765518097879589124792137157558586438669762099454880024920520894260754279593873244443852337739758694535682558790532827482894104906218015712179591886600693703465749571299271429989154199263793230178266758966678432691901731270899259065726530463438316383699558373053423999416350780342222940065486831353604365192968606300436304827279383661172824549131179471364227618431414928702407510473319879188990689163932586727702195573766225861364297410904859137393184592815970592502081722125458353280743087607273547490382023433724488604177909671497082747464946083901888849483505451426245881736990810339421864101129619181017696837017966116165703320918568645290788634265522956017905246042460811062666193790657969385648522736090098231379029903772234867701846824572274796526421531178
(* -4067457132547237558852016696244696525033953641638067592741078194074861352472861925779476293767777560910963786727886946479865734639031042985368829200802420611189793957001730656623744670821921724417176679009632346904384261431052972127975733031277489967119978909321422086102208644766894305071609385305464547231057263658903212521469801833214062476735046735467944834107695748433481665714184831786462886261252526036621257865158497049125410241033365487816324425563483999957660557670189397770488996359512245971368638615503320507431381893539767352426795415898379765583574977542068222040889423739693921998717145084904555464058 9635268828818063607505341812331931088336041632536136269505180222913464638532245578488168867093853062326136774925531196873279749483997619950077042084971972)
EQL-OK: -39191042921786100943542578352486285322085069425292685238158202937549417928185097567102615300826629615520476316505465412722375794150552330462353356124896483739321653441446703127728441315609093330694305784991844511900128172079464896650958648496336601612657347012294121239821167759496102233234525084695798195547141521849769350204659392602605928907953707277320590923278178152903602506284861018886300148663530071056792375593665422754923886137410482547324901798328311927545105456397213670390651819229021443747424183114992653572959318104053511452473611466305149349027962240989590453237778130260105665310067480846969449221473610614214933278048389171979184119355459010233147440293881252851501522689209874112819966647846701257081192324007280573826673895648273593609466000383382376
(* -22047771987573494284336211037167956208924595972749016352929724093971147687332865088249749580556015503923927321586913446367676445848750229391300778587369581738560634537089081840938984779012854694220894920437076215176060179241185151442003472788530160589267677502568156006531439509890061829154786579353177129190813899423306499631144919702707240832059008168851983259611724134448165201725432622521420667808597545410136493805873769372831833878868603946583848422310946469083400330960925084024624317866822897278934924368888332618046649078771617892961267312226309927786691384460940015979582201446635756024251269978545916298961 7481502540911026808093162425787184755732317118387068406204973030847892995155568099553397887864257088525242568880427634318737874025160499293315047534753494)
EQL-OK: -164950462146458057264341765173378248123415893870534274075422323606836246718538063890359159423074703472625232511667875897808555123518162244263016096627959208397334135559180524195701526029092734741010866589515172934676451385008535538102832400604699294088534999994990970130226363762230944961249818769566697211068918154629209895730969522747736738946126971914549491889482944152891334838234907190697109929512401661529882587076352559260375439428815896053844621297552401396168240947357044985051323834074355418902009161796886350497072010833513601114819625605048943438304411954380599728561071485061414856047768286383287807924135081902458690495890129203192613070824670256334683011083767124852354110322463725619194174195587835939047474059288568764831570274891727391545546467943319734
(* 22607201423790553279447786193696575272983924506336369475058795405894123712509544256099524616893423762658394830755129501447553593365768543361107397299007141714383407862976654294384881771985218996697067215804348472693636567074361380875512341556932579903687576929186215185312685712277482751425466251201421842248749944123326048360909954588266368306843116245625635467041934524547983478110533044085242847795585598341867070787331785945399446665919396062565614516404861115244243161694059679274045050270546536781907061002623188435269769778378780371158624481539046590932125320888745103158180784231722265376331553893647061533815 10075764395489719205294189472045365742345400155046712954334138069917417587273618147303160957788995022989479371576840422540097479703418600112174202202728054)
EQL-OK: 227784835187493343385594867881830022845566753253174983274076326016001091958812135049265213053390506720261776960833046225700903422206015373488419693650378821159134369608830936915027161415300759990632038898164509761337714774392506802504397626551196717184785586630245704512525844329038355790338277254618639554796026366029578805283659986085947726260520495140332204643887370987929304924491772630534558682402396784510750317396488402942581973350428066695976988812610467654886227733900635715495731445319565054848075104982244316563526232071957624002266648721592744376122065531440026836549316222728280595228806728872537793522244957258060730038589170810090676474272044568671474692128168357087077816573419470273384256552275636517940058764711467508281344270125535855785388198570146010
(* 21997874907846585575969651776904015812729615626636027149446399573806943459105370044846476738175828244018281160136531735881270437472624605280356112191272531838028896521621800558410217146758345955334174583639352151367532676985598470747138461153212653362188252002768647808852054182649808145379073620834551216386805267446360709820441771932135218282126427988826945094538034579367527908530151926679515746133600376612899354099328788736038811470295396365432559354070365548930628714861826464935305416998192532029724853617023971964507955475554955277722555849603716733374588174421463022213135839490633927005539569058361144905451 -1400498192750070094581812894241996480373581610489471746158083224360249880335094841398529960182484181641387946900090289855375996313447832474435929084180606)
EQL-OK: -30807984052781257825246153008277875918087659020905755686964119182052911551148620538090633516362197112383237624321406969368641524681503231262834662890145617622830207559490089313283375890353617292096501953380469351747504928597461154633889236826060654886877907382241867167198409355653371944304660938495445848950444683274236538890057643038410268234731745456035923559528706349316582901179686671568504971088561096469997823300883298811440849031903066114422309644669680078733839046643542078157684064686933779591609758494599988463628362190034612412739669041368897594110022347872452261447359402810277413572637740870748949093642723240662839444216981630862346445890780016393330114883270596630385367407921496982236074288475142085411632630374714528706189796772213264952893973677883306
(* -270155241925436273159477510619232592261228150696806729750247050 15545126743930076938536195287546926534964892301082800206802745964245668351235397 72127079799316080210744562119267314209211162112457416152560774669179705347659265 58427280233475514109627698916382980237252687770812483048907352594138577656301900 91336330475502063985843547526216808965829995610054777216888670176112782119332811 99495081134815818196404370468895496198561677002653930126818668800341380375657337 6904264296552316628911621065724553059847235903647375662685025031963599691416829398469283631386160328944460790101458427909545198569619131058877708293713734 -16074984786353617526516141164566295497596312655026144270863093715961484079732496604871734572736757225277596743795506589617891195569235287256031608792067121393492186703333733526879481948463529609113624075923052999494363547340563039654910799974388353472433635130983731604982117092991918514078659590068643956240711810902756784590442416249652077644077280371860780741318193975770906075446772544431670392964384669681404295839302410058434872964315897505894833409101781069230919347279857855594782111721176074849502391457684148683668165019969667481755384384017844104770253558111588611189351637275389688093074751942960310850074)
EQL-OK: 17849860827147993486644896214424106325295064110723402251474432199595968349198253682890653243676378684005650871261983711134190416277366473221365848417375107498764965893729640224952922241531788638514200018520970345581414705756736222535562338748426356003659523260330725662384208724142177900990027225665451069059291754155591197426279006090296512196415617974140965334686090032257444820748820516976632201388937358434205022475303705442914044454220818215336283948743042841946229853366515552653568436171217572212088935263340599371830215580988184775240338748954666846379831467518505260487989636951404886967842600777836444030434816421999334066711024026401362115623932221335906548647785232855815515579448393689650116225664467056283988125816950714780486880294535933597118808163054631168063568847830481653855357008353733414826165759079092633441356914450038756281940532159493763482047244493174370100586359619040444818634156576789665732998111907245928253704097384811414269835758656988678207624731164159069547745777423464124959379113843649940896359346515513936964849811155238140671698227057228045173997904545787593258286212427476788605370334985423461194148838623911634821153061693257996982252745844329344589168264774527631972524787804330730506700000
(* 6411564443509812216548163965666668398784964137255201222920640150 65325385402074288043601436729391841747319174569548241717675134253657593233436152 63305037198546989906433329294566491017476837189978173607681765241525113921707860 72383582945810879300930057856704905379805338886592055772943486702915907397618845 35525980101796892634292856352740658817031405780112750352735419884048051630180860 47579150292602967366908574298176357632207539947399443701205872093150879604391127 7775494633965874654516687741429737470333189902121089184439228657893110997221737422210698789286625633365548095171257583020272703565350668755439139356570 -7847653632223099338936161226557020783515367997970448568586056286591257384101422312757649765574456754668588904917800060981155642916520580540801153603733496143328839018174649200566737789874193483124577734129346933208306772618814806884416239295732454033604210880463262467564639515484363761639994642888910703066277724414372379965872478153546766131136324967950786993982228851928269842355632200589446224738709869729930285189047112131897218464505263042012855229737941639093204086147932759923796947642895167078971517834730472596647456786099215405165290569214043431009370032818978995463168133051136053246705694337584724712230)
EQL-OK: -197949741939898550383903354028842356745461597695099989904494711851411610441324234089773644533872304737431480244289438922163630848266242200711131210228027234579469457105291847132071566876246332653149194709623963836885480655282595345693084881617726426841183231475364991154699746506928116505297453355016975688761948609740314324443406930215518937775475617384099331839748494157863510168743547396262979908353122625808170296763676837551973930928848463398657587603606321137626467028732193151671337338929938959296176472483674270114824853018199281637976410726195357458134038379491704909997939715446657856320452698914513791221947734373322868574099599391493563479057703049036936132407025278683219316357543078875410080612067641232277376174351958080693019953378024732243763129075732499165068171168470237875348580987967740148512425201518758344757030205911031119619416763996490581551977913711646761182756531618786226541010835120092904291975494846126923510483263978074437667987560077422810120462938292680423746968095994108344184522240467647491991837793653579480334442342102339933473270535800619630342940590477752278184994533764839125736268376640933720554199782388890444619996919031351334561766248781813883867406045414518951152508504891407920000000
(* 1669833986019218156514274418186396165434871163342486930502417566 58528969848472951398118375496887849181512821636583415470809040929690124231959506 50098163184827557635697120379841225459445103589988345336880332217224622666020381 90445522698871905833766573423181067004916996574451008349087758531794463581708977 92366726802191504770638415639612204654473958526592425718659284841373421985393966 69096133232785816552402133765198624674167660496399099321713067612475604030259084 323971624832697152056406152359288553860210436839331005469891386690556929684663075996719803995137130737141925308417709520389528780839777347463558171582753 2635514624483961079560488004237441873979133312246005082134175818331132377114926863102436691793380965631848192666106793612266994709357524826644421074908075389316030912936338175907209987972553710900613011802455058538786723149316934049388525865455871552882282353445228425640452635081303490379594663330152071465360003249884180020993032086861074931796165970076448856988084523672973069824258299029863033098237556417571526135639288006133579174344589248428714474318969988990720790226604664141927030250855550010512291136517209169959021730625428868037074528890516086527430801590050720467893089085308995719513895962750896813152)
EQL-OK: 2413207990093478676325592386500172980330574558867366638913149256222218924700401110600319869300256745035993991818342784487193857053589994816247466074246569162659879368383295411190237107255160498774228460295857931362161062884154872938368166514128474751716517750517217000290486110198899480877593169193610813452614906598055909439037075588626529658637140089909227353944313408987644743661503976835580507054926908821206921014266535160031749397432350114673787218438589065861056449106115395189057409933330355574558853874223262465965933679584884152813357065227868165556818717270584803360466149860292769520737249610469675917864449261901859162854558012721179400237645357401213337423255109839806528503425658270050436129019270883446965562683284298538825840361267548675967778385927410390726055957928634152514415917053614892441910675109517307682075989998558764742821214685548219206933043196677521610851950501225469125512893859254575460130829051324112015464552874242522140166275233893076603452098841950130740353331198999756316969161591691095397245996664755249875720008141774247384884623389430842799829690618405724986702942913150258769060684255363816662231923570491001519802836627028431389746450987110456127797025006251203111629141890634728548553728
(MULTIPLE-VALUE-LIST (FLOOR 7853255233330224291 -3336928547114505419))
EQUAL-OK: (-3 -2157530408013291966)
(MULTIPLE-VALUE-LIST (FLOOR 14068934522023857270 16292006600125740074))
EQUAL-OK: (0 14068934522023857270)
(MULTIPLE-VALUE-LIST (FLOOR 10985143198741137410 2820546847025452162))
EQUAL-OK: (3 2523502657664780924)
(MULTIPLE-VALUE-LIST (FLOOR -8108344024060626734 17657489924906565585))
EQUAL-OK: (-1 9549145900845938851)
(MULTIPLE-VALUE-LIST (FLOOR 9793321542618752251 18086526939764980195))
EQUAL-OK: (0 9793321542618752251)
(MULTIPLE-VALUE-LIST (FLOOR -17146297557940039430 12031974228591547856))
EQUAL-OK: (-2 6917650899243056282)
(MULTIPLE-VALUE-LIST (FLOOR -11002425733929018635 317353195315898710776749437474283191162))
EQUAL-OK: (-1 317353195315898710765747011740354172527)
(MULTIPLE-VALUE-LIST (FLOOR -7045772845268193739 -89864936462331315327547597221973588375))
EQUAL-OK: (0 -7045772845268193739)
(MULTIPLE-VALUE-LIST (FLOOR -3519209948682231610 336646025916394184314065151550367317320))
EQUAL-OK: (-1 336646025916394184310545941601685085710)
(MULTIPLE-VALUE-LIST (FLOOR -14043580588957562420 -222396907959379818229719625081455476397))
EQUAL-OK: (0 -14043580588957562420)
(MULTIPLE-VALUE-LIST (FLOOR -9551193686327136711 75278849342865310446781730521816023755))
EQUAL-OK: (-1 75278849342865310437230536835488887044)
(MULTIPLE-VALUE-LIST (FLOOR -5159693807678286583 -271047212583781769863421872046042817014))
EQUAL-OK: (0 -5159693807678286583)
(MULTIPLE-VALUE-LIST (FLOOR -468628810409465000 4096333242794181573565417750313678008664626221486481835906739336082806890901464399325558358976385254948318232837795406709018062193288308568894691407903633))
EQUAL-OK: (-1 4096333242794181573565417750313678008664626221486481835906739336082806890901464399325558358976385254948318232837795406709018062193288308100265880998438633)
(MULTIPLE-VALUE-LIST (FLOOR -5244261521146873643 4921965954460062114436531997676458648483262898583452823054595308486273272424691697564822554202559195140246785942292198280651275061385828405859241079703409))
EQUAL-OK: (-1 4921965954460062114436531997676458648483262898583452823054595308486273272424691697564822554202559195140246785942292198280651275061385823161597719932829766)
(MULTIPLE-VALUE-LIST (FLOOR -7155077620310044967 8812163272024170253854686552273644496512722723120222844613502711675792665532423218585794856067792762737333036865054171911349107383532358686613366666267909))
EQUAL-OK: (-1 8812163272024170253854686552273644496512722723120222844613502711675792665532423218585794856067792762737333036865054171911349107383532351531535746356222942)
(MULTIPLE-VALUE-LIST (FLOOR -6816314458740361202 12075686527410596248188273566406493470578404199548730085391183041200273406509336777783445118538744079686672261898288597639090345296674064493442338947240247))
EQUAL-OK: (-1 12075686527410596248188273566406493470578404199548730085391183041200273406509336777783445118538744079686672261898288597639090345296674057677127880206879045)
(MULTIPLE-VALUE-LIST (FLOOR -1890766085089344496 -7408951123352997019624764400646833541081866912262454311449242781355699966135127365870537542305320515188627454777019144990896651509964466134772403923321917))
EQUAL-OK: (0 -1890766085089344496)
(MULTIPLE-VALUE-LIST (FLOOR -17760474272160473768 10671898954663586353020741847122236830297651230263271051052178674502913972809415507874936117140992859978582852208528956402833042707438860216609301338079639))
EQUAL-OK: (-1 10671898954663586353020741847122236830297651230263271051052178674502913972809415507874936117140992859978582852208528956402833042707438842456135029177605871)
(MULTIPLE-VALUE-LIST (FLOOR 17203040353218460773 -2087162439393804055245476778327445230668947133920484097696589818636894139336038424853265430700117127209095408439503149361955520500062568298413951113007815520417010757436097548975086796164496676384718866185751276003374984886645837833063272909444571294955778352876647505220277070946109654595325494251711661808952794932834009121950804034627054856954463330684354292113876259596011570415522831755074832239680022834732540878425796300024337145992774113324576942861121693541507092307262607720008434123040550199401165667835993232451530119579950363100932584067714571588474895040209606410481479858029354372704983248137195749442))
EQUAL-OK: (-1 -2087162439393804055245476778327445230668947133920484097696589818636894139336038424853265430700117127209095408439503149361955520500062568298413951113007815520417010757436097548975086796164496676384718866185751276003374984886645837833063272909444571294955778352876647505220277070946109654595325494251711661808952794932834009121950804034627054856954463330684354292113876259596011570415522831755074832239680022834732540878425796300024337145992774113324576942861121693541507092307262607720008434123040550199401165667835993232451530119579950363100932584067714571588474895040209606410481479858029354372687780207783977288669)
(MULTIPLE-VALUE-LIST (FLOOR -669078238914427842 -2079683283534812796000190145696654156804430677578086735229530182730363039425073862859919937645919418081821481495275802097707156965850792454067873053943961704938117974314269568411834037549827330778321735965757574814268024643310969429104824266062514450939201453648232801402417276979456869834703061150723202264463831469016146310260625377771326468627250569024458585844135123967133684658903385261562998370487428947011971199332502829621504477139578507890165895257527873153869666215808793006714467381179632834850697420959155528830942491523671012905291756947015477293335637719271764878661266856465788562934083754663149622043))
EQUAL-OK: (0 -669078238914427842)
(MULTIPLE-VALUE-LIST (FLOOR 7327608361251253460 -11696871058150243071087622230096689496181624466205249401376348902965608647385664229774648233384515557654898456058685820740766304363182039373157014626506361274439760335671626498691756724181737933201816787306863365879304649516313681157144055793349950077334014446025781487249267998958541998722387302987853596488202173446477234627919885268339967510098356435511938337505060706688248914394292741973765745281640737883810857064447143652281758869836897346742791897670275478332406904414773228555812810686551346417028168391700814494167715137071887755902595471083839770070956620494992791342919563605887139693691074220696797086954))
EQUAL-OK: (-1 -11696871058150243071087622230096689496181624466205249401376348902965608647385664229774648233384515557654898456058685820740766304363182039373157014626506361274439760335671626498691756724181737933201816787306863365879304649516313681157144055793349950077334014446025781487249267998958541998722387302987853596488202173446477234627919885268339967510098356435511938337505060706688248914394292741973765745281640737883810857064447143652281758869836897346742791897670275478332406904414773228555812810686551346417028168391700814494167715137071887755902595471083839770070956620494992791342919563605887139693683746612335545833494)
(MULTIPLE-VALUE-LIST (FLOOR 294675307927425004 -9548883545732446060252072829565833006884749934819836721462955213854827688043000170303649263042149519854567992890424662453846646328000352698376041008580371118805742958892669824820331301849741711055204656684075622499980143446475914450482604391515448002257899292716976191315018524528823574850034894770209999447615978958086058881855069519056370913875205852377738400734853568252684386414540818555760214483168738870291995504569592275824832746669965860852593991220739290892286776371571179317949624919667076576237866033103387061005489130212740740367035039239029315995502459013799346342754507246725497131746887762156527202924))
EQUAL-OK: (-1 -9548883545732446060252072829565833006884749934819836721462955213854827688043000170303649263042149519854567992890424662453846646328000352698376041008580371118805742958892669824820331301849741711055204656684075622499980143446475914450482604391515448002257899292716976191315018524528823574850034894770209999447615978958086058881855069519056370913875205852377738400734853568252684386414540818555760214483168738870291995504569592275824832746669965860852593991220739290892286776371571179317949624919667076576237866033103387061005489130212740740367035039239029315995502459013799346342754507246725497131746593086848599777920)
(MULTIPLE-VALUE-LIST (FLOOR 14347605674351973575 16781108313723465798753322947549009969874803839178924211234447140560213638432451682705091051257464849827979202356053729300113370530117630421654608371240669238603643549128642643200948947465613904905607632005913664436128507306181734648889038561843797684348733053132088104433891457988693229945931772136047702319895617567109469705064237812979865949533824478284021673220084274688077361876364538071423609125747407610677136416454538389383594373243559248761308999294417964846813960148782443892858983199711111035244418968070018974928177662516580063782128203214203321005133744081558995859628472663680467632605080081460859254457))
EQUAL-OK: (0 14347605674351973575)
(MULTIPLE-VALUE-LIST (FLOOR -13687180458303546035 -19965807258690898827399047857329749541944041888361526571512375013574840494217451526698619297248029675659091093507275385543103914023886879938416253663550378748995953654394575052030527774451712268159052917447058332864628753215292671454945836228787137495936035900814206996568155366945096185932229795907560606361081170245972586794828085080152240904698184990372898689089164281206741448028676272453255619644103230837682506759429084083781590844603079867247577101977877828608823440256009103689824572652465343135798570848914557962085239341382269526989381779235955669274286569338275810475113610787290242075588029043316765795281))
EQUAL-OK: (0 -13687180458303546035)
(MULTIPLE-VALUE-LIST (FLOOR -18925243707105550517292233464727657082 9190307209239173280))
EQUAL-OK: (-2059261271274988371 2728041824926269798)
(MULTIPLE-VALUE-LIST (FLOOR -2268729715267556753620172461333386061 2091801429708129323))
EQUAL-OK: (-1084581778674907194 1902605633041663601)
(MULTIPLE-VALUE-LIST (FLOOR 240105871177433673480858499581307555362 -18137436669813972164))
EQUAL-OK: (-13238136984210147236 -7622864679137983342)
(MULTIPLE-VALUE-LIST (FLOOR -262280851402380072992262860428676408462 -16900353177245877861))
EQUAL-OK: (15519252683754978805 -1413263307002672357)
(MULTIPLE-VALUE-LIST (FLOOR 232088877459084367318095567773397104766 6879279671528853911))
EQUAL-OK: (33737380734733937751 5401711328350210605)
(MULTIPLE-VALUE-LIST (FLOOR 28127709642032836544705999676759725409 10932535648386303235))
EQUAL-OK: (2572844081801336427 10537089091686284064)
(MULTIPLE-VALUE-LIST (FLOOR -306937202176830380291551701368328539229 -296436198830834971825518518346845101512))
EQUAL-OK: (1 -10501003345995408466033183021483437717)
(MULTIPLE-VALUE-LIST (FLOOR 53182351345555180643155906117731554036 -239211638592486301383761475381736024507))
EQUAL-OK: (-1 -186029287246931120740605569264004470471)
(MULTIPLE-VALUE-LIST (FLOOR 280879521805922529084106054377533635149 86259942955448859132329436894499980462))
EQUAL-OK: (3 22099692939575951687117743694033693763)
(MULTIPLE-VALUE-LIST (FLOOR 270479016313808755540727122565065208981 324912300098276215771804552548480817149))
EQUAL-OK: (0 270479016313808755540727122565065208981)
(MULTIPLE-VALUE-LIST (FLOOR -36931767825051824504116995033958612864 319307981922121038618879980001580483695))
EQUAL-OK: (-1 282376214097069214114762984967621870831)
(MULTIPLE-VALUE-LIST (FLOOR 107405040163562716679444439233633957914 -141652913538112981614728925754765362880))
EQUAL-OK: (-1 -34247873374550264935284486521131404966)
(MULTIPLE-VALUE-LIST (FLOOR 184790583924323275311064238756309559899 9405763068924930772523308542613843828189472529194204592633223103364008985533829727911596099340788835060163612329614413033927995456162272921833539208882402))
EQUAL-OK: (0 184790583924323275311064238756309559899)
(MULTIPLE-VALUE-LIST (FLOOR -232146313651929815140292892576650425884 127874042542498530491272428412953321188339770863893691736473766303033699167382382296818126363236257463426694846772750451609560841554300961480864245159756))
EQUAL-OK: (-1 127874042542498530491272428412953321188339770863893691736473766303033699167382382296818126363236257463426694846772518305295908911739160668588287594733872)
(MULTIPLE-VALUE-LIST (FLOOR 8728026917336931021644334642968359261 -4025737651718879467086249421940400743845718511565541383201031450532496911741243591880148294568060736532264934821412351158153056198557273134546519285439196))
EQUAL-OK: (-1 -4025737651718879467086249421940400743845718511565541383201031450532496911741243591880148294568060736532264934821412342430126138861626251490211876317079935)
(MULTIPLE-VALUE-LIST (FLOOR -21247806463473594155821742168531145877 9874623814693251335287095436063900170315895560443374584548447111313954604343515085076726174459237734570523327188441412904116251434030306488421699399082287))
EQUAL-OK: (-1 9874623814693251335287095436063900170315895560443374584548447111313954604343515085076726174459237734570523327188441391656309787960436150666679530867936410)
(MULTIPLE-VALUE-LIST (FLOOR 286071012976663674972497644839812778135 8117963470049102990205107814791130105126121536354646949522748212681559213640860255350655907507344188574393108661850973221437234442503731759547377868482253))
EQUAL-OK: (0 286071012976663674972497644839812778135)
(MULTIPLE-VALUE-LIST (FLOOR -31984072490103846239901254171623218449 5692584577100138206704178766874348327662006017031045734962382737701553237360572309466111381682998567474445884555969155997528896962520199289069413649945515))
EQUAL-OK: (-1 5692584577100138206704178766874348327662006017031045734962382737701553237360572309466111381682998567474445884555969124013456406858673959387815242026727066)
(MULTIPLE-VALUE-LIST (FLOOR -118786321298036108045826901623494422286 -13104687393529855246189161514016061367829206536234756076440701117699438900634808212710497707688898041370523685367660273492555927331371333817584456923437812254937564791326005224466260676246116823279440552837098144298072108885163702544652442198253976130758036230979750526665070549806140578651660117367824058664768255971820333797528263566114021182845197585116811208610765478558726491630221448907739229750716647693886681440731920621825762708622208585945445501310666367635378515829380161368994361558247741326227866296163878689192696502960274515396418704173356117106149549811507516298161494760216869495774889685228097554343))
EQUAL-OK: (0 -118786321298036108045826901623494422286)
(MULTIPLE-VALUE-LIST (FLOOR -243504960196882294351576664380857968998 -21587937181410571895883243216668490389074705797891859245233974857468088393972175783210897703383951091997858590608339069503309630378648345491373074180865032523580053667127292664354305946146706860083207200717386662398495588729927890691458790805600368902559075452315483293077820819619965677979632040202844747133012382862591603017396270452230496812292060122531819615885125296991557805051862986461441377986436031061301043809602913037623299360710776463563079053501286633046825608308134411478010516309133407298319800662521169341026639016773610132691088293480775753098006068864600975258749129292334356727402877150032641596013))
EQUAL-OK: (0 -243504960196882294351576664380857968998)
(MULTIPLE-VALUE-LIST (FLOOR -232153120215337418381368832017470265942 30369869998519160635038439385899036531726274899243107662193573776561025086030508184579231487739439638990032661366370630132003795988534362627493292132764049369361254377811101088096885616264297545296183017838644655031800075015262568240918564555865889092855166242732548296118581123607728694721796055009838837557999873738362196508994398492388283391000153200151108985088421583241872508945550713986000643154770628316896294096213588875028875159647959209523043158262383137987983806573391208706198841017176042216759223869369001945418516819972673432636326816040752486579776281338052626173120273068890045743383055115108151149136))
EQUAL-OK: (-1 30369869998519160635038439385899036531726274899243107662193573776561025086030508184579231487739439638990032661366370630132003795988534362627493292132764049369361254377811101088096885616264297545296183017838644655031800075015262568240918564555865889092855166242732548296118581123607728694721796055009838837557999873738362196508994398492388283391000153200151108985088421583241872508945550713986000643154770628316896294096213588875028875159647959209523043158262383137987983806573391208706198841017176042216759223869369001945418516819972673432636326816040752486579776281338052626172888119948674708325001686283090680883194)
(MULTIPLE-VALUE-LIST (FLOOR -259060284965774946595436776839639567158 -21169437398760148980356190208468018621145492999838564155598571671707045137252408058263155870788514173361612648418947991691931017566701206182096411121805142388703524692384188551391839307655250861401059757668540803453257330609840260191124331324376455691656017965418225557221321063048013134701879342357330536176553693912196231407222911508076200690973402778332647229863066211873019193191946948707769594605725700542299351271155436324879464212647734978854222464094486372144771948169422844206687239103281296767882465060755610256361348437002775612357787333990788742488962974294617778863800504758143312112916148210635178700875))
EQUAL-OK: (0 -259060284965774946595436776839639567158)
(MULTIPLE-VALUE-LIST (FLOOR -306407220440527520801126245152934343544 23776904469041910002999929986640006577749806048379780143306978176280330224333859620859305982085584460504452577150094943864349273103240498588108336792264540481132832425653265046674475461727185564436156797869482735166850827691928781085870354146365177855543550807539877079785312955597311473866546268560309551339704009052837019611095284429480282839060448969927393502922337023493529232757886223011597039473438267362519775173848264262428693937605086393282678388857244739695710639089112115821491015511241179389623611704128686301802869094211111183507607222840602723592206395532989319304742353354849715544201896997806941793031))
EQUAL-OK: (-1 23776904469041910002999929986640006577749806048379780143306978176280330224333859620859305982085584460504452577150094943864349273103240498588108336792264540481132832425653265046674475461727185564436156797869482735166850827691928781085870354146365177855543550807539877079785312955597311473866546268560309551339704009052837019611095284429480282839060448969927393502922337023493529232757886223011597039473438267362519775173848264262428693937605086393282678388857244739695710639089112115821491015511241179389623611704128686301802869094211111183507607222840602723592206395532989319304435946134409188023400770752654007449487)
(MULTIPLE-VALUE-LIST (FLOOR -195344089877883615473604540022799066156 3662747206396136814780716441352319011395583880744440623779519524132715621398922492090110915810914165138435343905061143614931233310311653264955206314385113727380922840781471233570237875610273247058183529977038444774890036917021403875269188605058323112809901006876685005810599540694986877767813641408707144817551209014119080068666341132956917595575721029282915413432788003670940873484464479035116187361986468817764174983360339341760904395062935668506379254915132158079325547293981795720009601997338615068852024788929328937759791477545407878160402653256560646902444406842976796122784294159073232675729939439754133572694))
EQUAL-OK: (-1 3662747206396136814780716441352319011395583880744440623779519524132715621398922492090110915810914165138435343905061143614931233310311653264955206314385113727380922840781471233570237875610273247058183529977038444774890036917021403875269188605058323112809901006876685005810599540694986877767813641408707144817551209014119080068666341132956917595575721029282915413432788003670940873484464479035116187361986468817764174983360339341760904395062935668506379254915132158079325547293981795720009601997338615068852024788929328937759791477545407878160402653256560646902444406842976796122588950069195349060256334899731334506538)
(MULTIPLE-VALUE-LIST (FLOOR 9264891165355739565190184416501921531110089392234481682785663537978152834210043205322426048946857682928713233093454298987718151514375312698287977140085629 7037874176512351849))
EQUAL-OK: (1316433191754927814343121270936699199595699278862016004420926865721433832616431797693201713416985056700387482358940219476958754936526117 3725966351458345296)
(MULTIPLE-VALUE-LIST (FLOOR 4200307032774171266112621290628586259036811354993551074625290503853725932886889027855146647188583607214617803535833936888841730747156500044307235280341823 1284895891758199540))
EQUAL-OK: (3268986273297707492966046995014614916998242647231210827092764188090140439361457237468815188241626314878458369000334553644889671709204514 686385384999618263)
(MULTIPLE-VALUE-LIST (FLOOR 4633581426210593840116821588308941075113609939505374670564216205139790589811590001728944069668539972864711443927654873778749890460797761818777105143436310 -2962967916964005701))
EQUAL-OK: (-1563831116658993795279542101101791208522139405163357327177345954575873595639420625598557391282445499923781922172975036467881769387028636 -2305528351410817526)
(MULTIPLE-VALUE-LIST (FLOOR 12717552468498637611743035736272812618998169576927971614333302239794587794960622996075191568720328790968571121428403438724885597787608886055291630047062012 13314634913503466421))
EQUAL-OK: (955155928128432692468469826248574845938797371431354312846155816839032798664341688948121282840353830287784283921940330056923616110441287 3054936783550538185)
(MULTIPLE-VALUE-LIST (FLOOR 12062294501874959722722826646961478850437392058690935960962546316456440331759806886386062852332964852589981740852222339370133938328830299239599161668985128 -16763340409247566945))
EQUAL-OK: (-719563894032763567901416565485723597235798340734444183600832520303761799320002945942723929422229544393458648487318438477478730610009081 -8784252901936442417)
(MULTIPLE-VALUE-LIST (FLOOR 3044847544275515285523698330617680562098304367055502952571345800359603621492376638228899902071703358030930686556600015395721763778348780143354036450288026 -346996692199522190))
EQUAL-OK: (-8774860431593785670059820118794469144363980632658525112469174051232043754755411530275560319174086707639904288765947602493995823751245651 -238735003065207664)
(MULTIPLE-VALUE-LIST (FLOOR 2509912747961300370421908848463238376627618739583712646450568707494390365647434163992939257405972498499963653610934135188560348612028561201284997136414467 -103539220471632131715513528655357150478))
EQUAL-OK: (-24241178719797015812049763065806339919024561304709065585003455368093218973185992185403749066840410575011438662859226 -96472873114015658715754743886276195561)
(MULTIPLE-VALUE-LIST (FLOOR 903584156603757584665316743639288345339689627067279191353819345586609786559389840933430566508676924801215959188934167984436460131912383813696092800782502 331768089796013775863175470747253254043))
EQUAL-OK: (2723541486944457282998823558887230609702011905460231484608706829329099534108144630923237396663979818212898288888162 206235332161320659528701690369799443536)
(MULTIPLE-VALUE-LIST (FLOOR 5673315779132616764913839385550510388979090539569302085655840858178135330568442902409259209441411672724870197775936862625748838206738247202566588717953664 174314453261637397091517016624017866910))
EQUAL-OK: (32546445076572334426551736182476341541840123356058415149120265601377736759669652080905093959104527787429999911903291 116692109360780668718335531020688952854)
(MULTIPLE-VALUE-LIST (FLOOR -1042174796681883628708939541235268651605049912220225874766096393016094308719465113556241387514699104237113811358810257758037463299809921161083533137718034 -222161050831883826404696847740663687900))
EQUAL-OK: (4691077903977550484144586938760520043889189188344556635834217114054282381408390083982959968194813858480017307031811 -99596643070173880773679158795261931134)
(MULTIPLE-VALUE-LIST (FLOOR 514620852714641065399283188571474686623886013323210978774935263256584816823822985571618774823719005380283570413767760460152207111047429811764462688164598 -249379962778237023348159084806351533829))
EQUAL-OK: (-2063601449697349844851896329155481297775287042332288194884672211603708613220802144442049441368964502372230090742486 -95322380544583572818596570976868394296)
(MULTIPLE-VALUE-LIST (FLOOR 4269600385716644031357008587416832262633392539755787971157199376810061034292825362806383550016756143465036715717235613514913396047178769910869994174370663 285417980748490192096950554131180300340))
EQUAL-OK: (14959114960171371128118740711875740516756226597819143207915053559296218628291049058344647983358827408473567791787490 241314195989544958480263376470519624063)
(MULTIPLE-VALUE-LIST (FLOOR 6257762944066060502889009610562625466881502649685643619949901701091938859953222566838296129679249506961399045004819501125771060525963805468605899184284857 2403901388951678895074087838271029994884292204266026258064846860089259517515609086601789420041871201768080771502802345608184755582676267305500365461987443))
EQUAL-OK: (2 1449960166162702712740833934020565477112918241153591103820207980913419824922004393634717289595507103425237501999214809909401549360611270857605168260309971)
(MULTIPLE-VALUE-LIST (FLOOR -11993484600336960787296361130458404039545119394875472848786275539588308627572632551925095053909141197737731742215007587172062102742960429155637516154567478 -10601606227266649325153572936490025724316912773656025997862708934485961793376598665748396482615905529759961488391911046336857148489489874009257983913322770))
EQUAL-OK: (1 -1391878373070311462142788193968378315228206621219446850923566605102346834196033886176698571293235667977770253823096540835204954253470555146379532241244708)
(MULTIPLE-VALUE-LIST (FLOOR -8099353584218727402496117482244315513694479151831901237119469501251316930293170263154474101121202090352876083340578448720444998702069748972927117400667238 3544314361305784888681580682051379178614889611356920001389193108853540699763802421224233206957629368752496825814976307915371579698349690086107445288844845))
EQUAL-OK: (-3 2533589499698627263548624563909822022150189682238858767048109825309305168998237000518225519751686015904614394104350475025669740392979321285395218465867297)
(MULTIPLE-VALUE-LIST (FLOOR -2978635751180326260478380464684854159186938695694356726729544155114559498149136630265180287452727795680214540092030170434165319182046797389540988376220992 -11044560433803724847345327269572156674554851849210901400046696801586678634230888624140822828361962132102290537138655249676050009778590939633587416463610415))
EQUAL-OK: (0 -2978635751180326260478380464684854159186938695694356726729544155114559498149136630265180287452727795680214540092030170434165319182046797389540988376220992)
(MULTIPLE-VALUE-LIST (FLOOR 13340538348613289212198643243040710073441733600226599862111857175429956610033827913042723029883753278922272401272143183977342753296395660841047710386806625 -12505012580354283714273335370179473407347376833608196161777727706326565713505585671787333065372262611606233460666323939469037058474587043990269917174242835))
EQUAL-OK: (-2 -11669486812095278216348027497318236741253020066989792461443598237223174816977343430531943100860771944290194520060504694960731363652778427139492123961679045)
(MULTIPLE-VALUE-LIST (FLOOR -3452499360915990528305851079744650498637858290301947784400848134276013289408593218875969649149167701046100505360083493320272180164238716241369492874982856 -2841735595132421145030480470066423226109731223189024018875906078709951146850527470934664784555907173906888591079310297248898808599295604861461544021697908))
EQUAL-OK: (1 -610763765783569383275370609678227272528127067112923765524942055566062142558065747941304864593260527139211914280773196071373371564943111379907948853284948)
(MULTIPLE-VALUE-LIST (FLOOR -12837726014506093148099404481188410844577204272048603185395045047349565142592994407238657335674129551317417810603584063833795494760777857363295221929632592 -5400672038070763758928059302309515863608512780764658336296609520612929827128710430832496604060142364086061442480255889774184624927820479974807630834638627053061502551989845184646873008822134065011205730341955561862333543891572685472831543459711809182159609688999832404181689665081467086838440500602969410420032314939424736094367166550148605570451238900811316075091818613634658092771400323953464835124475741159313252328998401218032670762735091435255199537815920258090766640501899817468173756745613666544200642455036991967916355826412137450931256645775349763991939102903236911444655964118925598580974976427195132959063))
EQUAL-OK: (0 -12837726014506093148099404481188410844577204272048603185395045047349565142592994407238657335674129551317417810603584063833795494760777857363295221929632592)
(MULTIPLE-VALUE-LIST (FLOOR 6578123342051874578301723989032639872736755816906003001838468752363433436477439123182015773040480790196872643618542950300401093404997067180920740266777136 30227534847135453106177887048045830910966009330493682541426640262878585964314188306388368740002450969080153107270718818194095421631888634061517731024627240634873991685067246458822125591350775226166707968203074411304172314390138208453777131423508042090910198631120304798774511984974823253005683386272038346156403540545900138637964682890471751795844957640450350739073841005154467987598913264762974403365908691068629911370262907886883158252280853615622312950774196097179304856495254526220900137020823369927850276669023897589972466867500466273084668060310345544901231841857904496215091732346299276586847479136514947400671))
EQUAL-OK: (0 6578123342051874578301723989032639872736755816906003001838468752363433436477439123182015773040480790196872643618542950300401093404997067180920740266777136)
(MULTIPLE-VALUE-LIST (FLOOR 12403944923950846249231475663107427245396603223802100275104415443763524399953865335344297718622152249002880852792246968794311649331174399649925724682365691 -12888526328266820415927145054786787145889555649382608442248161845973745960691528655550360088202102799744537495406020539568745771467756467183613368156733378808019164713600978887019905699871417123365613340681673916006626966649924170996253273073733852663021384681382051909095614154557333966638418401258055946731820806422207820872515345183005729150326803604361512295955159943694411555067679327842378949865992521340416781113735936437694218150384351520004302169462501770232864597266654390198260481651327159066598217103147752784312005857617885666670915444340917773878003125490279146098981790584757296196254721882965728596834))
EQUAL-OK: (-1 -12888526328266820415927145054786787145889555649382608442248161845973745960691528655550360088202102799744537495406020539568745771467756467183613368156733378808019164713600978887019905699871417123365613340681673916006626966649924170996253273073733852663021384681382051909095614154557333966638418401258055946731820806422207820872515345183005729150326803604361512295955159943694411555067679327842378949865992521340416781113735936437694218150384351520004302169462501757828919673315808140966784818543899913669994993301047477679896562094093485712805580100043199151725754122609426353852012996273107965021855071957241046231143)
(MULTIPLE-VALUE-LIST (FLOOR 10948926687039959668263034501276830818625159748756208667794639002017960671515169323966433371280908617310031465455790806503858320395456591407286777524363944 15489368888944605373650389556533647343231613227589912336942045556008797399070972592836944702007913599282985878262526911196097512734678645706417084706692047107683744531285802197270639216129852640210205547180574081479052109734758880839510339349237982383997307379952940072013079809351763653427560483156946719035644278683384662348499193303099798764213152890786143522348717903997482162057330324665060570551176318195643585920374603137371921517627526609290876303058743280212715019326447206678291320236859616579863769668727778545628289338458285997742887048186232356815344233169348134282594953756462483528235310248146271138654))
EQUAL-OK: (0 10948926687039959668263034501276830818625159748756208667794639002017960671515169323966433371280908617310031465455790806503858320395456591407286777524363944)
(MULTIPLE-VALUE-LIST (FLOOR 11464576772189320419261665628466949872551044398628568459420638211702970737332076526558331636045640676437486199912474581890841933557822038200509907802936313 -22467560825853172479037421968188386486420879368653733048793951227030601094142939166908251610058992921146938740897141065727494001469172869273657374887890530345239013255211792126218659779037493454354985213639803588241949068595974842726845550080803721118359501094994460828504625140423100683538018569820187798018489678377090273255263020908779694768888896507998040871877361662889436371169588814603494476932238384716309803290555316924487478792149178773379217766514013266795383492328680695659480010501872205935050314706513127406414046031915649062646891311739001532048668245929929298605152418405630093221583825629790103566902))
EQUAL-OK: (-1 -22467560825853172479037421968188386486420879368653733048793951227030601094142939166908251610058992921146938740897141065727494001469172869273657374887890530345239013255211792126218659779037493454354985213639803588241949068595974842726845550080803721118359501094994460828504625140423100683538018569820187798018489678377090273255263020908779694768888896507998040871877361662889436371169588814603494476932238384716309803290555316924487478792149178773379217766514013255330806720139360276397814382034922333384005916077944667985775834328944911730570364753407365486407991808443729386130570527563696535399545625119882300630589)
(MULTIPLE-VALUE-LIST (FLOOR 8938867625495530153186421114297747048040597826172184076413640033054738602015847458230139602813250873350372960139469151926251587994978713194477868118851140 32078375072910127937267277353555359769886046039319229674839329288579279294400524798815635423380870475101996161416889444654312193048344262195882716890119398121411812112449203794619431500846260449790771355510015457009235934372609093350279916863051987911050185220414029935306290325311701907978862607656115228781358052463349741922708496995681137879712967466047121123132315277071458202185149672157950295326835513685167006326116804121841993768353882369640078584371838201520000042076939249781755766637255305083290727182613012935978235950698890245889658464214791358409590524627630419359189066595841389501082705783042993303059))
EQUAL-OK: (0 8938867625495530153186421114297747048040597826172184076413640033054738602015847458230139602813250873350372960139469151926251587994978713194477868118851140)
(MULTIPLE-VALUE-LIST (FLOOR 8722682937170431050833187146084378340001260037987475887522226657702929497643381574300242436757970258082372353322466430729560481174965555877218498123235127972650642792093407571195465205419575987213014443482975328738475261835806620444520634849116095235065774422144459742716160248838471185163698000228745859478158104063095766855794756463409807333016407203497851105737138480852953389782284594500871170431951978989370255765328498664056929197514187424012915608945460596104718351333193752820591185791608965252963085687083606400804224201063308456591357967802486377986437493144904666736661926951141864058594174814702200209409 17412472792254218853))
EQUAL-OK: (500944526446044913245854704095754296476914947449773601840238266000641308362538841153234090543298285278030309320940403936325404298435972916448525262079072487832742313980507689645024811947475736929391921911894727993931203210832413457668815952782782949239897550712034201783959782842323270598876666346488371315244615931371511266927466746002593260083813695350859233907674818312186201150675556646229110170730257749054381148001252368819048293261475322932890858943640868603051493461480912552795132518076648186629059596407623028993206501153697237322059149347109211519809718392500920402797396035977014151301 13717640401691531656)
(MULTIPLE-VALUE-LIST (FLOOR 28355649069936648964480577421600521514076854589748655538478527484386692848040560920378270353295750065522502408426901852657385194373002516782134462463403619404085937808470896616603996134884288656277511001166614643845546560002367982733683422291378278295503032478358197654941019479109634084898326003113897170044006328598213579789377859798284810297339455100733353158770429621612618690067430491463355522146151298846940191011096497912423339688256950368577997428204387561345591508638698782496102293891198658979297125431373501637906166414269821235570899541062164735301390814949753951678580623524363615439367796948526661114273 8633859053023126034))
EQUAL-OK: (3284238125245742016855698157684933898976923158153988299571059835059738533454483417199061360717949675767825259147742326435714596823475742487511565640155717557287585352355724513814056546156034557507060565711152037955657280498048473524523497495066421726381315710512047045674071154161308957202034177182801687183543929989744017034272683534975659632492076519296858840261469439577557507171156150551483889412665000065287799665100306570592222219949067222441707356112651967102951988787499729560738632591896472356839552808850928783757605816255738706660766653939585897846868373880810762740938652879077841365007 8480542101902822035)
(MULTIPLE-VALUE-LIST (FLOOR 695804210379264643979583966247939985121477063798866833769029083451619832314943028815111717357207629373097980486420088049066444875218919515464168730784010670913213630418336413807551517181427706050442981412812560910674568907086122536915068847926867597666432252300779682993163510641754139318056267379096886236384894321926559804092457910184502775704660359338939407870665678723351102313495695271753077268239934810069567863069912893064736153816317584230084541663742856849855885433861537874945479324326871485256528265492542514387227516996450338546971631790859699133015684902494112907242906699969802617955900147949678000702 6681774530135049718))
EQUAL-OK: (104134643759851814351147451693200005177949603843035721223567744815305881538588822665583702468671678158123657386652154620049781061631961328262453617035662063853637317024464861861946266314086911857166878173456014196637218631863393572542109069255296051532325807248516303174349857623773438852122643289226264801658953137748153296436411578898337203701260654377419646372368642303334799023574274991890918545934625239992964365706183254509198057965378271765137299881104144690382322308740670412140492093203922319672781421992523823019735773183797196153517598307995654976625437636949948229208840097078305544042 753510048969320546)
(MULTIPLE-VALUE-LIST (FLOOR 23793846839231724395641481096168600821165863841834871677817770057997115862268350281729411419898015728222764385314741974298570203231459954889026804768374989204737469979104608191592488617915776065920825549826544170491376474603565313317103382409887303248767928207436610335921923003830631904883475966155908755916279914050461058817604412376332860234542206749755476863494453482771627934874030957391163592500144106720406855489772599751499515034904792907346159848425450017939743424553771285003901024075692162881112993617392057913260097840038314973483416617082316428401467936188718832437149607288888734084245887947167600476942 14251636779665730013))
EQUAL-OK: (1669551870223134151303903342674455433642542678166026329327716199552424270739267924882373474967130314854205248773422856606186537084529373808518256136223710801915037299873741750309033582768093390015183894640465684163714303454407585554851774795653260663343812169894506517621409762650950455752948417517702896344204545008148927831629685230911115972567815995382195887880974480058637498609515045000261275580213450984765289759768577989085446697886224919418538617830152205807256503108619376475835548388022966261347231830397100233962945745245326537590040744120991719469590787920917431072137837209281279829978 13846244437708747228)
(MULTIPLE-VALUE-LIST (FLOOR 5157109352853249971318864071100809054313778706912280725237530653514718017885603638808994268309662830522966266131723296476071219223553003512249189605920498878997009866938158487186969488205976122254188731320527219934117903279062529020046834522969499499006879142996400588997334123741485390256248878878301063076286830584096271875934275097457786951285271567141607668681320623976130528011279831938224824782139301311433982239041406699687231975177586985955350651094601995816681979048980035660883809964491229857363116776116215144288428315817606755704237448380042774619545204701291306469557276264456990236770565662987790837189 -10013270743141522218))
EQUAL-OK: (-515027455577944332776599219259294388811187969682242219239790206822600106136108551964834930674442778634657645567794824061780492131991288077428371773780758138983535394992930162959647831148714333399217585802721010849103285390761891312665489859363343081240130486926587552859706337223282598959658826457912110150229463850079329163597771797337822709730777565370953422223408595882843118286956939988955846229075579330815290845722563420243422752650828997772215730429207767090119357203878107337884921705286570049639435686342039828502912430702417787311741719990865608911989344378016685337998208215872207554274 -920760231421022543)
(MULTIPLE-VALUE-LIST (FLOOR 6494479986256116541104296929948745881595810377963953264991072983439840586308068782167240611739100078965050725068818882183756338815160036859027539278041681781661292616356111680897493765185363894557565156777508945778492400417041556530072176186473028646756075186621344659621007329706013704866019055199752880400583535752226648517005237843095412900402261752786336175778761394870284838510406493285835836510084377115102990988520712094164167646661458280428910514014249834132126729469995977022911113044853980749549364759880528586645949565758303087716543654543586861828638440479331739588108393797432477382024670823562517526646 5646044948886972124))
EQUAL-OK: (1150270684178027997729638025310141697535651329313468129284627631873742535270359534840413194117215304029010709513909008920532146218787185595227269977210380838656683242728568521891853665038056999715825712357842110695616824097006318159870253326008969365677078769387050477555367309756230306675796151995910498740461667569866473279089249936015985131524549691332989894205425117195925594673141706705491188937755834316410829046680432307112608812689099288880996341318638564624566449876699247700823589547245730672763432749619618807750355174780947014272103851229064036660484535227006468477136474311066305263226 3785857158573214622)
(MULTIPLE-VALUE-LIST (FLOOR -31360864680221422030140415094508859225037184177278863690330048646310966010764143021431123151508104188281687033827937090369965061135751835578522568620174870624326364591751719134017727476315825913896303730502231987133828454596458972192605628269836766485752863341723932456882638706013143064500915331711791221807863285445277518932935928879510111580179238430718068897684115464091110803073393785115849134031970572952341156248906594900067269723116623961645695573540685417690666812895681389324387236630659047254288574908905115640816788218380202062908240234242061857266935270268131606785945960533363545765413571210356588614272 158731480268028865375787109312788454557))
EQUAL-OK: (-197571802564094255018835618501836237470451780852464910702917947610328490115600879542277218044587953977482033832066853445897949746594340123621010571525423525283265694134335278880857970722363261435835440841138075424370755023622549046990506755720823389094963930373207384718204282462412342807880786115573288541223692700693236309165845190755419998468567231783954117079063183652374494384463667165956585068985935341133217173168221529758860606207789154326413767211275484817995028454435144966634656180655573506329003296926488159246532512031996848763667993503525898127688305577417054301089 22128982064863884081225183621483498301)
(MULTIPLE-VALUE-LIST (FLOOR 6972688127252138459564959519023672734797720350352562732688801457617542500099509865574973489633915033719003377224851429368921013349700580153017928134596084737004044411366993842119504403376959959480789333673755655063117787017101298662107070542628327980482897959181812093955456006698786827411711446400770298021381400926276799694253767942575674933967663793055141073318481678170963516082521833862017762649825976536694779299584090771859213561628651925244725218133964348562464473355036335901024895778660125505334188112559810228121975479770611339038859346371817450184722764849484125019138077786325611240207689562646177214862 212229494710249959442576275005814060115))
EQUAL-OK: (32854472639496801513625266171869868980490382632885983229822011721729192329270622778562010916862699719016516950898363598128121229189750116863530046554995732003476968354657890095157193194509736774942176733534056571834590366060961121671289385934253368995757730753667329275656966343378668081666905678760988072374390324867142186156887369444294667350127131255070935565628787125782523108523608392770938414227072810340675454608542379054058487857197652824285799185253955626498482144435788461420918351383205430463919873128183751743772403931916447474872579786344165522578418757820262494633 202602247999430336716424978770050352067)
(MULTIPLE-VALUE-LIST (FLOOR 16146477881044981814872185978005786543642189695578037880128585850657582227346785609949631520306446259385630057714250080634804935779512167368598228578137970013047546260870411704532863029107179381174130047754949458719207263855344249323475379597824225167477700328511898116621808311449385399905867898699564040099050435706021172544369947305690899952295406293447506146823515423102232662385522802025721933657658703659553626211653699561780784625213816227416468145185123310306319508640423290747072654284738002434784128270456278391972933415297337582959158202392632248570451671740383769937167912379559021602080900933189192375421 -20310422672054016316639412907518719590))
EQUAL-OK: (-794984828319777650694385094127543908631549711061207837016795411776676915426259473368853160688756737034823729254185786121643208845684214393842790938031685686187522759314947140818495607328399712740082388950671812621562726517214947696883370445215206445278987678057453772575168165658852145270562955365137991966349779422574705948837912807073553643238677887356778699590679423929808592396737386221680984966466476609537799000714595283015387280145210362603689829188312020767177147038887361232908826207585485585717770550283815412266616448789002231614634998653868395118016500112836083648523 -11799925147898511149643800539362290149)
(MULTIPLE-VALUE-LIST (FLOOR -13333386402689284528955650425278647711888918022382802858930735354762601039626630790596510115878972126652469762677159574447095103432811719733783031083771953511074739306201836852090205483055377050725227473420407492132102122918222222661174330427122421429872287465154597256840268514193104109407101719163350519145025605863849817679140939130213133277602018019855074419919415918787364400403970284236218639542926948339939839929520062948689163759711059171596722904754429438151009753108425737178467425999202826949155777669899192519705543679208977557190789421238295365156644743397621766685402593133067165504533347334868817548870 107895899863035416090758241115761545328))
EQUAL-OK: (-123576395577726995467509810094692559795501216776624732643654929468261569953970620516962817836961555200657486752392956631475337670018968072148956742753944568338154539759184635744464807131713977468703479999463417456632584312098725347773265375061594795112459950102134313707118281441803361728717545150343139196161174674989680811767284271234273952364761695483244122531302983909975719498713709629935106791776293856798291478157380963024628448230576871460269799644149756524167414024818290038046315016119726155391403548599527926110598142014566712845146844517328059271906387663525750970076 88916219636034843584282198824028056058)
(MULTIPLE-VALUE-LIST (FLOOR 17396957313719309181655810621342598276769983942993211094806395284201495622288603530182348401034532670779772026613959220329662328631746748840677422913897389222211979435071300283979361385673923168895608787064277711550661080470385607194607715097404666355341496134600730286695020337462621706659365279865288817231582460135505994785679557826378614057840182487774381015927951405829305139118747627556929090278010945530871104877221509669969637405745641517281958386251071953311649218819211648218403974139963448683937267881136641329201897530450274203549882462469989176813129608929688681288830465486480047730094845155570312862849 104186547224209978415781641589908237686))
EQUAL-OK: (166978921724711432713743436094800137505239032223722714964309089009506614535895519867110422644603923287110323367280581626196181748165083370852210731028149827924135420402322644021166934074442323617970930798783252483767604446788478644579242675426052418474560530381252273076756647943610269802844827006798614570113552490465455602498689920520721194207399033534120048155924790694559525815508064767545247429922864279482054330586837508112647624007190343625308333109186981945018060033849826856038685383194624273212670683254990051450794748656874003602039616482791671154071071940218956513118 9689041137085346765396894259391897901)
(MULTIPLE-VALUE-LIST (FLOOR 26296668029363560180578472840636347646283515109787546573773133131169235303278230292620358193183994696837168281782424510501462932715289179113988102147665778902989371433141498385910026219307721742927641650208826808587628688330897125412814594284814050899367007933796796475217266168539594147019546294897573039387284123267787652073296654465797846788961105602455421819896924940988943972769457383697764285807789932427485615761627567609238909525216550007481876466503244451415718439500787125259366798747857812030734235875561021422659158282642054300429948383202431010170473103089719168265166132037042278884136592980721399898848 -145151976679874338336058059363314537))
EQUAL-OK: (-181166447959297097309632649706277310462287087273328158550559504514077025970552462585976881228509338936991115036681066334762526041621219901153411893847383132947014037561714726163730996723689359625350327562359371926025189504119439124542211108302015324941630060663441114185165191476531119095379776949183747807676488899740428054170566283213350742091333006110702325305863276507428847828894436119391753135134140918882254262557249907254757481730047992171259860818951015886963391969368286964814563381601392580107247382831740092922947642920341973871311541502943677603328463821550096331015449 -110577937214275422567781046193383265)
(MULTIPLE-VALUE-LIST (FLOOR -19994387832358687564296482880955715923586831477222916410597818184152857711804843023778287694318724091304456899035183525127967566364649938785565453184727547598671504088541688780249133503129117660562371945085803761853547276588271572826270417538713473845464667687405215144939251922714172491714494707146884856110703801489923219443900691887441959990915961809557008130581221371957930424791112777130507507175854695038524747304496126685506502272017923871345301904089286401283977464945598827719321374155830270851832155999413594990591210770207211404582078047399265487243377424091264415562555479103296829671606309227114918559411 -12290727751262531359522445814787932748157034294075544178515373320704162497192584943859172528304649072004548036058435558708785921268699678655127651925033127))
EQUAL-OK: (1626786325187686206254527912536268233229423573477257270053889346415589499220953871015742625081244397640382477041911954315181713027690095532216560352291641519082404655148801601548476351855968135320238312168182690718232048560912434032449056943124604465352409935769208624710904989903415445402236977791654195811881494578919123294926181940156782515461241607944723498957864382829554865120206763098110715049165623436566759235599826844834593966722456940122296028858654743 -9304614710679256891239598861411560332304324920434685965899525875715186019084445758952863067134832791421060008856516918122255022315420901512824783987888050)
(MULTIPLE-VALUE-LIST (FLOOR 29916764548363516315213840380698377536192609328827808911066465815108876776179490417834258307994776308911573596103626976278007330105709262864909645777842169226871227147054313657605129607087589187123503174807369386299991859056839377153696490642393964375926230602462747312790529261100240727992473466712957240583216041201088172946856263144111813006598318253235946940685055230369936673556047728831107329646718919450916347559724523856479721600705891348359262178740659519774585983326669798219391447115538287743254388570949370216658299333436961807924794235560183973249587386381643272943817567729138289488897133971529039695757 8476334091496252719253471844340714224307718865976339399900779938495486609491382968889867250990569753004524377073297071391348967807704774866029247355531618))
EQUAL-OK: (3529446129120492576886933802306348265603546401021071145489371491655402978871242160302127070993421776756377896228018319062438889879832901903630775379375474362476945682118589732246954574638082665328364641573132346715748566497144048040413137331852635046499249704620713985392482170976329565026453768403409435575238922748145312555307402543771398751056417238642358386670853730480256387244547289563589645563705382910276075835741806800308617595407635175179549186349623407 1121598720662440742988451944089192258208677258393969079460095922943603039995215206852920630773807538691962340221388452566848135314318278502721876458313231)
(MULTIPLE-VALUE-LIST (FLOOR -30744743258986840974825934925400463284355151584175701001085034454282509186617636999187209301942468580138651572968436145883508307958710953672541548503099036345172087541186583358599035971842953063792288589346835317805238011836025866089112384348158834439025788655670125182111347815257445264926636792871229400549827577321670531162443103810493815924151448637886392962948822485797619344455378736429734156821345757186019132123507024835777255364976075865806996283635073664232613154449751312293463363442122204887362535000774934247468263702545257658938264075634847752288018235968497021028555508346290918717339789336670514080457 9934634309555858804270980126309615970053320780519373855793924975583204316518242194797388422238716941854010764960600214725109000476250489194524103405530739))
EQUAL-OK: (-3094703066162616114961725586598761886126440000450319657542750158557542422972265973994772432239434133706930345695126019787070526540238058168248601279554005834087067802027491094801318957724338773860374084056857766237802500357570852135835098188033303615905411388899090151866056131910609183545491275118194384669083917607888152562507000146957250511707959497676133004912560741040750644659008842081402439245159076407113469036885418577123982203712293205143214370192534124 4583596897489701137708573201509728063693689464812281935974761545728663079569821440573072545991527054461975034582959468944964678550288258358252037074357179)
(MULTIPLE-VALUE-LIST (FLOOR 24643502519803888691586762836893695554672668882609252497967357925433058477865049537403781351424439957461939549800248300068008928283760882152105280755728186165336818042947891471506568092832294726444765034759769551554808855491501013689374698042749154404230203678454785382207604303955330803002216399957247238380783055267792042696128953561495320963977422797650867160007702447898131066450706964885725041540562948429789541526915479497874153956586286026740960933319749986950590370162278200833957789772606366304927219928607487195862425188567871883130961914293433624774413725427494180502314592349900074269004608052919421088368 2717450167284225996753981867457220829510500841312068511238048532529427648370573174539553585183069673827813696207263846346713773366926177883038970327669336))
EQUAL-OK: (9068612486988930041452615817812610262395413380750714216172624755617167719146150429506179809229439286481063525474263171526993584649905549895379552966354856688607031124385144196292585204982548068977456744404073207215088901248836694827956726571697679223311674675917482789361649212542123782029147076771863216074461137218175127751607336902080642274682219411530926094644805942929937073627694007279189212959755881318530033893691479717411893927131774283641886860168845194 2630363844657415178536247490974293939778607568925570410250370678327072798984411202414449734187268017772490491616031334354084510652181851150192386816317184)
(MULTIPLE-VALUE-LIST (FLOOR 1857471144762621226078309760048781819853808902834007243224510947324703640579895884811355396539307768563652552656687272466757001311647739575925654454617797724205998847128737511426204839085303003071906438273332520201294499647651016586411018765198623236956366866836742835368817430092030307634950795461633849978479504285561783793523293571899866834127333885745234267982498066548934305641020559144124243564372784715821253591393010485777361901806233522170298666402318233462164642692695586402286093353406704474285764942607399336515494566976327035651095257443119526233432484730549923908643983835638400244551332963304703341991 362612878824948204766041465498605121983038344328923889813821008133012829955553725429013872301357114460102737976404433762806451909620639548491755012601032))
EQUAL-OK: (5122463247256360173380682454830667735994909336257131094636868172398931453441644851286253058553683806107714242214425234484025628771776577335533690016729030113210376620329656025707882934177847398968795670307669192526890837607471635669459016090183544133427748745285201703705268883110778706355536331762965138118319801447738265213248123408984033840769670544118622199016226728679039309116650227118501163822195946867970684116882706924781160720494209768961175300546225784 299760236823448232299335077352435634442705524236228994156709162318327253866985319237312495500717724311867426639654094420477947147244359720759776119932903)
(MULTIPLE-VALUE-LIST (FLOOR -15512250050509017569431653406374218468191654707236673402325185299702995515514048891881128604127259128940966966514594946451486134694476273851559935124397715410737724278746590654901453457150411276548615199767807502093455391898384739629715289928761836102897197661380120487438391395985221415090269132778914962364055598932950972975325423902250870789291669816092405224971234605691036355433974706922342506063057313987759468269851537540937400869685698983579620650290591582484180497444639057157757973753179907365231695893268694300775677678977541920955165836544926807198464657683328635157477957240884116233992874779933793654204 3358541127950670805593397985550958371637657834938091938230318311713415017140090677340291997759883758478618605945079413061265904587739160855880393703427541))
EQUAL-OK: (-4618746491270258642196486131268015112521835423420717615093174172980857448220383551186758990917205762587881579670823547496170992786073126440511182401809159567300795932372630208424356476743332043619346311088384079059435373790499576304419282368802375623485321283238175405485184862968207039638749406944454331623523507687428477960605913568521627594126207284882249627708423470608914416155986620408793531083231293214124556072929628635430705354422888702360112306375650944 3005102575063606384680566102915562580638230938191281335082512965430334791588194853068845397234960243041587407778382851298719244486316278864423824018594500)
(MULTIPLE-VALUE-LIST (FLOOR -7795907266149417935880848054805638357926463272237741460640947569644048588447722511612181517607450880049915905557897989678236704307693907736247058983016545076253121570693500226105057772914231058133990872553093077477246778482972908671114493634160355090012802248700706280069417479488180111886570768297449284497993155476453139747448123977064178202693174347058572053686548952330935409613585349836865130827901523001778569465270141666026392762544863707172069660941583975586471593214627992137708766736399392527511202198595607734119123667475481080585901379489987633325665012548140296404667154265922084962379380813206642961141 3266322496024458154155982586177367205241879884975448114046439840444265881425140636480586339953113858345978121218157346057285955670573379845528853928778649121198573716895875372950665878135491926664618467827249347334921049358968885123014320008238518111491029267663871866232098994215220584035091470875989416180732388925174422587186795087858194659347743269411322176680238569785902471836835335166112452646235228206195081915725782645939016905926964169376697807870023636080042287120562847150399762713196525578131013908505157176421364232903071413436786302567498639276925676203136397430977438669196132229839190136276524068288))
EQUAL-OK: (-3 2003060221923956526587099703726463257799176382688602881498371951688749055827699397829577502251890694988018458096574048493621162704026231800339502803319402287342599579994125892746939861492244721859864530928654964527516369593933746697928466390555199244460285554290909318626879503157481640218703644330518964044204011299070128014112261286510405775350055461175394476354166757026772005896920655661472227110804161616806676281907206271790657955236028800958023762668486932653655268147060549313490521403190184206881839526919863795144969031233733159724457528212508284505112016061268895888265161741666311727138189595622929243723)
(MULTIPLE-VALUE-LIST (FLOOR 11613527140000568192482756738253388762224453894786686024705324634643336086154640452808765642911437980109688560443031730927780624431102238262306897218656077453053740901919490705730434109001630505554615644472687423755323577388664893480041595787444776915986509240983988768996984961291424649229547505632144971266842770877960364848817464904515794389771780820407027606373375049573795106795237627834701205331678265805568350911815774813018183599320960878173351437520785364220474506113269284418886794765499703487689302735252054649064328797761871733823998210784410557300554983737071496100764692702245794941065431902323619975581 7587249511488455291481574592043097850017617150850944854151430663857438629054661904725186504711545142985024178310267212940242316767124495452290378757849233879415880641974894427201010329762690544890887138507664079244754338469394276854749839357593153274763991475638253761900794536890806900100092838214316658164432730592513062527370014192403678448098350118128696785002089891158354556141292773760767431084006166964515144211080310413063362654706066932594296395740249062444674285627590937186704887659632200604451417990996813320236575100574875972599186794102474813935877205799664448604353627460661673753990274449050152179527))
EQUAL-OK: (1 4026277628512112901001182146210290912206836743935741170553893970785897457099978548083579138199892837124664382132764517987538307663977742810016518460806843573637860259944596278529423779238939960663728505965023344510569238919270616625291756429851623641222517765345735007096190424400617749129454667417828313102410040285447302321447450712112115941673430702278330821371285158415440550653944854073933774247672098841053206700735464399954820944614893945579055041780536301775800220485678347232181907105867502883237884744255241328827753697186995761224811416681935743364677777937407047496411065241584121187075157453273467796054)
(MULTIPLE-VALUE-LIST (FLOOR -7305781671042805086205879027901218372025263744748476920370936801215407682690507181906856060500614379569331564964369672229742583709815447579920249246854986585035499467980872113078927984775191185433409825799075510115669850322522523768142598684481781858254267858499128954637862215107851239397355311785880257523971110240017078879170794103136756816178851155500522519324993786026829680880063502983144325993463559477297984845168078230705008144229777150602704982383890956566628052218375163513110904344758464487972471262152773773566261138354198738738504010228322403241824600361830597196538559114936352203702189317843297305612 -11937423884971453925821024083751259499642447259766781297912835275709052311299551864192658177304486399283699058384364751376568714457361090099824205847610164922413207048832164141112741434740690851620879666916091683114805059397520385319965609291355819302668926633114618391597972110270104195729524521712155052417250364832858246777602394209216012243471719585422463867924602236259070514326289155605995143153426519592268534452020820494702940294360007255909971183689215427975382460838239606147437401771039532404179010791325434773433170447691511043481857627662741058910094855501029573945308325534013127380693322055343068093073))
EQUAL-OK: (0 -7305781671042805086205879027901218372025263744748476920370936801215407682690507181906856060500614379569331564964369672229742583709815447579920249246854986585035499467980872113078927984775191185433409825799075510115669850322522523768142598684481781858254267858499128954637862215107851239397355311785880257523971110240017078879170794103136756816178851155500522519324993786026829680880063502983144325993463559477297984845168078230705008144229777150602704982383890956566628052218375163513110904344758464487972471262152773773566261138354198738738504010228322403241824600361830597196538559114936352203702189317843297305612)
(MULTIPLE-VALUE-LIST (FLOOR 17209502052655993695999949678678881817732805080961191774214537634467104669997820051278559964292611469011761231649311262525642916746094372962648405298787080759403024379693612743720557853611946286870304197122036126838107226222151419136402861650399432372524638862075613534601535719033760228742681750726602275976151585576407980278472053570791272866409613117043122126348697545507835143620584132787128003876247255766444872271317786602207376422907474443135464267851639815814827163426470735478362760843575789201717413221027220343295978806345517086041608240978720520050196395624694268550345436208830801369557317350938753101681 -25492366031674865714603800130440722297248675391454036922399382654290017832413394991423912006244487394226853780856833445493556957899686872020567315114599762113500546176766623020864155665149937580279148318691466089932874147998457966225079089491216886106456935347049916843309661581230809710698689198580162954443484103521650233141750002940462046212610545804018834324858009370780731978549694951052575612824613445810777717659953126577086301947235560041125102454055651800601741899891885690488712713049609045874194541526013910595588271596050758340197535035493872183554373796733932414738278642683363241812520579194986842248406))
EQUAL-OK: (-1 -8282863979018872018603850451761840479515870310492845148184845019822913162415574940145352041951875925215092549207522182967914041153592499057918909815812681354097521797073010277143597811537991293408844121569429963094766921776306547088676227840817453733932296484974303308708125862197049481956007447853560678467332517945242252863277949369670773346200932686975712198509311825272896834929110818265447608948366190044332845388635339974878925524328085597989638186204011984786914736465414955010349952206033256672477128304986690252292292789705241254155926794515151663504177401109238146187933206474532440442963261844048089146725)

EQUAL-OK: (-2 3054122412569877257337363334246051215590323218095699049595720963556123205749991515335629269297060775824729089462208746259868115790686036011287258535891680974500714864562401718315088186044882502803503510909543816967141820891958282779004101695476975444390953820545745496416070504289159631284446242745023540740496570531066578043347891227015346087334888470854343130924953340773981439047507334144077884692840721746890838862149601993167752299313121435668826953851926026653811491843258040429712171043747117467917060436472534218818107416345280457512035239308489663698542130408984739158298779153782487252679484838211585978218)
(MULTIPLE-VALUE-LIST (FLOOR 4195250682093770808206657488351701663023767531608220002369022288787894743733460069813218793361969185403525213558437941222523116136985128137372308027033996674188008302853626391013869026313385724383785051935256506784450227965020957296318645208598488161413279403683346821629439117327209071527878791167163980953326296620631874274522101994118890706372879111377721965738161511000396672294975037034526549811513789043244305969633354034500541113123255063232374386942908997046756046017320772897856114275234707703184161983806610888947627465435762937561231247173215724615365040435541390265704981699351563837340527277633975576176 -11523670060248463390302653643248573080204626895667435502164973305972185748470395654926094006744012148505197326052121545710242241891352369937317053719774706293090545099894988182012473466703170157783937873302934404896538337261995680454862441735502556865637909145839304694688324140057229642104588273654096346180116632418345589170248829444934471179206795690822184585196864577932274205101316913141872261673241280391442045565990088555353753789476615480189520529331131737084431448177942371080785938641454814169544682945510387155405628842164935394830439534834414364899293061798829902686953424000191565445443376301466821322836))
EQUAL-OK: (-1 -7328419378154692582095996154896871417180859364059215499795951017184291004736935585112875213382042963101672112493683604487719125754367241799944745692740709618902536797041361790998604440389784433400152821367677898112088109296974723158543796526904068704224629742155957873058885022730020570576709482486932365226790335797713714895726727450815580472833916579444462619458703066931877532806341876107345711861727491348197739596356734520853212676353360416957146142388222740037675402160621598182929824366220106466360520961703776266458001376729172457269208287661198640283928021363288512421248442300840001608102849023832845746660)
(/ 10105597264942543888 14352488138967388642)
EQL-OK: 5052798632471271944/7176244069483694321
(/ -17631701977702695093 3931860028646338313)
EQL-OK: -17631701977702695093/3931860028646338313
(/ -1606495881715082381 16324360910828438638)
EQL-OK: -1606495881715082381/16324360910828438638
(/ -7960193178071300653 -10280747961248435844)
EQL-OK: 7960193178071300653/10280747961248435844
(/ -11544909483975853384 -16041992360613233027)
EQL-OK: 11544909483975853384/16041992360613233027
(/ -5758820541298901548 -2596462557714095861)
EQL-OK: 5758820541298901548/2596462557714095861
(/ -13056342734667572546 46502284983183419157350605242474199851)
EQL-OK: -13056342734667572546/46502284983183419157350605242474199851
(/ 12668118634717482325 -338544675918656078399121171905238525746)
EQL-OK: -12668118634717482325/338544675918656078399121171905238525746
(/ -16738429327795346815 164053836541028518093058940786011794219)
EQL-OK: -16738429327795346815/164053836541028518093058940786011794219
(/ -9884600460121235549 -53914696297933680001835530599748561584)
EQL-OK: 9884600460121235549/53914696297933680001835530599748561584
(/ 6753521264659576004 71759828079371803409570464915096122874)
EQL-OK: 3376760632329788002/35879914039685901704785232457548061437
(/ -6072478784520825268 83641961138289700975241455431547940418)
EQL-OK: -3036239392260412634/41820980569144850487620727715773970209
(/ -6708950756971973620 -9847903810677323447803434015107261150885944735136350527205856921771320298384705376646797569973415403097847060539915279223391112430240736564839483430569706)
EQL-OK: 3354475378485986810/4923951905338661723901717007553630575442972367568175263602928460885660149192352688323398784986707701548923530269957639611695556215120368282419741715284853
(/ 11263779860755455072 2292311486393743282743453705144070351222990311578446825826935237655927864700827857707370158936582804478427014131790879562565658386819339761919809732496450)
EQL-OK: 1877296643459242512/382051914398957213790575617524011725203831718596407804304489206275987977450137976284561693156097134079737835688631813260427609731136556626986634955416075
(/ 9956488981426387585 -12351244248621474338537656633137999145154500022264356186225225426288301330225259889671144104952158102155582320296061124840400655528634050137479515338944145)
EQL-OK: -1991297796285277517/2470248849724294867707531326627599829030900004452871237245045085257660266045051977934228820990431620431116464059212224968080131105726810027495903067788829
(/ -14875992781716065391 4906952781757522095285156014969507916562921709689447567404076064849249737893410245743456952512717420040816186768213920574809530298070437840356629617118643)
EQL-OK: -2125141825959437913/700993254536788870755022287852786845223274529955635366772010866407035676841915749391922421787531060005830883824030560082115647185438633977193804231016949
(/ 16043178952268979636 -4962728781666935768923030490263743715131420507991284894489828489607808897271220927863958149140648859077934323268424257800724618076505149638049461104621679)
EQL-OK: -5347726317422993212/1654242927222311922974343496754581238377140169330428298163276163202602965757073642621319383046882953025978107756141419266908206025501716546016487034873893
(/ -14889985628902581941 3075736124701105220602924325296812116294816310089906623707854625135862902005059305428034753787024827094954645083406870532379125275086885405969947540175361)
EQL-OK: -14889985628902581941/3075736124701105220602924325296812116294816310089906623707854625135862902005059305428034753787024827094954645083406870532379125275086885405969947540175361
(/ -1719613957783789857 19860562547348050982501313785551054055826630539673708970554435103060535649825139319625648954889488501680865494719253019921780044205805557658109807483499994523398090829033362953135186523580359552555144614353929273831853529446536288544481045105104526669277307473478898498061888931858821517694257595658138564305517447595298378933983614114298000880741350618424855028965861930329619462261269994651112266861896630584883581092431090390354633458596611690990999635499563944625720180529318327647519405136188243979680965052005899543797270970540925042201315580510136864931200059448645464256385079735225156720340173280541113382758)
EQL-OK: -1719613957783789857/19860562547348050982501313785551054055826630539673708970554435103060535649825139319625648954889488501680865494719253019921780044205805557658109807483499994523398090829033362953135186523580359552555144614353929273831853529446536288544481045105104526669277307473478898498061888931858821517694257595658138564305517447595298378933983614114298000880741350618424855028965861930329619462261269994651112266861896630584883581092431090390354633458596611690990999635499563944625720180529318327647519405136188243979680965052005899543797270970540925042201315580510136864931200059448645464256385079735225156720340173280541113382758
(/ -10969623867482498359 1292477254230352575769754773488799598312602810841892384475535212194939033905139960602724737178675944133847094464739764817257836826367652752931492512753561670732296265459534230949226553571982695924178928914002527460943582374603078611662312521259541641138419845784008028215876048965254023368247445173694441960256131358058174374542730502334351759171930973722361567186133851896057677818979314942434199157003833234473048838906103902832115569853657335216793235394595479328932380393044485884605451918890395812628720641212850763944658735838941829604119213195707479940053016354291972875689927240247563236506479099606571912595)
EQL-OK: -10969623867482498359/1292477254230352575769754773488799598312602810841892384475535212194939033905139960602724737178675944133847094464739764817257836826367652752931492512753561670732296265459534230949226553571982695924178928914002527460943582374603078611662312521259541641138419845784008028215876048965254023368247445173694441960256131358058174374542730502334351759171930973722361567186133851896057677818979314942434199157003833234473048838906103902832115569853657335216793235394595479328932380393044485884605451918890395812628720641212850763944658735838941829604119213195707479940053016354291972875689927240247563236506479099606571912595
(/ -3716891004757979686 -19452372993227550502015765258932159656814363741878583541173956168837566077148160901999018823586675966076058615847408138956450751813058209394199427182041779436168298455103717521843644244801542056954603631432685194627158423459586845252167819811850263444712218938833443253125954475476481099092216538126519474183531297423759923656571895377587989169731023397615799830371852298135015608612181670362528239430952907458704415974164085176066242388561893721949244663406941558257051263727439679525692652639731850971185056484335828001005009903973037524233097329857690857731943951449292814500362180170793919266389501882641682782987)
EQL-OK: 3716891004757979686/19452372993227550502015765258932159656814363741878583541173956168837566077148160901999018823586675966076058615847408138956450751813058209394199427182041779436168298455103717521843644244801542056954603631432685194627158423459586845252167819811850263444712218938833443253125954475476481099092216538126519474183531297423759923656571895377587989169731023397615799830371852298135015608612181670362528239430952907458704415974164085176066242388561893721949244663406941558257051263727439679525692652639731850971185056484335828001005009903973037524233097329857690857731943951449292814500362180170793919266389501882641682782987
(/ -4863232114852441787 -22963038454503597269981750990033903654256693514059439027985256604978917966584414065892146187253799108250061573972673983350956191446047978392921074610323648301008272837432907303975548030552369880338022067315042332692023645592417869181836251486577977896077712912433381480614752789750181208326525834629219729662085632321271870762094800588296544243340047360684854239747242066367921596241226349790282723168222543448385227922748241223520686047460119733024390425165073367321644498280127168757335614077882325524816799960018589278475564547840614315473357481582710826551932681173443524724802157570101916268510464302946527662720)
EQL-OK: 4863232114852441787/22963038454503597269981750990033903654256693514059439027985256604978917966584414065892146187253799108250061573972673983350956191446047978392921074610323648301008272837432907303975548030552369880338022067315042332692023645592417869181836251486577977896077712912433381480614752789750181208326525834629219729662085632321271870762094800588296544243340047360684854239747242066367921596241226349790282723168222543448385227922748241223520686047460119733024390425165073367321644498280127168757335614077882325524816799960018589278475564547840614315473357481582710826551932681173443524724802157570101916268510464302946527662720
(/ -16248276650501285553 -3381199474840825715485713565301777938368574604710714363907009216856320913536015299178065264912798511857598595067318796576494480424838898250138649774858742984769125731728430552285782315111538920026330816414650913188340281906359149109963139438960274321560117812365241840204034925444652058916966934904097509799291744775242863360284348334605170437300543978049053839829106628489146216325576991696936733592366926096500684308845306493636196092408597450926695579897293944488261001228478152650490677071497874746121221519036861983646423005753475340900508665494162949119110128646472783016552527735050067363030838015919512260159)
EQL-OK: 16248276650501285553/3381199474840825715485713565301777938368574604710714363907009216856320913536015299178065264912798511857598595067318796576494480424838898250138649774858742984769125731728430552285782315111538920026330816414650913188340281906359149109963139438960274321560117812365241840204034925444652058916966934904097509799291744775242863360284348334605170437300543978049053839829106628489146216325576991696936733592366926096500684308845306493636196092408597450926695579897293944488261001228478152650490677071497874746121221519036861983646423005753475340900508665494162949119110128646472783016552527735050067363030838015919512260159
(/ 18296946401228630959 3302341071702763311560113831030141639804425031433511503765833897787925467295486187687396312611805794369889470239777040624530990622212474466940548049117664906468330871893337410618797113677420975837622378808494314918471282099855916016026079371666730617071364751834080179173620476977670099126230223862266413091012344741482772771219725893630556702028108027870656512750807359335108428687238687397060104669074315031780019301768744978815422943986587389425726602444937024004102212071953113581935989741954695450085391443134273670514145585869912689150728183940456773133212037846765421397201956541430155664614978559762638030787)
EQL-OK: 494512064898071107/89252461397371981393516590027841665940660135984689500101779294534808796413391518586145846286805562009997012709183163260122459206005742553160555352678855808282927861402522632719426949018308675022638442670499846349147872489185295027460164307342344070731658506806326491329016769648045137814222438482763957110567901209229264128951884483611636667622381298050558284128400198900948876451006451010731354180245251757615676197345101215643660079567205064579073691957971270919029789515458192258971242965998775552705010579544169558662544475293781424031100761728120453327924649671534200578302755582200815017962566988101692919751
(/ -60488682170925814337492051725122486652 14880088785789146426)
EQL-OK: -30244341085462907168746025862561243326/7440044392894573213
(/ 126617729996196635247771282957911941277 -7166506344996883172)
EQL-OK: -126617729996196635247771282957911941277/7166506344996883172
(/ -278675896803726074870988122161067771390 7744689831802931490)
EQL-OK: -27867589680372607487098812216106777139/774468983180293149
(/ -283351838662873779255871649630248958879 6912311315831153835)
EQL-OK: -14913254666467041013466928927907839941/363805858727955465
(/ -9715584046609700027352634666499181378 3368831995960494221)
EQL-OK: -9715584046609700027352634666499181378/3368831995960494221
(/ -137493547985106345282009151869389470397 -1916381539906956855)
EQL-OK: 137493547985106345282009151869389470397/1916381539906956855
(/ -328662747577960331872949773416436800743 -231069430804205460334599495337085157308)
EQL-OK: 328662747577960331872949773416436800743/231069430804205460334599495337085157308
(/ 213595640581249636406536485951630735277 -48492294677143227478357598229530842959)
EQL-OK: -213595640581249636406536485951630735277/48492294677143227478357598229530842959
(/ 85922846498729014445816145204889624189 193533957681757355413031965695625196813)
EQL-OK: 85922846498729014445816145204889624189/193533957681757355413031965695625196813
(/ 24053342958857142686054803491202486471 196417511107100936775397820630955772553)
EQL-OK: 24053342958857142686054803491202486471/196417511107100936775397820630955772553
(/ 102038936612518756467074084117019701214 -111946989731587760700903475996379168167)
EQL-OK: -102038936612518756467074084117019701214/111946989731587760700903475996379168167
(/ -3006867214208872584699983438179656913 -234257597822744479264249663225224173340)
EQL-OK: 3006867214208872584699983438179656913/234257597822744479264249663225224173340
(/ -279839802710533516603863620922251878907 -3244112647743502769852782626803305310331045534071805654982307107362388474314396636799597033636575215617240554815450017779373048313695795886893032630263219)
EQL-OK: 279839802710533516603863620922251878907/3244112647743502769852782626803305310331045534071805654982307107362388474314396636799597033636575215617240554815450017779373048313695795886893032630263219
(/ 123635964546481689465778244982425098404 7701433613491146708866098469269971554817017737111287276993583150548359764165526640986060909954451793171933304569726872785964805121981749276421956645830854)
EQL-OK: 61817982273240844732889122491212549202/3850716806745573354433049234634985777408508868555643638496791575274179882082763320493030454977225896585966652284863436392982402560990874638210978322915427
(/ 166158110049010486343321316578688184578 4093720847216792748840371965199135052196058344862447621818024731938681519017878880275303125899149558774718190527651555811733139227128378041055212888819294)
EQL-OK: 83079055024505243171660658289344092289/2046860423608396374420185982599567526098029172431223810909012365969340759508939440137651562949574779387359095263825777905866569613564189020527606444409647
(/ 147416259636838312272435267341375281181 -11266711292262839805944890501811605204323255169233519804446548849178247889563130015168799346120099052214488209897402054530713234143622703174309015777885801)
EQL-OK: -147416259636838312272435267341375281181/11266711292262839805944890501811605204323255169233519804446548849178247889563130015168799346120099052214488209897402054530713234143622703174309015777885801
(/ 102557200511608632541115941654031896919 3866177549962722728707550488877109233779215384377007088712280650225992470307822792085413087509167847767889824884877044539352696974351192629898363157976511)
EQL-OK: 102557200511608632541115941654031896919/3866177549962722728707550488877109233779215384377007088712280650225992470307822792085413087509167847767889824884877044539352696974351192629898363157976511
(/ 47794953079190110032282671989549362415 3802290983508829335098916118339496411537222492645529399519373082799614656011270200284796148989094312601047370399228868583158444769807910513767845541589667)
EQL-OK: 47794953079190110032282671989549362415/3802290983508829335098916118339496411537222492645529399519373082799614656011270200284796148989094312601047370399228868583158444769807910513767845541589667
(/ -169956065319483471022234920202991103615 -9934427489865644196610501807375648335352544234206717324511161205173460054921759084767897792996557220898467288533128078406604709773449948420404563411793533441010236017064154469575084055359823982786110746700747423674942932421964955746280671982635899487781780756099620799397239156211815110739544719746684712086075069101799537802834839550142629064374734870047412916259754010150500874430055034366305216104752636211802195447299210332237598443674867760860326529472901775427058078447963316168327741049511844237329137194533000697525539835371015163158135757326482343130221118201740819963770851200676279882978581431999960842565)
EQL-OK: 33991213063896694204446984040598220723/1986885497973128839322100361475129667070508846841343464902232241034692010984351816953579558599311444179693457706625615681320941954689989684080912682358706688202047203412830893915016811071964796557222149340149484734988586484392991149256134396527179897556356151219924159879447831242363022147908943949336942417215013820359907560566967910028525812874946974009482583251950802030100174886011006873261043220950527242360439089459842066447519688734973552172065305894580355085411615689592663233665548209902368847465827438906600139505107967074203032631627151465296468626044223640348163992754170240135255976595716286399992168513
(/ -83006311763073652927964071041666508273 13480787677843057038436344704360462056114592749322481662307876594244244638227291805757775026215166740035048814729231681821563443093991755779505400592913963236010573873554317250153995160235771659208137440518282824497744092608999871327127239673370293239927529076145825972430101380272357235582367639159280348164804218713823424182167974242317526959809443701996053548231667727254858428867000011055354779789221097183515832386890638024105232865079002765479933320220378271026425568216748186200736499581088153390350474814123049637951929317200314355414551809067125550551841102097159644340520444983020267926123546444838010089690)
EQL-OK: -83006311763073652927964071041666508273/13480787677843057038436344704360462056114592749322481662307876594244244638227291805757775026215166740035048814729231681821563443093991755779505400592913963236010573873554317250153995160235771659208137440518282824497744092608999871327127239673370293239927529076145825972430101380272357235582367639159280348164804218713823424182167974242317526959809443701996053548231667727254858428867000011055354779789221097183515832386890638024105232865079002765479933320220378271026425568216748186200736499581088153390350474814123049637951929317200314355414551809067125550551841102097159644340520444983020267926123546444838010089690
(/ -312626207169475064151212222217866488926 6989069923898656093413456232544365450599471748502878018530391549015151484336014906416216966193568842618920902504390187814247729346977677905224098932673981665869061845335443588666641982676550205160521286690015544764015602751932938178737949961754714143180917985455875095030469699198116593730005119922928175789172042067281849364217595912265452199938281052984802042194034638773435768458457616208103331213440768472281882976004050012769415198321241810008696147179275528426468408383757692656341606162350211696837361434874035354680073309142183699892959618671515841112321607728427286289324836870027735590091451421689980776552)
EQL-OK: -52104367861579177358535370369644414821/1164844987316442682235576038757394241766578624750479669755065258169191914056002484402702827698928140436486817084065031302374621557829612984204016488778996944311510307555907264777773663779425034193420214448335924127335933791988823029789658326959119023863486330909312515838411616533019432288334186653821362631528673677880308227369599318710908699989713508830800340365672439795572628076409602701350555202240128078713647162667341668794902533053540301668116024529879254737744734730626282109390267693725035282806226905812339225780012218190363949982159936445252640185386934621404547714887472811671289265015241903614996796092
(/ -151709660794612786408772973806200383563 -26960472721919005254400858042130056790831511338891584787669209989714807518625849812230185079206081782191501696661436514815190623849929065098497737155759771863508038766934134444191240792356114381746781342181881402424707118515655119761011977116554236461222788625158348668147995099157685699761135150772589445239536582228655532345059046596356954495360132444243748421428095867292294626357084961338288369883088525401649234025290736504802104065029036642533076183281468647642956623788270236516849523210698622687255735945678505925047193818483603361307498423724202227256505312543145618362906047473400380196192622607541097732443)
EQL-OK: 151709660794612786408772973806200383563/26960472721919005254400858042130056790831511338891584787669209989714807518625849812230185079206081782191501696661436514815190623849929065098497737155759771863508038766934134444191240792356114381746781342181881402424707118515655119761011977116554236461222788625158348668147995099157685699761135150772589445239536582228655532345059046596356954495360132444243748421428095867292294626357084961338288369883088525401649234025290736504802104065029036642533076183281468647642956623788270236516849523210698622687255735945678505925047193818483603361307498423724202227256505312543145618362906047473400380196192622607541097732443
(/ 138834496986391136939574372853300933725 -8052690543272184576133758511645801940246473546142520821850130421981395129853341888352999304040698251945886555605291324954368612109314080471658982022831338507499254609048475429862437003158379101603576571787302167207044118847876475134352180874260998595377014195145760071923429129767580115085764485254455919915567128572731355497418831212259648020550107573824886521471697331410754043280744066090848295906051303624846301488010249980896364883452154860562864255354208802313850527991005497484253401461375477060954782095047043919500670383372218536999834862885439984085848342867301834247551832677237328664699302165347765799113)
EQL-OK: -15426055220710126326619374761477881525/894743393696909397348195390182866882249608171793613424650014491331266125539260209816999922671188694660654061733921258328263179123257120052406553558092370945277694956560941714429159667017597677955952952420811351911893790983097386126039131208251222066153001577238417785769269903307508901676196053917161768879507458730303483944157647912473294224505567508202765169052410814601194893697860451787872032878450144847205144609778916664544040542605794984506984917261578755812650058665667277498250377940152830784550531343894115991055630042596913170777759429209493331565094260318589092694172425853026369851633255796149751755457
(/ 276499207940187081393841843387608369874 27347897028734618663428054896349668572244941195143856840032842195489553215406302254043947382368793914074147314353589439281000471813879502242851166670252197853998033813694814376228360691543987661407996785043637351295817024680721181205269262470473172181965930243852520386958529041036476807810647578694133804796395977642274699322030062940721165202488695975750512485574440928370802874677938542169620505668128224812441566912043326338714451629730522324228356364241376445033028898865300103247057378058702233150414643818049655628999871012383236520330575609745427181485617250755214922048672375947942288446974485524776744246517)
EQL-OK: 8919329288393131657865865915729302254/882190226733374795594453383753215115233707780488511510968801361144824297271171040453030560721573997228198300463019014170354853929479983943317779570008135414645097864957897237942850344888515731013161186614310882299865065312281328425976427821628166844579546136898468399579307388420531509929375728344972058219238579923944345139420324610991005329112538579862919757599175513818412995957352856199020016311875104026207792481033655688345627471926791042717043753685205691775258996737590325911195399292216201069368214316711279213838705516528491500655825019669207328435019911314684352324150721804772331885386273726605701427307
(/ -8979365591106781219797187096315899769868799444656824967426553299158070014074001230883484015880186603742048949313393413640240595706939311540002219411120389 -1698360947072008877)
EQL-OK: 1282766513015254459971026728045128538552685634950974995346650471308295716296285890126212002268598086248864135616199059091462942243848473077143174201588627/242622992438858411
(/ -12831814656788829919185319784994714617782749504716966706877579983082880759985031662545957372565411439648298939198657738497464024214657609856476819270030801 454910754379715)
EQL-OK: -273017333123166594025219569893504566335803180951424823550586808150699590637979397075445901543944924247836147642524632733988596259886332124605889771702783/9678952220845
(/ -7834266257250691217409788323211914445703052638619784568844628449769010091330019095736167988675873769434766592786720961949649685040028101508217441360672222 -428418418877192732)
EQL-OK: 3917133128625345608704894161605957222851526319309892284422314224884505045665009547868083994337936884717383296393360480974824842520014050754108720680336111/214209209438596366
(/ 5737805823029931079838944835405107564434908634489801628049345331760087020955028323378020396677249341204498685189403657652738071833877470777083253103936452 9588993061977446661)
EQL-OK: 5737805823029931079838944835405107564434908634489801628049345331760087020955028323378020396677249341204498685189403657652738071833877470777083253103936452/9588993061977446661
(/ -4001605821592542867351046644170905984672346731784670159062281252096012802838642896466582343641124674682428297533953704119505640938363392225910275838094045 15760991890495426717)
EQL-OK: -4001605821592542867351046644170905984672346731784670159062281252096012802838642896466582343641124674682428297533953704119505640938363392225910275838094045/15760991890495426717
(/ 2876630161532936743269451364955814480771395635620140205538288339793482694260173239474830738010159518887660000673207712630507802368373928478641773477534499 -6788234478844960330)
EQL-OK: -2876630161532936743269451364955814480771395635620140205538288339793482694260173239474830738010159518887660000673207712630507802368373928478641773477534499/6788234478844960330
(/ 6230070442453337264527950102774203962152836811174649694700041895216739851602598854067104967963392074425258687296947909484969927078206601660837276754799333 190237375887614033974333796608341639595)
EQL-OK: 6230070442453337264527950102774203962152836811174649694700041895216739851602598854067104967963392074425258687296947909484969927078206601660837276754799333/190237375887614033974333796608341639595
(/ -12098771374444180013224380531550204930654718468097503123335711776524055419889032578894177605164827523969169377266342179411916625188550162928371789854647472 -41681385674896602840749705069663453185)
EQL-OK: 12098771374444180013224380531550204930654718468097503123335711776524055419889032578894177605164827523969169377266342179411916625188550162928371789854647472/41681385674896602840749705069663453185
(/ 13185465843955116174925558412278612918939024395488172088108029202384613698982949554556435640011161663974075894844304583900497170806796813871943782330552768 -155202352609947911537719051033334010254)
EQL-OK: -6592732921977558087462779206139306459469512197744086044054014601192306849491474777278217820005580831987037947422152291950248585403398406935971891165276384/77601176304973955768859525516667005127
(/ 12784980722915659825738808684740823452025110516624579136271791852138148426775553817114893299569867520414470532361018804123866264934222335562072872489963044 -249441012384365373362771955533424187237)
EQL-OK: -12784980722915659825738808684740823452025110516624579136271791852138148426775553817114893299569867520414470532361018804123866264934222335562072872489963044/249441012384365373362771955533424187237
(/ 8517839393030302736298983538193047531846908718502576675615969705563208303329257882565359266876007571790337440612227785062203468682754778416335180236967433 -23101645464137481399279134347982485126)
EQL-OK: -8517839393030302736298983538193047531846908718502576675615969705563208303329257882565359266876007571790337440612227785062203468682754778416335180236967433/23101645464137481399279134347982485126
(/ -10157767522292361462005308817460390811646115952647174687477824271227382383351453540195549992670001314693794150879368708343715654899952822395459036505947192 -25611473771508763579433379623726126173)
EQL-OK: 10157767522292361462005308817460390811646115952647174687477824271227382383351453540195549992670001314693794150879368708343715654899952822395459036505947192/25611473771508763579433379623726126173
(/ -8580252632668820290302987230726290672170301642399871646484841866604753910447257372311950907045477729554307803379310475132687855999835211879267570997069974 5347050029330174629945013741349819215851040371727058829687387719215168997632386672310746837193930669173408831178932364105722911104309540550576485594530627)
EQL-OK: -8580252632668820290302987230726290672170301642399871646484841866604753910447257372311950907045477729554307803379310475132687855999835211879267570997069974/5347050029330174629945013741349819215851040371727058829687387719215168997632386672310746837193930669173408831178932364105722911104309540550576485594530627
(/ 7706102251141221799524762336156378964168657337573751909064577951085535246905735244239132983582998872001001594454632956803416956154262109939446710205558308 6334400709835247308796432875490978646658012545184955441452799118298109610816693049400832749087993843490999852355789914065232784070007399786089389453289854)
EQL-OK: 3853051125570610899762381168078189482084328668786875954532288975542767623452867622119566491791499436000500797227316478401708478077131054969723355102779154/3167200354917623654398216437745489323329006272592477720726399559149054805408346524700416374543996921745499926177894957032616392035003699893044694726644927
(/ 12609622044672092190084693450911157599596799695538449568681964257744962273690941575572590166273187189250007688411096790312605666562908125521094386992971478 -8237858212652788898158635047388584411011830102060269605835391741772914864422465141467281143809161251942948659243584296367296559912373856433388249393853968)
EQL-OK: -6304811022336046095042346725455578799798399847769224784340982128872481136845470787786295083136593594625003844205548395156302833281454062760547193496485739/4118929106326394449079317523694292205505915051030134802917695870886457432211232570733640571904580625971474329621792148183648279956186928216694124696926984
(/ -9988492519236282081446302885464711911055350309732728352574982611126604133339499170845224383282665522673248920309221355720665956477799939031063172954469785 -1878204914631111607000020160429571305542722711529281855381736226230242796648854769713662269068364131804626863789957256573308715572826753755672493154125086)
EQL-OK: 9988492519236282081446302885464711911055350309732728352574982611126604133339499170845224383282665522673248920309221355720665956477799939031063172954469785/1878204914631111607000020160429571305542722711529281855381736226230242796648854769713662269068364131804626863789957256573308715572826753755672493154125086
(/ -10729942326579120947061030583094707809945059776287551713953926998992375520903658867971835616518813070294302895655369081976222497359056962112544408591462495 -4917625712783289245414023733273041940212797202855299465496072729329693853584860839801663152618595377553772371725021213143455497822882736730281253858119747)
EQL-OK: 10729942326579120947061030583094707809945059776287551713953926998992375520903658867971835616518813070294302895655369081976222497359056962112544408591462495/4917625712783289245414023733273041940212797202855299465496072729329693853584860839801663152618595377553772371725021213143455497822882736730281253858119747
(/ 8114113595157517238445304590338354472776364877475201453112450680537221171989478096363668912966343706408770932684807802285529572133696646343108263717309148 5443953102973235688784499815692116502566847594605098596244123647428188581304528525010862185203718640610834003873728718183528722470626702382993497913086105)
EQL-OK: 8114113595157517238445304590338354472776364877475201453112450680537221171989478096363668912966343706408770932684807802285529572133696646343108263717309148/5443953102973235688784499815692116502566847594605098596244123647428188581304528525010862185203718640610834003873728718183528722470626702382993497913086105
(/ -7125100205152691887479515774712530950031072786448635736036405923401522078562323494262148946679985384635556474075282302608446439950458673260234175964199684 -23871420315894180764743988478670341498770583257649869670486332228804693253344466615199983955886679924409910043885402198203427975742868174334723967563526738510726448815413356678504144193747696164586135745786501041060322480940451156015256191962506052700295351077719851275026974629635679531161390660244641370183176979934485671396035404817388717005746812037357500295693454623478902942336087760288091719793968445716246099043828787040340339906538864570506773535078524092440112404847904632624419421052178754041718790915772437556681684830937503838434712179830722395832238257078212535157309743054115702650740005055678387806081)
EQL-OK: 7125100205152691887479515774712530950031072786448635736036405923401522078562323494262148946679985384635556474075282302608446439950458673260234175964199684/23871420315894180764743988478670341498770583257649869670486332228804693253344466615199983955886679924409910043885402198203427975742868174334723967563526738510726448815413356678504144193747696164586135745786501041060322480940451156015256191962506052700295351077719851275026974629635679531161390660244641370183176979934485671396035404817388717005746812037357500295693454623478902942336087760288091719793968445716246099043828787040340339906538864570506773535078524092440112404847904632624419421052178754041718790915772437556681684830937503838434712179830722395832238257078212535157309743054115702650740005055678387806081
(/ 4801495919363827077158204249631885157347198552733998896638174958434968555935827788499392382851493568264006507028024783408190862186734863708684652212703744 29234959990138609668202089052356468732793041824333219340488007351402997202222578434579705387840772390513345507274006495462445058795870182760749392281528881636623188890883479914921272700981309656920982410970774047916714087713562927554033500521877735827036675598267184309367127514966388636440710253467328441763131873309183205727440365838789320851968108312559316922678357314418486932673434031479515016224407618177089903730349114511598373251388750023508633761000320088841886505077453257141723747388913336375142897897501529451618927178835485127020789481918641637409265186365292847057986276062625965612268181771076051892980)
EQL-OK: 1200373979840956769289551062407971289336799638183499724159543739608742138983956947124848095712873392066001626757006195852047715546683715927171163053175936/7308739997534652417050522263089117183198260456083304835122001837850749300555644608644926346960193097628336376818501623865611264698967545690187348070382220409155797222720869978730318175245327414230245602742693511979178521928390731888508375130469433956759168899566796077341781878741597159110177563366832110440782968327295801431860091459697330212992027078139829230669589328604621733168358507869878754056101904544272475932587278627899593312847187505877158440250080022210471626269363314285430936847228334093785724474375382362904731794708871281755197370479660409352316296591323211764496569015656491403067045442769012973245
(/ 10769619761532897875307527770350128978615798426116103116325434914975512103385205123955114305107607195469345895102375220593168903042839441996791318999499708 -7224105715967976893083374742254251507019823877014718307738328810406361200631626366722837314776666720638271529652546975342143108973422364041422652163016078890272393678677152791565494865444430757858556891645947268886646732022748338160528677218733159766121781240328812893374941548395710123982510227501927393735585082736583984561348450061452997663109932611188779299623613963995350679177776686423432406091192517292522853783968685873925548901506191291253596763183277703635837071862492572256145656312023955675669362656148946145528559574994353884313568526553663370513565393821926602014407548325293145102073923450066319746913)
EQL-OK: -10769619761532897875307527770350128978615798426116103116325434914975512103385205123955114305107607195469345895102375220593168903042839441996791318999499708/7224105715967976893083374742254251507019823877014718307738328810406361200631626366722837314776666720638271529652546975342143108973422364041422652163016078890272393678677152791565494865444430757858556891645947268886646732022748338160528677218733159766121781240328812893374941548395710123982510227501927393735585082736583984561348450061452997663109932611188779299623613963995350679177776686423432406091192517292522853783968685873925548901506191291253596763183277703635837071862492572256145656312023955675669362656148946145528559574994353884313568526553663370513565393821926602014407548325293145102073923450066319746913
(/ 1505915608160301518246681692927442986955390537144107830770082927276722640395785957392652130911646706470337068266772174699405268120590454296080828168261019 31152879253507543898583880698200027990847289346701738353567402100527465991154555548630544962150902011282973749886327325250084401181379196961322399337408341296727915922288276602390334861175305055229766353672502691855637668618950047400571070157436221479289152631256433294884836727331457389922838951144187501751190662594278336543502171639899940796536926507796271202659224890656712231014450702948847764643603683153113663072089256293587951842007583210791100743318865647555912543508324790181772321217524164822106191538518498016236866957803105254555578252294418243701672226181762763332992886540089416888889135117147250495261)
EQL-OK: 1505915608160301518246681692927442986955390537144107830770082927276722640395785957392652130911646706470337068266772174699405268120590454296080828168261019/31152879253507543898583880698200027990847289346701738353567402100527465991154555548630544962150902011282973749886327325250084401181379196961322399337408341296727915922288276602390334861175305055229766353672502691855637668618950047400571070157436221479289152631256433294884836727331457389922838951144187501751190662594278336543502171639899940796536926507796271202659224890656712231014450702948847764643603683153113663072089256293587951842007583210791100743318865647555912543508324790181772321217524164822106191538518498016236866957803105254555578252294418243701672226181762763332992886540089416888889135117147250495261
(/ -4912349668310730778272626761660101328812783790262451913449395750351147048676353891314609774894027305081515542385381430403698808605768281804457186380542764 6582102431028556562269167182029950958541569095123705594954788174046339660437206159173417583841743892857066740116322758515837624700881569925244230209567223461401193316695082415261197843574563450002486582967745135870782254839990479649574452750850133306720341823136645982650022199634379361313745598455049448887744206616434903460504591098363901961758069797933831934878649993183747273660007900662110776570580293994733189753806312784239743585453090900671308673380802381312083077891736513388250097195232616017027333586286786139736783210630705878401429301217589001317082952461701571026008195534878902572422952568763551674434)
EQL-OK: -2456174834155365389136313380830050664406391895131225956724697875175573524338176945657304887447013652540757771192690715201849404302884140902228593190271382/3291051215514278281134583591014975479270784547561852797477394087023169830218603079586708791920871946428533370058161379257918812350440784962622115104783611730700596658347541207630598921787281725001243291483872567935391127419995239824787226375425066653360170911568322991325011099817189680656872799227524724443872103308217451730252295549181950980879034898966915967439324996591873636830003950331055388285290146997366594876903156392119871792726545450335654336690401190656041538945868256694125048597616308008513666793143393069868391605315352939200714650608794500658541476230850785513004097767439451286211476284381775837217
(/ -11503235648135220410087372678575470255397243144180272745183844970864347348074104828328211521698012119761674096067066173927209129755062269068090560678650614 -5548338218081690289723998288742945948643693817491921699797822887914665364835947234564530865119623677435878746610856459141463506776423054050179729345956931675338102809929977610828639446535095411122377961067651902947030310564736893080382424590568134091858634304377553326990788802662029347894499019277621467098333287442862683493159356014650672092060912274570436879076161496563079759704321556494898013269338428360856068237785049960484767969682269790642298701577934519452927652996671267126348627432295779183359417597868330923329974640383630473044712419371517153268338860560601603043892503067815822312755611206254762903436)
EQL-OK: 5751617824067610205043686339287735127698621572090136372591922485432173674037052414164105760849006059880837048033533086963604564877531134534045280339325307/2774169109040845144861999144371472974321846908745960849898911443957332682417973617282265432559811838717939373305428229570731753388211527025089864672978465837669051404964988805414319723267547705561188980533825951473515155282368446540191212295284067045929317152188776663495394401331014673947249509638810733549166643721431341746579678007325336046030456137285218439538080748281539879852160778247449006634669214180428034118892524980242383984841134895321149350788967259726463826498335633563174313716147889591679708798934165461664987320191815236522356209685758576634169430280300801521946251533907911156377805603127381451718
(/ -22964048032108117904633365483799091488990853392670636861794813863757795874434768543212887316456319246155824842161717179767513360050328383696194174741889496306018655333450647372293193335577883672679165775070112770359697627614883420620410888137853011387271594559450892054491963940112235887802995117234918878648066362268919389271696465517050425727202664230530633207566444357393843669758809938086228366322548799235049875711702216182219182908217345405023677260470015666831191434586902791186444958476491096759363292487221288620810273243009200212776634572092195691654105986099646006756823055390654876878195583529521482548988 10644501761877612307)
EQL-OK: -22964048032108117904633365483799091488990853392670636861794813863757795874434768543212887316456319246155824842161717179767513360050328383696194174741889496306018655333450647372293193335577883672679165775070112770359697627614883420620410888137853011387271594559450892054491963940112235887802995117234918878648066362268919389271696465517050425727202664230530633207566444357393843669758809938086228366322548799235049875711702216182219182908217345405023677260470015666831191434586902791186444958476491096759363292487221288620810273243009200212776634572092195691654105986099646006756823055390654876878195583529521482548988/10644501761877612307
(/ -19058897134776675884737764093896349427183484738023061956638485191239529906311503740032626797095131123523175909943402828257449376045336777553758951620699386266853663342003969442142858702229701661125904623724248177901462857013835790939020450746503125344631958534655024089231193396521561965297735217497608287565163852923704017958259400904834287026933197193592591423799328167149965328232560408884408251535373934831244856695227539243433290481951528897142697352526450162440279318507285454432916819060795455956931254810171588139618689138022062041222735056137988435900866680084665165131313435515187611756148824388549448126467 -8326067459929079652)
EQL-OK: 19058897134776675884737764093896349427183484738023061956638485191239529906311503740032626797095131123523175909943402828257449376045336777553758951620699386266853663342003969442142858702229701661125904623724248177901462857013835790939020450746503125344631958534655024089231193396521561965297735217497608287565163852923704017958259400904834287026933197193592591423799328167149965328232560408884408251535373934831244856695227539243433290481951528897142697352526450162440279318507285454432916819060795455956931254810171588139618689138022062041222735056137988435900866680084665165131313435515187611756148824388549448126467/8326067459929079652
(/ 25828007361450952719858846443651616751980622231808382804245407702688699228397920589229449608543284896555585501243582045708656531815385828908740757435341854996277769645696261182122648194952548457487178342682313459444433667556195761154944956714756269417591048771194019245925463541886773351873002480266654825771525233808830260734678788520487541379982691221386179066818743751876186761036101255542680066874888848011074569355779905086056095043888696435054884292698783753890317487209955316141370052511469715869816445031102161253514609763532756500340262263800747279044587806090353812452308490155782240390040070679663451429071 -16419739031141199968)
EQL-OK: -25828007361450952719858846443651616751980622231808382804245407702688699228397920589229449608543284896555585501243582045708656531815385828908740757435341854996277769645696261182122648194952548457487178342682313459444433667556195761154944956714756269417591048771194019245925463541886773351873002480266654825771525233808830260734678788520487541379982691221386179066818743751876186761036101255542680066874888848011074569355779905086056095043888696435054884292698783753890317487209955316141370052511469715869816445031102161253514609763532756500340262263800747279044587806090353812452308490155782240390040070679663451429071/16419739031141199968
(/ -1669696848499325185991294008037906453080648048592518700324899343297324898656645662186964240087582483813312797482298159224575128489696846451225871663856944749639170892311973606684486632224811435175199158920841554176114937196187087530038509898368755036744105403511353564606301040888877621412514452110348953863172547944175251415725815533087344857665837809749724257466399374547882097484009980477192931829030533366309859182367479867549644502538060694266048652224732348150866071381652452605392696555259221463464108413747443898588713629829490175098280805280460168541344102200890646453100478450456898359263676257882174308268 -3154577849943484396)
EQL-OK: 417424212124831296497823502009476613270162012148129675081224835824331224664161415546741060021895620953328199370574539806143782122424211612806467915964236187409792723077993401671121658056202858793799789730210388544028734299046771882509627474592188759186026350877838391151575260222219405353128613027587238465793136986043812853931453883271836214416459452437431064366599843636970524371002495119298232957257633341577464795591869966887411125634515173566512163056183087037716517845413113151348174138814805365866027103436860974647178407457372543774570201320115042135336025550222661613275119612614224589815919064470543577067/788644462485871099
(/ -2215504974719141921873290809898041836016933916943403987778356628123168736190963062169230280020568365292362281642280014010817115943641228422541948070912910166283758843455538187697141038676028739959626556519808411324617157646799936128314485433146912658200236754847332237438334421065771940922444296618134121662770699950019164632463150784605652351782139277998735272280336096528241168196650073301607171613955878761317417480490869592669781417658461696905996344800864447403426286476662235990122025654999230690604488053668524888833992415515434190712628587043474760836969696399229242018051635699746048823240033842587927229964 -11305319675542865070)
EQL-OK: 1107752487359570960936645404949020918008466958471701993889178314061584368095481531084615140010284182646181140821140007005408557971820614211270974035456455083141879421727769093848570519338014369979813278259904205662308578823399968064157242716573456329100118377423666118719167210532885970461222148309067060831385349975009582316231575392302826175891069638999367636140168048264120584098325036650803585806977939380658708740245434796334890708829230848452998172400432223701713143238331117995061012827499615345302244026834262444416996207757717095356314293521737380418484848199614621009025817849873024411620016921293963614982/5652659837771432535
(/ 24358677073350645219370308521851912760304925518671532565724702185818845784332554892130070740233218685874351979772556877899278790031132507391155876157108663291716896413773711734271947599485714147026138105714458778787734198938526335256418673319464023475137997251085298903419563039860433435847755093653670989129405749785476487449599232956305952768800154351414655365461746574761818724131185410194605648466196476174400166047788352670171627261342369793028465418799251589432585363577887467959594667618177199696618852093807640490831859585621198048572586882398004957371434677752931134884039120875470266936204172511104679441462 8754800987327220648)
EQL-OK: 12179338536675322609685154260925956380152462759335766282862351092909422892166277446065035370116609342937175989886278438949639395015566253695577938078554331645858448206886855867135973799742857073513069052857229389393867099469263167628209336659732011737568998625542649451709781519930216717923877546826835494564702874892738243724799616478152976384400077175707327682730873287380909362065592705097302824233098238087200083023894176335085813630671184896514232709399625794716292681788943733979797333809088599848309426046903820245415929792810599024286293441199002478685717338876465567442019560437735133468102086255552339720731/4377400493663610324
(/ -26302114071841994464108666310942614602208671348774320769941579409198660404735714925432808094014718434192516800374483192192707032773903982752997957629389083405320034044554226640590549491188742685901503166669355807243735533977994184111229208270447279559478659750835531593667003322059717930484363943660175452777363121025595100592911646539549735930625865256846706785601753749996181113742254145758187876411260965175520035400453360390392991183382425735199046574346992179663247011131958270717402007532256308394559029768974932620173103778338779940189812875680687510582798628982957687329572431433891809534332514765287899172737 196971971351558855568201373145365478995)
EQL-OK: -26302114071841994464108666310942614602208671348774320769941579409198660404735714925432808094014718434192516800374483192192707032773903982752997957629389083405320034044554226640590549491188742685901503166669355807243735533977994184111229208270447279559478659750835531593667003322059717930484363943660175452777363121025595100592911646539549735930625865256846706785601753749996181113742254145758187876411260965175520035400453360390392991183382425735199046574346992179663247011131958270717402007532256308394559029768974932620173103778338779940189812875680687510582798628982957687329572431433891809534332514765287899172737/196971971351558855568201373145365478995
(/ -25700334917103749626396366612061842558162882395534131493737229591609654899446089376271023701490708870843231350129849819430092002268875830384992877382393956173037794109904701961390126146975281052960293513473777226100954163054292968509501976296424278813632162404905591038465215586347229260479401862039805429711982871702185657527199220459658257385112793877259572278229045135617281858788415643567614198333459934599272409406206213115625226065750113120833933806486512117533453281522448845990642550827848765145774541658722594353290694745164913189694785762218575339370800538946514325662656804799046877175035545715523049884960 56325873113907570153638933263921340484)
EQL-OK: -6425083729275937406599091653015460639540720598883532873434307397902413724861522344067755925372677217710807837532462454857523000567218957596248219345598489043259448527476175490347531536743820263240073378368444306525238540763573242127375494074106069703408040601226397759616303896586807315119850465509951357427995717925546414381799805114914564346278198469314893069557261283904320464697103910891903549583364983649818102351551553278906306516437528280208483451621628029383363320380612211497660637706962191286443635414680648588322673686291228297423696440554643834842700134736628581415664201199761719293758886428880762471240/14081468278476892538409733315980335121
(/ -25716495567761925495340309269248196976121711927176026606462843116646034561721958499564011513233986043633061335866265799467020807570689498961190839877265773450484494789052182300993137822542881883769593344810286970036960228835955266304979090841345697560418139960733748874044680214388098802745248923989851173047158103142988835055585349795022662576576434371181693607267864646932929998659458265265400181839509356921460222604661909947838434113964465769102604033848276159366897885013231683417270877512514679528402888899725431524867260144325739317224922955028035417867933390409466302057857579158202739536568407090965929352402 -92089830031261826185903006947297196357)
EQL-OK: 25716495567761925495340309269248196976121711927176026606462843116646034561721958499564011513233986043633061335866265799467020807570689498961190839877265773450484494789052182300993137822542881883769593344810286970036960228835955266304979090841345697560418139960733748874044680214388098802745248923989851173047158103142988835055585349795022662576576434371181693607267864646932929998659458265265400181839509356921460222604661909947838434113964465769102604033848276159366897885013231683417270877512514679528402888899725431524867260144325739317224922955028035417867933390409466302057857579158202739536568407090965929352402/92089830031261826185903006947297196357
(/ 6427758281007308443295844679532867042370757542760390680622584758338041709910068192973790897624827722686313216884084305612889554116246627679267186323854642904894988936981064543865794245002470271142875081223308666588659587718561791667575945670118263124267218395749059879636505504607358472659126298770422135028955713148882314050530771750859372048576074912599265823577267962213046012777760882389021047579367276198483178024744924299929585515193595330026399302022065656106472153858484998010254767462854235008343139218888170221421046454280858208068658907389288543063912721882521711363713136166478126504226820360347652405439 80854661163518168674595213426641201760)
EQL-OK: 6427758281007308443295844679532867042370757542760390680622584758338041709910068192973790897624827722686313216884084305612889554116246627679267186323854642904894988936981064543865794245002470271142875081223308666588659587718561791667575945670118263124267218395749059879636505504607358472659126298770422135028955713148882314050530771750859372048576074912599265823577267962213046012777760882389021047579367276198483178024744924299929585515193595330026399302022065656106472153858484998010254767462854235008343139218888170221421046454280858208068658907389288543063912721882521711363713136166478126504226820360347652405439/80854661163518168674595213426641201760
(/ 1960728263483597985471065015024594804771170333646104429205729831998416939777820080209106943861368202560376682136488253096512360698625765514606930980274938979705620987031595592685578710084284618125325617453699875318678007463857705931376750632972266553809944621631324385690517092215690694024807784270742388108802858889381036105223858467345514041786882957807868961085072340965930749117411726729713477739990680381647988935514765113077094375924848051541167125595015542791382355149166582367766443782842193396221676952668624805183924877889696428989259842153378327156342464279071638070457876940165186524833987190050817072048 91266493124541431873557009470479491083)
EQL-OK: 1960728263483597985471065015024594804771170333646104429205729831998416939777820080209106943861368202560376682136488253096512360698625765514606930980274938979705620987031595592685578710084284618125325617453699875318678007463857705931376750632972266553809944621631324385690517092215690694024807784270742388108802858889381036105223858467345514041786882957807868961085072340965930749117411726729713477739990680381647988935514765113077094375924848051541167125595015542791382355149166582367766443782842193396221676952668624805183924877889696428989259842153378327156342464279071638070457876940165186524833987190050817072048/91266493124541431873557009470479491083
(/ 4941680418946960910262990974014623728051861920391294141439502190044830922127013115391726343950340163023958511659132792063033185693862678433421115681422259770928656196358763089894449447854011668445981430826871764812047994423858851467292757304285634515474652989618200442851239459073981986390515468331839802701176644729973346052528164203299481240263263697394061787580128379398464090163611942724580936445878570184925290925246112514015572149640886198984723311273144361235138411362294735799814160816806773736605477503201836095726740734281001021071803299510239436683913500734680524381145064985356627091311888606290704759943 291575320383555320391938911470370670502)
EQL-OK: 1647226806315653636754330324671541242683953973463764713813167396681610307375671038463908781316780054341319503886377597354344395231287559477807038560474086590309552065452921029964816482618003889481993810275623921604015998141286283822430919101428544838491550996539400147617079819691327328796838489443946600900392214909991115350842721401099827080087754565798020595860042793132821363387870647574860312148626190061641763641748704171338524049880295399661574437091048120411712803787431578599938053605602257912201825834400612031908913578093667007023934433170079812227971166911560174793715021661785542363770629535430234919981/97191773461185106797312970490123556834
(/ -17803449239532304707372697093467431202778585961066204978641168716990033159088600623106396534094218402005803618121159982050197012697237961155375180768349707725936023283589475384693590539312637333226292265409814019687105755522332846972859860649558844229320481883408457674560284773922666633054564243260924189551494368660033292970122831009582038986061326503238023206238467592238752824663935316307653075615249537594229930297642710570473007696494702367783692850946455203144153509057520651038068881755863521371187245025834292163874467913915588768778393773565536027848586260129438664753479013894698439967637389690509120223682 -10962227285754340409566802000064407225866105372406170304563353147415988225079632767886653994299800743521362563345682593189107807948342418743229049299449088)
EQL-OK: 8901724619766152353686348546733715601389292980533102489320584358495016579544300311553198267047109201002901809060579991025098506348618980577687590384174853862968011641794737692346795269656318666613146132704907009843552877761166423486429930324779422114660240941704228837280142386961333316527282121630462094775747184330016646485061415504791019493030663251619011603119233796119376412331967658153826537807624768797114965148821355285236503848247351183891846425473227601572076754528760325519034440877931760685593622512917146081937233956957794384389196886782768013924293130064719332376739506947349219983818694845254560111841/5481113642877170204783401000032203612933052686203085152281676573707994112539816383943326997149900371760681281672841296594553903974171209371614524649724544
(/ -11349783565099575757929584771389010505157850113880084607145768380886038854233583951229136273631022011781914171912628263930864052254964518914857757025547156428098062812984733912827827545722979442676567330004437902674729872754963478834939047061999292143602525229120558979819117729589695377623970606315287270030693151486803968345724658003068961239204812937084581894755863859944500186226990319892122692007317326534880413455575446314965159569830188583093978564829748603480193166063624130610256395632946002879039047154077629561745862713628266069928068634042545592328263646730943717246953000457159714049930890865576634096206 -5169948998417532948043886408019867395123131165917923418040862036041756675786217242743410895008311710518018466892169868028617239526646914529999134517417939)
EQL-OK: 11349783565099575757929584771389010505157850113880084607145768380886038854233583951229136273631022011781914171912628263930864052254964518914857757025547156428098062812984733912827827545722979442676567330004437902674729872754963478834939047061999292143602525229120558979819117729589695377623970606315287270030693151486803968345724658003068961239204812937084581894755863859944500186226990319892122692007317326534880413455575446314965159569830188583093978564829748603480193166063624130610256395632946002879039047154077629561745862713628266069928068634042545592328263646730943717246953000457159714049930890865576634096206/5169948998417532948043886408019867395123131165917923418040862036041756675786217242743410895008311710518018466892169868028617239526646914529999134517417939
(/ -4372008041495429462966226028389793326873997497126815043214338280101332483009650104005998792061125254101227371430911497751865710691604158789733634394053254604723940088324934622768312096370232736965692181452463495731681105253628558429524788376108667441329817524961077744083376843098018692898745743361309486938506049017980865957895278210133305721083115513131884239744064081819033733041876411992332060293539102545847193260167588667810376670587099064558298380310132769718526554738650709745767046942440481512965138461694790645096012018276362849398785863823724642554436182185786302301222529261914437437947741031113015699315 -13213007132248918651858333568248204618745148942720942572088217188768868803339938910599097839075045781852237705726227293430250507070717570662238736211897310)
EQL-OK: 874401608299085892593245205677958665374799499425363008642867656020266496601930020801199758412225050820245474286182299550373142138320831757946726878810650920944788017664986924553662419274046547393138436290492699146336221050725711685904957675221733488265963504992215548816675368619603738579749148672261897387701209803596173191579055642026661144216623102626376847948812816363806746608375282398466412058707820509169438652033517733562075334117419812911659676062026553943705310947730141949153409388488096302593027692338958129019202403655272569879757172764744928510887236437157260460244505852382887487589548206222603139863/2642601426449783730371666713649640923749029788544188514417643437753773760667987782119819567815009156370447541145245458686050101414143514132447747242379462
(/ -24003371850945507239307096734506644624830254935119140199726507920301383328662376914775504920527918338079792692943250446679097229950654636321252144129692109999375967030689211646504258922323499994340282315270808545865248969923421472430657741998787024263629527291510416193284540865950122841477102934165296344839654902079279846705581902668360663987722715177845485423354226653585575109653937253382583158263755381721094429734122004436184054214443676096492583897635497699417294183504529284810360226314491839533303380490277211336049582128602304906849999737224506976061216780230350942535246958957024226614847691329767208211525 10686139440491678930358521446524488461285005495304677740436234635584738003880529034339295291091217655777627375148264449580064000634364863951333061091724053)
EQL-OK: -1263335360576079328384584038658244453938434470269428431564553048436914912034861942882921311606732544109462773312802655088373538418455507174802744427878532105230314054246800612973908364332815789175804332382674133992907840522285340654245144315725632855980501436395285062804449519260532781130373838640278754991560784319962097195030626456229508630932774483044499232808117192293977637350207223862241218855987125353741812091269579180851792327075982952446978099875552510495647062289712067621597906648131149449121230552119853228213135901505384468781578933538131946108485093696334260133434050471422327716570931122619326747975/562428391604825206860974812974973076909737131331825144233486033451828315993712054438910278478485139777769861849908655241056000033387624418491213741669687
(/ 11114571678097117920369007866358540243142633567044843952020632081573546909920632543585596494530749645890342978505657174505155646987551523455565703297238406590291026899487431109110746657023874064284362499621762851387854720746040865741433394111425240861542892218169985953747711593827913014379823797703717216676877313898809377467394109623799717556800777662963842899812297087284510893865429864819927951428138755600792987191034272014681606301885821862650098620488569288170357746018556395309910262410994899971436293672676949544989196526035130226777567220128838888396668158456237490064462262193759918857287915854681904206680 4808076329737968688023887165061921594706561818755147855784713748545995818001333418509444774306288638038607173052166709335820929501845348060033808100812677)
EQL-OK: 11114571678097117920369007866358540243142633567044843952020632081573546909920632543585596494530749645890342978505657174505155646987551523455565703297238406590291026899487431109110746657023874064284362499621762851387854720746040865741433394111425240861542892218169985953747711593827913014379823797703717216676877313898809377467394109623799717556800777662963842899812297087284510893865429864819927951428138755600792987191034272014681606301885821862650098620488569288170357746018556395309910262410994899971436293672676949544989196526035130226777567220128838888396668158456237490064462262193759918857287915854681904206680/4808076329737968688023887165061921594706561818755147855784713748545995818001333418509444774306288638038607173052166709335820929501845348060033808100812677
(/ -27971792815424016824370019866875377333122266892537700816201893161065327053508379094007350664178576160161460501442627646041422270472469587140689725524176629653056006769618104516779694726446739085332330345789012312708713495757968594985567285237456431009983022526625885024663335598317191838389804118084831445251467492693688286258834282078888862754754572546522075833632779922232880101875914894393005204887265821991459415144492487189071888581048779385051174007698853920104709378859053075296413813207007405843448595681090932498329066591349910723578718333092115184652723310842559914379989208301125396793101430807658654849482 3169580893680227534064172567436590084742349042688765883461923377455374714865282199177755353861979892274552092801376364846717140845237173266602633583445110)
EQL-OK: -4661965469237336137395003311145896222187044482089616802700315526844221175584729849001225110696429360026910083573771274340237045078744931190114954254029438275509334461603017419463282454407789847555388390964835385451452249292994765830927880872909405168330503754437647504110555933052865306398300686347471907541911248782281381043139047013148143792459095424420345972272129987038813350312652482398834200814544303665243235857415414531511981430174796564175195667949808986684118229809842179216068968867834567640574765946848488749721511098558318453929786388848685864108787218473759985729998201383520899465516905134609775808247/528263482280037922344028761239431680790391507114794313910320562909229119144213699862959225643663315379092015466896060807786190140872862211100438930574185
(/ -138888658164471549506154385143989713534453638138516110941977029 48484067562152384719540184707188444570280914254129306788137384972303743285284814 56428088099244342456240635263153370817851703737803685168591843059886944388583310 6984617762898435035101945891920384937438416626357047934508608980105797822504000 90193136183227859939744547239819443586783276313678017953708293432043879247302040 70539472782976230144489157899475475029273447055080677052149474853222128626227832 2525164589393997980217929709704832829968554364529060039097810436136432713906553063644429644328565051224269893261942396763235990073001625976866246420775436 15614337547041181126817477188043219628044963126229393225781917631975649438502836750353253851523795212263078850399716875892512719059737913422781999218667136371648316387382440793865460028660248325297931269646982047533754121791358966254514009830876592200454797694143082163294323565673200905929297174223061890100210054105027025488322289599106119653451218493916291922340123640475500240519924011764050880374885136181582395113140580448936759383024305870622004464940344826337458060607492042593813585998516868215921180540240201095202617277388950504036371411600204964284568597705251929695275183521036281637399204541958859605054)
EQL-OK: -138888658164471549506154385143989713534453638138516110941977029/4793535847709521198063287553243915170068914691727215964454867625024011698922303669226389748584276840530192157568469968220857898703102351955898913589325705637953049380748829567692600765708909637920797057370082064005557328769108356548100875674196976079597658854339583183901899349355521527519781721778545444496852540362424465770767219571362842157786846795990148969989617793004579188905882473140017509154008696803103206996067638134383708975696867028865870695941933200225325283190379262695816923376790224594063264297952504481719779782130509306530621779762254864669078635401870023086312919956154224782043667754741333688780367667466505233610011253346902821033707597517691608103391952937194719540981992469020284583499872663129517095879706480339710037976698298522952071766717472040399518290905103777436461474880898550115925718887748413534479076504168236430697214654069473800915087572730747027455509241250627470590715812698745630545585772046458363388764449879417348554556621640336029897762172500880501074103433267444717053504878282494505367980026597725927414511391047010801407870379019921551218005714825277162504166028680939100225793768617321830389705750902850499916610355200000
(/ 2902267908619179684129536324641634394442732593027015198805855082 4748067699021154152763168285921806700655154833226062437593302484475663167752990 92172802787151156076284963978247829387076983213530315481815585776147505007251090 15808981285029107672090190966349736198141855760941720122983980047623201110025085 60559202289239963744584432021634662330089323842876293477363484160210450706125345 20641717016962556495214267565148984505293698026059157698737040675346468206231142 142380249473014630955299439077662853963947100833592874440361316474000948841420058017600161066408668117933232436922811486348705081331372574460204309908598 22418721268614574393232189860262616514600143215945007038687873335656746730488694050883006164427390756358558140145027011322151188565843290717535647848841274550496431839061217253488169143292339455650565906288959125935798633464526818546688779845699340483771625364583343140648892889571715648295855169294054985996834093294240640072029711789359793649773566295329912082241637482772608479106201840565936084243727069954911883243252762742415647868355726139789907900798435783365130277592703989608678774745914668128791639635886550753850811717805962562157686110637810320436812644047534536168343578232389700410352900247092236175044)
EQL-OK: 1451133954309589842064768162320817197221366296513507599402927541/13803211377640454778526029288269623376813125655593684775595099045285713415153039020789267800416616529908688645478733023490751981264976732618374046330204398361829051480928696426688037404239513603403603849882719851670264413777889524531938606364925013854252374108222701436535488401321603495905123597139234414735397259257280679663147039651553472142280954446675036289021783142392760217244908768132158498744301278889276778209560846418263599491357632762902447742083022806085077053406738681250354036208472026046315736408632370478801849290705001622808552373129971427533249307210975612625050706661691322027927380443494854794852235813844542319971019369687589916047377092369702778251658652143114091304960406840026816351348391618676357634544120732441610431417230403811846208113160343697557236265319994702483700922393762500190362776377442551539417224595247790865885105594005740401824824367904020732469833438717527758468635665777261969819260766044978137909489986407113029460354144391595512642835261443393260585888868936164331461486646676578398836326366036777321522851855085808626766493197635871100152761464712744017549919220291986785134521319127277292845352756807452050073157340000
(/ 7798204144688205291220879078360728451593323170355809361079096742 35808393784851478122520372074317359817820799318259895240196875729073154197251420 58532175726063855694248618287185551673975962776708803423334853085996022345828434 97834368697888769536063057370864051207348099191057106781292664602519775900739777 92489021460656714290092899983209031746574776013841975324837145038810562509209529 71083733375588666647468985607775761710974844539643116636307037921671845148256816 6123989271760127932230015643359630675168106436173654465119508990415235040641894537960236511442249258231302028977221206744158863083898145166446430168108 -27418900206398855942064397259705713102524342707255992250395147550519659429645343464288092288218160406382406024735131578979728501208163782063519839258876833755387025755815673514708453862847139552613587001235204464673999898312854941659541050445981594990466469147364579547089805525464252876345032296745312923488525701877655352034887018931755379078328147999631937419977103372927428613463482328465834563846802083044643719319690088670748858904291298575733560600669924511028715689681303059001186388754140003746463568171428267337107394361025465082282061651196456268663181772211292647101192148287507051053367729008997838464209)
EQL-OK: -3899102072344102645610439539180364225796661585177904680539548371/113184205287561573324139833190653102440730360395399197973956984769580868365256138025034414373155098575475566747215877030265786675432252675717351889433714136838615056208470421665419618669892136317438270826178251174708190860235979949204785938786562420189510825909814566675745650194525647207897976611434325225523578368855952217879373499055292850828774005130267218801086474623429504045290678320168493275019256514768273116059350700654655821674309331585233552793659038912697151359657915391954687630783641745610431060563252789714638916120291482852533638921356624929690158752601417722733222880768367060672103351737811624242610815140332559619520810810999145535251960674284283045907801934328911198563750515779896457101601178888594882087326241517566336011980952110586199881600553269825310575512911473547251704677890770772166895623118832621335417348044312911888377718725944255218219811801447500167145561774582342171995333086224230231746597452848775656030037837271428187450747141983599129861631612369300880722326218963779650411119279310045263996988089484063433088077868691314162108392639864773907107325220582413508233901954483499166402135445110435112499264825479433389003494762240
(/ 6291885367078853457481986049409245691302078375827782321496819120 20959289231548357352292073342856567687394126070322865796282035211176720583560298 24366038587110130209541647226271577368736240640393242419005751016119649778306566 40118119174220166901790237425673316895032570534639145502274313654443256239236466 73598137358602854818844747625643480865061277528564461120022408463105339470504117 36695182446520138181079917512512743290981469731336486456411609014364293489978544 8671667981598505073194269824535189054936442262459158402875147736469644925300845122881093216273840895555488593258562684601176239455526568314028830532770 15920064019095473156324398162334173238735268739049399738654357508344572552411935473846021991360836375685872129737682603096450566258725052013769725919038955505690389573813769125933987978360857342250911865713011888064725725934341157729878064563080803955584985269499994186472079783942404183377695242296289152788154908185130552013951432753148997632323578507137074131845177376689609114975253308906745794984371839952312988353950198030866538756253618535421214253194954603293145507537939731320546686208032528588232652963255550963088571344119439249328480867640436815434047309164687808223851012490130534705427647158409623238123)
EQL-OK: 1439421788255379275215959765325419043929720157723371200401/1747562187028503746686299553853635643553063923188506902759251937250022196751705340155682655202720363192751787186892107863159676381018035068965958466119538181810433273947829904580526582292369320932134048728374142501965682147541817431447933591106030690334465450755701191781243754499216697336293783127396687916725975251100500896467549458036395977769801208905203001097425041200299917628353220804629035768571072498715030261324138691471497255335498185741379289492513543474304524261634247519034231348033379344777678679950561777846684978640375273167561174451700942154388980887510088060818147834369595669846115248027925007288445161871535514130090907585140894883683709507099726386549038354860875469377442908932714711235823032704493155679240378374325069782368108779247450762222838197717507164088182062062215767468125843278459189085290703729281279344184417197883359351058003644499215541300350121854220342250451978930421772367851329849662028719768708399155817754711362398236471946313773603716759409265530444582884661320404389499624411965234669344882203618613097197387901166904575791500958722726774956950592290330175936039556139052663816485140080963740296685158607671768592
(/ 7377598052472799909620353419322603137723415431070641423056433630 50990728761110292768803869421408199244526424730838143228662194914314857136430737 89434155113971221138805303763480423496687322824531744020762041598590716339098287 91343386111124700155689622654961840380754244946720984970313893805578518003516073 5641075230099727784981579696383316732450130418277879081291954534985607255267932 91040802121912074401640073226003257602385910518707524375098380810792151468159323 59272268188012925764499414539835790113036863511169317924034366016920114706179376837448098952655862721652129333873020625135398431500899131874782270590048 26690053756452308398721390096804652429111408747235998849320348549870126230712525274708597346508961935323823048352116439255386668122483555236157562141222434006899926132549352821247340442387991613448730451171206857242290791156220288682675982609964518905569737166444127835826079348146626921864776959482079234994631361894786436656768739968380067890165160954836874044821979903056957225885565092422439358816023307475581832942250031121721325840673134241504501661692722633100336840768527354183989544434614842654682324213774503456414914613412547380720171088896588158750436205804689590730033393056191028424154915201435563063992)
EQL-OK: 3688799026236399954810176709661301568861707715535320711528216815/169215718032454146095901737002485678790901914179482864125777331106759302744215797822810809511498045518338288799757661725047129775976254373463314416017128993811694804386237923340900604770406784566473173755998386770282409830097844352035251738093305402541509197084964701114515390028814839744480965823142680384744649624767291550851759670297818996073873968006960956353033659153219390871979066743795530136868490210455800714335529013059123604101460242870160400211866883478263106349349114199154533363251799944090298252763172390952446660627602934622584400932001701907172000401485323481964448487312714644861543740014645407417493588261100128985848137181719614326345024112347151970444057551896842474702539258687521054961314443551837168457190568932765925484427579811571491887599619302241390226818415165012748654917331557679228501007751078584244340346651276906088856205294333241792044902850102153793417101337667969641035858108457362954650972654353600494166650067557014544136240962457086782865870886529792004619668808741311540795514394731398977642092124679638585188974746423756335151669217754388004341907440529525288302872368689364872785975840444000802518095138062596107983803117056
(/ -239344771695510351349291992975349015183687755312261264640655565 59880027487583466136533364102518649070390160795136023810470091681171428955831193 48344457085007359228086666145324485903333773379391455489556219681156342646858065 96824393663737121700189215323825147927318524415097221824671795011444303522438090 73240728471954064253765051525185557601431281145369716902120469411886093226662465 53476482728312567840603110355495270554470432250981685279567813448298175801364992 2468459436652089730331798017030410049989399340882712030505584719342958436741536069714790640546086933185494149096286590992747248311590137695839482679011866 -20583944357058654336975302336113341974001469085102805363209530168831840401111182124827636905521584509677325966689931599005216123375088335255672290604710305325984961984791919524676460851699284525672773368217606895110240237523696098521003978238685169880199868729577660354717875890521074505342309726366304528678619465048659607726264456481345739318939431629704180230985397408136331466856633265343276511285483458860216756106887559724757372775728879136089013590836231272961497930729470443491032308329051560641396901204040829291495325588896591482909336032903587307512310970849256645908744180630660878534263566681640143534823)
EQL-OK: 15956318113034023423286132865023267678912517020817417642710371/3718709813392127924163278362562751486187605430152002432053108623099406465632705761508167478249438322470295467114170871555665890539409511492475240415534629792791729596612426725326976353265532166735941330128195885206087665506220364347120981130748862937276841801804372097254983242962029582754709606117339082763083905960784323141929645331591164015455383939302728076410053178677168172481507115685831178503426055335630689722163467637005123748113214310366231893390818795405612007113310547901224920768646006621130651182788173442625298859454337696280614462941186626306295514630883052819172301830539345633711941340491653447613466053205836875456839023743314390098829184111583809697328393569588632000669468187410368485286035179259523632217543401146996259011916302393091677624838641658623073752023082344005134299104409908004250830639232078441523519412192782367689826532215394196055149255026188549091956300108740792221660678858924234682223183500313556198187095251404633698868186071148295957994257417049500872570631774233307260384902571112475241073598945295745287525486108978093728296107260155093397986671349139935376427469718767763295900745932105722655724205000829205748307261900800
(+ -6069217517368004039/4076344942716985944 -399587800008780737/578697755310708616)
EQL-OK: -321318766345655960630110128852941297/147435729263904928853096856396980844
(+ -41285036778370718/305793940074617155 -1396094619926552183/15846027887642356854)
EQL-OK: -1081121118676718273499338028514700537/4845619302294419132297197085940230370
(+ 15975644088444536091/18063939613598316583 17501188199168431305/2979264551795273683)
EQL-OK: 363736076920798535449296038324193823968/53817254956563877935003279344562385189
(+ 10197734562406803221/17452826108659293487 14639450560606090654/236781760961536951)
EQL-OK: 257914422508077920978698094723491089669/4132510899763835955061848877304138137
(+ -16810360766832230069/13652857552883800956 5011749175730438558/4169057419710079215)
EQL-OK: -184295743992738197672588473692806043/6324394120121667288243293659228081060
(+ 2234573531734039025/1128831476977636536 5842177084459535064/10255356071975483971)
EQL-OK: 29511180623959738330730559435115466579/11576568741659658592450950022331964456
(+ 2268894928233321367/45672733521488298991909987382109984899 -10510750087507287356/187832098427494353069556175466145198255)
EQL-OK: -53883392376116199828369509984040539934420061636271022459/8578805378260910951788610598591490227836321974082207035230408675959411151245
(+ 14273433611429514043/7774518083776389556784045601066955324 17247074371340283485/225579726714102822702316919752160926694)
EQL-OK: 1676942472465190408518249346164012571239098147062478293991/876886832336064155131767120243155911448808491410701588797601053820468509428
(+ -384768590020206817/26284423885474502132625533495652664626 -913687410374243983/254477371735734658619949996700223764026)
EQL-OK: -10160887225658731404416073535892287983824191154410167550/557399258996959835387173465565070652935481894323496556880024318994528462023
(+ -4465222504572200650/89674568206322981678158378582739708537 4148550863841320780/74302497820894496090312266744880513261)
EQL-OK: 2118016946376507498169590394563632549990739165791772590/350686547828419379316750498534703170285368675911953477374458878558215968903
(+ -4466938407638238142/281859125741189685767904931589784285893 7302241525893379697/204618108204962312932373858463395271264)
EQL-OK: 1144186926000295881841982161759159994442430111060328362933/57673481089466829503954266461746705742702466399988738560842837126631263478752
(+ 6692616266348342275/280491911593106290120490189988812804382 5414100524539959087/183579771905991028181574615911067652873)
EQL-OK: 2747240373316006570071525025488180559154305534334705425309/51492641151737853299832848099101317109893853469394209716061486746077629289486
(+ -2794289802081124319/15768464977850217600859580216291365931410230647587457388598921425875331529149 10869776169503285673/33805119742344157512165738805682358903614971418053290198565741206390317449856)
EQL-OK: 76938383491719886409504555688515759257937029058461512747558964579607347503639994773101488934213/533054846729186819415263583890627325668798847177803707144003483502948153457972377767011992167761176556555806720273883868208938866192358148729990609852544
(+ -253222140119290489/2123024034843473393742534167007121513293496410591072104903085284304117612082 17957334013642389787/32058972871090153103034645121513493401113378486125580864856088310966601405847)
EQL-OK: 30005809992231287609744177955201962181880644831204431411802631067134766877061419104162728517351/68061969937719269465960475690278941280799593161143759512261685488134507341176789799765185182008442410081522124548392827986923668912612728349293792643454
(+ -13318881947309618/3105936147298438543619802738126617974207009907186580731552500517452462642139 1850968757748704519/36469179946212878965111748233319050931475015876401494718861814560453153824935)
EQL-OK: 5263262069792987469108717688485565287648879759118200779949761992573778798556738644541735401311/113270944257273905484832818286307416845956086746130199501242465128236430928807948126409718436237517505516279133169796919230385184900609912160483959935965
(+ -9937822914683494298/36414156259035675966580098631253549474580108307284844243190992829476777586283 -13712605099585970325/17758145954890657915358548152198427387923366136638180213650029984340849686198)
EQL-OK: -675810254607579372158951115566887998278519717754376916387787672973408477396668549189167387350979/646647901672150721610792561233068038707362067627156669418022102308446036384411330678972562863413004325878365438890328206637571985169324874284800419222034
(+ 2479135971595944301/28169711053558469409458629766960029324030958129245230797895768033968717159836 3427244662960653095/28446538857424788738244844756675951434179713170118835630969510829753715142438)
EQL-OK: 83533664807147783700314944003289704497366290621039272787320536148072960487262393639109696219129/400665390043739792096386856839000624247597803909916773326187593475005945995926511155915226239317839405221783416485999405286913042389632370302962776360084
(+ 14865500635281371370/56222262470894935247131881777606182311286871927285650835673424014252462156319 6436092572090050725/19282524131572095520593158313261757267758159099923763177708581262473988426947)
EQL-OK: 648496060602737474174747620183913927791943082591316359990137585798909535115053578637078811588665/1084107132826611778585714784136700465449309125114745313342842325649687943726086785657821763235618936882528385000712567133180567926723616940173290425928093
(+ 340196811925805824067049620503247332111/14422464039094716975 51285507111580975533385007190438537498/3230944134273302873)
EQL-OK: 1838820276033673324738967436225477772648372110186756083453/46598175588880723338390245118389369175
(+ -210449319160504160992731982827917332322/5436857856220342451 251628249079137248539965770847855056283/4323109210037952829)
EQL-OK: 458271632943884346915405609513071881239303671882386130695/23504130271893362375786510953364243879
(+ -40984360445255688839942109197081457275/6593417935076565019 -138094174027187773198981391229349265879/7135512300754720691)
EQL-OK: -1202957011856131413678873259651070808566709454882536663726/47047414779755620074837011989046108129
(+ -289704472880230079383856507128133962457/10452740760651010288 -55251460678415911958671096669490155237/10333740726609314202)
EQL-OK: -1785630052601050832889834016432677758176770083879794496285/54007956451514283340719766211063255088
(+ 276702099951674677215621541062877777467/3899918017008359516 42623843937285717338660228144403811741/1973785812353331893)
EQL-OK: 712380176058162142132059442064597996057720566915757732387/7697602851312240113570356856612843788
(+ -323480614013303716597188084301661616596/12957985934572321773 -72966206939397711493108854138997499334/4539020357040680881)
EQL-OK: -2413780175334213399707013296172687953960842714316410700258/58816561943270580900205343368941122013
(+ 65443777543319569578713907336699651721/218804857459609839540825438673960136766 -61986861924091374470669233802827103921/65997977315012279293170493460332070399)
EQL-OK: -9243869541956614722377007489838492339200370508580665293676272508698701352807/14440678019033825487758061900150103876633207457375858942267120523885980189634
(+ 75417845823236070411341994633288547531/70553457686181702397810927701121800017 -7132208259849175775323757110664708879/24379326462014713478002790304943339422)
EQL-OK: 1335434330716260509518880689691257567128541829706203586134358870209350816139/1720045777955364955754847231620711706115121721983605654691934662747636370174
(+ -144692585186931942602350348772472248638/135233395864627580439431775527364081053 282512666765911374279543408363363928190/317835040256607665191397469890906044457)
EQL-OK: -7783226336195038987381961251409043080655184208289882004756343793157154115496/42981911818671667582796085276418080952868666330715445603855323471628969373221
(+ 44888992584766727877549626240272070725/30583318432547259097085073976959329092 8004917623696885952432014881247978821/22005016116109025986417835664774768346)
EQL-OK: 616299974987760892931461886440810919939264155149950328291076750435394215691/336493207496148335911511951044490614757807556827643881435283379298939260916
(+ 78378756441281199312006031491361997668/175125578595003447448566412156266355477 41128705932035853424044828385766740319/216359823601433445464965619660717081261)
EQL-OK: 24160702340946845080381231961736762955784254747832931999121777482667650876511/37890139292913914697800186893609983979783140570423836226844401085057321416497
(+ -36669293296367265584135816683983780855/7341750629088488427994322429098120058 -110335983484012479290765295565662258281/5944410911181873015545360879141666465)
EQL-OK: -1028036623331099574157832708037007047972965676333418398303213384036005227873/43642382546729990922161061763293407461832155878510163500678954788762454970
(+ 228535455883892721240720366651075744967/13353170075841095813026701300679754576855418298534901819672803635370738730013 50622643250826426975012800479360461693/18462345430382979738234695697296360785230118465695284267226773073149552698303)
EQL-OK: 4895273294635392498665165879164922265508724130843670837390305811645771221742112327485665544066552056189958877583010/246530838530831602270074647792752210668736478466245992891169449973883874207653264921203783108295835419855394180777469634862446033810927048792871560267939
(+ 11355068601761731966774720678777239425/4604724775053993730579400400679579947095967462408565975449642189823843820753 140083339434585694465706029861026468774/44667214322013486680993684507177513903616004462434123967566781106229226297333)
EQL-OK: 1152244506542792151980649054527153167035843960949499862764543674633978109831264344257976000890169981044543787620347/205680228421222079539939271800361418862113882206694593495620042859527547538342323521609420336002641308832164587573546802806916292021672743366881933951749
(+ -1347509007210283053816302848714698886/1127513773036247565111791991337919355855664936242166138889250311777351432819 -29464928273311615445392112247506626497/61933028109313748081628643142485450090725737246358993405254280723087421657760)
EQL-OK: -116677425670791909053501267317366054796703074907755330120413752187834449333299886015456661052906469074533366060403/69830342199092322009251417145364324484174202256910311362396720371574344280505889954115533896831727771442604285956749924105078563356474162416148250025440
(+ -324250487660721070279458563122233299722/81069650926979269606211148691445887485067008319429991878657612702576019034861 221744296343315457943731256980089803078/69422237643162665956763790134527973903052044485041686255401689654420090859107)
EQL-OK: -1511153903564243978242173323335554031611949546418082039382510246845821774680210236992700372319944685567533765722032/1876012190766999122356500320654631447623282613780323887424324139799202291067983209550065997185860196433399782230215269625922714982832188312141580824109709
(+ -5518324152042099343909980322067306333/114786626838714403445081775763480415805466836213320421844559660900880511042496 -34415425451618992284220085078832944671/96012285963709194218263616278916829663708037691620330613749177799086889040577)
EQL-OK: -121088040955051148243092870850103339772063863319219725752028251933576579890093496821887384992074112246777968211161/297862876779681729593084954525306275464788137269287692384941959703420459939692410434239827100068259769782676124741025632728203586961467995819025176090816
(+ -14763921690861243371082340598041267817/5580497386043551028888310256097864185640794395615400088682607872958152738111 -37917865546640067592937379176813765341/6460563866107795917092814416816176677900242086501650458839130903088333290440)
EQL-OK: -306983808565398982164654624310995401934900925070311336095043743767915008644459192438083753301097540174379867380331/36053159767181973313125557585868206969047484351694148822117591172786449966899079869470557965303954072842600790897257698854023751399649072014440219958840
(+ -50167218239107621378232529938205077788547946059832391744348095230748591585676/15685777859540025727 2959973815535345735348053015389999235839609978295604181643547897863515739931/7556072538495923601)
EQL-OK: -332637648328710384664787658442281566361265475773778265650094684540358159241317316408573560734439/118522875329417757148187346888166482927
(+ 36275100136090483878026478935942224245036692059657264537598788566553406654319/7192442039871568876 31833552596558882106090352174644817045294359487590746360517241517440556146007/5115621724114081523)
EQL-OK: 6795584791386081942310910570767193224876510928834120433155946649367201608618436115134135392229/603177258173744207443043238127434068
(+ 1518304705177739493483387141342904186483658277690975456045607777812450680478/1837349761252804045 -98159070764971437450169149833809835519268242923913777966502463698396945141091/17238232824535200528)
EQL-OK: -154179655228376218743158291724235398278770272999447263973992852061897564252670941977524115620711/31672662964580000612902147746364535760
(+ -16820231344048323866426670709751443650129113909724546927974450301780935205864/4879137683452153951 41987219452495799378686134495924115238909423831017150785452046648616005475639/10470103987572807938)
EQL-OK: 28751853386830083847297108941057082854166610198448421498169760256533906032780671559334244751257/51085078915429149801779227663330863038
(+ 106981694162678522688926793970551228214793665448093395251834862896418045995969/12359470989873920972 57736849967187961211538031441400807467468650239660040144967046985609433512403/9148121311784151716)
EQL-OK: 211534804819567028232303054650327703050869189253958355919997046592895748577556985792570078031065/14133242495605447754080611005730273494
(+ 32477400086615533920132766925666506741908300936974348739732763951610256880146/9045135183308696243 -27444990730472195954051975667481893116650518055101159075033425831129583042846/14815776448343565085)
EQL-OK: 232934248044934592851252865496377968609159820017147884670610366058217203617961573611006127074832/134010700820948737148715427669965475655
(+ -110053921687226074580746319073262192216481755737797790655164396095655530752161/255625377233605953547425802301922658850 104095037267817888539158192425982072195078148060302393917025130946535913363779/52156238014583575190277280296975732513)
EQL-OK: 20869334635774913818120011435677143948904421430726712952150525645851498022294865158343391008006649321440592131083557/13332458017563665620865770931104425383051282278510599570476131200251352190050
(+ -29732769078100192507326444863945498799317005912797369958801703828462203585495/153426302667449722633466432797809987061 36094569840376017510791155197897623093337784636438580042046806320700826250193/73286165979315961333009750429763545174)
EQL-OK: 3358855747298609357265422062476767573626163217619249414656940907348235709105513077913806378841119674678021275101643/11244025482879487592663298816607141776071841230792806495601092332558428993614
(+ -5942892427460131788264792587455286675871284855854073854440582948253436001319/42136930106315714728428443448730580823 4013357443728612356640061171485791666303136232331145404661874650095235381569/4039594279673425548586623641599574814)
EQL-OK: 48367895947790658831309709091377784501687363167039737892874371817395083020674648576881857510385191335175551957207/56738700606823969419119152217721454504573192499839513549171731025354063974
(+ 83833896550100013648317056712064289497247852876055488793078639582729685477353/188580876675619574786621140720273228537 -94310653397371924313725082402708514144086936359594289802762093989853507835016/223423274286761439988276492107364036191)
EQL-OK: 945257965914081840217765265999453398105151083284254483307155736205796420255026737575918161700355729594975143830831/42133356934734885127066999419230498520039134905254787577957770920054881982567
(+ -14753992026457621496269953958381833108089826525439816493815533773338622353285/187171041855711408638339193132645929319 41340837577662628944845446369855468662228665858415210386857356535970453143469/322471558852595372991189266479896691326)
EQL-OK: 993354944176102401496932276511264091214577507066786487301109889019709943488537161608732610457423116833164991120567/20119112546425211128699888199278894685207186285215928241217590790016852128998
(+ 1370528773439579327226257222995383030603284075640526658282329726447335048230/305600505683287165495713194488435114383 65450762047588146235054351616480175308174618406941901794570541085963681607527/78934496562987400429145916504112602768)
EQL-OK: 2234440886428442112499564751364146150136438855986167755259621093816030535881959724370423862435538502079424185584609/2680269118389404699570998335430047660909241475691839354273569734988880268016
(+ -76890617375308981455205142622328108690129081798840077873315966300000409208129/15716637731576156581128288257209679492686622162926707938907282962815471734862 38716252217351070567267262306332875768795464072349655597599997486613800623507/8966639693620677733207403249675415446338239705879120765911896990394928596139)
EQL-OK: -80961151400006413290662155450270992168701818633203071886556882897757813544592915596861717853520674107309124394292702460320442121704840951425284048212897/140925427734207212133604717335369986754855062343668899363006574618520848268718851310007161609443093589067206438198588881828988648068282656538084484897818
(+ -43290760758277846058307167265569849910514905939554272559141355223092464986939/39390771697068809730875092892395235497943839933482798653607450783947201796777 -34021960935937170163894986285771504067448629886312440795733904794894095253649/106500928228745564800818258673435811176493306775154643113582742982704678574998)
EQL-OK: -5950657500399238361998292872481533631424138885403498309639150240712482075115081624153513501886127772738596607451116548616099047843190357858736503567640395/4195153749384427435979718872073512266029328962522899010907363614544821318917440413166534226890289043064894115954085809567292470182917919104836361549181446
(+ 17906146982204022925114071077515882010955693727109005464426577098738402001871/11978213712662686419384559301746021856683603106261241838035626618416021524231 37108371752538653389309509075248119316034595087990649061240232817571629131708/23044877611981158676785639370406786635050056158699399001947422631523989139615)
EQL-OK: 857136973087880657664203854652754375000000796400911171478039451763440064550649429609696307332611304395324153178602635490321877797571177424460384122636213/276036469018466057777760709173569478463866562650149880633721199971933767458324034017734890892482223472007882939609440193626728031771767304374122564511065
(+ -77062185592993847534024832256462395143306675613123510837298699277378172890089/108133793614758275822883834459865239455798743725021300772336023406871185253111 11169356025540464491224577661206910726665825152149521753528516637690366838655/6369000033300801574913390611244042297918207179453133439308688067382050608197)
EQL-OK: 716975776667538986425481530620118513423964367153518065425241139444161780269039780459555836804116752462325735011822817367819625929553250251515977390346172/688704135133337463423649074673019029541747166391680122270752018123634233590688096940261480888455237095078029621363428114402137147558304641222314936350867
(+ 13583698920327742567560325715281067532806062839142769830536738488850089822247/37364394142255392010559408553278838878570049727027927213977555360874308098434 89809462356450792524214360688853318641058652796345720882094866396911421360072/67457610947238032712889230619376608100793287037427539672885124981055281513463)
EQL-OK: 4272000026182362299819817378001862956001381379478285995446709640464951377212652125169846305230835604666564953883168949950485767679005929254184987140738609/2520512763327523955464432226120154092742373168521113224665257966793820057379494860454732800329019773731110452438496395974166220481124541266348389100216942
(+ -56124163112538495128545947597589743957824668875494126834084658670528264380488/4752969512023182700122983723156599300062332404522277372984645779569746369511 -24794747728228571193100294011820993825205231022194400752319729320185378063197/98168688073468429337427023004226732413974455700654808087001957859427678524065)
EQL-OK: -5627484141989830997868845457242226973925524393512774885292323552602180052845805156311097870316601631410500655735815037997645271136502511615781690896430387/466592781448509275992390948177487068548424631274164031114910250651063315574511979617153568070687706304645818907382693929886654490427484894987856595782215
(- 8229768172162771789/4094631553683915058 14916542302144281688/9648520391570031013)
EQL-OK: 18327341244785642013243791303754634353/39507136041685332578233153660317693754
(- 13554976081719376860/5850035209629724601 -6813034992928443315/16012083383654426278)
EQL-OK: 256899901877002811987490932642058619395/93671251573905451634945335611797465078
(- -221798849980968127/896588178875000428 -10118632981534633697/16809799818197706916)
EQL-OK: 333990778095757160537366868413422249/941966737890699707694484674257410003
(- -10398409463665680242/10672871071680021919 908300169382593227/1663860017749090135)
EQL-OK: -2076589873614048366639515256135965791/1366012573135328609279238070700513005
(- -2198518713248421187/494031967775171833 162489257999262168/3608560229859558061)
EQL-OK: -8013762081101965644053022173225152351/1782744111192743850497670941715295813
(- 4025149216228566945/640594137312937394 5467380276809034025/15813352732084653151)
EQL-OK: 60148732603712157399679443099667862845/10129941051434949990590527231467828494
(- 45649282670476595/278386580761220266717341154184065537 -8637266763647548631/320617180101036447149595031898805939080)
EQL-OK: 17040443444897688379155017841073877168061229451634462447/89255520501631886327999278515127058459530587144975987720686743155549485960
(- 5648415331928005377/86815630814151297970860026950116430492 -3858618729527320883/27855468652821710859204555976171379400)
EQL-OK: 123081918822962876101148539477322308270739795776139149559/604572520679633516300271119677141637780408278090307422820905500994965166200
(- 9781572955588417059/112881800445343004034168709823458687843 -5059688483724168531/4577416283528891230944530353546966748)
EQL-OK: 615921077060787960354561606126348783111829996215681822765/516706991472571912574910836774186280180852506048696459094758451180832844564
(- -4967914039344839478/238170260180199675500515253723794945205 1851848905279976507/5731170327270969184071911155742503278)
EQL-OK: -469527297115675955424190428047537920421409443442551107819/1364994327983166854234805393053180119374354994464588574791772715189542881990
(- -16853061581795824324/96404437352723357070647888504166371117 2887610208906060444/32980643277330946266739822018299212963)
EQL-OK: -834203249643667606680245846951263316484378801689149307960/3179480358681967952651970543397987660141008737601948320258541111852875189671
(- -10766003534404571638/1736320411127247334175538439020437437 -220564366893542891/24024005562370344889629855466198025799)
EQL-OK: -11228676451427374102904112111967705085778332338188090365/1813624835433832784217556253227924899981441517333394378436857197512671181
(- -4039872531792560303/2717817538621352660433068255065439787147153801016478776178010367557953211548 -17969900169229544519/10371230759745501411127733226376204123221866394120596070959771442399588297129)
EQL-OK: 6940459580028931824293913174633904994365279610168782399332846513086074139209123514834476635325/28187112855925579976299840753672542065528422968220885043792832460046226866036339425358907691441054924266606457279617295071355282523744922239122018045692
(- 11905720953886477738/26349991043344773150817457299711471013733618033386232710348739943906972457535 -1868508269239354100/7915113871665192715310471309271830385175189228544536787145345883401181858893)
EQL-OK: 15941145914794937177093386304443205602552827651536706608400845076162777444155363739893353329726/23173686625047977587990304423741788120258508897732978034793987736019678129860415537604628640859289817332994555163435451240013483415438259775849311623195
(- -2449440712560236858/3924161613720467738425590715321110829708355586356453490516463081317902575263 3313932993860824279/18392642760231276916239249302906853654153090246504347205856270072174622214792)
EQL-OK: -19352032211145724571420568734409847660231095572377236173431089875006133635431666731719362137971/24058567564857748536604240288023690440577404826273237225585673569644473540232022448230431237781096357243673961302816983638647478040822458289501843963432
(- 2375854596996813469/17171542567603713573317138241061150416263899780234956304631913156611236192733 -1690236091628058998/115698505401619203741389026136939663329574241316722960060260525901879106902321)
EQL-OK: 303906786920788985464713527121698374469813384178920405503303785899916213843318155692692663023083/1986721810512032345893371071989737461519340072368099757524397292434629497187713075053126253107235936414498803590298681018206068059043963268488989361033293
(- -9066703779833220052/53996509329904595759286231403247566365148374715934463324003880626270687736687 10104829441267883881/34350188217372122913844475743718288066233853695548819225257606841719829170673)
EQL-OK: -857068498550946301314281599902676812596945461499639532351672507051201056365247232693696093577243/1854790258563312749374056592838765632813507083399863975139987272744324437901043103651094837595789610803765303659351781344942305171362498886075754606580351
(- -712905705954993103/38361275706852471555340413672243335795384295466685977818182375699688812583403 -3487523845474404757/24004509207225606167828624323100421869226668573968691661898194620137716910067)
EQL-OK: 116672912187985693533424614379662678476187446315443107971581372764612623068602629062267386180170/920843595906060126846114857872490000269306626188013726759480780006531676144330596572087176480154495471428384288229491172449159350622326294294528887818001
(- -104068455909264700529593875361271227125/3443783531459345396 94266182755532992545775726171008609186/10986871169556601787)
EQL-OK: -1468019045636814162670978305715811638938423723806410280031/37836405995984502494576730289263822652
(- 6250188382163250356218308848100308290/74975517450841979 10057222263694104272437942231238950849/1377150882331486572)
EQL-OK: 7853407001895533030925726629648778749078643531548391709/103252600010686800286181264132405988
(- -325869560300902552275820653500571757882/6390430580148850471 94468553562411191993094256419298214695/11908765973274803007)
EQL-OK: -4484399064985071999330976874105690617426359030318059422519/76102142247451389303559481900024166297
(- -93570528036598407567281714804477572547/1681213810574384291 -244906502561054838674546679498356325029/6878656438675875801)
EQL-OK: -231899320744132980638168050942881155823492361410591515708/11564492202898292712047439710761442091
(- -81411835730261219386583131450337332863/716127167248934 305772198898084305417824619321954306670/5852119619187572757)
EQL-OK: -476650772889757879179369019399921041943854248979406203071/4190861845290706865359628655691038
(- 8378821874364768218652992773582270365/264620166167099506 -235085292482743132422942426826553295351/5218853722286899445)
EQL-OK: 105936154887632142427944491040385766054707164161382644031/1381013939193345109641609957531174170
(- -46932041053326337601984043288899377207/83004348019257810472659105973646518650 -172752976692389001100875729845538600392/64697064048458368935602368307247306331)
EQL-OK: 11302882932785858045495103305619355060523322049764297548269071809310077113283/5370137620102451116225827082734739449691101289924623877117727128768254573150
(- -5215113722152182902641295804790889582/37267147737183802417372262122851319461 -174324915479281952095382231256728338942/198797486533978895289571841018885549001)
EQL-OK: 1819946959828587625889363843813156766676787993042778284071188313098762447560/2469538433480866339929667414220581052912334718874062150193407525506073469487
(- -308468863588547635528373349890793262605/277175417813474671446046438490775760091 -88071245580784145343997181342216325733/109042592277517238289414020635536175644)
EQL-OK: -9225060231388102579469362745283215538990500777711808852192407359260779270917/30223926073985207174135233898799350451872811382182855106546181559011381423604
(- -139281160373255540085888405052544101003/21590054032847718908692432707921390245 -175128181843395150044469443628898278945/101874815793501611839718166887463701141)
EQL-OK: -10408215647857282226079103083273257459322595128147732742048301223816698452898/2199482777568107961766315941206227462112836158088743951492692685709912769545
(- -13653637423911886957204229566898836211/6724361745919744069899921221745423919 60537422461958273742622747790343370991/323722395245687564470126807800714703749)
EQL-OK: -4827063738484690108652046326448960810791170812913084889649499536314520788768/2176826490887613088066161490358401961235974091796973399049221882998503572331
(- 207284509647982883454717074874778610186/315575836476247924963087075944676754095 59454580888278446469281150437143941047/3799382139920332759258392540934029749)
EQL-OK: -17974876032324524053425850245755672169670471578477359535347261991433397414151/1198993196898275844180025803639723883733761367273976879884312817813487572155
(- -149255714031984711085009662216310611563/61209488724728410476016289765233999883959861482512968048939594260689484910535 -206353007879160639705730135450663155/12341134377195982958424940281067948493740598784362073339140017508008773524522)
EQL-OK: -1829354061323966095884091779117676852909282652562065419187935424186237303685407507859167669375269438805585201409961/755394525511335693198081866608161950899365908489933659716533239785460293292606918153507868614180865950008697266433342863460741791684603303270127798639270
(- 286228990947356503137685907205210886138/64525193112922470913382853022276019736227442678252533126077234112153953877503 -93778927468512815169462456699065596479/70019706577332037325570327903202382111804035215024271930215402736305222068556)
EQL-OK: 26092773364888269343302672267572690894453186378630697330693315371426642609003667116358459590920104883240139740188665/4518035088612517412858008269349176355736855744033363257986123715832709510554983209440815107866748014413528943649032845277041680450752670951433682692095668
(- 128067958966292694713545212085241612749/50804897676960765097908813878456128842417954009101908722816951877006748778869 -331437715897535092432788513322484606485/102911257177761006574263802557003927106564530572416215828322919550454967864323)
EQL-OK: 30018293903870953799879886574342637699455128356488843398998059810000258259055116602688738404467489640369684487419392/5228395890723542025866546462435908982096651119675992137235094920338650164475761939608730060759309002063498665792819192135030537577109853650729817121390687
(- 27065789167947870065829490227927612633/10795458608984562931374526676297845621730864739104955678079256994070639461197 53314096352440087811254806167289750292/44807028208492548064750449353871285104149154384082409595945081934090139448067)
EQL-OK: 637187458285170434834128234123875152637450428605039275620795715002449318075555518355578432548587274399560043210887/483712418416385035748598509413117409273155809870339120248356475239836262578288026980177669113025449532258001487616187498682131415946755647640047843156199
(- 275528434092876314751862670579225752027/23290954563951481764306221308726902093226107549717031306984541394996363441752 118398743375843543978994815511147957868/26050691402435592629863948804505350954161759382372519491414484055670238339031)
EQL-OK: 4420086456754111377514058698455330162869575963826459083894390154200727636413353382047981846196341965799691593361101/606745469813648893293125236863835131523556569847025597910312571817347251611730291043895952533706547565767925058454286630395458711598751591845070996622312
(- -263828172858355421790882308711676546531/27836884730007976814146538035133148053942251062564400015534567388490010158584 31580638196736633522674344981675107601/26210154715367115936541726366619494863883445533448748701891278370021519416412)
EQL-OK: -1948520953518189888695889830515156795224640917019574042614412953331052369986548949517168001067643449389746489215939/182402263891837359872743630675214135004512597266032306942151126033873543370078488920825920736994254287019873146147276876145783659805845233146169813070152
(- 43029409555492054023102681165249027816896930295612442385573977041111849786681/17478431621804970398 -63831159286570708329826084149841946467426290005331979697932225104261019322894/15909114936773208135)
EQL-OK: 1800228375210677909820927489860838061135888931548234366640994061734196466170531105718785437541747/278066377585826623354880511023167787730
(- -34677827126365037739221949705076349308552841821108642369491195428278121711851/12321935233094032355 2466652720703038662112375481129216761044838204088317060529010755963314905661/458077759838279587)
EQL-OK: -46279076433142446690218423399092373290016631287423134630356063713373023144989129659854095947192/5644404488448083755690706619714037385
(- 75657421640076548917316021979547903196453821552146142751737530624725671569062/5416811919979369403 -51031635143911513328361770575139950616395278082588474953679149885798666896870/16274277637120569843)
EQL-OK: 1507698654622877634185545368063085304919907004898369478770589865697455127479301592176158803465876/88154701093808389139357381843158713729
(- -86696779369804422745383183615836359604633179506005810847902134850836986706763/15354752711854066426 83875579121692496325618937810567731584819474189441279434601944065565889174333/1890321146489013312)
EQL-OK: -725886765676185953186290796464189476910148783977596698524963064505627422317719186476684911836457/14512706875163632554860591439823131456
(- -2824584270835350806110810310308644313069326027498380007733023821989145840779/3128200028313826545 -16485532380752962986834975164722153533427821569516340079793116204530103476885/4044901389917631001)
EQL-OK: 40144878017198534388242075435853869853984060096218401720566307902396394251666454424383286522546/12653260642466969643085415999628721545
(- -71140717297594692514165816539390347954764512441693085945645019026357644035048/15130773661553937219 106518314860779634188990156539381479314908411240039365434170935270962911954978/11202282371121185733)
EQL-OK: -267626990691150539404999353980899804835901788880218020004516046839225745741587662342920970677374/18833244338916713919008552672213388503
(- -31372444086039981530710911528326367048894875160807395940269724829549418985367/149682691887362386596593782520991059630 13980025800771566396092717430902170466939197897483207383178768135899198010674/143215924045734814208985239450703841431)
EQL-OK: -6585601463869631351127457963734548845246885851328680299125624347680443020577881573937479731612385878788264587830797/21436945032301618223045694723696447349670080755369221855700055538448185530530
(- 60002561005149795132492915799111287923312170708430066011808292212167201814322/16346766380600148228286881361520329811 104734497917913613491539581495799848702023341599268915776996571583385896191203/61937476024742321910315674059586179787)
EQL-OK: 19844918952732846654680216616282727016967753441473733514766184661191061075852141231786969917096326062063227788681/10024529215648371311559365663430434349900555024451481776473735938354274557
(- 78980655687309201443760271907411093305339297143458162112992101000746746121121/24094471248783344167514231679460830840 10562090177736342378322146805187203837437609238688017154037816697523731420573/74961473522415640988394298626742882726)
EQL-OK: 2833009175986364875175323375606672657538996734036576482627590142336455915129629838687125527863027857335645122892263/903078534276138789186206765245648729133926893901427360507431923032322034920
(- 96507496069338193466683209170737942070468924698476218759487496209308948365/19252547784216386872197161331387216893 12563973560096321588715986952435909079270363887929001032891628645353358046011/79879611474172059435223762585596250921)
EQL-OK: -234179520035021783886726161079163865833895106001667476480293126893061678147610754451356994012799045797572757769658/1537886036891137155393554113191390737924110193971845147480358562685078008453
(- -95307376781556674397571761484869767912211504027346871580288574968524683908606/128329921725822403056205582017133271311 36170894925879686192917617159219095595164782822289198001474013555499918728596/240886887357120796976726436320063138705)
EQL-OK: -27600105449672599524131749634403660999916186956076872373762346977331203119722064380924286397976905109959929163304586/30912995399316310109755266138690547023211992922143297688759057498082990192255
(- -22104893896795356297688360407985617971036912713007110938688208155601366216839/5790727918973991999188987227357894380 -2339372311396919406471876113751500811577555408710269902369834593304924842262/12937689744925498650506694361349920911)
EQL-OK: -90813196841584888136609582546105640167792279132393576014002859436259486025871518847027719826829986116492656710923/24972880404321196721702428178050372850585634300866259560981343234830460060
(- -3426218098660813853559652497557253942819662042768623922183022792185928242671/2077407536662385613357832628600529321326686191757127715026249042748302985178 102639297566540827510784861997871251414598617775200449087621943894148321803293/83089038429507982364103335021257902316010144851865721965726693103637274338545)
EQL-OK: -497904817589969304680335736144278473886197067420059149312627956679073246109792679236301202959163792633927112737045328517845259242265445360227131779644849/172609794647490471018785535271654901168315737813115654161745630290269473799997219289162551586864155467201760250711449118429648095083028041134558889086010
(- 1543899448831604569141696144740105016328586790221799945430718394112623114412/1094690716976737526626281319975432667416762320123576900412499904933271786567 -101835025746074730017715423582062511397387458863000475669454309217160145993/55116548932808468782187525862059393507883043749327746382569396580129398962)
EQL-OK: 196572266866178229534134252625134989714563665559807019513454337864363053729628560611312158082929567528955985669620113192156991984486011150099776316375/60335574468539540262844259780498204139853746803235564167348945699931512713417761400790104247218084745081610815218855896912895393599203789305655343454
(- -37581128364300495505521143552535972339959603365602244668159915869829949338997/42947503543372015019662104425995959382231280059683481488692141811517675950053 -64888994735350842409379226446854438865448614840503930577860382883594178287934/83188698741706753136718468601650233481619465918167616089202536622553688681087)
EQL-OK: -339504834548876267781536981106771553482515399809961247195394672491113984585270709765073243997043174508213253440272888923497173265137136111635177948889237/3572746933977957867604303713153220827104741303667912510494658617478381525690274918494624922428110123336345510454960178899375325287131764283538305257747611
(- -16230533405187239318665866908175768720879595131719076634847964191318368133798/22572606803697929681675696479626869642065470042484269772607381297011844085929 -3238806615045730440879378702226410558103197865253164974472379309242480970831/7167633180423354812410246140643720752789573307606828791458541239290047771821)
EQL-OK: -43226201536346598702395278529841763047400215735214225929426206339139243925579733185594282160061132691154727543083543034702325848468839969037250195569159/161792165494835249202675342837643048016103040739685489755239980324180308179745586573032524649518850731442178659412287492012066453331740508600962908806709
(- -58154703770626762920775801228739843350302933064569814497417973139312614069763/25655935043535628671780902110427599603857741303802203417196105196580175051005 2291927744682353823611191393035210406213286149316388597509251757479544491322/2075117977066796442381930295725401140983312287419314083032058820231519915051)
EQL-OK: -2848879691864593463404526996418656511058536739346277043463623510210968076493148319480555434626780964688210750895957968447300033820091387019574369485421/845064952814266442598400897276554701819815257830830535600041451476645443978805142044657833921127247033533628716506571358424324423237490438402971304385
(- 16233726784138742204308718138203086218138595789383817317246449554340898453104/16370584482945481446847872945862788646563748664837147378940234530469832625057 14431071141710676049963542765626402177344958369162454874051268130438178883381/21166786163219212747261378458659387864767326410261049063051557406799162784072)
EQL-OK: 107370754167217929909136144689909613387440429633745577224054233373886366171618903318258855919060113440621302505589923655976636732694637334616990468681771/346512661117421566971293748815177161526095870176610277140325665174756629068111228154091043637596506814557119477231243643171068111260010676990408227692104
(* -6520062188352981842/3213004995534018829 -3812444292971845716/15284944374811818089)
EQL-OK: 24857373879807849010516976362973488872/49110602632729971801355498746248797781
(* -844583948128454879/4750740551331102615 -1309778567130405125/4885884698278749707)
EQL-OK: 221243590680205607733892613510570975/4642314113048197066962569716783636761
(* -4579815856418431271/16947444571374397297 7990245706938186906/12540719430158043191)
EQL-OK: -36593853985314806270746820601513137526/212533147427761354206383017714519654727
(* -3587966953201943536/3194797554208122281 975954052071387816/2707062718507963111)
EQL-OK: -3501690886675668292903668827990357376/8648517352177231144330968693325176191
(* 710265334225408429/567023629756400552 -5578988760400430103/4131535930210536898)
EQL-OK: -3962562316545608552741467762441538187/2342678499616965424161446427863567696
(* 18305319006789031727/4480148641441744463 -1641093267260986094/16028097657311023719)
EQL-OK: -30040735777106040963634910981471804338/71808259944297590021537032075729917897
(* 522499067029593907/142530390958606446621834761330018829110 1567459634764499377/31663510497342378306792964160850079086)
EQL-OK: 818996196770998943862055820464495939/4513012530308148429025282037949729145117603192483641232823845248212618993460
(* 6214041481074460220/139497414619784295310756757536261769729 12187470171919324678/129216394212432939561557938117593031955)
EQL-OK: 15146689039532873328968703771155061832/3605070583825050709361064709099418651298807367637359842488375232197429738039
(* 10022419596195177499/91129297586760817507648681092594591108 239769653037576215/24086455608554015268646156321002022494)
EQL-OK: 104481394312031409685890479072416795/95433990476618390508514520731482064738017476445225501421324446942302103624
(* 127731839927226607/59760640855511386051149338950192132591 3679984267166095161/269870724770589242613062477043917992045)
EQL-OK: 470051161348371979221331000573148727/16127647460431744118786930146746069875784110572380855085272434637353123238595
(* 4919926511230586366/29288587285987487013553554568227355149 -2914615432991234299/34407808954885309804037535414452526052)
EQL-OK: -7169846869407694119621783007930483717/503878057947370143933800273784055481319429768630967123178484618174989420874
(* -4322680734125283661/246950524730861178141734701180345535020 11581515233057355754/82204027418720951285150957025638971309)
EQL-OK: -3575942340708251875937466941988609671/1450023407574517046920597087724458064116343346221474061477327267648859624370
(* -5552456004563371781/36434418778024040927761226774271610950778609263056622471030041615086459120568 233319937833204741/228703279535756717601739981368829304509550463672786894384479957768850829340)
EQL-OK: -1295498689806330283646616799874813721/8332671062513255913250553083541810221054209355142441164334390514659539371361850837178162594438925276666798780352514152276296209564179606228713851865120
(* 7279569964232187047/36316165899095632459738478614507512808578186173163489609755035948221062420580 4568992288187244990/18279847281938710983382796940666233712517527808023718591530848159479207220137)
EQL-OK: 1108676634263212048809114991909788151/22128465550033953372731954247755694375180631486898426116907313824243654714198100644737500721615620412852035450119116976232805701601749863504629937973982
(* -8689289043809733973/34365105035540924847908154205433563929060132734873649554594240958996510665976 281724695877043289/3383396067954681850718083474385093262190311835985400909911383280975222535225)
EQL-OK: -2447987313255021583629117408894957197/116270761252098802423406562021935246701911690887646043563899994409915142686943691634418411056232663942535537938126289647041118885713303684881867869004600
(* -4176416206981759902/47077361360975682486641492558477246171356187409295624938308162261216397376441 -10870319933050648575/51626085927005484523186190379579228801774286705829757742503501130303410401261)
EQL-OK: 2670528255498212232918897515060496450/142965876637554026205455979922464979254073063785755559223760631646970673683621524411341782655829702451013418009338618833412062193643308417898164204593653
(* 4496049401725150702/8024116634872885909638996643719901973664008349644172107626390134736213108465 -5231341280619167012/99267989241776204190444307671763754306088564051099822830201760217121508089279)
EQL-OK: -23520368834947889555464127765407042424/796537923785319116837266627763277272873506235001122453584405648384893204423914484193595265931840447141766909166026026228531619859740155558402735330646735
(* -2488955833769033882/80573015130339486598712021266263458487997757617589137912729682647628329090307 17723590657579960683/79078600039601362101827108583564759878924923849842119643649415446502020994810)
EQL-OK: -22056617181258995266120581914227430703/3185800618738432636378738398589185111057563002909241393794402306079667392482341108052833514927720630087013771419748846412352850012097731569487991234153335
(* 24410613567363183821142175154197794689/2233491913446620869 -289777146895293391500645889398422195537/12394177861163531771)
EQL-OK: -7073637953514043162500219088395995153310329907185649946877180402954938102993/27682296026727883467940485833673128999
(* 15029397898618080393623393093137341347/9939158597399833599 268484092305118852707129202725716126526/9752180454987984749)
EQL-OK: 1345051417567645337656755504737828287428006597367109244226136136424901090174/32309489404196149853047846865649927217
(* 175291724581304230067306380062677652261/4791591464449055089 -207911166974886786162808240992513636954/957635297799905137)
EQL-OK: -36445107018739410292029741836217649994267718828374576884161821761303211252994/4588597118993154438342028473487092193
(* 208446980882041538439350888438428103817/11756453246592156788 -99855903858077543170703702663212319708/7775813092266901197)
EQL-OK: -1734555140205305628415286772698507060801514301420325900368570916304368260453/7617998589456250715053087609460739603
(* -49595797981179247160347259926801311825/16426101929443877636 104499598328969971414586784725010079457/3085074725343747115)
EQL-OK: -1036548193567594227670217621556353400490405002875929378150074378019016735805/10135150379689493069951723318357604028
(* -288919818051255959565698296502103975540/9373352185361138021 77343596824463059344208562767410464067/8355013728778983070)
EQL-OK: -319229970313622361785032672064391711775428287673147624981393545586243098874/1118778374191039878067165437747032921
(* 301194765217764762175383920433701358543/150076401641721289621709469985978858175 -109319143590504335906407585568245068241/158084148208214805386290412276525928977)
EQL-OK: -32926353787549066990014316879429253235742017240010356390402491456481443332863/23724700119685440084214937112355810539035473428177368317381421021523605836975
(* 14575317438235510996984657523859363247/6747043355688580686998987940004831062 -98472042392613093668204392119412188287/152397803267436514292317070561082866275)
EQL-OK: -1435261276663720115408306632770383012566806521695455296458086302958691687889/1028234585957093005711368462502470683211464374115746651290896689614112234050
(* 7543367187310376010646193530301789591/61115754966424662873097894247178344192 309940239796651595482411737112678240799/200261667764086238794802895148430893795)
EQL-OK: 2337993034909171213000031444662193658341848356694420878002930517675329723209/12239143016237439360279809707749702660797878084581096344749106125186707088640
(* 306232835922656327867425959604977465100/55646521674811091128956181530575055283 45245255551837746690160535427248646677/3669533234425940180962041078287629087)
EQL-OK: 13855582919684583969821610044729507626133731299765443289084519977056998472700/204196760665922729081584465192637337445710456706084552841012480810023816621
(* -280037880297253633994139513185953058494/23798550327416056573646642830182072429 13967268482262630670960486883264178489/7947215947745048068401387767511847243)
EQL-OK: -434596028812829556627014314125713048434599389957141408329542154357763726174/21014690966139335562014814134594464675233042588696546668504776333756662583
(* 87160410649223805266866345018804635271/204719779683096591635231158476535039583 91197762560765392928084914476898132964/277206223024759381433146631560580134513)
EQL-OK: 7948834435086720002947247338196997812861466884983039250681993725808882173244/56749596904412078223459353928850191672356004665473536520452927516595919428079
(* 272801380449749740391855824723351316848/2170368723435176720708253536680067463416474841046765138040214254204061862261 14545537787709209389572055399030228996/8381323291479119825335849511027103148981778425333781230074116361235206363821)
EQL-OK: 3968042787871071204066360146704950989545352280096012736206796950415592924608/18190561932825050861659739926693806725838682397154479213760300500132465705680046683155463862909993066621811136554677896021527098482779305371951555659281
(* 58980225701104541897366713189611773567/10973700523953435846969235385386214078292603476932194022615006557054104506344 21633357583056027790037764923811848217/41236459355840549300942497778444413350482341379076368704834339005347182486274)
EQL-OK: 1275940312921345964633100864283753667394719832288287163056787891633576680039/452516555639171997520308257003811683819837367444947027711901120987864272999978391252372420644671039873982401560595091423172287702745925783369137325922256
(* -39569537110370574225194522625562874655/36290593978404925051095380486087641410218299612051669925683823165483928853304 39273660356839128453616088747231247259/28875229647500294680887983884278577441525691250738380954940513956990510132534)
EQL-OK: -1554040560950035541902707236381071410695075315482961522429891905381129320645/1047899235170633560739863801929205639611958070150694189488499584527041043137082563721218908614201921449076002548982308540689571766482794493357171683792336
(* 8957762734053174688386697837976422606/712105675122280831038408324375785815130945929819518342973925027507219300067 118977607972668646264715307919875588738/36563306353035936296510796886853084280648109576589600551753305930842020963283)
EQL-OK: 355257727628119695756412145322380851760544279491883270008434507085780737076/8678979318410478400681656718586483785992423192579006235728835173903750764880944673586689792087386144715446501744012435157310426693657188196381455479987
(* 114386050140129336980347743358441052599/11994188887964574384037137314302737861703229337059619512751326848591488081229 -50822174853799566513638003084407139228/97406657802317796912648600328217961853548397771614449630742570869667560514587)
EQL-OK: -5813347841057137571369557065847591420664634372223088557679866032754664253572/1168313852626327929522799656188055465298138284154709873285311568978496136227795809646907486798429717114923178357702460243511883684964123937654308495387423
(* -22147677230189664783449572410799931501/75580058176304394102183955194485040346816524663599269056794063928343401057143 -127672554664595215026114551202414743739/35777311684781371234035985601066874920871049301826919955489852676067316906014)
EQL-OK: 2827650531865200718433745248471704607394596478050653604940563621773668622239/2704051298527551014378337257898371613519363350219566689647796093438747503077807722203668806231503452508016974614236112792032033672965127824348803574358002
(* 3468729773587632113679855593063165286551216344725198121609354788619580819847/7106612002452012151 20863200733446307102600190583661606839853255577505815215312643683864543217073/5700246487811068117)
EQL-OK: 72368805556440529088812813715602124890901251289457147618293618526488567540302416253970205832659523238561757581481150988870947074663135867252252227647831/40509440107213064064897416415172689667
(* 43306673717838918980731699770600730039727453611468399058203483818093233880231/6173575908538565981 106634227988568775671050783423559067905086861634892257032833451008548321218936/17988169594879808463)
EQL-OK: 1539324572884864883885215269788177741067901747630436643318399808029602335378536990210735234944615096105103848497832537965483619535769637171783464984418072/37017110149885307295697375341989232401
(* 61636028396239445662576777415312348317278054920190931147781159688109244233565/149659999183936017 50280832809996410949441105432174396823883728565382915986396125237655209339731/3406752842984125790)
EQL-OK: 206607389257567119017662603624829733217835095238758046754428174885007999774491792658838812826043033826701244157167565054600950156595290052398436186551401/33990308513391731439280046802638562
(* -100579490802304807750359433955474958462342659278486016345156932756807754105945/15683759624513404963 7314396152134987983181095955389244247502417255088677055075146925285457081540/950287995699608967)
EQL-OK: -735678240508074701153113537069655056596152436111651040530896921701439724727486696483134676487497031899584038731663111390949471467249259023050011663755300/14904088498613295322494450308817103221
(* 25984831699359211750216710442693374608159925357093100400945034699383345074385/10463598404993207796 -2395913226491242076662067669730978955981403048697660449593722338244504668974/7015215522730452775)
EQL-OK: -6225740195664363384298636893730784883811595661227613249243163802476751022407971476247993440178871949687923603921101094083879668063131450147131783163099/7340439795432595812648347200273983390
(* 5173661857391320950903772549611256023540539838210520778403003347430938670915/2590493168574884173 100300641976357496491877756123729102910724064566692821682523911939220592349990/15304416107565779147)
EQL-OK: 518921605664943617990486317157527087053001312760892500249127957517476408720600460633868004681188890038115877413554399588737851074382787744833707113540850/39645985375676570588146199684023740431
(* 30299639015164203561126609159677900559022306879488518544803392527841364186955/97638167801975054493877206805944332747 -50150465496280036231382225902610460555496341860773955714344071185921583266663/170117675960786609061777750278261277482)
EQL-OK: -1519541000979732808188648781832621044050652591754537200855596768903085847105531546641139177813880505696192826380113425984545675787584857974943247950981165/16609978191541300835961154615181304582159561006676548938424954151558306303054
(* -34494394944257769716276791009665812125094062960425641316440943461722789694119/69239821080832171466311153221314488591 -68027404272124217088707268142523090163964888591405843143848585935878552833247/257149529774225346004390673137885895872)
EQL-OK: 2346564149995340998782934409780604815295734898030424565252099571337345550054284934036215402972664245125313098735082896555892607540059632597741979943574393/17804987432587488254198543762235568841018786223139145264591718687823557996352
(* 22330754509472350470460807673039908304726422770752644988051418230315708975569/141163736844241522445115344332946835969 -3776092949566234532895208849184634613770861313997034923686862122594334787771/22367110097535579962848998753563258272)
EQL-OK: -9369222740190326741203615957382420344247102784278353165345406236082475331042528539717966581690645628370939381978953360215380653092335198860022382107411/350824982641632215769272917522017419782283768012468846380070797128085153952
(* 1376215273451682681102140384578115142238259557166158859699272578561460124263/3593386179017642636485249017714833669104405991325015697577507088650274886871 37146275008876311604039415809582675415172661567487888072055609579242279390723/55424998453085285819414374477780690192979527887019008768378662580126754826472)
EQL-OK: 51121271019052119686352858568900325361226598163234091421115939503875711782442415328681175322030659510284806538410228985354770913411724825992699509412149/199163423413390889071651575953261174839972499014963134990506980080139461063269751906284862132821075544766093817070661266293471833091996501160433036049112
(* -88175289711320073148300791156190227927348022787624424521937188958291199926437/38194742314758366741668899229532351990874883495690656157862650973602784662629 93421911195279228911508870033119580111709458306921869937709821511660370035352/66371395138592894543765954603571534463846496049156722497129962530412046587003)
EQL-OK: -8237504085028962150049531747535213236460729066521397582683209771842938254589363802757604921456170821878391951762499073662677974506165863935238701489400824/2535038334389561782321790943041741331416028402594806464107449488311138037598457377927652600804722340759363172755193254192462811091332303758223034251210887
(* -88364214910455569163017945328431687038422451206033411348821431934742389780753/43010507830592044720656702803904712217809857004582018186125828892174875808576 10405170283887792832024806983921158923908589830001636723872220129826733402834/4055629711949631304631599195955105801456753694558712994574702123032807265321)
EQL-OK: -459722351572673455425943766571506569631562018487574498847133029199411842205331593858852090421782204158679934054007027833206633183796877753882057444427001/87217346741895687976684378003169607737518608233754137677854312677618987931466495788077930577814677920791330694741284253568592140275298729115088619596448
(MULTIPLE-VALUE-LIST (FLOOR 13918288150951705093/1401140429528746218 8037346830653401534/12140087246062147767))
EQUAL-OK: (15 15819536596165521240797345101333717/5669989019487990500153722689252798402)
(MULTIPLE-VALUE-LIST (FLOOR -3027396677293618661/17394867614909941317 -2291333958125929004/3188627451035828949))
EQUAL-OK: (0 -3027396677293618661/17394867614909941317)
(MULTIPLE-VALUE-LIST (FLOOR 2672347537044132983/1242644867650938739 -18408840898134373335/10231522001278674776))
EQUAL-OK: (-2 -9204560351304414094275545654164256161/6357074151573303338260935869140273732)
(MULTIPLE-VALUE-LIST (FLOOR 2909960574201625242/1140661215026522267 13303037060238089383/18166352033245030796))
EQUAL-OK: (3 7340592943788470245594328177983578849/20721653182840810059519494723194734532)
(MULTIPLE-VALUE-LIST (FLOOR 8198662690782244017/1375380265264517299 -9940234650829186147/17690753691491997765))
EQUAL-OK: (-11 -486100547007747193780627302695509498/2211955773175772955922986386719257885)
(MULTIPLE-VALUE-LIST (FLOOR 3966139130172032305/18040321970861620778 152082737803043526/946729689784517957))
EQUAL-OK: (1 1011240112172972726360628393816617657/17079308423086645837394450304465310546)
(MULTIPLE-VALUE-LIST (FLOOR 10199468022732280591/121419468943382552600797741323914786260 -2627475271750260665/95465240194344921114274153619846654671))
EQUAL-OK: (-4 -302411943986468199606823674581501024373007929237189061039/11591338766949818909386523271402122174353420293128216789558932652732995620460)
(MULTIPLE-VALUE-LIST (FLOOR -8471401573321747185/5927836485002954534423728282157030389 -10006560123550811854/209494971446104969537769985569938393355))
EQUAL-OK: (29 -54515717208483066409886298754350924985999966734110450701/1241851935162873209670541996670866824232223815534136678858726178724570665095)
(MULTIPLE-VALUE-LIST (FLOOR 3041516402669280559/23467966340832028705164128018098446335 6098690148519419819/74694157223362514640536233319542912231))
EQUAL-OK: (1 12008521321399654679364472921217933270209469640706386252/250417138224955291159963090840561809997874350767164909187205124534624089055)
(MULTIPLE-VALUE-LIST (FLOOR 12371726101368968041/23093272201098893335944386552801821150 552920335555268471/59704833009801809998987650097493815639))
EQUAL-OK: (57 10833671498697672110331389655963519805471190684307179149/1378779960416507709477447168250340219220272308941040290894608990101550964850)
(MULTIPLE-VALUE-LIST (FLOOR 3936278768643199217/61530125725985401304656961990591319570 -4622522820386904221/99931589582562481620405120529601200875))
EQUAL-OK: (-2 -11699348415245273343366505594272785590391481515341739671/409920218067509498701508662179031915635595553469094563928706113041525908250)
(MULTIPLE-VALUE-LIST (FLOOR 3378221394828629408/57360271731094852990248264232533113197 -4121489923477642292/582636574825978160767401314647264235))
EQUAL-OK: (-1 -234441506605160102966099186988989055202999923102442904644/33420192252492486160839993475212088893408362946965395344436948483624609295)
(MULTIPLE-VALUE-LIST (FLOOR -3136864170660359113/44018155426864484368550814560728963265607376469242388043913852619483671810359 7592249764621265399/61218932554330370729612969835045191215382261653025522947071546902482986859295))
EQUAL-OK: (-1 142161354082922159316702479104046765633220994190482626315401062617857980099757409386379034462906/2694744488243248258380889922671073488004909384816885899374920518252041793957332742201117787314100221762775952924983170065632438581816845330037820256436905)
(MULTIPLE-VALUE-LIST (FLOOR 8388845076992722039/113324439625023255923060004687633012536810961583168953468887128369059333869915 29270787347930250/338347801532036561796340241450622341080868991428994657767799334610272208941))
EQUAL-OK: (0 8388845076992722039/113324439625023255923060004687633012536810961583168953468887128369059333869915)
(MULTIPLE-VALUE-LIST (FLOOR 4061469742865314937/64801603451247667482343238717974543532449298971352747107214551636724513855613 1344403291462061700/38470586305356068360716898225197866224089081322833216143931662358746898751411))
EQUAL-OK: (1 759644321951821493138045865317431182965861074290543254824595494322779964610920583206631767077/27395117343919593983759778902763691133722708413625034340026933459895718790907695509798551507285536033282436777270923749566119049487283571076783727846373)
(MULTIPLE-VALUE-LIST (FLOOR -6300876868463754766/63495830134457398131576869576746882401947668656296419431644557856865817622371 2683373787654434721/32958906466135519543294750118994566579246721224880398401534853634103601897753))
EQUAL-OK: (-2 133096081053989316587079956940067402118415059770888001584265696499152144351877946562766899046184/2092753126391210514581307904104631961415819403699771474276457943469530908829049497503906750315560161637143522534287446520082226490203274292567625907432363)
(MULTIPLE-VALUE-LIST (FLOOR -472307136668592250/36283411370339306010717878389083492352344779970196813667782297535345620767127 -3180306511295187523/75166923119981694900512094733973876755239261156251968596129974579413418042019))
EQUAL-OK: (0 -472307136668592250/36283411370339306010717878389083492352344779970196813667782297535345620767127)
(MULTIPLE-VALUE-LIST (FLOOR -3148795985647001686/64429795462330994424525695145310698340316900821860011346129307089831843824641 -11298596415200487525/56650030835870774988744337125832477562271330606264442454925440669251648355512))
EQUAL-OK: (0 -3148795985647001686/64429795462330994424525695145310698340316900821860011346129307089831843824641)
(MULTIPLE-VALUE-LIST (FLOOR -102545151309532699273956369870862301497/6030775709520909501 -3288683205470962892631604702141093469/1221554251153305018))
EQUAL-OK: (6 -348033375896483356529697355308057680498851424685117674/409273316984297575168605808523732001)
(MULTIPLE-VALUE-LIST (FLOOR 262657016871433510082498751402781174749/7573480743368102221 51080528722906667824171406466289726452/1601607284756767193))
EQUAL-OK: (1 33815990969774126823949725673411671713268069951579559665/12129741929543448973808409847523235653)
(MULTIPLE-VALUE-LIST (FLOOR 138482489784362691982393629835416135309/3631852344347114410 -24756007176022054565783765242491988918/219932185588761813))
EQUAL-OK: (-1 -59453406054861418860933161489781197608471921856017953163/798761223827929241442393231350025330)
(MULTIPLE-VALUE-LIST (FLOOR -212217151846170123039362268732482984696/11596630494102963285 157767757347916893207763952109296030356/10257360923209581435))
EQUAL-OK: (-2 32941352246943117620876731374547894383947184420447916448/2643351654913607911070701558622724755)
(MULTIPLE-VALUE-LIST (FLOOR -66747006612989726802598039638160699571/2655077042212383298 40811355885089157404164119163071734769/5571784139947382276))
EQUAL-OK: (-4 15382315863254661753182362315746357118308047043239937263/3698379038534340915097856546560906562)
(MULTIPLE-VALUE-LIST (FLOOR 68762140087929702254258676232660238758/15300356027061891153 -35857327153107467171153230588794581375/12686181688605082704))
EQUAL-OK: (-2 -37488456798327399439537660212002603897618511901320984853/32350516076608496130809185423035152952)
(MULTIPLE-VALUE-LIST (FLOOR 242045811640213090811968332747485173382/200549144102874156362839425688475328049 -14720899626826592765120758929463878529/55362986404688226126571951930830517493))
EQUAL-OK: (-5 -1360940123773119189782995319087829718305547957827775584170427519233923828279/11102999538439281856672090511521389719230333671905312848993361013013608061157)
(MULTIPLE-VALUE-LIST (FLOOR -119845294654504250162135973476212065855/100235561394484311088266800183679226574 80594461105267736432364594799413149425/61631997559252488378599155330559465978))
EQUAL-OK: (-1 173031536634535211165479230108382118112369885610634326444128663790131209690/1544429468803790002857581373808877159258315141389178393568445604388376624843)
(MULTIPLE-VALUE-LIST (FLOOR -230485693234637510798211679560546639349/52735224446003804525152654032694494673 -216057981617610709644611545583688426965/260006637986112259187147152181319007048))
EQUAL-OK: (5 -2958479432060194175681245276352090941756054532611547690395592385359334844527/13711508411648488620980405764270377927416829995446554240961159998044485455304)
(MULTIPLE-VALUE-LIST (FLOOR -6594316542549343232263525515993767282/10217421010314527320204876001269664067 150738011702184633072457541580514087744/135040956724953232085930818414328999685))
EQUAL-OK: (-1 216550304321963092517168155612888510209814057236150214483836375316700196226/459923436164837338339599279302608001719626738369225259576013169605366272965)
(MULTIPLE-VALUE-LIST (FLOOR 215280935061082631947114960623303029323/207354325693067193327551969107966799241 79751059907103262336474674983968289237/4337760464235769010513178238272088134))
EQUAL-OK: (0 215280935061082631947114960623303029323/207354325693067193327551969107966799241)
(MULTIPLE-VALUE-LIST (FLOOR 310160128112311271225164732000676894965/86670395306350722800942425502835485142 178141651878134061724955020964246844473/148821875093870378260620578385076958277))
EQUAL-OK: (2 5093132355806944300558276298272344941234347692198850733707837927916021244991/4299483581539365588748720077960621199296398702837049138084337644406995806778)
(MULTIPLE-VALUE-LIST (FLOOR -108659820552054791199784298344597956614/11790531032698157780195997261827578010352156078055016836768011974016954903741 -92538322534416259700833065660026629223/19585963177324586927996277066630337817907750129846119872015696245293090497388))
EQUAL-OK: (1 -1037131280631376361623284528995684848351041247146708940120596004521550738167239284685366257725745514224913041700989/230928906647528953486003129436653219142752591225509660589870619206780147714239888278154624266956202529317853226309156501996262035307639197627615351928508)
(MULTIPLE-VALUE-LIST (FLOOR 5394706491096230323847274166255447931/10999333470518091906908673737442830723710024941373839628113269063387717150756 105688652677006186461732590041930264063/21972728496093720326374563200555762299989227113998910666496198593694363180514))
EQUAL-OK: (0 5394706491096230323847274166255447931/10999333470518091906908673737442830723710024941373839628113269063387717150756)
(MULTIPLE-VALUE-LIST (FLOOR -191689412702065586724423672263415136270/93810201821180445246181740077575222573046098171118578720996957721548578622199 -96035306478379345278597023485459703599/90477882577875726723065337577743037040931870384035502080606137411367114071296))
EQUAL-OK: (1 -8334560691183765714134253806956288712175511004636349604358505688696669629914037375584956898475941052209595993911719/8487748424983587977143569651002086894691875550521839392659856872027244953584789975128015403703285861633097358090901236825413778659897331594626425134299904)
(MULTIPLE-VALUE-LIST (FLOOR -23269937861894460494044792238228308465/36609152344338882339480850660297061488131282119857763060331849352205685148721 325068909216594106686082320524489871331/91177237475655724082435461235746167562462517272459785633509544221351873775622))
EQUAL-OK: (-1 9778808569440655820425835535754928474979020881405653286273845718180424961228320899578451645656486131670752875977421/3337921377082244749772660717107363339434489502423902307989133990817960972244485458695718522007125256227586389900645261310720433804087640398154830854279462)
(MULTIPLE-VALUE-LIST (FLOOR -238326953836192259685740729837504392751/14355772111692545517089448796014758311054554297101342377064555342044509505629 -2243842813596041779461072557214411973/26977869328891440663623277939723739398284518432434090329689171706564354694000))
EQUAL-OK: (199 -6448765647740977471904737113847651808330060639815597135148713750030489976324569684096986913258458168828297495539/129096048048195144296601029799754739460578975322841318685536300111243981862070688561642588911885232705019881753766051653025282618058049676501115190842000)
(MULTIPLE-VALUE-LIST (FLOOR -154358049055187385619395426022892405693/9651466522903571511806795329901971873531573523740147689205585933143787251744 234831599528611417562275088467151900111/23212020955553784427152057042945842586938059290340162186208579138883161355663))
EQUAL-OK: (-2 316658791137724604029754690574124702890700231484127998714230110560397057808441246896564869593555547226559779365903/74676681060487840411987924431521223169933844488425876950176937169482763523750924018302125631058404128587876741120722730563623397211887516476096033675424)
(MULTIPLE-VALUE-LIST (FLOOR -43654015885600226452139253734240763904114948357839504394635758939147918485226/8959421350865475053 -71396498978827369985021009185210519228191289633806094987720268011017813959395/5118659875263168828))
EQUAL-OK: (0 -43654015885600226452139253734240763904114948357839504394635758939147918485226/8959421350865475053)
(MULTIPLE-VALUE-LIST (FLOOR 30206748063040753946799836869317684942154090322823467523870425873885298155111/10481539418044277488 47024848487236673350978260730205414416590483746605328718368229684499622280474/7191921838593099535))
EQUAL-OK: (0 30206748063040753946799836869317684942154090322823467523870425873885298155111/10481539418044277488)
(MULTIPLE-VALUE-LIST (FLOOR -78297878369391722158254897331818780133560455296543117876032852961696240531334/3439835335342974343 -12036259456916995957158314961009661904873237837146662571140339452059150719867/7648180594799196815))
EQUAL-OK: (14 -19197805765101853520494699712598051602631126933023081616555585309855479307669655742300981287876/26308481861074724148503061769552317545)
(MULTIPLE-VALUE-LIST (FLOOR -11644466368871135752271367372638717312589950278007329817169736850185519100737/1311440431008130360 16666792145043036974187190230561351375866940864814143604767927371030164658327/1190204555866760523))
EQUAL-OK: (-1 7998208151350462202845967149504108047636942539158206705970028049633264098721802988652183702269/1560882375733744790369742288085778280)
(MULTIPLE-VALUE-LIST (FLOOR -79973663368880337215592714973251653953011156710750446016524362581184906490344/13217906252057303539 58550120458525994168414457422879483045080411293174816365332363703279727325517/11983119832054095608))
EQUAL-OK: (-2 294743007488634911900879023610601157709203210196036764662698142539282328840165292825377976700087/79195877273629847756913363266891378356)
(MULTIPLE-VALUE-LIST (FLOOR -41283916983957018057492477658728498328100012640087810269690534262888976961251/890401703093780527 37905097813993829793947873722213455441729327992618875876994782685865871567157/6801392244603328629))
EQUAL-OK: (-9 7656253348038361960592683452946138937700391767097248361228404271354846832369355003597180736924/2018657079334544839920956083927269161)
(MULTIPLE-VALUE-LIST (FLOOR -18621387073793741287833632061282985993236184599525107084971126746444001531559/112377251064249742125143336262406044187 -80344252057643577515390451958447799739023169996897035042227858478107352127859/16565237077789941458934656364080562722))
EQUAL-OK: (0 -18621387073793741287833632061282985993236184599525107084971126746444001531559/112377251064249742125143336262406044187)
(MULTIPLE-VALUE-LIST (FLOOR -11067278490740390186400140048488373691939192899502978554850454064301747327289/279730468938850077684950205987597341304 10742600231685337944302634339424380376867728558611903252501449407612160123471/85514692364145379323997472383947484080))
EQUAL-OK: (-1 85775736874497976296219552104494263998937714945890467644689458878788010379480929901293727971077618208617170461961/996711041507662039484243506170638972651237308243642442559705598573661101680)
(MULTIPLE-VALUE-LIST (FLOOR 60114400703399744178227904113253512958642740092037841351403601970012663733574/137652538688206271590219421417082587275 48818636606796573849225811493965362933035106650390076441334389457476994620122/53029693036557887125608655547988906029))
EQUAL-OK: (0 60114400703399744178227904113253512958642740092037841351403601970012663733574/137652538688206271590219421417082587275)
(MULTIPLE-VALUE-LIST (FLOOR 3914498366778062569843980805049542971189141573995351572704819538012574198620/2893535793927099250376915741311683101565016171163532500028982710856616653543 -64455977862771995990556362474021252617135665526576459531278423102067698175925/3427268293660091333898426457103031174054024747619806545506815375759964110507))
EQUAL-OK: (-1 -173089642940460836493548201378493831666834527213381638819285816422714170656111775323359444521902045952676537769939820706047335458029055584112252141651935/9916923483096927116177052980173451074387932639677487416966276325060341893415045555506102924285291258490295955820662010134773377007870870750288985076301)
(MULTIPLE-VALUE-LIST (FLOOR 88685468991633001080737925907185943038820418099572822599681084512202985499349/12356339561700478684701129356342132279853496560835988907745653698832814553183 6529471572210817352014560971376587702394496047549533959161274051805568907/3739659250056306079416159597801009351379164652345884310988690700223397485))
EQUAL-OK: (4 8931962841313470806790103494237286341563410404854617106114803081793820819240374925219641539537617481113314045913411523358730270170471325648745013341/46208499538749877879324553712339970407875860449933229680283463405247211324108302788607460717099015088790299594129098751336540918286885704752480944755)
(MULTIPLE-VALUE-LIST (FLOOR 5294621876959552948152278397535786930445255402598688035901577017296377116948/5881250468392395166026135319241737823103911942970361556821993967308880332607 -65630221834131781450865541487035630878349246622282004360445526978282263449249/98696808137715829282209856003081855629375417101578635063186137762415694777903))
EQUAL-OK: (-2 -249413266253338816038191146071217173249587815937933968995202267999853691656986532179554523041282106904325952906300316562845535251623832095499430051524242/580460649088775579832453445973177920831893989101100068436102498480125976298386547626652311003668489010795846489626845062951616643824353457996671633983121)
(/ 7013212896988366906/12397903473277899947 818833870013215068/2125577647443895255)
EQL-OK: 7453564285301859120853045020886215515/5075911640537211768265804260348400698
(/ -15781329068048599432/14942574238341613337 4388772934226358350/2640112802717985697)
EQL-OK: -20832244458230302534551181278529162052/32789782692450857054331267544650656975
(/ -9015230453321124271/17425619133302730035 -10422000746814766599/14972344381173680534)
EQL-OK: 134979135022768387806775446187867640714/181609815620990738305316999098032100965
(/ -14741075237791868512/12448692140900938227 -1090381863721238817/1060836378253796023)
EQL-OK: 15637868866825840780217685066084527776/13573828137487503515304766902031557459
(/ -7371815071140740177/4722722556038701367 3872455829192658988/994203944294825175)
EQL-OK: -7329087620340161131469364260313555975/18288534491791723206480607737200436596
(/ -9856364379969390509/7988230468709836259 -7208901117187058135/7430860779232874136)
EQL-OK: 1093153305924514768551484985555671272/859497963436269188803272225817371895
(/ -16740689272507881147/56924866550406451570641164619431212169 -14712532880452686095/143481612520580129383584255576273223983)
EQL-OK: 2401981091525408257128502717450566513166280001357873948501/837508970838236191644285394369194561392491093277901090055
(/ 1874027699956565000/65960003455647360668413772300355814843 -172394881832672950/2006879686300828197846469567507151887)
EQL-OK: -75218962452157875130617756878839223573611935155763100/227423340028380523596387094039260091189651621559491937
(/ 851521912886492079/58839621451933520132430725102159653727 -5525838657334730480/268863138354222710211869290179088409033)
EQL-OK: -228942853876053297959532391872114722003932597144466549607/325138254802036127673497464266072288930584674567672498960
(/ 2130823024472312937/30463932363736038600114358208342163020 413938864244113775/131673792970459944919771618253738144891)
EQL-OK: 280573549781056638388629087822719475587456644826399754867/12610205563054396144647765193069861697742251186477600500
(/ 17234694073181371137/253506951459931119968572673772742357160 8407879684613951161/42697666588937447817581914537644794355)
EQL-OK: 147176244259806896721181660841298454615950364713859506327/426291189417673978158704851675227114861497071554451732552
(/ 14739301038477826821/4801125431810347467140397350459581435 -1752125940488995048/127905197451270157484305628763539243969)
EQL-OK: -1885233209620217720514367144506571751170505057476450692549/8412176412616337518572109406238500578932979745867733880
(/ 9194848570227974720/45448499872046683203864930109076126035374684748838016011669264943000310475483 -4572473918523931944/28941042619577200519536336906341131911598596429670188136734086846500956354149)
EQL-OK: -33263563043940787786171015409141766453199063320923723716765930467953050399983260590187417389160/25976510037621464639740779963549572814837984766154635046133743883024710122710674726552171566119
(/ -2662376868940711929/2674240208804755702377222409224408783678596883960539287029565653749020338064 -5046618244273151929/26826013625152995057141957222948811537350409769204161465077735924332004069058)
EQL-OK: 35710479080747854012875521001477955195584454274704368888444222736697434540936425667291700196441/6747934713661461716612153292457811722283965560031580498434684530869001786777260513409206862728
(/ 646980248518054663/28444849537262537816809349756569888989442483441699293309597267649158853799707 -10174938507557455325/16470612178414296088079890015341965945714023680627341561729034923083435428747)
EQL-OK: -10656160760434978971303471120231114671340660575734505071429575384684610862775940451177787597261/289424594898370460244167952344748286246980979584479610186308309369583658143095854438992150589775
(/ 1268676597518744714/6024937921458004492480888468749320142603908196076058575752452561172018490893 17823595902143962912/85935047374548136904062562443188289405155329832270007415035044821925251080203)
EQL-OK: 18170630585125644385503771892175817370913744757273904248648000044618805359154885235028182716157/17897676474595109057512045856227678061218241143085827332930191066967148125532813505892133626736
(/ -3035741006152688190/58890268425224581569217175195410848521985674465189565646495474378301884202047 -4870935665435665519/47998868922405332801456101880162843269583282603435159879276723163289928325531)
EQL-OK: 145712134636693761356266465698326002831562744975420904782663360472436650653549187025441059178890/286850708819506259357726384810790881448875152111132928069815447961129371272624891025817707117393
(/ -4420263280205408439/38682162086456801604593696710774835436326970692840048042132553053971380151628 -758651402628235427/1755534012040040367913026343944696058732638465867705260088080517539506722166)
EQL-OK: 3879961265286134914514096239640695384126081133972137242327715997675029567458817030555062379437/14673138261791601182714628661554161812345431143865809776872034934342213839184709418896670662578
(/ -312487180249669742743295380499853180353/9828632991038934281 -86131955660561774942466932680637336739/10268762916730341592)
EQL-OK: 3208856768501438660232746468300370677374054716853273141976/846559380988100144557815474234956961169507773676687849659
(/ 105376075880566042097567073713047434893/11411565636673693365 -220737802783327232867818580441304577024/5817406274606660773)
EQL-OK: -613015445021032499619145665530563205764250055719854552289/2518963924957071797477174332253152325843619212749200245760
(/ -311533429150518992652072799089375050497/4403073054828470603 -320230219907951760832723580313293021909/1370493254961533625)
EQL-OK: 426954463345823097468320537904981772054351338526938461625/1409997052618498081840381197699863669488222338862641441127
(/ 305676222727436457375950609916137360009/2001517485431820526 324338803123828318219640932070020543912/11123178903397935211)
EQL-OK: 3400091311912189654145957985944153094384781502787164376899/649169785656371151621897383467144093766684841422885937712
(/ 8845112929712368402815105446090151026/8124751572615311799 -107609110538267962880281203537194473336/8714443449141779053)
EQL-OK: -38540118213625599008519681983731393728094066419546629189/437148645036763776481446937412401903340367189496615845732
(/ 152921217721894690043853278309581658066/11705615305395353865 184187448038871874764725486848823516773/4171619104693691390)
EQL-OK: 127585814672335876029018138907883882524550368713261650348/431205482165106014329333719781838993214328411764819575529
(/ 16414254293541341780725162107696242521/155838132618727968561620486302365154071 323320173010032367023620851618405869489/49801924105617352177018959505967933104)
EQL-OK: 817461446577249670665800625691379410535771218196808189195363718417488315184/50385611999847495177988476252475899813264458225659097815552272081452203039719
(/ -188149667625860588508273820953820709614/21438745582767797684161462130971215025 128458309657689922121539794960212789849/134174286369366827879740776978166655691)
EQL-OK: -25244847384333405496229128525982900130397411994350175944375943735942831513274/2753985018743617742875555653653797261370358442640799457019039857068516281225
(/ 1218460641064115152742257147372113443/1773382194117714970762642066492794929 -105212349758139121832338365854603836112/35045896682356785176328011712384921341)
EQL-OK: -42702045738251194875426595475683618047253961691478453648029952948483687063/186581707662369193907913729212042024270164277319717456729276609131940676048
(/ 1467722271775252460214852151179762687/1747611358981474614363356529179985509 25495740211005247928144692929451604259/29615224810946461612486375021101910565)
EQL-OK: 14488975012885720730598332784736375353299643425098519766594278819666029385/14852215066131169889445443721709162270198753408805825268529301698140894277
(/ 6278399735526726207674375684072448068/13890681759576280617381650633747782321 -112063146811220963294237186476216238443/46495820670393894026441353693945662660)
EQL-OK: -291919348200099113895651901892723884699250237261456280525601785996696740880/1556633509331345870779770006255469001211806559199158615405344674499795966203
(/ 248406099260780863433196593538936526373/315762135750029127758352280023694126018 -24578051912523675039725210046249323571/3033769619337997374435389027823294736)
EQL-OK: -376803438597807975522050212312559316811899647514236724224019181136008036264/3880409082236781853269738100403484871805889674074731389226471480469265885139
(/ -305871752543087256004326578375555909668/80170799467978436032303243749692785696371676780847080230403479135749775915991 -208573266832391890136462745593008906685/96016271562601269514856687672805175650907293023094157826925793080307407361434)
EQL-OK: 29368665255505841438632782694581946057561031972462112644657516768267440383833513431444679871238206541553985530943912/16721485549600848123731461311227384049611071114404954309505697259277905994635125654414916826332204568970567318299835
(/ -171651126582338417143004525987733942986/48126955023093310081685702171788275811688444573315712039582092051531229683107 32570134112026732491936310765048378699/18584159151613423191553551933672204731023422884196280183931777685641069715348)
EQL-OK: -3189991854959918631828923606391779823799241149346421336570141741355492000935500642040047513113849334779592681149128/1567501379505627719887579027549074087653888429037997616626567546431482074522690424133509833932668944596793898937793
(/ -31304786393644787215292629624842492472/10539846271603297974613179098685212701091372728582260780054561526149580513583 43496364289252206338797704034889660065/966865502932307025364733802774045297740949567802356684866342045679773834966)
EQL-OK: -30267518040679809082934454680954168768135550720881039440573156734314284479043791824457029301083428211405425375952/458444992982373700837242411005687390212275114474481688646320865335043970683786989531994936463047685893258985162895
(/ 124366625369659591476708994326732418029/107684759001536292829359995221778346870065030877016948429894748600664800488759 -90949754058598173499067700725927605729/79727020098830307921496202496061295138733611655702270828135321391380898414003)
EQL-OK: -9915380440470549523296226431396644117384598256053664887332801972488440466568616812942647849957495261151611303260087/9793902347049141646079571573977765974008832433473016883117384010293158932212528563016145547341801740792289848500311
(/ 26792084925762094333829722201654015569/6815899891200140342329613369008754659665480100088941978786466272502677117648 179968988142253715757129058636648023126/97033837835570527321466682927970125702018459951415339098532052222053589117353)
EQL-OK: 866579607987744230609336186273867662887766686833260209925103055244528379635362816895584608387230956963010276689619/408883535566062149539621907018509777969515872715944952500700527207173412646715462423653890585029605025758308909216
(/ 320794852821756057819990044473359503428/42380074203350930293358543616207018031675687905746455222111844144668904183229 -11813439835454851567822019323728871339/51852159737956631156972450987013128151750117741949546305537111598356497409240)
EQL-OK: -5544635317209327550045071802859986261979158492907374734760649234578367469399038563605323839330681533705071632958240/166884818941132804535892580774781586387104334774784737031184369589400544303785250219152004898392301479219940857877
(/ 63160395612932962868082774785156358041658469338654564454114468396132462549944/5671929772244157797 19541045450680948617094710246839287171374470593288265457341382295544977156173/10827756125123268218)
EQL-OK: 227961786821047895774887365257727015864174017882302289602409601101722343657899277052494444293264/36945145824164509580938949252327087600266044162541122809277442696583642758457532273140841543627
(/ 31389399613343712511677734270541516183531975055644318154870016415582858008412/11320913214023484367 -95931706646769408081251897664360951854776052790951374912970042200868629796051/14301831604104230477)
EQL-OK: -149641969141325406602881756591195860220337618158488775091717625369334526143115090325362684257508/362011508473745439254610688691597507367516106821889963803421575701854031622412859179610532278239
(/ -50845041077039215658764589763556935122444212169574762080162289087527164772395/482986173890811026 -51342299909113507561385579724776151277474630060658338514843664853027455595538/3864573616937705869)
EQL-OK: 196494404298439669659681446421686066898686292162412914850963937042669022612531239234324840686255/24797620991857267698917294149872672843409173617406514673128342148521539559341861421304646801988
(/ 76283614020376921713154299810619585257752996149145061806263596894412414185408/337890011287912517039286436540240936661 70530558237421368381589233382700323659036925075366138096846582768833233488577/12121510300837787759729092713205686989)
EQL-OK: 924672613133132744522463879340347327755455994321131972145048214329608890428265966744607561005512244129921459256512/23831571118985077324412202325831974453532679575894228007993082738742295289254461850021038245882565939546151124021397
(/ 13518475961402756750057330871273933874583566313800024119371308450919239424622/71146816100737230880567880716110051085 -11914742388051168959634071864657967837347162591767656949770878950409478930980/166466796775669753065110807850377519909)
EQL-OK: -1125188695291804746273664719520877594103080002716204716437885631737502681157239448228517736957154781558316254899699/423847992785167635691798025732868758201476408654527740579259436528169254792708107390082891890404030666159494556650
(/ -53624051286117226406327700847140806598091981633622544805551583455315188018537/149060170957501829683988930330276188371 -49540630291338976658332195799658601133012561780540500265134312414843218811481/313014990314092319823049811442768272842)
EQL-OK: 16785131893926373429171158665038393627227592608630727377590747943991201054188961463248027101037470630205119769672154/7384534820569381535972144752572408048556227885764547207137140227958732266609348654686668662110083737942669493487451
(/ 2634758410586745842739353561704344884865889793873131750193619887157306355755/83106075320614705363810122092414199463231740446254118542567688658288107572919 10787649314660479714744029413883607304719873485501736976813666398631455642569/2439964488756696481271244145022481444549967702052558191280867337292105066432)
EQL-OK: 2142905652761565172685487282499186838096673751132490328620490049367034561455889328384026705096013173825469773464105722689198047146574263705663366838720/298839732158850477765824602476778580028064205733214070073086531571837859351705342746223206218407306637658483098569582239416197836311325170250187389329637
(/ -1907320079310938642409293211056905401889419041722087613680756850005726714712/10387378553621846874105702088597026076825105075730032753153301604042569998683 113647247724474559442709588703965365251731833799417671287796250968092484717057/58756890421232187224353930678527831208703723187770044891160428018937233424397)
EQL-OK: -37356065632762902117955690133395145368676268194116097031480521390942668514422835237280325034441435052929702455487858500299401976652159912902024146542888/393498994563785425899168694480259206994308562177080555315323154941891277193612821825931878224565302417504072329241812530787363937691786269618438039211977
(/ -54987418627898620923060954379316763081930842855917193391807940070173620336071/17370345837184638879794373707261631548922174314274224219546763452439685451597 107349939397731511365417710412808670916754334908520065561311453951414109180973/7800708635318451621630266369706695626474649690647985662113853436261704078874)
EQL-OK: -428940831324519456770429889832838610542119304716244392653623661175655561457214418178921042544524225772650432309479656622489393939407340321261255371264054/1864705572939408818246392762570376592749103793151936455808919833872532407312841098160841844995663367019074328670998871082130543124576872890789577304863881
(+ 0.52019s0 0.98203s0)
EQL-OK: 1.50223s0
(+ 0.026268s0 0.6137s0)
EQL-OK: 0.63997s0
(+ -0.338943s0 0.450523s0)
EQL-OK: 0.11158s0
(+ -0.032799s0 0.995186s0)
EQL-OK: 0.96239s0
(+ 0.249222s0 0.96463s0)
EQL-OK: 1.21385s0
(+ -0.46177s0 -0.80114s0)
EQL-OK: -1.26291s0
(+ -0.127754s0 -1.88775s9)
EQL-OK: -1.88775s9
(+ -0.65572s0 -9.1112s9)
EQL-OK: -9.1112s9
(+ -0.99359s0 -7.6134s9)
EQL-OK: -7.6134s9
(+ 0.0169907s0 -5.9027s9)
EQL-OK: -5.9027s9
(+ 0.77272s0 -9.5384s9)
EQL-OK: -9.5384s9
(+ -0.50671s0 1.95366s9)
EQL-OK: 1.95366s9
(+ -0.281487s0 -1.4109s-13)
EQL-OK: -0.281487s0
(+ 0.86259s0 -1.8225s-13)
EQL-OK: 0.86259s0
(+ 0.42874s0 6.326s-14)
EQL-OK: 0.42874s0
(+ -0.53545s0 3.607s-14)
EQL-OK: -0.53545s0
(+ 0.63671s0 -4.723s-14)
EQL-OK: 0.63671s0
(+ 0.34449s0 -4.873s-14)
EQL-OK: 0.34449s0
(+ -0.480698s0 3.03292s19)
EQL-OK: 3.03292s19
(+ 0.85132s0 -6.325s19)
EQL-OK: -6.325s19
(+ -0.54742s0 -2.83806s19)
EQL-OK: -2.83806s19
(+ 0.45269s0 1.62964s19)
EQL-OK: 1.62964s19
(+ -0.5122s0 -3.6148s18)
EQL-OK: -3.6148s18
(+ 0.192093s0 5.3618s19)
EQL-OK: 5.3618s19
(+ -0.43486s0 -8.918s-24)
EQL-OK: -0.43486s0
(+ 0.289955s0 -5.911s-24)
EQL-OK: 0.289955s0
(+ 0.274345s0 -1.6779s-23)
EQL-OK: 0.274345s0
(+ 0.392723s0 -7.441s-24)
EQL-OK: 0.392723s0
(+ -0.62215s0 3.521s-24)
EQL-OK: -0.62215s0
(+ -0.5406s0 -7.718s-24)
EQL-OK: -0.5406s0
(+ 6.5444s9 -0.060898s0)
EQL-OK: 6.5444s9
(+ -8.541s9 -0.181755s0)
EQL-OK: -8.541s9
(+ 3.02993s9 0.694534s0)
EQL-OK: 3.02993s9
(+ 9.3926s9 -0.77226s0)
EQL-OK: 9.3926s9
(+ -6.4481s9 0.252235s0)
EQL-OK: -6.4481s9
(+ -1.1734s8 0.94104s0)
EQL-OK: -1.1734s8
(+ -5.1049s9 1.28059s9)
EQL-OK: -3.82435s9
(+ -7.39554s9 8.9347s9)
EQL-OK: 1.53911s9
(+ 3.11457s9 1.71478s9)
EQL-OK: 4.82935s9
(+ -8.0461s9 9.0508s9)
EQL-OK: 1.00467s9
(+ -8.58006s8 -2.82289s7)
EQL-OK: -8.86235s8
(+ 1.82954s9 -1.83914s9)
EQL-OK: -9601024.0s0
(+ 7.6292s9 1.3988s-13)
EQL-OK: 7.6292s9
(+ -1.43837s9 -2.482s-15)
EQL-OK: -1.43837s9
(+ -6.4696s9 -1.3269s-13)
EQL-OK: -6.4696s9
(+ 9.6744s9 -3.132s-14)
EQL-OK: 9.6744s9
(+ -1.18927s9 -1.9405s-13)
EQL-OK: -1.18927s9
(+ -3.81462s9 -8.602s-14)
EQL-OK: -3.81462s9
(+ 5.5761s9 1.32286s19)
EQL-OK: 1.32286s19
(+ 7.1631s9 -9.3184s19)
EQL-OK: -9.3184s19
(+ 4.7921s9 -5.8008s19)
EQL-OK: -5.8008s19
(+ 7.792s9 9.7695s19)
EQL-OK: 9.7695s19
(+ 8.9575s9 7.0198s19)
EQL-OK: 7.0198s19
(+ 4.4688s9 7.2066s19)
EQL-OK: 7.2066s19
(+ 8.9222s9 -1.3243s-23)
EQL-OK: 8.9222s9
(+ -9.7717s9 3.434s-24)
EQL-OK: -9.7717s9
(+ -4.22478s9 -7.938s-24)
EQL-OK: -4.22478s9
(+ 3.9261s8 7.916s-24)
EQL-OK: 3.9261s8
(+ -3.239s9 -8.986s-24)
EQL-OK: -3.239s9
(+ -4.6268s9 -1.0129s-23)
EQL-OK: -4.6268s9
(+ 1.1171s-13 0.73372s0)
EQL-OK: 0.73372s0
(+ -3.575s-14 0.94588s0)
EQL-OK: 0.94588s0
(+ 3.176s-14 -0.160759s0)
EQL-OK: -0.160759s0
(+ 5.055s-15 -0.0258102s0)
EQL-OK: -0.0258102s0
(+ 6.371s-14 0.480484s0)
EQL-OK: 0.480484s0
(+ -9.257s-14 0.698975s0)
EQL-OK: 0.698975s0
(+ -1.0281s-13 -9.4453s9)
EQL-OK: -9.4453s9
(+ 5.96s-14 -1.71395s9)
EQL-OK: -1.71395s9
(+ 6.805s-14 -5.8515s9)
EQL-OK: -5.8515s9
(+ 1.1645s-13 7.4758s9)
EQL-OK: 7.4758s9
(+ -1.0064s-13 -1.86868s9)
EQL-OK: -1.86868s9
(+ 8.912s-15 -8.4908s9)
EQL-OK: -8.4908s9
(+ 4.036s-14 3.308s-15)
EQL-OK: 4.3668s-14
(+ -2.503s-15 -7.642s-14)
EQL-OK: -7.8923s-14
(+ 4.653s-14 -4.612s-14)
EQL-OK: 4.10262s-16
(+ 4.7s-14 -8.456s-14)
EQL-OK: -3.756s-14
(+ 8.181s-14 -4.658s-14)
EQL-OK: 3.52305s-14
(+ -1.5467s-13 2.3608s-13)
EQL-OK: 8.1409s-14
(+ -4.341s-14 -5.14576s19)
EQL-OK: -5.14576s19
(+ -3.159s-14 -9.4925s19)
EQL-OK: -9.4925s19
(+ -7.325s-14 3.49983s19)
EQL-OK: 3.49983s19
(+ 4.134s-14 7.07955s19)
EQL-OK: 7.07955s19
(+ 4.08s-15 -3.7832s19)
EQL-OK: -3.7832s19
(+ 1.1577s-13 3.30522s19)
EQL-OK: 3.30522s19
(+ -6.838s-14 2.739s-24)
EQL-OK: -6.838s-14
(+ 5.05s-14 6.768s-24)
EQL-OK: 5.05s-14
(+ -1.9477s-13 -6.657s-24)
EQL-OK: -1.9477s-13
(+ -6.348s-14 -5.222s-24)
EQL-OK: -6.348s-14
(+ -8.77s-14 -1.58234s-22)
EQL-OK: -8.77s-14
(+ 7.906s-14 4.9202s-22)
EQL-OK: 7.906s-14
(+ 3.7985s19 0.8199s0)
EQL-OK: 3.7985s19
(+ 9.891s19 0.79037s0)
EQL-OK: 9.891s19
(+ -1.49583s19 -0.360153s0)
EQL-OK: -1.49583s19
(+ -7.36023s19 0.8185s0)
EQL-OK: -7.36023s19
(+ 3.62075s19 -0.364594s0)
EQL-OK: 3.62075s19
(+ 8.0477s19 -0.531815s0)
EQL-OK: 8.0477s19
(+ 3.62182s19 -7.2661s9)
EQL-OK: 3.62182s19
(+ -3.23868s19 -9.6806s9)
EQL-OK: -3.23868s19
(+ -6.08735s19 2.89138s9)
EQL-OK: -6.08735s19
(+ 5.00175s19 -6.3548s9)
EQL-OK: 5.00175s19
(+ 2.82944s19 4.7262s9)
EQL-OK: 2.82944s19
(+ 4.6168s19 -6.8772s9)
EQL-OK: 4.6168s19
(+ 1.15555s19 -3.786s-14)
EQL-OK: 1.15555s19
(+ 8.1897s19 -8.971s-14)
EQL-OK: 8.1897s19
(+ 4.32734s19 -4.794s-14)
EQL-OK: 4.32734s19
(+ -9.4559s19 -1.9717s-13)
EQL-OK: -9.4559s19
(+ -4.20726s19 -8.657s-14)
EQL-OK: -4.20726s19
(+ 9.7697s19 -3.376s-14)
EQL-OK: 9.7697s19
(+ 6.09264s19 -7.5608s18)
EQL-OK: 5.33654s19
(+ -5.2828s19 6.8924s18)
EQL-OK: -4.59356s19
(+ 5.73685s19 -1.4978s19)
EQL-OK: 4.23907s19
(+ -1.30897s19 4.8593s19)
EQL-OK: 3.55036s19
(+ -8.5586s19 -9.712s19)
EQL-OK: -1.82707s20
(+ 3.8772s19 -8.6355s19)
EQL-OK: -4.75833s19
(+ -1.03845s19 6.88s-24)
EQL-OK: -1.03845s19
(+ 8.4716s19 9.614s-24)
EQL-OK: 8.4716s19
(+ -4.3023s19 -7.649s-24)
EQL-OK: -4.3023s19
(+ 5.9593s19 -2.552s-24)
EQL-OK: 5.9593s19
(+ 9.8934s19 1.3093s-23)
EQL-OK: 9.8934s19
(+ -5.70567s19 7.918s-24)
EQL-OK: -5.70567s19
(+ -2.893s-24 -0.93898s0)
EQL-OK: -0.93898s0
(+ 8.795s-24 -0.030014s0)
EQL-OK: -0.030014s0
(+ -9.366s-24 0.200493s0)
EQL-OK: 0.200493s0
(+ -9.3102s-22 -0.28704s0)
EQL-OK: -0.28704s0
(+ 7.142s-24 -0.45701s0)
EQL-OK: -0.45701s0
(+ 9.42s-24 0.957794s0)
EQL-OK: 0.957794s0
(+ 2.975s-24 -6.84104s9)
EQL-OK: -6.84104s9
(+ 2.26822s-22 -8.9898s9)
EQL-OK: -8.9898s9
(+ -1.531s-23 8.1961s9)
EQL-OK: 8.1961s9
(+ 1.7221s-23 -1.53725s9)
EQL-OK: -1.53725s9
(+ -9.488s-24 -4.77676s8)
EQL-OK: -4.77676s8
(+ -1.5077s-23 2.8251s9)
EQL-OK: 2.8251s9
(+ 3.41s-24 -4.701s-14)
EQL-OK: -4.701s-14
(+ -3.361s-24 -4.947s-15)
EQL-OK: -4.947s-15
(+ 9.026s-24 7.353s-14)
EQL-OK: 7.353s-14
(+ -6.385s-24 7.789s-14)
EQL-OK: 7.789s-14
(+ 1.8237s-23 8.517s-14)
EQL-OK: 8.517s-14
(+ 3.4439s-22 -4.345s-14)
EQL-OK: -4.345s-14
(+ -6.817s-24 -9.8611s19)
EQL-OK: -9.8611s19
(+ 6.213s-24 -2.7257s19)
EQL-OK: -2.7257s19
(+ -1.9353s-23 -2.71446s19)
EQL-OK: -2.71446s19
(+ -3.653s-24 -7.7565s19)
EQL-OK: -7.7565s19
(+ 1.2298s-23 -1.56532s19)
EQL-OK: -1.56532s19
(+ 2.905s-24 2.334s19)
EQL-OK: 2.334s19
(+ 3.182s-24 -5.727s-24)
EQL-OK: -2.545s-24
(+ -1.0745s-23 3.64s-24)
EQL-OK: -7.1049s-24
(+ -9.7145s-22 8.77s-24)
EQL-OK: -9.6267s-22
(+ 1.3734s-23 3.225s-24)
EQL-OK: 1.69588s-23
(+ 2.745s-24 1.0505s-23)
EQL-OK: 1.325s-23
(+ 2.78s-24 2.747s-24)
EQL-OK: 5.527s-24
(- 0.57362s0 -0.0545654s0)
EQL-OK: 0.62819s0
(- -0.121063s0 -0.157204s0)
EQL-OK: 0.0361404s0
(- 0.75334s0 -0.186554s0)
EQL-OK: 0.939896s0
(- 0.879036s0 -0.54558s0)
EQL-OK: 1.42462s0
(- -0.245338s0 -0.003891s0)
EQL-OK: -0.241447s0
(- -0.89576s0 0.61608s0)
EQL-OK: -1.51184s0
(- -0.59227s0 6.61s9)
EQL-OK: -6.61s9
(- 0.381363s0 1.88003s9)
EQL-OK: -1.88003s9
(- 0.858986s0 1.31028s9)
EQL-OK: -1.31028s9
(- 0.56377s0 -3.26553s9)
EQL-OK: 3.26553s9
(- 0.80342s0 -1.46217s9)
EQL-OK: 1.46217s9
(- 0.093941s0 8.30203s9)
EQL-OK: -8.30203s9
(- 0.266243s0 4.98s-14)
EQL-OK: 0.266243s0
(- -0.169983s0 8.01s-15)
EQL-OK: -0.169983s0
(- 0.77925s0 -2.777s-15)
EQL-OK: 0.77925s0
(- -0.379807s0 3.99s-15)
EQL-OK: -0.379807s0
(- -0.392517s0 1.108s-13)
EQL-OK: -0.392517s0
(- -0.26274s0 -7.575s-14)
EQL-OK: -0.26274s0
(- 0.72031s0 4.1223s19)
EQL-OK: -4.1223s19
(- 0.589775s0 -2.9271s19)
EQL-OK: 2.9271s19
(- 0.205704s0 -8.4906s19)
EQL-OK: 8.4906s19
(- 0.362556s0 6.8624s19)
EQL-OK: -6.8624s19
(- -0.604004s0 -1.42777s19)
EQL-OK: 1.42777s19
(- -0.53121s0 2.3539s19)
EQL-OK: -2.3539s19
(- -0.684906s0 8.179s-24)
EQL-OK: -0.684906s0
(- 0.43084s0 -5.849s-24)
EQL-OK: 0.43084s0
(- 0.153358s0 3.633s-24)
EQL-OK: 0.153358s0
(- 0.93678s0 9.13s-24)
EQL-OK: 0.93678s0
(- 0.78924s0 -7.766s-24)
EQL-OK: 0.78924s0
(- 0.33867s0 3.51s-24)
EQL-OK: 0.33867s0
(- 8.0573s9 -0.86206s0)
EQL-OK: 8.0573s9
(- 9.3318s9 -0.93273s0)
EQL-OK: 9.3318s9
(- -4.26515s9 0.464104s0)
EQL-OK: -4.26515s9
(- -3.35557s9 -0.93267s0)
EQL-OK: -3.35557s9
(- -6.81614s9 -0.64528s0)
EQL-OK: -6.81614s9
(- -5.099s9 0.67011s0)
EQL-OK: -5.099s9
(- -4.2206s9 4.9182s9)
EQL-OK: -9.1389s9
(- -5.18173s9 2.267s9)
EQL-OK: -7.4487s9
(- 5.53314s9 6.08856s9)
EQL-OK: -5.5542s8
(- 9.88s9 -3.3333s9)
EQL-OK: 1.32132s10
(- 4.87404s9 7.17075s9)
EQL-OK: -2.2967s9
(- -2.9911s9 -1.37177s8)
EQL-OK: -2.85393s9
(- -8.1379s9 3.023s-15)
EQL-OK: -8.1379s9
(- 4.8877s9 -1.1596s-13)
EQL-OK: 4.8877s9
(- -1.89071s9 -4.33s-14)
EQL-OK: -1.89071s9
(- 8.7563s9 -4.676s-14)
EQL-OK: 8.7563s9
(- -4.4533s9 2.743s-15)
EQL-OK: -4.4533s9
(- 4.0261s9 2.1618s-13)
EQL-OK: 4.0261s9
(- 9.1731s9 -8.0954s19)
EQL-OK: 8.0954s19
(- 6.984s9 1.09772s19)
EQL-OK: -1.09772s19
(- -9.8832s9 -8.0905s19)
EQL-OK: 8.0905s19
(- -8.5769s9 -6.24565s19)
EQL-OK: 6.24565s19
(- 8.5486s9 2.77396s19)
EQL-OK: -2.77396s19
(- -9.4026s9 -3.5611s19)
EQL-OK: 3.5611s19
(- 5.1003s9 -1.9535s-23)
EQL-OK: 5.1003s9
(- 1.88706s9 -1.6304s-23)
EQL-OK: 1.88706s9
(- -9.4567s9 -1.9848s-23)
EQL-OK: -9.4567s9
(- 9.6498s9 -1.57531s-21)
EQL-OK: 9.6498s9
(- -5.733s9 1.23215s-21)
EQL-OK: -5.733s9
(- -4.0567s9 -5.229s-24)
EQL-OK: -4.0567s9
(- -4.379s-14 -0.0201035s0)
EQL-OK: 0.0201035s0
(- -4.036s-14 0.82034s0)
EQL-OK: -0.82034s0
(- 1.6661s-13 -0.70753s0)
EQL-OK: 0.70753s0
(- 3.36s-14 0.60217s0)
EQL-OK: -0.60217s0
(- 4.977s-14 -0.95905s0)
EQL-OK: 0.95905s0
(- -2.967s-14 0.55465s0)
EQL-OK: -0.55465s0
(- 4.394s-14 2.01859s9)
EQL-OK: -2.01859s9
(- 3.683s-14 4.77836s9)
EQL-OK: -4.77836s9
(- -6.887s-14 -9.26s9)
EQL-OK: 9.26s9
(- -2.643s-15 -5.6812s9)
EQL-OK: 5.6812s9
(- -8.498s-14 -9.3728s9)
EQL-OK: 9.3728s9
(- 9.033s-14 2.18002s9)
EQL-OK: -2.18002s9
(- 3.113s-14 -9.207s-14)
EQL-OK: 1.232s-13
(- -3.239s-15 -1.2957s-13)
EQL-OK: 1.26331s-13
(- 3.098s-15 -6.117s-15)
EQL-OK: 9.2151s-15
(- 1.7706s-13 4.829s-14)
EQL-OK: 1.2877s-13
(- 2.793s-15 8.62s-14)
EQL-OK: -8.3407s-14
(- -5.019s-14 4.125s-14)
EQL-OK: -9.144s-14
(- -9.495s-14 -6.06994s18)
EQL-OK: 6.06994s18
(- 9.385s-14 -7.9288s19)
EQL-OK: 7.9288s19
(- -3.099s-14 -6.64095s19)
EQL-OK: 6.64095s19
(- 3.397s-15 2.92222s19)
EQL-OK: -2.92222s19
(- -8.463s-14 -4.9708s19)
EQL-OK: 4.9708s19
(- -2.735s-15 -9.2672s19)
EQL-OK: 9.2672s19
(- -2.974s-14 -7.975s-24)
EQL-OK: -2.974s-14
(- -2.1853s-13 2.736s-24)
EQL-OK: -2.1853s-13
(- 3.243s-15 -6.867s-24)
EQL-OK: 3.243s-15
(- 4.792s-14 -2.659s-24)
EQL-OK: 4.792s-14
(- 4.672s-14 7.831s-24)
EQL-OK: 4.672s-14
(- 2.0285s-13 2.741s-24)
EQL-OK: 2.0285s-13
(- -9.1884s19 -0.22573s0)
EQL-OK: -9.1884s19
(- 3.32245s19 0.7651s0)
EQL-OK: 3.32245s19
(- 4.13513s17 0.85135s0)
EQL-OK: 4.13513s17
(- 2.2249s19 0.45778s0)
EQL-OK: 2.2249s19
(- 4.9103s19 0.84862s0)
EQL-OK: 4.9103s19
(- 4.27386s19 -0.06662s0)
EQL-OK: 4.27386s19
(- -6.725s19 5.11246s8)
EQL-OK: -6.725s19
(- -2.40906s19 7.2238s9)
EQL-OK: -2.40906s19
(- 6.1667s19 -7.4303s9)
EQL-OK: 6.1667s19
(- -7.746s19 -4.29687s8)
EQL-OK: -7.746s19
(- -1.81419s19 -5.68164s9)
EQL-OK: -1.81419s19
(- 7.0665s19 -8.9546s8)
EQL-OK: 7.0665s19
(- 2.47788s19 -2.2961s-13)
EQL-OK: 2.47788s19
(- -7.4962s19 -3.378s-14)
EQL-OK: -7.4962s19
(- 1.72135s19 7.168s-14)
EQL-OK: 1.72135s19
(- 8.3699s19 4.887s-14)
EQL-OK: 8.3699s19
(- -4.5701s19 -8.009s-14)
EQL-OK: -4.5701s19
(- -2.845s18 1.1087s-13)
EQL-OK: -2.845s18
(- 6.4084s19 -4.569s19)
EQL-OK: 1.09774s20
(- 1.33888s19 -6.8446s19)
EQL-OK: 8.1835s19
(- -4.0631s19 1.50864s19)
EQL-OK: -5.57174s19
(- -5.61754s18 2.6413s18)
EQL-OK: -8.2588s18
(- -9.0749s19 6.21626s19)
EQL-OK: -1.5291s20
(- -8.5269s19 6.2002s19)
EQL-OK: -1.47271s20
(- 3.15773s19 5.433s-24)
EQL-OK: 3.15773s19
(- 5.1563s19 -1.6366s-23)
EQL-OK: 5.1563s19
(- -5.8449s19 3.282s-24)
EQL-OK: -5.8449s19
(- 4.70947s19 1.564s-23)
EQL-OK: 4.70947s19
(- -4.32334s19 -1.0593s-23)
EQL-OK: -4.32334s19
(- 7.9621s19 5.61s-24)
EQL-OK: 7.9621s19
(- 8.164s-24 0.133362s0)
EQL-OK: -0.133362s0
(- -1.57089s-21 0.3154s0)
EQL-OK: -0.3154s0
(- -3.736s-24 -0.66536s0)
EQL-OK: 0.66536s0
(- -6.923s-24 -0.431366s0)
EQL-OK: 0.431366s0
(- 3.345s-24 0.77436s0)
EQL-OK: -0.77436s0
(- -1.4322s-23 0.799644s0)
EQL-OK: -0.799644s0
(- -1.3249s-23 -4.22035s9)
EQL-OK: 4.22035s9
(- 2.707s-24 -6.5029s9)
EQL-OK: 6.5029s9
(- -3.49s-24 -2.5205s9)
EQL-OK: 2.5205s9
(- -1.0086s-23 1.35048s9)
EQL-OK: -1.35048s9
(- 1.4406s-23 1.55487s9)
EQL-OK: -1.55487s9
(- 3.37s-24 -4.3973s9)
EQL-OK: 4.3973s9
(- -1.31249s-21 3.448s-14)
EQL-OK: -3.448s-14
(- -7.706s-24 -1.9488s-13)
EQL-OK: 1.9488s-13
(- -9.8403s-22 2.294s-13)
EQL-OK: -2.294s-13
(- -3.355s-24 1.0187s-13)
EQL-OK: -1.0187s-13
(- 9.5635s-22 -8.663s-14)
EQL-OK: 8.663s-14
(- -5.713s-24 -3.169s-14)
EQL-OK: 3.169s-14
(- 2.645s-24 -5.2307s19)
EQL-OK: 5.2307s19
(- -9.96s-24 -9.2854s19)
EQL-OK: 9.2854s19
(- 8.036s-24 -7.11434s19)
EQL-OK: 7.11434s19
(- 3.475s-24 -4.845s19)
EQL-OK: 4.845s19
(- -3.062s-24 4.91714s19)
EQL-OK: -4.91714s19
(- -2.541s-24 -2.91276s19)
EQL-OK: 2.91276s19
(- 1.4371s-23 1.1606s-23)
EQL-OK: 2.76508s-24
(- -1.8769s-23 2.965s-24)
EQL-OK: -2.1734s-23
(- 3.713s-24 -1.7581s-23)
EQL-OK: 2.1294s-23
(- -5.954s-24 -2.764s-24)
EQL-OK: -3.19s-24
(- 3.21502s-22 8.56s-24)
EQL-OK: 3.12942s-22
(- 9.969s-24 5.912s-24)
EQL-OK: 4.057s-24
(* -0.56581s0 -0.117477s0)
EQL-OK: 0.06647s0
(* 0.73841s0 0.08886s0)
EQL-OK: 0.065615s0
(* -0.75174s0 -0.173615s0)
EQL-OK: 0.130512s0
(* 0.557236s0 -0.105034s0)
EQL-OK: -0.0585284s0
(* -0.62105s0 0.828835s0)
EQL-OK: -0.51475s0
(* -0.54287s0 -0.92243s0)
EQL-OK: 0.50076s0
(* -0.2173s0 5.5084s9)
EQL-OK: -1.19698s9
(* 0.467354s0 -7.9517s9)
EQL-OK: -3.71625s9
(* -0.95485s0 5.6451s9)
EQL-OK: -5.3902s9
(* 0.0472946s0 -6.774s9)
EQL-OK: -3.20373s8
(* 0.196037s0 7.3548s8)
EQL-OK: 1.44181s8
(* -0.25535s0 4.91907s9)
EQL-OK: -1.25608s9
(* 0.047058s0 6.612s-14)
EQL-OK: 3.11147s-15
(* -0.35054s0 3.764s-14)
EQL-OK: -1.31943s-14
(* 0.372635s0 1.0613s-13)
EQL-OK: 3.9548s-14
(* 0.627266s0 -9.519s-14)
EQL-OK: -5.971s-14
(* -0.0293884s0 1.1626s-13)
EQL-OK: -3.41667s-15
(* -0.88304s0 -1.116s-13)
EQL-OK: 9.8547s-14
(* 0.318016s0 -6.86827s19)
EQL-OK: -2.18422s19
(* 0.605064s0 3.4281s19)
EQL-OK: 2.07422s19
(* -0.65415s0 -8.185s19)
EQL-OK: 5.3542s19
(* 0.87548s0 6.72325s19)
EQL-OK: 5.8861s19
(* 0.45806s0 -9.503s19)
EQL-OK: -4.35295s19
(* -0.995384s0 1.62797s19)
EQL-OK: -1.62045s19
(* 0.26301s0 -1.3169s-23)
EQL-OK: -3.46357s-24
(* 0.82762s0 -3.411s-24)
EQL-OK: -2.82304s-24
(* -0.042412s0 -3.339s-24)
EQL-OK: 1.41613s-25
(* 0.858284s0 -7.61s-24)
EQL-OK: -6.53157s-24
(* 0.75574s0 1.0518s-23)
EQL-OK: 7.9488s-24
(* 0.977s0 -5.944s-24)
EQL-OK: -5.8073s-24
(* 1.1316s9 0.87906s0)
EQL-OK: 9.9474s8
(* 9.7596s9 0.58181s0)
EQL-OK: 5.67824s9
(* 5.5896s9 -0.91708s0)
EQL-OK: -5.12616s9
(* -7.677s9 -0.67695s0)
EQL-OK: 5.19694s9
(* -4.73655s9 0.65572s0)
EQL-OK: -3.10588s9
(* -3.2158s9 -0.30076s0)
EQL-OK: 9.6717s8
(* 5.94916s9 -1.02867s9)
EQL-OK: -6.1197s18
(* -3.19098s9 8.125s9)
EQL-OK: -2.59267s19
(* -6.57215s9 9.4253s9)
EQL-OK: -6.1944s19
(* -5.2792s9 3.93547s9)
EQL-OK: -2.0776s19
(* 2.502s9 4.1275s9)
EQL-OK: 1.0327s19
(* -8.9462s9 -4.72174s9)
EQL-OK: 4.22415s19
(* -8.9588s9 -1.419s-14)
EQL-OK: 1.27126s-4
(* -3.56218s9 -9.982s-14)
EQL-OK: 3.5558s-4
(* -3.4449s9 4.582s-15)
EQL-OK: -1.57845s-5
(* -3.7047s9 1.2985s-14)
EQL-OK: -4.8105s-5
(* -8.9172s8 -7.294s-14)
EQL-OK: 6.5043s-5
(* 1.64864s9 1.8344s-13)
EQL-OK: 3.02427s-4
(* -9.935s8 -7.9116s19)
EQL-OK: 7.8602s28
(* -7.0441s9 -6.3448s19)
EQL-OK: 4.4693s29
(* 7.72866s9 1.44264s19)
EQL-OK: 1.11497s29
(* 3.7816s9 -3.16285s19)
EQL-OK: -1.19606s29
(* -1.06926s9 6.67816s19)
EQL-OK: -7.1407s28
(* 4.04482s9 -3.52235s19)
EQL-OK: -1.42473s29
(* -8.77s8 -3.499s-24)
EQL-OK: 3.06864s-15
(* -9.5508s9 1.0006s-23)
EQL-OK: -9.5566s-14
(* -2.98736s9 -7.07s-24)
EQL-OK: 2.11207s-14
(* 9.9779s9 1.2683s-23)
EQL-OK: 1.26548s-13
(* 7.4813s9 -1.373s-23)
EQL-OK: -1.02719s-13
(* 8.5804s9 6.999s-24)
EQL-OK: 6.0054s-14
(* 4.637s-14 0.895805s0)
EQL-OK: 4.15384s-14
(* 1.0125s-13 -0.322685s0)
EQL-OK: -3.26718s-14
(* 2.31s-16 0.0601425s0)
EQL-OK: 1.38928s-17
(* 1.0579s-13 -0.27089s0)
EQL-OK: -2.86576s-14
(* 9.54s-14 -0.21251s0)
EQL-OK: -2.02735s-14
(* -4.463s-14 -0.96336s0)
EQL-OK: 4.2995s-14
(* 3.27s-14 -5.9141s9)
EQL-OK: -1.93391s-4
(* -6.515s-14 1.01791s9)
EQL-OK: -6.6318s-5
(* 3.695s-14 8.7417s9)
EQL-OK: 3.23005s-4
(* -1.09s-13 -6.75794s9)
EQL-OK: 7.3662s-4
(* 4.551s-14 -7.1112s9)
EQL-OK: -3.2363s-4
(* 5.456s-15 -5.44014s9)
EQL-OK: -2.96813s-5
(* -3.377s-14 3.358s-15)
EQL-OK: -1.13399s-28
(* 3.862s-14 7.278s-14)
EQL-OK: 2.81079s-27
(* 9.449s-14 3.17s-14)
EQL-OK: 2.99533s-27
(* 7.051s-14 -4.234s-14)
EQL-OK: -2.98537s-27
(* -8.955s-14 9.895s-14)
EQL-OK: -8.861s-27
(* -1.6752s-13 -7.341s-14)
EQL-OK: 1.22977s-26
(* 9.42s-14 4.50844s19)
EQL-OK: 4246912.0s0
(* 2.0183s-13 9.598s19)
EQL-OK: 1.93715s7
(* -7.441s-14 -5.7324s19)
EQL-OK: 4265472.0s0
(* 7.241s-14 -5.79135s19)
EQL-OK: -4193504.0s0
(* 7.987s-14 8.1113s19)
EQL-OK: 6478528.0s0
(* -1.1603s-13 7.4468s19)
EQL-OK: -8640512.0s0
(* -4.432s-14 -6.851s-24)
EQL-OK: 3.03637s-37
(* -5.064s-14 -8.119s-24)
EQL-OK: 4.1115s-37
(* 3.553s-15 -6.404s-24)
EQL-OK: -2.27533s-38
(* 8.699s-14 -3.558s-24)
EQL-OK: -3.0951s-37
(* 9.82s-14 -5.771s-24)
EQL-OK: -5.6671s-37
(* -3.477s-14 7.723s-24)
EQL-OK: -2.6853s-37
(* 7.9082s19 0.71604s0)
EQL-OK: 5.6626s19
(* -6.83905s19 -0.36905s0)
EQL-OK: 2.52396s19
(* -7.7697s19 -0.34073s0)
EQL-OK: 2.64736s19
(* -2.10557s19 -0.58961s0)
EQL-OK: 1.24146s19
(* 9.0963s19 -0.37693s0)
EQL-OK: -3.42865s19
(* -4.24076s19 0.91147s0)
EQL-OK: -3.8653s19
(* -3.5865s19 -6.4046s9)
EQL-OK: 2.297s29
(* 7.19225s18 -7.7232s9)
EQL-OK: -5.5547s28
(* 1.98907s19 -9.9239s9)
EQL-OK: -1.97393s29
(* -4.27195s19 7.0734s9)
EQL-OK: -3.02173s29
(* -8.3115s19 5.2947s9)
EQL-OK: -4.40073s29
(* 9.4386s19 8.6548s8)
EQL-OK: 8.169s28
(* 6.21677s19 -3.135s-14)
EQL-OK: -1948960.0s0
(* -6.30774s19 1.5884s-13)
EQL-OK: -1.00192s7
(* 7.6073s19 3.922s-14)
EQL-OK: 2983552.0s0
(* -1.44485s19 -3.355s-14)
EQL-OK: 484748.0s0
(* 3.39653s19 -7.679s-14)
EQL-OK: -2608192.0s0
(* -6.0072s19 1.7825s-13)
EQL-OK: -1.07078s7
(* 1.06812s16 -1.19583s19)
EQL-OK: -1.2773s35
(* 1.1438s19 2.616s-24)
EQL-OK: 2.99218s-5
(* -5.79304s18 -3.095s-24)
EQL-OK: 1.79296s-5
(* -7.6387s19 8.607s-24)
EQL-OK: -6.5746s-4
(* 4.03933s19 3.058s-24)
EQL-OK: 1.23523s-4
(* -2.06994s19 -1.1381s-23)
EQL-OK: 2.3558s-4
(* 3.7857s18 -3.59s-24)
EQL-OK: -1.35906s-5
(* 5.656s-24 -0.096458s0)
EQL-OK: -5.4557s-25
(* -5.799s-24 -0.148445s0)
EQL-OK: 8.6083s-25
(* -9.041s-24 0.86431s0)
EQL-OK: -7.8143s-24
(* -2.645s-24 -0.911865s0)
EQL-OK: 2.41187s-24
(* -9.758s-24 -0.397186s0)
EQL-OK: 3.87574s-24
(* -5.345s-24 -0.27215s0)
EQL-OK: 1.45463s-24
(* -3.713s-24 9.11335s8)
EQL-OK: -3.38382s-15
(* -3.01s-24 -9.5278s9)
EQL-OK: 2.86784s-14
(* -1.6904s-23 -8.37655s9)
EQL-OK: 1.41599s-13
(* -5.074s-24 -9.2804s9)
EQL-OK: 4.7089s-14
(* -6.942s-22 -8.7038s9)
EQL-OK: 6.04217s-12
(* -7.643s-24 -3.1665s9)
EQL-OK: 2.42018s-14
(* -2.659s-24 -9.238s-14)
EQL-OK: 2.4564s-37
(* -1.7036s-23 3.138s-14)
EQL-OK: -5.34586s-37
(* 7.684s-24 8.639s-14)
EQL-OK: 6.6383s-37
(* -3.424s-24 -6.046s-14)
EQL-OK: 2.07014s-37
(* 9.3102s-22 -1.1344s-13)
EQL-OK: -1.05614s-34
(* 8.07s-24 3.573s-14)
EQL-OK: 2.8834s-37
(* 3.557s-24 7.9957s19)
EQL-OK: 2.84407s-4
(* 7.281s-24 -3.45443s19)
EQL-OK: -2.5152s-4
(* -1.6093s-23 3.22463s19)
EQL-OK: -5.1894s-4
(* -1.8628s-23 4.95593s19)
EQL-OK: -9.2319s-4
(* 3.463s-24 -4.44685s19)
EQL-OK: -1.53994s-4
(* -8.081s-24 -1.54701s19)
EQL-OK: 1.25013s-4
(MULTIPLE-VALUE-LIST (FLOOR -0.403114s0 0.64293s0))
EQUAL-OK: (-1 0.239813s0)
(MULTIPLE-VALUE-LIST (FLOOR -0.538574s0 0.74157s0))
EQUAL-OK: (-1 0.202993s0)
(MULTIPLE-VALUE-LIST (FLOOR 0.59919s0 -0.433258s0))
EQUAL-OK: (-2 -0.26733s0)
(MULTIPLE-VALUE-LIST (FLOOR -0.62148s0 -0.185875s0))
EQUAL-OK: (3 -0.063861s0)
(MULTIPLE-VALUE-LIST (FLOOR 0.298317s0 -0.79534s0))
EQUAL-OK: (-1 -0.49703s0)
(MULTIPLE-VALUE-LIST (FLOOR 0.84822s0 9.519s9))
EQUAL-OK: (0 0.84822s0)
(MULTIPLE-VALUE-LIST (FLOOR 0.185059s0 -4.4452s9))
EQUAL-OK: (-1 -4.4452s9)
(MULTIPLE-VALUE-LIST (FLOOR -0.442635s0 -4.64486s9))
EQUAL-OK: (0 -0.442635s0)
(MULTIPLE-VALUE-LIST (FLOOR 0.78401s0 -8.4401s9))
EQUAL-OK: (-1 -8.4401s9)
(MULTIPLE-VALUE-LIST (FLOOR 0.300156s0 -4.4083s9))
EQUAL-OK: (-1 -4.4083s9)
(MULTIPLE-VALUE-LIST (FLOOR 0.67763s0 2.54755s9))
EQUAL-OK: (0 0.67763s0)
(MULTIPLE-VALUE-LIST (FLOOR -0.189995s0 -1.9236s-13))
EQUAL-OK: (987708260352 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR 0.442696s0 -4.184s-15))
EQUAL-OK: (-105806519336960 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR 0.175987s0 -5.055s-15))
EQUAL-OK: (-34814468030464 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR 0.30565s0 -4.296s-14))
EQUAL-OK: (-7114747543552 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR 0.256264s0 4.541s-14))
EQUAL-OK: (5643318591488 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR -0.51656s0 4.057s-14))
EQUAL-OK: (-12732698984448 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR -0.221672s0 -5.9783s19))
EQUAL-OK: (0 -0.221672s0)
(MULTIPLE-VALUE-LIST (FLOOR -0.441925s0 -8.1227s19))
EQUAL-OK: (0 -0.441925s0)
(MULTIPLE-VALUE-LIST (FLOOR 0.73287s0 -3.99683s19))
EQUAL-OK: (-1 -3.99683s19)
(MULTIPLE-VALUE-LIST (FLOOR -0.376198s0 9.1146s19))
EQUAL-OK: (-1 9.1146s19)
(MULTIPLE-VALUE-LIST (FLOOR 0.61628s0 -5.83824s19))
EQUAL-OK: (-1 -5.83824s19)
(MULTIPLE-VALUE-LIST (FLOOR -0.072037s0 4.40705s19))
EQUAL-OK: (-1 4.40705s19)
(MULTIPLE-VALUE-LIST (FLOOR 0.378708s0 3.258s-24))
EQUAL-OK: (116238699015966918967296 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR 0.98937s0 -7.698s-24))
EQUAL-OK: (-128524230569057480343552 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR -0.94075s0 -1.0053s-23))
EQUAL-OK: (93579179764423948500992 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR 0.263123s0 -3.06s-24))
EQUAL-OK: (-85988344578092468011008 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR -0.58892s0 -1.1106s-23))
EQUAL-OK: (53027471682887319814144 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR -0.38977s0 -2.812s-24))
EQUAL-OK: (138609987891358177689600 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR -1.46599s9 0.338676s0))
EQUAL-OK: (-4328587264 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR -6.326s9 0.91743s0))
EQUAL-OK: (-6895370240 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR -3.63617s9 -0.569855s0))
EQUAL-OK: (6380847104 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR -1.45737s9 0.9508s0))
EQUAL-OK: (-1532788736 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR 5.24714s9 0.45768s0))
EQUAL-OK: (11464605696 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR 8.1693s9 0.69472s0))
EQUAL-OK: (11759255552 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR -2.7664s9 -1.9246s9))
EQUAL-OK: (1 -8.418s8)
(MULTIPLE-VALUE-LIST (FLOOR 8.29057s9 -7.18694s9))
EQUAL-OK: (-2 -6.0833s9)
(MULTIPLE-VALUE-LIST (FLOOR 6.7409s9 8.9158s9))
EQUAL-OK: (0 6.7409s9)
(MULTIPLE-VALUE-LIST (FLOOR 9.4039s9 -1.80932s9))
EQUAL-OK: (-6 -1.45206s9)
(MULTIPLE-VALUE-LIST (FLOOR 4.4432s9 -7.587s9))
EQUAL-OK: (-1 -3.14373s9)
(MULTIPLE-VALUE-LIST (FLOOR -4.8365s9 -3.4401s8))
EQUAL-OK: (14 -2.03249s7)
(MULTIPLE-VALUE-LIST (FLOOR 4.70575s9 2.813s-15))
EQUAL-OK: (1672861433068424397848576 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR 8.37706s8 1.1696s-13))
EQUAL-OK: (7162308674587923054592 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR 4.9421s9 3.384s-15))
EQUAL-OK: (1460410281571511491887104 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR 9.4391s8 6.964s-14))
EQUAL-OK: (13554177553722320617472 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR 3.56217s8 3.38s-14))
EQUAL-OK: (10538999588799264063488 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR 7.53166s9 7.011s-14))
EQUAL-OK: (107426919956256787529728 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR -5.3385s9 -7.8903s19))
EQUAL-OK: (0 -5.3385s9)
(MULTIPLE-VALUE-LIST (FLOOR -5.5786s8 -6.5112s19))
EQUAL-OK: (0 -5.5786s8)
(MULTIPLE-VALUE-LIST (FLOOR -7.0502s9 -2.57187s18))
EQUAL-OK: (0 -7.0502s9)
(MULTIPLE-VALUE-LIST (FLOOR 3.48724s9 3.0864s19))
EQUAL-OK: (0 3.48724s9)
(MULTIPLE-VALUE-LIST (FLOOR -1.195s9 6.9068s19))
EQUAL-OK: (-1 6.9068s19)
(MULTIPLE-VALUE-LIST (FLOOR 6.40785s9 6.1696s19))
EQUAL-OK: (0 6.40785s9)
(MULTIPLE-VALUE-LIST (FLOOR -9.9772s9 -3.455s-24))
EQUAL-OK: (2887787295482420840947083445796864 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR 6.3337s9 -2.757s-24))
EQUAL-OK: (-2297319607304237298946798769930240 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR 2.24916s9 8.958s-24))
EQUAL-OK: (251078998767860827355040375111680 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR -4.695s9 -9.695s-24))
EQUAL-OK: (484267288087969338977238606938112 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR -5.84457s9 -7.7713s-22))
EQUAL-OK: (7520717852416051178813723246592 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR -2.01576s9 6.682s-24))
EQUAL-OK: (-301671132293375748429617783898112 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR 1.7042s-13 -0.80732s0))
EQUAL-OK: (-1 -0.80732s0)
(MULTIPLE-VALUE-LIST (FLOOR 4.959s-14 0.9918s0))
EQUAL-OK: (0 4.959s-14)
(MULTIPLE-VALUE-LIST (FLOOR 2.082s-13 0.75837s0))
EQUAL-OK: (0 2.08202s-13)
(MULTIPLE-VALUE-LIST (FLOOR 4.808s-14 0.89121s0))
EQUAL-OK: (0 4.808s-14)
(MULTIPLE-VALUE-LIST (FLOOR -4.005s-14 0.71084s0))
EQUAL-OK: (-1 0.71084s0)
(MULTIPLE-VALUE-LIST (FLOOR 4.497s-14 -0.83223s0))
EQUAL-OK: (-1 -0.83223s0)
(MULTIPLE-VALUE-LIST (FLOOR -4.538s-14 3.81524s9))
EQUAL-OK: (-1 3.81524s9)
(MULTIPLE-VALUE-LIST (FLOOR -1.0888s-13 2.5705s9))
EQUAL-OK: (-1 2.5705s9)
(MULTIPLE-VALUE-LIST (FLOOR -1.0445s-15 3.9579s9))
EQUAL-OK: (-1 3.9579s9)
(MULTIPLE-VALUE-LIST (FLOOR -3.399s-14 3.8115s9))
EQUAL-OK: (-1 3.8115s9)
(MULTIPLE-VALUE-LIST (FLOOR 8.889s-14 1.02951s9))
EQUAL-OK: (0 8.889s-14)
(MULTIPLE-VALUE-LIST (FLOOR -4.408s-14 -5.5562s9))
EQUAL-OK: (0 -4.40806s-14)
(MULTIPLE-VALUE-LIST (FLOOR 1.4679s-13 -1.9105s-13))
EQUAL-OK: (-1 -4.426s-14)
(MULTIPLE-VALUE-LIST (FLOOR 1.274s-14 -4.935s-14))
EQUAL-OK: (-1 -3.661s-14)
(MULTIPLE-VALUE-LIST (FLOOR -4.321s-14 -8.355s-14))
EQUAL-OK: (0 -4.32102s-14)
(MULTIPLE-VALUE-LIST (FLOOR -1.1228s-13 -3.641s-14))
EQUAL-OK: (3 -3.0501s-15)
(MULTIPLE-VALUE-LIST (FLOOR 4.643s-14 9.809s-14))
EQUAL-OK: (0 4.643s-14)
(MULTIPLE-VALUE-LIST (FLOOR 6.832s-14 1.2918s-13))
EQUAL-OK: (0 6.832s-14)
(MULTIPLE-VALUE-LIST (FLOOR -3.186s-15 7.2502s19))
EQUAL-OK: (-1 7.2502s19)
(MULTIPLE-VALUE-LIST (FLOOR 7.57s-14 -6.8838s19))
EQUAL-OK: (-1 -6.8838s19)
(MULTIPLE-VALUE-LIST (FLOOR -1.5446s-14 -8.6798s19))
EQUAL-OK: (0 -1.5446s-14)
(MULTIPLE-VALUE-LIST (FLOOR -1.2496s-13 -8.0029s19))
EQUAL-OK: (0 -1.24963s-13)
(MULTIPLE-VALUE-LIST (FLOOR -3.303s-15 -9.7969s19))
EQUAL-OK: (0 -3.303s-15)
(MULTIPLE-VALUE-LIST (FLOOR -3.832s-14 5.17976s19))
EQUAL-OK: (-1 5.17976s19)
(MULTIPLE-VALUE-LIST (FLOOR -1.1039s-13 1.1031s-23))
EQUAL-OK: (-10007216128 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR -3.303s-14 -1.61171s-21))
EQUAL-OK: (20493824 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR 3.66s-14 -1.3664s-23))
EQUAL-OK: (-2678554624 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR -1.9574s-13 -6.864s-24))
EQUAL-OK: (28516810752 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR 3.285s-14 -3.329s-24))
EQUAL-OK: (-9867755520 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR -3.291s-15 4.2038s-23))
EQUAL-OK: (-78285824 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR -7.18707s19 0.231445s0))
EQUAL-OK: (-310527697906823069696 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR 9.5173s19 -0.0566254s0))
EQUAL-OK: (-1680761395333178589184 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR -6.6524s19 -0.697136s0))
EQUAL-OK: (95424520704539754496 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR 3.42423s19 0.68306s0))
EQUAL-OK: (50130693352167833600 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR -7.2388s19 0.0522995s0))
EQUAL-OK: (-1384100280679029276672 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR 5.9235s18 -0.24643s0))
EQUAL-OK: (-24037400061136601088 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR -2.63137s18 -1.6819s9))
EQUAL-OK: (1564524544 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR 2.4749s19 -2.36457s9))
EQUAL-OK: (-10466623488 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR -2.07847s19 6.4981s9))
EQUAL-OK: (-3198582784 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR -2.54907s19 4.4446s9))
EQUAL-OK: (-5735186432 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR 2.34573s19 3.0757s9))
EQUAL-OK: (7626620928 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR -1.93055s19 4.8192s9))
EQUAL-OK: (-4005953536 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR 4.4928s19 9.588s-14))
EQUAL-OK: (468585063670302141654816501268480 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR -2.17698s19 -3.259s-14))
EQUAL-OK: (667992445198391196335567431270400 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR -8.3605s19 -1.2702s-13))
EQUAL-OK: (658197863607565267600565560410112 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR 5.2775s19 3.555s-15))
EQUAL-OK: (14845297722947765992252704150257664 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR -5.0371s19 6.922s-15))
EQUAL-OK: (-7276948270610150879291824750460928 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR 8.3107s18 -1.0201s-13))
EQUAL-OK: (-81468833985370875891111365181440 0.0s0)
(MULTIPLE-VALUE-LIST (FLOOR -3.8796s19 3.8685s19))
EQUAL-OK: (-2 3.85733s19)
(MULTIPLE-VALUE-LIST (FLOOR 4.11224s18 -7.757s19))
EQUAL-OK: (-1 -7.34577s19)
(MULTIPLE-VALUE-LIST (FLOOR -1.7228s19 -6.0107s19))
EQUAL-OK: (0 -1.72278s19)
(MULTIPLE-VALUE-LIST (FLOOR 9.1191s19 -4.49645s19))
EQUAL-OK: (-3 -4.3702s19)
(MULTIPLE-VALUE-LIST (FLOOR 4.2755s19 8.9417s19))
EQUAL-OK: (0 4.2755s19)
(MULTIPLE-VALUE-LIST (FLOOR -4.3237s19 -1.9687s19))
EQUAL-OK: (2 -3.86314s18)
(MULTIPLE-VALUE-LIST (FLOOR 3.109s-24 0.00614166s0))
EQUAL-OK: (0 3.109s-24)
(MULTIPLE-VALUE-LIST (FLOOR -6.2027s-23 0.0328217s0))
EQUAL-OK: (-1 0.0328217s0)
(MULTIPLE-VALUE-LIST (FLOOR -6.017s-24 0.76966s0))
EQUAL-OK: (-1 0.76966s0)
(MULTIPLE-VALUE-LIST (FLOOR -7.628s-24 0.47249s0))
EQUAL-OK: (-1 0.47249s0)
(MULTIPLE-VALUE-LIST (FLOOR 3.323s-24 -0.86671s0))
EQUAL-OK: (-1 -0.86671s0)
(MULTIPLE-VALUE-LIST (FLOOR -5.302s-24 0.0245514s0))
EQUAL-OK: (-1 0.0245514s0)
(MULTIPLE-VALUE-LIST (FLOOR 5.342s-24 6.0717s9))
EQUAL-OK: (0 5.34194s-24)
(MULTIPLE-VALUE-LIST (FLOOR -2.664s-24 5.573s9))
EQUAL-OK: (-1 5.573s9)
(MULTIPLE-VALUE-LIST (FLOOR -2.83s-24 7.0363s9))
EQUAL-OK: (-1 7.0363s9)
(MULTIPLE-VALUE-LIST (FLOOR -3.176s-24 1.12686s9))
EQUAL-OK: (-1 1.12686s9)
(MULTIPLE-VALUE-LIST (FLOOR -2.2026s-22 -3.99255s9))
EQUAL-OK: (0 -2.2026s-22)
(MULTIPLE-VALUE-LIST (FLOOR 6.994s-24 5.81167s9))
EQUAL-OK: (0 6.994s-24)
(MULTIPLE-VALUE-LIST (FLOOR 6.054s-24 -8.915s-14))
EQUAL-OK: (-1 -8.915s-14)
(MULTIPLE-VALUE-LIST (FLOOR 2.875s-24 3.652s-14))
EQUAL-OK: (0 2.875s-24)
(MULTIPLE-VALUE-LIST (FLOOR -1.57853s-22 -4.501s-14))
EQUAL-OK: (0 -1.57853s-22)
(MULTIPLE-VALUE-LIST (FLOOR -1.388s-23 -1.0479s-13))
EQUAL-OK: (0 -1.388s-23)
(MULTIPLE-VALUE-LIST (FLOOR -8.879s-24 3.974s-14))
EQUAL-OK: (-1 3.974s-14)
(MULTIPLE-VALUE-LIST (FLOOR -1.14395s-21 -4.527s-14))
EQUAL-OK: (0 -1.14395s-21)
(MULTIPLE-VALUE-LIST (FLOOR 6.149s-24 9.418s-24))
EQUAL-OK: (0 6.149s-24)
(MULTIPLE-VALUE-LIST (FLOOR 7.661s-24 -2.956s-24))
EQUAL-OK: (-3 -1.20701s-24)
(MULTIPLE-VALUE-LIST (FLOOR 3.254s-24 1.2764s-22))
EQUAL-OK: (0 3.254s-24)
(MULTIPLE-VALUE-LIST (FLOOR -5.4542s-22 5.574s-24))
EQUAL-OK: (-98 8.2738s-25)
(MULTIPLE-VALUE-LIST (FLOOR -1.4523s-23 3.091s-24))
EQUAL-OK: (-5 9.3198s-25)
(MULTIPLE-VALUE-LIST (FLOOR -5.913s-24 8.419s-24))
EQUAL-OK: (-1 2.506s-24)
(/ 0.4319s0 0.279747s0)
EQL-OK: 1.5439s0
(/ 0.58111s0 0.474937s0)
EQL-OK: 1.22354s0
(/ 0.95817s0 -0.209396s0)
EQL-OK: -4.57587s0
(/ -0.30497s0 -0.182861s0)
EQL-OK: 1.66777s0
(/ -0.69316s0 -0.32908s0)
EQL-OK: 2.10635s0
(/ -0.87152s0 0.518326s0)
EQL-OK: -1.68141s0
(/ -0.81208s0 3.27736s9)
EQL-OK: -2.47784s-10
(/ 0.88465s0 2.15492s9)
EQL-OK: 4.10527s-10
(/ -0.96446s0 8.0971s9)
EQL-OK: -1.19112s-10
(/ -0.65258s0 -3.98033s9)
EQL-OK: 1.6395s-10
(/ 0.663826s0 -7.88726s8)
EQL-OK: -8.41645s-10
(/ -0.31185s0 4.1015s9)
EQL-OK: -7.6033s-11
(/ -0.89607s0 -3.887s-14)
EQL-OK: 2.3053s13
(/ -0.670135s0 -5.027s-14)
EQL-OK: 1.33306s13
(/ 0.94663s0 -6.153s-14)
EQL-OK: -1.5385s13
(/ -0.76772s0 4.033s-14)
EQL-OK: -1.90358s13
(/ -0.446358s0 -1.9017s-13)
EQL-OK: 2.34713s12
(/ -0.157814s0 -2.0401s-13)
EQL-OK: 7.73555s11
(/ 0.636185s0 -3.78516s19)
EQL-OK: -1.68073s-20
(/ -0.90556s0 7.7192s19)
EQL-OK: -1.17314s-20
(/ 0.85053s0 8.3134s19)
EQL-OK: 1.02309s-20
(/ -0.3058s0 3.00674s19)
EQL-OK: -1.01705s-20
(/ 0.219429s0 -8.1184s19)
EQL-OK: -2.70286s-21
(/ 0.319603s0 -2.0739s19)
EQL-OK: -1.54106s-20
(/ 0.58943s0 -5.28s-24)
EQL-OK: -1.11635s23
(/ 0.72955s0 7.852s-24)
EQL-OK: 9.2914s22
(/ -0.66327s0 -3.124s-24)
EQL-OK: 2.12315s23
(/ -0.0137558s0 -7.918s-24)
EQL-OK: 1.73729s21
(/ 0.35823s0 5.467s-24)
EQL-OK: 6.55263s22
(/ 0.93861s0 9.968s-24)
EQL-OK: 9.4163s22
(/ 3.83346s9 0.99782s0)
EQL-OK: 3.84185s9
(/ 8.7033s9 -0.81822s0)
EQL-OK: -1.06369s10
(/ 3.52326s8 -0.79994s0)
EQL-OK: -4.4044s8
(/ 8.0525s9 -0.91803s0)
EQL-OK: -8.7715s9
(/ -2.12784s9 -0.761246s0)
EQL-OK: 2.7952s9
(/ 1.18805s9 -0.903534s0)
EQL-OK: -1.3149s9
(/ -6.50556s9 -5.4642s9)
EQL-OK: 1.19058s0
(/ 3.3333s8 1.8341s8)
EQL-OK: 1.81738s0
(/ 3.70934s9 9.1957s8)
EQL-OK: 4.03375s0
(/ -8.0459s9 4.5511s9)
EQL-OK: -1.76791s0
(/ 3.54982s9 4.6631s8)
EQL-OK: 7.6126s0
(/ -6.27016s9 -3.42858s9)
EQL-OK: 1.8288s0
(/ -4.3213s9 7.223s-15)
EQL-OK: -5.98274s23
(/ -2.57753s9 -2.533s-15)
EQL-OK: 1.01759s24
(/ 3.8858s9 -4.505s-14)
EQL-OK: -8.6256s22
(/ 3.5946s9 -5.067s-14)
EQL-OK: -7.0941s22
(/ 2.94434s9 8.333s-14)
EQL-OK: 3.53333s22
(/ 5.6178s9 -8.241s-14)
EQL-OK: -6.81694s22
(/ 4.9591s8 3.9972s19)
EQL-OK: 1.24064s-11
(/ 2.4166s9 -9.2141s19)
EQL-OK: -2.62272s-11
(/ -1.484s9 2.0281s19)
EQL-OK: -7.3172s-11
(/ 2.2339s8 1.96374s19)
EQL-OK: 1.13758s-11
(/ -6.6306s9 -2.414s19)
EQL-OK: 2.7467s-10
(/ 9.9114s9 9.6187s19)
EQL-OK: 1.03043s-10
(/ 4.4579s9 5.343s-24)
EQL-OK: 8.3434s32
(/ -6.35994s9 -6.301s-24)
EQL-OK: 1.00936s33
(/ 5.49677s9 -1.9306s-25)
EQL-OK: -2.84717s34
(/ -5.007s9 3.692s-24)
EQL-OK: -1.35617s33
(/ 8.6837s9 -1.6358s-23)
EQL-OK: -5.3085s32
(/ 5.5898s9 -5.435s-24)
EQL-OK: -1.02849s33
(/ -5.042s-14 0.79081s0)
EQL-OK: -6.3758s-14
(/ -6.231s-14 0.96946s0)
EQL-OK: -6.4273s-14
(/ 6.016s-14 0.418983s0)
EQL-OK: 1.43587s-13
(/ -1.1682s-13 0.70944s0)
EQL-OK: -1.64663s-13
(/ -1.7485s-13 0.83207s0)
EQL-OK: -2.1014s-13
(/ 7.831s-15 -0.083374s0)
EQL-OK: -9.3926s-14
(/ 3.947s-14 9.2342s9)
EQL-OK: 4.2744s-24
(/ -1.1537s-13 -6.44075s9)
EQL-OK: 1.79124s-23
(/ 6.751s-14 5.8395s8)
EQL-OK: 1.1561s-22
(/ -5.026s-14 7.9677s9)
EQL-OK: -6.308s-24
(/ -1.0105s-13 -1.71082s9)
EQL-OK: 5.9066s-23
(/ -4.996s-14 9.426s9)
EQL-OK: -5.30024s-24
(/ -6.837s-14 -3.573s-14)
EQL-OK: 1.91351s0
(/ -7.736s-14 -4.898s-14)
EQL-OK: 1.57942s0
(/ 3.777s-14 8.025s-14)
EQL-OK: 0.470657s0
(/ -6.239s-14 8.518s-15)
EQL-OK: -7.32446s0
(/ -7.548s-15 -4.573s-14)
EQL-OK: 0.165056s0
(/ 1.6293s-14 4.712s-14)
EQL-OK: 0.345776s0
(/ -4.47s-14 2.73658s19)
EQL-OK: -1.63342s-33
(/ 1.0583s-13 2.52534s19)
EQL-OK: 4.19073s-33
(/ 4.351s-15 2.70326s19)
EQL-OK: 1.60955s-34
(/ 3.699s-14 -6.00707s19)
EQL-OK: -6.1577s-34
(/ 6.358s-14 5.18274s19)
EQL-OK: 1.22677s-33
(/ -2.971s-14 6.153s19)
EQL-OK: -4.8286s-34
(/ -4.968s-14 7.699s-24)
EQL-OK: -6.4528s9
(/ -3.654s-14 8.434s-24)
EQL-OK: -4.3325s9
(/ -9.276s-14 -7.079s-24)
EQL-OK: 1.31035s10
(/ -4.556s-14 1.39s-23)
EQL-OK: -3.27772s9
(/ 3.832s-14 1.55715s-22)
EQL-OK: 2.4609s8
(/ 1.4186s-13 1.64482s-21)
EQL-OK: 8.6246s7
(/ -7.0974s19 -0.705536s0)
EQL-OK: 1.00596s20
(/ -7.687s19 -0.241531s0)
EQL-OK: 3.1826s20
(/ 3.37013s19 -0.425987s0)
EQL-OK: -7.9114s19
(/ 6.56473s19 -0.60696s0)
EQL-OK: -1.08158s20
(/ 4.1598s19 0.60135s0)
EQL-OK: 6.9175s19
(/ 8.8312s19 0.93547s0)
EQL-OK: 9.4404s19
(/ 2.81357s19 -2.62832s9)
EQL-OK: -1.07048s10
(/ 5.9243s19 -4.5189s8)
EQL-OK: -1.311s11
(/ -8.3887s19 9.5761s9)
EQL-OK: -8.7601s9
(/ 7.7606s19 -8.5369s9)
EQL-OK: -9.0906s9
(/ -7.9868s19 5.0173s9)
EQL-OK: -1.59186s10
(/ 7.4128s19 -6.7781s9)
EQL-OK: -1.09364s10
(/ 1.27472s19 1.1699s-13)
EQL-OK: 1.0896s32
(/ 2.97578s19 4.448s-14)
EQL-OK: 6.6901s32
(/ 7.19416s19 1.3834s-13)
EQL-OK: 5.20034s32
(/ 6.61843s19 -4.268s-14)
EQL-OK: -1.55071s33
(/ 2.8579s19 4.364s-14)
EQL-OK: 6.5488s32
(/ 8.2451s18 -6.532s-14)
EQL-OK: -1.26227s32
(/ 4.63364s19 9.4305s19)
EQL-OK: 0.491344s0
(/ -1.81999s19 1.05424s19)
EQL-OK: -1.72636s0
(/ -1.41579s19 -4.03517s19)
EQL-OK: 0.350864s0
(/ -1.88523s18 -3.3165s18)
EQL-OK: 0.568436s0
(/ 8.4152s17 -7.3293s19)
EQL-OK: -0.0114815s0
(/ -8.674s19 -3.63595s19)
EQL-OK: 2.38562s0
(/ -1.64643s-22 0.78035s0)
EQL-OK: -2.10986s-22
(/ -7.455s-24 -0.63174s0)
EQL-OK: 1.18009s-23
(/ -3.259s-24 -0.89363s0)
EQL-OK: 3.64694s-24
(/ 1.5803s-23 -0.11338s0)
EQL-OK: -1.39382s-22
(/ -3.534s-24 0.407562s0)
EQL-OK: -8.6711s-24
(/ -7.221s-24 0.90274s0)
EQL-OK: -7.999s-24
(/ 1.0479s-23 5.66256s8)
EQL-OK: 1.85059s-32
(/ 1.62856s-21 -1.9551s9)
EQL-OK: -8.3298s-31
(/ -8.102s-24 9.7896s9)
EQL-OK: -8.2761s-34
(/ 9.693s-24 -8.777s9)
EQL-OK: -1.10437s-33
(/ 8.643s-24 -1.25557s9)
EQL-OK: -6.8837s-33
(/ 3.224s-24 9.8161s9)
EQL-OK: 3.2844s-34
(/ 1.06582s-21 -1.0408s-13)
EQL-OK: -1.02405s-8
(/ 1.6738s-23 9.851s-14)
EQL-OK: 1.69914s-10
(/ -1.1514s-23 -6.509s-14)
EQL-OK: 1.76893s-10
(/ 9.171s-24 9.292s-14)
EQL-OK: 9.8698s-11
(/ 1.8589s-23 -4.213s-14)
EQL-OK: -4.4123s-10
(/ 1.2837s-23 1.1034s-13)
EQL-OK: 1.16341s-10
(/ 3.671s-24 1.0091s-23)
EQL-OK: 0.363792s0
(/ -3.373s-24 -1.7017s-23)
EQL-OK: 0.198214s0
(/ -2.0157s-23 1.0021s-23)
EQL-OK: -2.01147s0
(/ 8.041s-24 -1.3974s-23)
EQL-OK: -0.575424s0
(/ -5.391s-24 1.1762s-23)
EQL-OK: -0.458344s0
(/ 1.7735s-23 -3.313s-24)
EQL-OK: -5.3531s0
(+ 0.79351956 0.07393837)
EQL-OK: 0.8674579
(+ -0.52145976 -0.14409256)
EQL-OK: -0.6655523
(+ -0.094845235 -0.091273725)
EQL-OK: -0.18611896
(+ -0.11106694 -0.90595967)
EQL-OK: -1.0170267
(+ 0.46902913 0.6453068)
EQL-OK: 1.114336
(+ -0.30989015 0.6634996)
EQL-OK: 0.35360944
(+ -0.58887166 -3.1150198E9)
EQL-OK: -3.1150198E9
(+ 0.08032262 -8.451643E9)
EQL-OK: -8.451643E9
(+ -0.734433 7.601292E9)
EQL-OK: 7.601292E9
(+ 0.77958024 -4.2334996E9)
EQL-OK: -4.2334996E9
(+ -0.5492505 4.4427484E9)
EQL-OK: 4.4427484E9
(+ -0.45681345 4.7386803E9)
EQL-OK: 4.7386803E9
(+ -0.5951412 7.866326E-11)
EQL-OK: -0.5951412
(+ 0.8511461 8.396644E-11)
EQL-OK: 0.8511461
(+ -0.94777477 -7.635105E-11)
EQL-OK: -0.94777477
(+ -0.20783025 -1.7222382E-11)
EQL-OK: -0.20783025
(+ 0.82520634 -5.3449255E-11)
EQL-OK: 0.82520634
(+ 0.7797032 3.7409843E-11)
EQL-OK: 0.7797032
(+ 0.9915549 5.16192E19)
EQL-OK: 5.16192E19
(+ -0.6311349 2.1599532E19)
EQL-OK: 2.1599532E19
(+ 0.42801672 4.8533796E18)
EQL-OK: 4.8533796E18
(+ -0.11165339 6.518633E19)
EQL-OK: 6.518633E19
(+ -0.5133993 -5.5200484E19)
EQL-OK: -5.5200484E19
(+ 0.11643493 -1.0541451E19)
EQL-OK: -1.0541451E19
(+ -0.7063649 8.243067E-21)
EQL-OK: -0.7063649
(+ 8.4728E-4 -7.5151976E-21)
EQL-OK: 8.4728E-4
(+ -0.47157037 -8.748518E-21)
EQL-OK: -0.47157037
(+ 0.7662331 -5.6591384E-21)
EQL-OK: 0.7662331
(+ -0.9418909 -4.455382E-21)
EQL-OK: -0.9418909
(+ -0.88412094 6.6664897E-21)
EQL-OK: -0.88412094
(+ 5.5891533E9 -0.11624104)
EQL-OK: 5.5891533E9
(+ -8.760519E9 0.22073412)
EQL-OK: -8.760519E9
(+ 6.8390047E9 -0.6434584)
EQL-OK: 6.8390047E9
(+ 5.1620844E9 -0.93939686)
EQL-OK: 5.1620844E9
(+ 9.21372E9 -0.93054956)
EQL-OK: 9.21372E9
(+ -2.7403366E9 -0.9354063)
EQL-OK: -2.7403366E9
(+ 6.4755876E9 7.780013E9)
EQL-OK: 1.4255601E10
(+ 3.6402857E9 -4.6589404E9)
EQL-OK: -1.0186547E9
(+ 9.858497E9 -3.1216233E9)
EQL-OK: 6.7368735E9
(+ -5.199144E9 -8.3410964E9)
EQL-OK: -1.354024E10
(+ -2.2145843E9 7.4088115E9)
EQL-OK: 5.194227E9
(+ 3.6034734E9 -4.7355105E9)
EQL-OK: -1.1320371E9
(+ -3.974853E9 8.344858E-11)
EQL-OK: -3.974853E9
(+ 9.633741E9 9.879035E-11)
EQL-OK: 9.633741E9
(+ -5.84563E9 -2.8054357E-11)
EQL-OK: -5.84563E9
(+ 1.6814709E8 -6.702281E-11)
EQL-OK: 1.6814709E8
(+ 6.627381E8 8.1083654E-11)
EQL-OK: 6.627381E8
(+ 6.617609E9 -7.74835E-11)
EQL-OK: 6.617609E9
(+ -4.325255E9 7.48992E19)
EQL-OK: 7.48992E19
(+ 8.963769E9 5.6527995E19)
EQL-OK: 5.6527995E19
(+ 3.2307428E9 -3.772047E19)
EQL-OK: -3.772047E19
(+ -1.5719092E9 9.119215E19)
EQL-OK: 9.119215E19
(+ -3.1338138E9 2.7048826E19)
EQL-OK: 2.7048826E19
(+ -4.4506363E9 9.624759E19)
EQL-OK: 9.624759E19
(+ 1.8499094E9 4.968932E-21)
EQL-OK: 1.8499094E9
(+ 1.1302281E9 1.590079E-21)
EQL-OK: 1.1302281E9
(+ 5.7261727E9 -3.3212954E-21)
EQL-OK: 5.7261727E9
(+ 1.8314988E9 -6.247946E-21)
EQL-OK: 1.8314988E9
(+ -7.301286E9 -8.870309E-21)
EQL-OK: -7.301286E9
(+ 8.0970737E9 -6.944993E-21)
EQL-OK: 8.0970737E9
(+ 9.076142E-11 0.79629874)
EQL-OK: 0.79629874
(+ -2.5569331E-11 -0.11109424)
EQL-OK: -0.11109424
(+ 5.817238E-11 0.8669617)
EQL-OK: 0.8669617
(+ 5.0001194E-11 0.1629681)
EQL-OK: 0.1629681
(+ -5.314657E-11 0.33499128)
EQL-OK: 0.33499128
(+ 3.4244614E-11 0.7846571)
EQL-OK: 0.7846571
(+ 5.016508E-11 1.2850774E9)
EQL-OK: 1.2850774E9
(+ -6.236206E-11 -3.9463657E9)
EQL-OK: -3.9463657E9
(+ -9.461717E-11 -2.86016E9)
EQL-OK: -2.86016E9
(+ 9.271425E-11 9.936099E9)
EQL-OK: 9.936099E9
(+ -9.330213E-12 4.2810826E9)
EQL-OK: 4.2810826E9
(+ 8.8110796E-11 -7.967343E9)
EQL-OK: -7.967343E9
(+ -3.252064E-11 9.310712E-11)
EQL-OK: 6.058648E-11
(+ 9.2616026E-11 -4.2321837E-11)
EQL-OK: 5.029419E-11
(+ -6.138445E-11 2.0083374E-11)
EQL-OK: -4.130108E-11
(+ -1.672895E-11 -4.1673078E-11)
EQL-OK: -5.8402026E-11
(+ -5.054619E-11 -1.9569606E-11)
EQL-OK: -7.0115795E-11
(+ -6.765585E-11 6.200571E-11)
EQL-OK: -5.65014E-12
(+ -8.958499E-11 9.627367E18)
EQL-OK: 9.627367E18
(+ -3.639458E-11 -6.774422E19)
EQL-OK: -6.774422E19
(+ 5.885664E-11 7.710968E19)
EQL-OK: 7.710968E19
(+ -2.8348934E-11 -6.8805507E19)
EQL-OK: -6.8805507E19
(+ 3.783013E-11 -4.363011E19)
EQL-OK: -4.363011E19
(+ 9.9192224E-11 7.840148E19)
EQL-OK: 7.840148E19
(+ 1.5157771E-11 -6.578477E-21)
EQL-OK: 1.5157771E-11
(+ 3.269849E-11 -1.5641468E-21)
EQL-OK: 3.269849E-11
(+ -2.4697334E-11 -5.9471063E-21)
EQL-OK: -2.4697334E-11
(+ -7.226034E-11 -8.027814E-21)
EQL-OK: -7.226034E-11
(+ 6.705153E-12 1.3146739E-21)
EQL-OK: 6.705153E-12
(+ -9.281199E-11 1.940757E-22)
EQL-OK: -9.281199E-11
(+ 6.841885E19 0.29873258)
EQL-OK: 6.841885E19
(+ -7.487633E19 -0.41199452)
EQL-OK: -7.487633E19
(+ 9.324847E19 -0.12986994)
EQL-OK: 9.324847E19
(+ 1.7454827E19 -0.9480438)
EQL-OK: 1.7454827E19
(+ -2.2794772E19 -0.85242146)
EQL-OK: -2.2794772E19
(+ -1.4789046E18 -0.3244334)
EQL-OK: -1.4789046E18
(+ -1.0913384E19 6.2691034E8)
EQL-OK: -1.0913384E19
(+ 9.054158E19 6.7361736E9)
EQL-OK: 9.054158E19
(+ -2.404365E19 2.819194E9)
EQL-OK: -2.404365E19
(+ 3.0628145E19 3.8188636E9)
EQL-OK: 3.0628145E19
(+ -3.7020847E19 -4.248917E8)
EQL-OK: -3.7020847E19
(+ 8.556466E19 -5.431256E9)
EQL-OK: 8.556466E19
(+ 4.8590555E19 -4.0259546E-11)
EQL-OK: 4.8590555E19
(+ -1.990289E19 -3.2150872E-11)
EQL-OK: -1.990289E19
(+ -1.5843934E19 5.37822E-11)
EQL-OK: -1.5843934E19
(+ 1.596058E19 2.465645E-11)
EQL-OK: 1.596058E19
(+ 8.179266E19 -8.080585E-11)
EQL-OK: 8.179266E19
(+ 8.673572E19 -2.1405459E-11)
EQL-OK: 8.673572E19
(+ -4.5302206E19 4.4819714E19)
EQL-OK: -4.824921E17
(+ 2.1413618E19 -7.160984E19)
EQL-OK: -5.0196224E19
(+ 9.760235E19 -7.810464E19)
EQL-OK: 1.949771E19
(+ -7.518544E19 -5.7398474E19)
EQL-OK: -1.32583915E20
(+ -2.459352E19 6.0089863E19)
EQL-OK: 3.5496343E19
(+ -9.009707E19 1.9710512E19)
EQL-OK: -7.0386556E19
(+ 4.9167807E19 -1.261897E-21)
EQL-OK: 4.9167807E19
(+ -8.647001E18 -1.4144885E-21)
EQL-OK: -8.647001E18
(+ -6.2763383E19 6.69688E-21)
EQL-OK: -6.2763383E19
(+ 1.6851938E19 -4.9109547E-21)
EQL-OK: 1.6851938E19
(+ -7.0371058E19 -9.246501E-21)
EQL-OK: -7.0371058E19
(+ -2.8498996E19 3.3614294E-21)
EQL-OK: -2.8498996E19
(+ -4.8211753E-21 0.5153807)
EQL-OK: 0.5153807
(+ -9.730312E-21 0.3705088)
EQL-OK: 0.3705088
(+ -8.83036E-21 0.21063423)
EQL-OK: 0.21063423
(+ 1.8688595E-21 -0.38304192)
EQL-OK: -0.38304192
(+ -7.9137435E-21 -0.9482965)
EQL-OK: -0.9482965
(+ -5.7913193E-21 -0.16538233)
EQL-OK: -0.16538233
(+ -4.667948E-21 5.69782E9)
EQL-OK: 5.69782E9
(+ -1.6254025E-21 1.100067E9)
EQL-OK: 1.100067E9
(+ 5.4919865E-21 9.125866E9)
EQL-OK: 9.125866E9
(+ 2.1973532E-21 -5.218964E9)
EQL-OK: -5.218964E9
(+ -4.018586E-21 -6.5943096E9)
EQL-OK: -6.5943096E9
(+ -7.7845274E-22 4.172669E9)
EQL-OK: 4.172669E9
(+ -2.843846E-21 9.243441E-12)
EQL-OK: 9.243441E-12
(+ 1.1533075E-21 3.327943E-11)
EQL-OK: 3.327943E-11
(+ 5.977113E-21 6.507544E-11)
EQL-OK: 6.507544E-11
(+ 1.1817801E-21 -4.1877824E-11)
EQL-OK: -4.1877824E-11
(+ 1.932947E-21 9.4013144E-11)
EQL-OK: 9.4013144E-11
(+ 8.526454E-21 8.396772E-11)
EQL-OK: 8.396772E-11
(+ -4.8870485E-21 5.9277504E19)
EQL-OK: 5.9277504E19
(+ -4.7174987E-21 2.5545484E19)
EQL-OK: 2.5545484E19
(+ -8.818029E-21 1.2602901E19)
EQL-OK: 1.2602901E19
(+ -1.2268113E-21 -9.071741E19)
EQL-OK: -9.071741E19
(+ -7.0568975E-21 -6.9825405E19)
EQL-OK: -6.9825405E19
(+ 8.723312E-21 -5.802767E19)
EQL-OK: -5.802767E19
(+ 7.1661314E-21 4.10364E-21)
EQL-OK: 1.1269772E-20
(+ 8.181265E-21 -4.6898657E-21)
EQL-OK: 3.4913997E-21
(+ -8.570217E-21 -5.5145446E-21)
EQL-OK: -1.4084761E-20
(+ 1.3507604E-23 -7.152723E-21)
EQL-OK: -7.139215E-21
(+ -7.859527E-21 -9.369602E-21)
EQL-OK: -1.7229128E-20
(+ -4.9014434E-21 1.4580911E-21)
EQL-OK: -3.443352E-21
(- -0.41894162 0.23777992)
EQL-OK: -0.65672153
(- 0.74937063 0.4803756)
EQL-OK: 0.26899505
(- 0.46964037 -0.94880456)
EQL-OK: 1.4184449
(- 0.16453332 0.035123527)
EQL-OK: 0.12940979
(- 0.7353321 -0.3952883)
EQL-OK: 1.1306204
(- -0.33693552 -0.6941588)
EQL-OK: 0.35722327
(- -0.61853 -9.25498E9)
EQL-OK: 9.25498E9
(- 0.5172653 -6.728693E9)
EQL-OK: 6.728693E9
(- 0.1268478 -1.8808037E9)
EQL-OK: 1.8808037E9
(- 0.29479754 -3.4643973E9)
EQL-OK: 3.4643973E9
(- 0.34332883 1.4258218E9)
EQL-OK: -1.4258218E9
(- -0.4093976 -1.6698813E9)
EQL-OK: 1.6698813E9
(- 0.10942185 -2.015636E-11)
EQL-OK: 0.10942185
(- 0.30351585 4.4276416E-11)
EQL-OK: 0.30351585
(- -0.41279083 6.5274E-11)
EQL-OK: -0.41279083
(- 0.7813598 -5.028443E-11)
EQL-OK: 0.7813598
(- -0.72214615 2.5959075E-11)
EQL-OK: -0.72214615
(- -0.8924311 -5.2076333E-11)
EQL-OK: -0.8924311
(- -0.26128495 6.8887236E19)
EQL-OK: -6.8887236E19
(- 0.906616 -2.0519019E18)
EQL-OK: 2.0519019E18
(- 0.96452767 -1.6347343E19)
EQL-OK: 1.6347343E19
(- -0.99801517 8.383864E19)
EQL-OK: -8.383864E19
(- -0.60573876 -4.890489E19)
EQL-OK: 4.890489E19
(- -0.004701972 6.3981E18)
EQL-OK: -6.3981E18
(- 0.34311903 3.52871E-21)
EQL-OK: 0.34311903
(- -0.38159567 -2.3400748E-21)
EQL-OK: -0.38159567
(- -0.6719565 -5.4333447E-21)
EQL-OK: -0.6719565
(- -0.21363729 8.021308E-21)
EQL-OK: -0.21363729
(- 0.5275244 -4.88554E-21)
EQL-OK: 0.5275244
(- 0.9064559 -6.5840867E-21)
EQL-OK: 0.9064559
(- -3.0312538E8 0.26249015)
EQL-OK: -3.0312538E8
(- -9.217122E9 0.22172129)
EQL-OK: -9.217122E9
(- -1.157806E9 -0.95704305)
EQL-OK: -1.157806E9
(- 6.743087E9 -0.37863714)
EQL-OK: 6.743087E9
(- -4.0819942E8 -0.068549395)
EQL-OK: -4.0819942E8
(- 4.586502E9 0.29215187)
EQL-OK: 4.586502E9
(- 5.091125E9 -2.971223E9)
EQL-OK: 8.0623483E9
(- -2.1147072E8 -8.537374E9)
EQL-OK: 8.3259034E9
(- -9.075735E9 -9.072693E9)
EQL-OK: -3041280.0
(- 1.4614451E9 3.0213921E9)
EQL-OK: -1.559947E9
(- 8.960645E9 5.4822825E9)
EQL-OK: 3.4783626E9
(- -3.7246787E9 -2.823592E9)
EQL-OK: -9.010867E8
(- -3.4256804E9 -1.8245674E-11)
EQL-OK: -3.4256804E9
(- 7.0777057E9 3.6826153E-11)
EQL-OK: 7.0777057E9
(- 3.4600579E9 -5.207135E-11)
EQL-OK: 3.4600579E9
(- 9.57872E9 8.222393E-11)
EQL-OK: 9.57872E9
(- 8.388926E9 -1.1216945E-11)
EQL-OK: 8.388926E9
(- 3.8273395E8 1.153788E-11)
EQL-OK: 3.8273395E8
(- -1.2011469E8 -9.879852E19)
EQL-OK: 9.879852E19
(- 3.850388E9 4.8155957E19)
EQL-OK: -4.8155957E19
(- 5.5329756E9 -5.067925E19)
EQL-OK: 5.067925E19
(- 3.3222902E9 5.2892763E19)
EQL-OK: -5.2892763E19
(- 4.431185E9 -8.005187E19)
EQL-OK: 8.005187E19
(- -7.307553E8 -6.8217897E19)
EQL-OK: 6.8217897E19
(- 7.9813893E9 9.68989E-21)
EQL-OK: 7.9813893E9
(- -5.7208223E9 9.790913E-21)
EQL-OK: -5.7208223E9
(- -5.9564112E7 9.217466E-21)
EQL-OK: -5.9564112E7
(- 5.4524237E9 4.947411E-21)
EQL-OK: 5.4524237E9
(- 1.4269632E9 -5.1552662E-21)
EQL-OK: 1.4269632E9
(- 3.7555832E9 -4.168443E-21)
EQL-OK: 3.7555832E9
(- -4.1575327E-11 -0.38582206)
EQL-OK: 0.38582206
(- -5.810516E-11 -0.5456566)
EQL-OK: 0.5456566
(- -1.2386638E-11 -0.6209788)
EQL-OK: 0.6209788
(- 2.0245033E-11 -0.7418727)
EQL-OK: 0.7418727
(- 3.7671637E-11 0.1772576)
EQL-OK: -0.1772576
(- -2.2774244E-11 -0.5959606)
EQL-OK: 0.5959606
(- -5.6623112E-11 6.8330056E9)
EQL-OK: -6.8330056E9
(- -9.2078116E-11 -3.4236897E9)
EQL-OK: 3.4236897E9
(- -3.317883E-11 -3.2438755E8)
EQL-OK: 3.2438755E8
(- 6.711307E-11 -7.9204526E9)
EQL-OK: 7.9204526E9
(- -5.1150143E-11 9.1128E9)
EQL-OK: -9.1128E9
(- -7.3234044E-11 -8.067016E9)
EQL-OK: 8.067016E9
(- -3.217777E-11 -1.6301262E-11)
EQL-OK: -1.5876508E-11
(- 9.6583325E-11 5.882668E-11)
EQL-OK: 3.7756645E-11
(- -7.573351E-11 6.3386435E-11)
EQL-OK: -1.3911994E-10
(- -4.5759726E-11 8.069604E-11)
EQL-OK: -1.2645576E-10
(- -9.538651E-11 -9.01152E-11)
EQL-OK: -5.271311E-12
(- 6.2486766E-11 -3.414284E-11)
EQL-OK: 9.662961E-11
(- 5.530477E-13 -3.1361222E18)
EQL-OK: 3.1361222E18
(- 1.7998643E-11 1.5437615E19)
EQL-OK: -1.5437615E19
(- -4.7948378E-11 2.6669319E19)
EQL-OK: -2.6669319E19
(- -6.8626884E-12 -5.7713735E19)
EQL-OK: 5.7713735E19
(- 6.195949E-11 2.8851469E19)
EQL-OK: -2.8851469E19
(- 2.4957127E-11 -2.661574E18)
EQL-OK: 2.661574E18
(- 9.8157565E-11 -4.561507E-21)
EQL-OK: 9.8157565E-11
(- -9.332288E-11 -9.280375E-21)
EQL-OK: -9.332288E-11
(- -9.916877E-11 -1.6945641E-21)
EQL-OK: -9.916877E-11
(- -6.460804E-11 -3.6695186E-21)
EQL-OK: -6.460804E-11
(- 6.712223E-11 -2.5360524E-21)
EQL-OK: 6.712223E-11
(- 2.3824066E-11 -7.439168E-21)
EQL-OK: 2.3824066E-11
(- -5.189389E19 0.01453203)
EQL-OK: -5.189389E19
(- 7.0132006E19 0.45530832)
EQL-OK: 7.0132006E19
(- 2.9365046E19 0.36346745)
EQL-OK: 2.9365046E19
(- -4.1377934E19 0.37368965)
EQL-OK: -4.1377934E19
(- -1.891423E19 0.159002)
EQL-OK: -1.891423E19
(- 1.8096083E19 -0.6511793)
EQL-OK: 1.8096083E19
(- 6.4361307E19 6.6511677E9)
EQL-OK: 6.4361307E19
(- -1.8698508E19 1.1925399E9)
EQL-OK: -1.8698508E19
(- 7.75824E19 7.7361823E9)
EQL-OK: 7.75824E19
(- -7.2570015E19 3.0842496E9)
EQL-OK: -7.2570015E19
(- -1.9014525E19 -3.8941514E9)
EQL-OK: -1.9014525E19
(- 3.2787157E19 -8.612244E9)
EQL-OK: 3.2787157E19
(- 6.4268583E19 -1.2707472E-11)
EQL-OK: 6.4268583E19
(- -6.5179933E19 8.61941E-11)
EQL-OK: -6.5179933E19
(- -8.106952E19 2.1709537E-11)
EQL-OK: -8.106952E19
(- 2.5455064E19 3.5653924E-11)
EQL-OK: 2.5455064E19
(- 1.574235E19 -2.7033407E-11)
EQL-OK: 1.574235E19
(- -1.1099541E19 -8.620364E-12)
EQL-OK: -1.1099541E19
(- -6.346294E19 2.9902512E19)
EQL-OK: -9.336545E19
(- 4.9783164E19 -2.079425E19)
EQL-OK: 7.0577414E19
(- -7.149202E19 1.4282865E19)
EQL-OK: -8.577488E19
(- 6.0978866E19 5.256896E19)
EQL-OK: 8.409905E18
(- -9.961146E19 -1.9834548E19)
EQL-OK: -7.977691E19
(- 2.5196015E18 5.0534214E19)
EQL-OK: -4.8014613E19
(- -3.6981453E19 -1.005367E-21)
EQL-OK: -3.6981453E19
(- 8.881044E19 -9.717088E-22)
EQL-OK: 8.881044E19
(- 4.9637263E19 -7.544846E-21)
EQL-OK: 4.9637263E19
(- -4.2414725E19 1.3904184E-21)
EQL-OK: -4.2414725E19
(- 7.844454E18 -8.659333E-21)
EQL-OK: 7.844454E18
(- 1.5733016E19 8.638849E-21)
EQL-OK: 1.5733016E19
(- 1.7531192E-21 -0.8690463)
EQL-OK: 0.8690463
(- 9.449351E-21 0.7848489)
EQL-OK: -0.7848489
(- 5.5016538E-21 -0.8998171)
EQL-OK: 0.8998171
(- -6.977279E-21 -0.9815793)
EQL-OK: 0.9815793
(- -7.9253305E-21 -0.21357381)
EQL-OK: 0.21357381
(- 4.026555E-21 0.5610563)
EQL-OK: -0.5610563
(- -7.080433E-21 -1.9501078E9)
EQL-OK: 1.9501078E9
(- -8.152211E-21 8.164317E9)
EQL-OK: -8.164317E9
(- 2.177096E-21 -8.591886E9)
EQL-OK: 8.591886E9
(- 9.387247E-21 3.5730028E9)
EQL-OK: -3.5730028E9
(- -7.589234E-21 -4.9193774E9)
EQL-OK: 4.9193774E9
(- 1.5755653E-21 -2.3484498E9)
EQL-OK: 2.3484498E9
(- 9.3034425E-21 8.28104E-11)
EQL-OK: -8.28104E-11
(- -6.417297E-21 -8.352926E-11)
EQL-OK: 8.352926E-11
(- 8.728735E-21 9.160732E-11)
EQL-OK: -9.160732E-11
(- 3.8984202E-21 6.5116944E-12)
EQL-OK: -6.5116944E-12
(- 6.288995E-21 -5.6701328E-11)
EQL-OK: 5.6701328E-11
(- -2.7652023E-22 -1.01428276E-11)
EQL-OK: 1.01428276E-11
(- 4.7200214E-21 -3.726995E18)
EQL-OK: 3.726995E18
(- -2.2945808E-21 -7.3098524E19)
EQL-OK: 7.3098524E19
(- -9.493033E-21 3.4235436E19)
EQL-OK: -3.4235436E19
(- 3.7946773E-21 -5.126768E18)
EQL-OK: 5.126768E18
(- -1.2865209E-21 3.5096026E19)
EQL-OK: -3.5096026E19
(- -8.403449E-21 5.704743E18)
EQL-OK: -5.704743E18
(- 2.928304E-21 -5.574477E-21)
EQL-OK: 8.502781E-21
(- -9.46122E-21 -3.858943E-21)
EQL-OK: -5.602277E-21
(- 7.296878E-22 1.8123137E-21)
EQL-OK: -1.0826259E-21
(- 5.866651E-21 2.4605584E-21)
EQL-OK: 3.4060923E-21
(- -7.633577E-21 9.915102E-21)
EQL-OK: -1.7548679E-20
(- -8.7881085E-24 3.001468E-21)
EQL-OK: -3.0102563E-21
(* 0.3098436 0.0057770014)
EQL-OK: 0.001789967
(* -0.14583993 -0.028087378)
EQL-OK: 0.004096261
(* 0.21399558 0.96054405)
EQL-OK: 0.20555218
(* 0.7590452 0.8427266)
EQL-OK: 0.6396676
(* -0.34523207 0.20272356)
EQL-OK: -0.06998668
(* -0.98096234 0.98158866)
EQL-OK: -0.96290153
(* 0.40309322 4.0009994E9)
EQL-OK: 1.6127757E9
(* 0.15507132 9.481803E9)
EQL-OK: 1.4703557E9
(* 0.5218476 -2.1933102E9)
EQL-OK: -1.1445737E9
(* 0.17258328 2.6295781E8)
EQL-OK: 4.538212E7
(* 0.25962013 8.699164E9)
EQL-OK: 2.258478E9
(* 0.47902477 -1.4075732E9)
EQL-OK: -6.7426246E8
(* 0.9642294 -1.6256952E-11)
EQL-OK: -1.5675431E-11
(* 0.6098744 -8.802921E-12)
EQL-OK: -5.3686764E-12
(* -0.25792134 4.804327E-11)
EQL-OK: -1.2391385E-11
(* -0.8724403 -9.101418E-11)
EQL-OK: 7.940444E-11
(* -0.13318628 8.1157005E-11)
EQL-OK: -1.08089995E-11
(* -0.54116476 -9.353639E-11)
EQL-OK: 5.0618596E-11
(* 0.9018487 7.411783E19)
EQL-OK: 6.6843068E19
(* -0.6835444 -7.590606E19)
EQL-OK: 5.188516E19
(* -0.9896146 5.195105E18)
EQL-OK: -5.141152E18
(* -0.4838531 1.88174E19)
EQL-OK: -9.1048573E18
(* -0.31826657 -3.3103586E19)
EQL-OK: 1.0535765E19
(* 0.6818549 -9.227651E19)
EQL-OK: -6.2919192E19
(* 0.7676919 7.320194E-21)
EQL-OK: 5.6196534E-21
(* 0.49369502 4.9805288E-21)
EQL-OK: 2.4588622E-21
(* 0.9599328 7.903804E-21)
EQL-OK: 7.58712E-21
(* 0.13215566 7.603894E-21)
EQL-OK: 1.0048976E-21
(* -0.35744518 -9.408464E-21)
EQL-OK: 3.36301E-21
(* -0.79346496 9.006081E-21)
EQL-OK: -7.146009E-21
(* 4.1775434E9 -0.13509268)
EQL-OK: -5.643555E8
(* 7.27846E9 -0.8181822)
EQL-OK: -5.9551063E9
(* 2.9669427E9 0.7082195)
EQL-OK: 2.1012467E9
(* 7.609933E9 -0.33963126)
EQL-OK: -2.5845711E9
(* 3.4241843E9 0.3924479)
EQL-OK: 1.3438139E9
(* -3.8366538E9 0.56461394)
EQL-OK: -2.1662282E9
(* 3.7237007E9 1.2646783E9)
EQL-OK: 4.7092836E18
(* -2.7657871E9 -3.6314278E9)
EQL-OK: 1.0043756E19
(* -4.753982E9 -5.8879616E8)
EQL-OK: 2.7991263E18
(* 8.877933E9 7.973602E9)
EQL-OK: 7.07891E19
(* -8.312081E9 -8.941637E9)
EQL-OK: 7.432361E19
(* -4.297749E9 9.913122E9)
EQL-OK: -4.260411E19
(* -7.893335E9 -4.7961794E-11)
EQL-OK: 0.3785785
(* -4.1332334E9 7.221582E-11)
EQL-OK: -0.29848483
(* 1.9981688E9 2.8169871E-11)
EQL-OK: 0.056288157
(* -5.8555295E9 -7.562528E-11)
EQL-OK: 0.44282603
(* 7.377872E9 -1.5020383E-11)
EQL-OK: -0.11081846
(* 8.891134E9 -7.035395E-11)
EQL-OK: -0.6255264
(* -7.1412096E9 5.1873507E19)
EQL-OK: -3.7043958E29
(* 8.0983844E9 9.136914E19)
EQL-OK: 7.399425E29
(* -6.1437537E9 -9.398771E19)
EQL-OK: 5.7743737E29
(* -2.3000973E9 6.8743785E19)
EQL-OK: -1.5811739E29
(* 3.5817969E9 -6.0353143E19)
EQL-OK: -2.161727E29
(* 6.544234E9 8.265139E19)
EQL-OK: 5.4089003E29
(* 2.1273733E8 -2.3684083E-21)
EQL-OK: -5.0384886E-13
(* -4.2644698E9 2.956708E-21)
EQL-OK: -1.2608792E-11
(* -5.1238026E9 5.341445E-21)
EQL-OK: -2.7368509E-11
(* -3.0125368E9 5.201843E-21)
EQL-OK: -1.5670742E-11
(* -4.4709827E9 -1.5399217E-22)
EQL-OK: 6.8849635E-13
(* -4.934225E9 5.9229795E-21)
EQL-OK: -2.9225313E-11
(* -2.1100623E-11 0.9615048)
EQL-OK: -2.028835E-11
(* 6.6090705E-12 0.4100405)
EQL-OK: 2.7099865E-12
(* -9.541609E-11 0.82497185)
EQL-OK: -7.871559E-11
(* -2.7884627E-11 -0.5218528)
EQL-OK: 1.4551671E-11
(* 9.180904E-13 -0.26436818)
EQL-OK: -2.4271386E-13
(* 2.6154882E-11 0.2004636)
EQL-OK: 5.2431015E-12
(* 9.751009E-11 -7.0098227E9)
EQL-OK: -0.6835284
(* -1.312651E-11 1.9450307E8)
EQL-OK: -0.0025531466
(* -4.591856E-11 -4.6141565E8)
EQL-OK: 0.021187542
(* -4.1950752E-11 -9.55923E9)
EQL-OK: 0.4010169
(* -2.1888996E-11 9.976215E9)
EQL-OK: -0.21836932
(* 4.2696267E-11 -7.927695E9)
EQL-OK: -0.33848298
(* 1.9615304E-11 -5.3584637E-12)
EQL-OK: -1.05107896E-22
(* -8.7289814E-11 3.4389686E-11)
EQL-OK: -3.0018693E-21
(* 6.8621386E-11 -1.4248663E-11)
EQL-OK: -9.77763E-22
(* -9.5643375E-11 -7.7591066E-11)
EQL-OK: 7.421071E-21
(* -6.3313584E-11 5.173857E-11)
EQL-OK: -3.2757542E-21
(* -6.968663E-11 -4.966581E-12)
EQL-OK: 3.461043E-22
(* 7.942278E-11 -3.1309486E19)
EQL-OK: -2.4866865E9
(* 1.7023414E-11 2.5512804E19)
EQL-OK: 4.34315E8
(* 2.6554937E-11 9.146128E19)
EQL-OK: 2.4287485E9
(* 9.309172E-13 -3.6298406E19)
EQL-OK: -3.3790812E7
(* -6.106873E-11 3.5271824E18)
EQL-OK: -2.1540056E8
(* -2.8420502E-11 -6.6643682E19)
EQL-OK: 1.8940468E9
(* -5.84991E-11 1.5304011E-21)
EQL-OK: -8.952709E-32
(* 6.30787E-11 -9.366236E-21)
EQL-OK: -5.9081004E-31
(* 1.9745445E-11 7.034156E-21)
EQL-OK: 1.3889253E-31
(* 2.440728E-11 6.50959E-22)
EQL-OK: 1.5888139E-32
(* 6.0243255E-11 -1.7734902E-21)
EQL-OK: -1.0684082E-31
(* 1.0381073E-11 7.167948E-21)
EQL-OK: 7.441099E-32
(* 6.3378214E18 0.022634745)
EQL-OK: 1.43454966E17
(* 5.4942345E19 0.26696533)
EQL-OK: 1.4667702E19
(* 9.807893E19 -0.99720424)
EQL-OK: -9.780473E19
(* -7.1504E18 0.045440495)
EQL-OK: -3.249177E17
(* -7.265508E19 0.37276286)
EQL-OK: -2.7083115E19
(* 9.3705245E19 0.6617385)
EQL-OK: 6.200837E19
(* 7.768628E19 1.37205E9)
EQL-OK: 1.0658947E29
(* 1.5640021E18 9.344063E9)
EQL-OK: 1.4614135E28
(* 3.8593804E19 -9.424651E8)
EQL-OK: -3.6373312E28
(* -9.23689E19 -6.980498E9)
EQL-OK: 6.447809E29
(* 7.926599E19 5.0871127E9)
EQL-OK: 4.0323505E29
(* 3.540541E19 -5.11486E9)
EQL-OK: -1.810937E29
(* -7.023858E19 6.959093E-11)
EQL-OK: -4.8879683E9
(* -2.0809586E19 -4.045683E-12)
EQL-OK: 8.418899E7
(* 5.3608545E19 -7.0354486E-11)
EQL-OK: -3.7716017E9
(* 8.974303E19 -6.383404E-11)
EQL-OK: -5.72866E9
(* -6.8900017E19 9.845904E-11)
EQL-OK: -6.7838295E9
(* 9.325442E19 -3.9829796E-11)
EQL-OK: -3.7143045E9
(* 5.9436735E19 -5.713992E-21)
EQL-OK: -0.33962104
(* 7.266224E18 8.9780915E-21)
EQL-OK: 0.06523682
(* -3.6717237E18 3.3338123E-21)
EQL-OK: -0.012240837
(* 4.119367E19 -7.309974E-21)
EQL-OK: -0.30112466
(* -8.453134E19 4.6281215E-22)
EQL-OK: -0.03912213
(* -3.7493624E19 5.480264E-21)
EQL-OK: -0.20547494
(* 6.3693945E-21 -0.25352144)
EQL-OK: -1.6147781E-21
(* -8.51531E-21 0.6031129)
EQL-OK: -5.135693E-21
(* -9.771993E-21 0.2740926)
EQL-OK: -2.678431E-21
(* -4.2903415E-21 0.5916119)
EQL-OK: -2.5382172E-21
(* -3.7330673E-21 0.9738175)
EQL-OK: -3.6353263E-21
(* 5.860415E-21 -0.9997709)
EQL-OK: -5.8590725E-21
(* -9.4827234E-21 7.6195564E9)
EQL-OK: -7.225415E-11
(* 5.9501194E-21 9.102942E9)
EQL-OK: 5.4163594E-11
(* 2.8867428E-21 -9.615872E9)
EQL-OK: -2.7758549E-11
(* 5.0077543E-21 7.8715663E9)
EQL-OK: 3.941887E-11
(* 7.082003E-21 4.5221494E9)
EQL-OK: 3.2025875E-11
(* -2.9215627E-21 5.131017E9)
EQL-OK: -1.4990589E-11
(* -9.1914904E-21 -2.3301847E-11)
EQL-OK: 2.141787E-31
(* 1.3389891E-21 -7.032628E-11)
EQL-OK: -9.4166125E-32
(* -8.540776E-21 3.052019E-11)
EQL-OK: -2.6066613E-31
(* -2.7608417E-21 -6.8345785E-12)
EQL-OK: 1.886919E-32
(* 1.2978333E-21 -2.1870255E-12)
EQL-OK: -2.8383944E-33
(* 8.2235335E-23 -3.5080876E-11)
EQL-OK: -2.8848876E-33
(* -3.958064E-21 8.038726E19)
EQL-OK: -0.3181779
(* 7.752178E-21 1.0747784E19)
EQL-OK: 0.08331874
(* -5.5964265E-21 -8.700492E19)
EQL-OK: 0.48691663
(* 3.2236927E-21 3.6203593E19)
EQL-OK: 0.116709255
(* -6.308517E-21 -3.8032156E19)
EQL-OK: 0.2399265
(* 4.8663387E-21 9.008218E19)
EQL-OK: 0.43837038
(MULTIPLE-VALUE-LIST (FLOOR -0.8227301 -0.25283414))
EQUAL-OK: (3 -0.06422769)
(MULTIPLE-VALUE-LIST (FLOOR -0.6686161 0.4833234))
EQUAL-OK: (-2 0.29803064)
(MULTIPLE-VALUE-LIST (FLOOR -0.57436657 0.52642506))
EQUAL-OK: (-2 0.47848356)
(MULTIPLE-VALUE-LIST (FLOOR 0.60395426 -0.61624163))
EQUAL-OK: (-1 -0.012287392)
(MULTIPLE-VALUE-LIST (FLOOR -0.21636301 0.90365344))
EQUAL-OK: (-1 0.68729043)
(MULTIPLE-VALUE-LIST (FLOOR 0.8705054 -0.7953333))
EQUAL-OK: (-2 -0.72016126)
(MULTIPLE-VALUE-LIST (FLOOR 0.4544462 -9.890925E9))
EQUAL-OK: (-1 -9.890925E9)
(MULTIPLE-VALUE-LIST (FLOOR -0.4954149 -3.8786918E9))
EQUAL-OK: (0 -0.49541488)
(MULTIPLE-VALUE-LIST (FLOOR -0.692049 6.4791506E9))
EQUAL-OK: (-1 6.4791506E9)
(MULTIPLE-VALUE-LIST (FLOOR 0.75464755 -3.618496E9))
EQUAL-OK: (-1 -3.618496E9)
(MULTIPLE-VALUE-LIST (FLOOR -0.5929247 -5.442471E9))
EQUAL-OK: (0 -0.5929247)
(MULTIPLE-VALUE-LIST (FLOOR -0.30383867 9.262864E9))
EQUAL-OK: (-1 9.262864E9)
(MULTIPLE-VALUE-LIST (FLOOR 0.9345329 3.26737E-11))
EQUAL-OK: (28601991168 0.0)
(MULTIPLE-VALUE-LIST (FLOOR 0.3772617 -7.991702E-11))
EQUAL-OK: (-4720667648 0.0)
(MULTIPLE-VALUE-LIST (FLOOR 0.74438447 -1.0977978E-11))
EQUAL-OK: (-67807064064 0.0)
(MULTIPLE-VALUE-LIST (FLOOR -0.9220973 -1.2655998E-11))
EQUAL-OK: (72858525696 0.0)
(MULTIPLE-VALUE-LIST (FLOOR -0.4615329 6.48833E-11))
EQUAL-OK: (-7113276928 0.0)
(MULTIPLE-VALUE-LIST (FLOOR 0.2851941 -8.262349E-11))
EQUAL-OK: (-3451731456 0.0)
(MULTIPLE-VALUE-LIST (FLOOR 0.61539984 3.5826177E19))
EQUAL-OK: (0 0.61539984)
(MULTIPLE-VALUE-LIST (FLOOR -0.8195054 8.793426E19))
EQUAL-OK: (-1 8.793426E19)
(MULTIPLE-VALUE-LIST (FLOOR -0.26412165 7.015103E18))
EQUAL-OK: (-1 7.015103E18)
(MULTIPLE-VALUE-LIST (FLOOR -0.527393 8.434833E19))
EQUAL-OK: (-1 8.434833E19)
(MULTIPLE-VALUE-LIST (FLOOR -0.1846056 1.8252128E19))
EQUAL-OK: (-1 1.8252128E19)
(MULTIPLE-VALUE-LIST (FLOOR -0.6079822 6.106683E19))
EQUAL-OK: (-1 6.106683E19)
(MULTIPLE-VALUE-LIST (FLOOR 0.5564819 5.953872E-21))
EQUAL-OK: (93465542827563810816 0.0)
(MULTIPLE-VALUE-LIST (FLOOR -0.52575815 -1.8358678E-21))
EQUAL-OK: (286381261476583178240 0.0)
(MULTIPLE-VALUE-LIST (FLOOR -0.6321403 -5.830945E-21))
EQUAL-OK: (108411292344853200896 0.0)
(MULTIPLE-VALUE-LIST (FLOOR -0.9675891 -9.936226E-21))
EQUAL-OK: (97379936163841703936 0.0)
(MULTIPLE-VALUE-LIST (FLOOR -0.63503754 -5.0137436E-21))
EQUAL-OK: (126659359065470140416 0.0)
(MULTIPLE-VALUE-LIST (FLOOR 0.8053654 -3.4055888E-22))
EQUAL-OK: (-2364834534832713236480 0.0)
(MULTIPLE-VALUE-LIST (FLOOR 8.784645E9 0.9775517))
EQUAL-OK: (8986374144 0.0)
(MULTIPLE-VALUE-LIST (FLOOR -9.314413E9 -0.8318871))
EQUAL-OK: (11196726272 0.0)
(MULTIPLE-VALUE-LIST (FLOOR 8.4695936E9 -0.9823455))
EQUAL-OK: (-8621807616 0.0)
(MULTIPLE-VALUE-LIST (FLOOR -5.8406625E9 -0.031723082))
EQUAL-OK: (184113971200 0.0)
(MULTIPLE-VALUE-LIST (FLOOR -7.325545E9 0.93169844))
EQUAL-OK: (-7862571008 0.0)
(MULTIPLE-VALUE-LIST (FLOOR -5.2999526E9 0.11515945))
EQUAL-OK: (-46022733824 0.0)
(MULTIPLE-VALUE-LIST (FLOOR 6.680458E9 7.170729E9))
EQUAL-OK: (0 6.680458E9)
(MULTIPLE-VALUE-LIST (FLOOR -2.2146278E9 5.2909993E9))
EQUAL-OK: (-1 3.0763715E9)
(MULTIPLE-VALUE-LIST (FLOOR 6.4947005E9 3.1265188E9))
EQUAL-OK: (2 2.4166298E8)
(MULTIPLE-VALUE-LIST (FLOOR 7.947109E9 2.464481E9))
EQUAL-OK: (3 5.53666E8)
(MULTIPLE-VALUE-LIST (FLOOR 8.899791E9 3.5788132E9))
EQUAL-OK: (2 1.7421644E9)
(MULTIPLE-VALUE-LIST (FLOOR 5.272568E9 -5.3260964E9))
EQUAL-OK: (-1 -5.3528532E7)
(MULTIPLE-VALUE-LIST (FLOOR 9.729838E8 8.6379175E-11))
EQUAL-OK: (11264101901890748416 0.0)
(MULTIPLE-VALUE-LIST (FLOOR 1.210882E9 -4.412428E-11))
EQUAL-OK: (-27442532596777484288 0.0)
(MULTIPLE-VALUE-LIST (FLOOR 9.169561E9 -9.41537E-11))
EQUAL-OK: (-97389277614631288832 0.0)
(MULTIPLE-VALUE-LIST (FLOOR 9.289745E9 3.1269442E-11))
EQUAL-OK: (297087021478284623872 0.0)
(MULTIPLE-VALUE-LIST (FLOOR -5.334722E9 2.0158666E-11))
EQUAL-OK: (-264636651022615314432 0.0)
(MULTIPLE-VALUE-LIST (FLOOR 9.910798E9 -2.985589E-11))
EQUAL-OK: (-331954558296456691712 0.0)
(MULTIPLE-VALUE-LIST (FLOOR -1.7169357E9 2.220112E19))
EQUAL-OK: (-1 2.220112E19)
(MULTIPLE-VALUE-LIST (FLOOR 4.9906683E9 6.857979E19))
EQUAL-OK: (0 4.9906683E9)
(MULTIPLE-VALUE-LIST (FLOOR -9.90463E9 -2.342953E19))
EQUAL-OK: (0 -9.90463E9)
(MULTIPLE-VALUE-LIST (FLOOR -5.4878054E8 5.438576E19))
EQUAL-OK: (-1 5.438576E19)
(MULTIPLE-VALUE-LIST (FLOOR -6.1080986E9 9.25119E19))
EQUAL-OK: (-1 9.25119E19)
(MULTIPLE-VALUE-LIST (FLOOR -8.4138286E9 -9.682224E19))
EQUAL-OK: (0 -8.4138286E9)
(MULTIPLE-VALUE-LIST (FLOOR 2.7084977E9 2.542436E-23))
EQUAL-OK: (106531597407755826831748572905472 0.0)
(MULTIPLE-VALUE-LIST (FLOOR -5.720767E9 9.438407E-21))
EQUAL-OK: (-606115738076318963177881600000 0.0)
(MULTIPLE-VALUE-LIST (FLOOR -3.4958034E9 9.250327E-21))
EQUAL-OK: (-377911344579488968728001904640 0.0)
(MULTIPLE-VALUE-LIST (FLOOR -8.3702047E9 6.0186186E-21))
EQUAL-OK: (-1390718493086361392338557730816 0.0)
(MULTIPLE-VALUE-LIST (FLOOR -7.517619E9 -9.417701E-21))
EQUAL-OK: (798243593937800371539149848576 0.0)
(MULTIPLE-VALUE-LIST (FLOOR -2.1220838E9 3.931208E-21))
EQUAL-OK: (-539804494597454582830132625408 0.0)
(MULTIPLE-VALUE-LIST (FLOOR -3.9606828E-11 0.34267086))
EQUAL-OK: (-1 0.34267086)
(MULTIPLE-VALUE-LIST (FLOOR 2.495503E-11 -0.4518087))
EQUAL-OK: (-1 -0.4518087)
(MULTIPLE-VALUE-LIST (FLOOR -7.98698E-11 -0.5665642))
EQUAL-OK: (0 -7.98698E-11)
(MULTIPLE-VALUE-LIST (FLOOR 2.1465689E-11 0.17276591))
EQUAL-OK: (0 2.146569E-11)
(MULTIPLE-VALUE-LIST (FLOOR 4.9463066E-11 -0.5659616))
EQUAL-OK: (-1 -0.5659616)
(MULTIPLE-VALUE-LIST (FLOOR -1.8961567E-11 -0.7758364))
EQUAL-OK: (0 -1.8961567E-11)
(MULTIPLE-VALUE-LIST (FLOOR 7.8871874E-11 -5.768549E9))
EQUAL-OK: (-1 -5.768549E9)
(MULTIPLE-VALUE-LIST (FLOOR -9.079439E-11 -3.807195E9))
EQUAL-OK: (0 -9.079439E-11)
(MULTIPLE-VALUE-LIST (FLOOR 7.879919E-12 -1.9198149E9))
EQUAL-OK: (-1 -1.9198149E9)
(MULTIPLE-VALUE-LIST (FLOOR 4.389072E-11 -8.657572E9))
EQUAL-OK: (-1 -8.657572E9)
(MULTIPLE-VALUE-LIST (FLOOR 7.430157E-11 -3.8599355E9))
EQUAL-OK: (-1 -3.8599355E9)
(MULTIPLE-VALUE-LIST (FLOOR -5.8839114E-11 -5.3409536E9))
EQUAL-OK: (0 -5.8839114E-11)
(MULTIPLE-VALUE-LIST (FLOOR -3.3353615E-11 8.9096924E-11))
EQUAL-OK: (-1 5.574331E-11)
(MULTIPLE-VALUE-LIST (FLOOR 6.335122E-11 3.606541E-11))
EQUAL-OK: (1 2.7285809E-11)
(MULTIPLE-VALUE-LIST (FLOOR -5.6885465E-11 7.070333E-12))
EQUAL-OK: (-9 6.7475353E-12)
(MULTIPLE-VALUE-LIST (FLOOR -7.581576E-11 -3.4334775E-11))
EQUAL-OK: (2 -7.1462155E-12)
(MULTIPLE-VALUE-LIST (FLOOR 3.6686505E-11 -1.9221425E-11))
EQUAL-OK: (-2 -1.7563462E-12)
(MULTIPLE-VALUE-LIST (FLOOR 3.066395E-11 -2.3198866E-11))
EQUAL-OK: (-2 -1.573378E-11)
(MULTIPLE-VALUE-LIST (FLOOR 9.1089344E-11 7.429058E19))
EQUAL-OK: (0 9.1089344E-11)
(MULTIPLE-VALUE-LIST (FLOOR -7.2265194E-11 -6.5831596E19))
EQUAL-OK: (0 -7.2265194E-11)
(MULTIPLE-VALUE-LIST (FLOOR -4.9087675E-11 1.9182038E19))
EQUAL-OK: (-1 1.9182038E19)
(MULTIPLE-VALUE-LIST (FLOOR -7.907188E-11 4.405831E19))
EQUAL-OK: (-1 4.405831E19)
(MULTIPLE-VALUE-LIST (FLOOR 6.118759E-11 3.4342181E19))
EQUAL-OK: (0 6.118759E-11)
(MULTIPLE-VALUE-LIST (FLOOR 5.4731882E-11 -5.861447E19))
EQUAL-OK: (-1 -5.861447E19)
(MULTIPLE-VALUE-LIST (FLOOR 6.121101E-11 -1.8234462E-21))
EQUAL-OK: (-33568860160 0.0)
(MULTIPLE-VALUE-LIST (FLOOR 9.788758E-11 -2.65478E-21))
EQUAL-OK: (-36872200192 0.0)
(MULTIPLE-VALUE-LIST (FLOOR 7.827001E-11 -8.5754775E-21))
EQUAL-OK: (-9127189504 0.0)
(MULTIPLE-VALUE-LIST (FLOOR -3.738018E-11 -7.810784E-21))
EQUAL-OK: (4785714176 0.0)
(MULTIPLE-VALUE-LIST (FLOOR 7.31308E-11 -2.0431058E-21))
EQUAL-OK: (-35793936384 0.0)
(MULTIPLE-VALUE-LIST (FLOOR 9.4578095E-11 -3.0466443E-21))
EQUAL-OK: (-31043366912 0.0)
(MULTIPLE-VALUE-LIST (FLOOR -4.8186137E19 -0.95250696))
EQUAL-OK: (50588749896299315200 0.0)
(MULTIPLE-VALUE-LIST (FLOOR 9.548003E18 -0.9061317))
EQUAL-OK: (-10537102614582001664 0.0)
(MULTIPLE-VALUE-LIST (FLOOR 5.5254813E19 0.51959753))
EQUAL-OK: (106341562860634636288 0.0)
(MULTIPLE-VALUE-LIST (FLOOR -4.2787504E19 0.14769173))
EQUAL-OK: (-289708190148186865664 0.0)
(MULTIPLE-VALUE-LIST (FLOOR -4.27109E17 -0.03677529))
EQUAL-OK: (11614021477430460416 0.0)
(MULTIPLE-VALUE-LIST (FLOOR -3.9238043E19 0.26663417))
EQUAL-OK: (-147160597790283792384 0.0)
(MULTIPLE-VALUE-LIST (FLOOR -2.0174873E19 -6.7035556E7))
EQUAL-OK: (300957794304 0.0)
(MULTIPLE-VALUE-LIST (FLOOR 1.6296811E19 -7.2014956E9))
EQUAL-OK: (-2262976000 0.0)
(MULTIPLE-VALUE-LIST (FLOOR 7.794499E19 -7.412829E9))
EQUAL-OK: (-10514876416 0.0)
(MULTIPLE-VALUE-LIST (FLOOR -1.2546485E19 6.1565005E9))
EQUAL-OK: (-2037924864 0.0)
(MULTIPLE-VALUE-LIST (FLOOR 5.4549757E18 -4.778849E9))
EQUAL-OK: (-1141483264 0.0)
(MULTIPLE-VALUE-LIST (FLOOR -8.9214324E18 3.0002557E9))
EQUAL-OK: (-2973557248 0.0)
(MULTIPLE-VALUE-LIST (FLOOR 8.790958E19 -8.224902E-11))
EQUAL-OK: (-1068822197453670185020302557184 0.0)
(MULTIPLE-VALUE-LIST (FLOOR 9.029222E18 1.3127345E-11))
EQUAL-OK: (687817816164697187548814901248 0.0)
(MULTIPLE-VALUE-LIST (FLOOR 6.7356843E19 -9.1816894E-11))
EQUAL-OK: (-733599685837775742566290948096 0.0)
(MULTIPLE-VALUE-LIST (FLOOR 4.0346153E19 2.0593792E-11))
EQUAL-OK: (1959141510822234462049892564992 0.0)
(MULTIPLE-VALUE-LIST (FLOOR 1.3402778E19 -4.8733902E-11))
EQUAL-OK: (-275019611403690085233016700928 0.0)
(MULTIPLE-VALUE-LIST (FLOOR -1.3005549E19 5.6579824E-11))
EQUAL-OK: (-229861963021783171398467846144 0.0)
(MULTIPLE-VALUE-LIST (FLOOR 8.550302E19 6.4624324E19))
EQUAL-OK: (1 2.0878699E19)
(MULTIPLE-VALUE-LIST (FLOOR 4.7897585E19 -1.5724218E19))
EQUAL-OK: (-4 -1.4999288E19)
(MULTIPLE-VALUE-LIST (FLOOR -8.6050445E19 1.4007867E19))
EQUAL-OK: (-7 1.2004627E19)
(MULTIPLE-VALUE-LIST (FLOOR -6.0799387E19 -5.667626E19))
EQUAL-OK: (1 -4.1231221E18)
(MULTIPLE-VALUE-LIST (FLOOR -7.847746E19 -3.972193E19))
EQUAL-OK: (1 -3.875553E19)
(MULTIPLE-VALUE-LIST (FLOOR -6.425414E19 3.0601436E19))
EQUAL-OK: (-3 2.7550168E19)
(MULTIPLE-VALUE-LIST (FLOOR 2.8220074E-21 -0.9401483))
EQUAL-OK: (-1 -0.9401483)
(MULTIPLE-VALUE-LIST (FLOOR 9.867747E-21 0.86288685))
EQUAL-OK: (0 9.867747E-21)
(MULTIPLE-VALUE-LIST (FLOOR 6.2856053E-21 -0.5235996))
EQUAL-OK: (-1 -0.5235996)
(MULTIPLE-VALUE-LIST (FLOOR 8.709991E-22 0.42678982))
EQUAL-OK: (0 8.709991E-22)
(MULTIPLE-VALUE-LIST (FLOOR 1.0493481E-21 0.9355661))
EQUAL-OK: (0 1.0493481E-21)
(MULTIPLE-VALUE-LIST (FLOOR -6.137466E-21 0.4328317))
EQUAL-OK: (-1 0.4328317)
(MULTIPLE-VALUE-LIST (FLOOR 6.5872774E-21 -8.80464E9))
EQUAL-OK: (-1 -8.80464E9)
(MULTIPLE-VALUE-LIST (FLOOR -1.0479629E-22 -9.353607E9))
EQUAL-OK: (0 -1.0479629E-22)
(MULTIPLE-VALUE-LIST (FLOOR -2.636932E-21 9.794678E9))
EQUAL-OK: (-1 9.794678E9)
(MULTIPLE-VALUE-LIST (FLOOR -7.912024E-21 -2.9102356E9))
EQUAL-OK: (0 -7.912024E-21)
(MULTIPLE-VALUE-LIST (FLOOR 1.0071349E-21 8.762459E9))
EQUAL-OK: (0 1.0071349E-21)
(MULTIPLE-VALUE-LIST (FLOOR -6.795979E-21 -9.445545E9))
EQUAL-OK: (0 -6.795979E-21)
(MULTIPLE-VALUE-LIST (FLOOR 6.0598967E-22 -3.961637E-11))
EQUAL-OK: (-1 -3.961637E-11)
(MULTIPLE-VALUE-LIST (FLOOR 3.481348E-21 -7.485006E-11))
EQUAL-OK: (-1 -7.485006E-11)
(MULTIPLE-VALUE-LIST (FLOOR -5.610974E-21 -4.073898E-11))
EQUAL-OK: (0 -5.610974E-21)
(MULTIPLE-VALUE-LIST (FLOOR -6.2362584E-21 8.403202E-11))
EQUAL-OK: (-1 8.403202E-11)
(MULTIPLE-VALUE-LIST (FLOOR 4.2029927E-21 7.823452E-11))
EQUAL-OK: (0 4.2029927E-21)
(MULTIPLE-VALUE-LIST (FLOOR -7.765272E-21 -8.502908E-11))
EQUAL-OK: (0 -7.765272E-21)
(MULTIPLE-VALUE-LIST (FLOOR 2.7845436E-21 3.490416E-21))
EQUAL-OK: (0 2.7845436E-21)
(MULTIPLE-VALUE-LIST (FLOOR -1.4630091E-21 9.193901E-21))
EQUAL-OK: (-1 7.730892E-21)
(MULTIPLE-VALUE-LIST (FLOOR -8.1823826E-21 8.941324E-21))
EQUAL-OK: (-1 7.5894165E-22)
(MULTIPLE-VALUE-LIST (FLOOR -1.8218875E-21 3.8057304E-21))
EQUAL-OK: (-1 1.9838427E-21)
(MULTIPLE-VALUE-LIST (FLOOR 5.8037763E-21 -5.1721612E-21))
EQUAL-OK: (-2 -4.5405462E-21)
(MULTIPLE-VALUE-LIST (FLOOR -8.179982E-21 6.2204556E-21))
EQUAL-OK: (-2 4.2609293E-21)
(/ 0.73739415 0.6416277)
EQL-OK: 1.1492554
(/ 0.6736158 -0.25522494)
EQL-OK: -2.6393025
(/ -0.44216943 0.31134832)
EQL-OK: -1.420176
(/ -0.7041118 -0.26929635)
EQL-OK: 2.6146355
(/ 0.3573562 0.73521775)
EQL-OK: 0.4860549
(/ -0.7661392 0.77110463)
EQL-OK: -0.9935606
(/ -0.91306114 1.6586358E9)
EQL-OK: -5.504892E-10
(/ -0.68994707 4.0230333E8)
EQL-OK: -1.7149921E-9
(/ 0.28498656 -7.617844E9)
EQL-OK: -3.7410394E-11
(/ -0.72419757 -9.226896E9)
EQL-OK: 7.848767E-11
(/ 0.8352187 8.3102536E9)
EQL-OK: 1.00504605E-10
(/ 0.9707725 3.3669448E9)
EQL-OK: 2.8832445E-10
(/ 0.50785017 6.048824E-11)
EQL-OK: 8.3958497E9
(/ -0.17675805 4.1391092E-11)
EQL-OK: -4.270437E9
(/ -0.42162335 -4.4007357E-11)
EQL-OK: 9.580747E9
(/ -7.945299E-4 -5.4965265E-11)
EQL-OK: 1.4455128E7
(/ -0.65178335 -9.78151E-12)
EQL-OK: 6.6634228E10
(/ -0.6209788 -3.8544803E-11)
EQL-OK: 1.611057E10
(/ 0.94332725 -4.9823833E19)
EQL-OK: -1.8933253E-20
(/ 0.30150706 -4.9741757E19)
EQL-OK: -6.061448E-21
(/ -0.8478371 -9.85865E18)
EQL-OK: 8.5999306E-20
(/ -0.28524554 3.1389898E19)
EQL-OK: -9.087176E-21
(/ -0.5260848 -7.936286E19)
EQL-OK: 6.6288534E-21
(/ -0.12941593 -5.3575864E19)
EQL-OK: 2.415564E-21
(/ -0.20859545 -9.867267E-21)
EQL-OK: 2.1140145E19
(/ 0.35158414 -8.2825064E-22)
EQL-OK: -4.2449002E20
(/ -0.05635804 -2.2999601E-21)
EQL-OK: 2.450392E19
(/ -0.003138721 -3.3988403E-21)
EQL-OK: 9.234682E17
(/ -0.91386896 -5.8199337E-21)
EQL-OK: 1.5702395E20
(/ -0.5374476 2.256708E-21)
EQL-OK: -2.3815556E20
(/ 1.9669795E9 -0.58137333)
EQL-OK: -3.3833329E9
(/ -8.9879334E8 0.35829848)
EQL-OK: -2.5085046E9
(/ -9.057627E9 0.4849478)
EQL-OK: -1.867753E10
(/ 3.687799E8 -0.34055912)
EQL-OK: -1.082866E9
(/ -5.1049994E9 -0.16858816)
EQL-OK: 3.0280888E10
(/ -4.512774E9 0.9385354)
EQL-OK: -4.8083154E9
(/ -1.9312024E9 -8.3940613E9)
EQL-OK: 0.2300677
(/ -8.2104387E9 6.769607E9)
EQL-OK: -1.2128383
(/ -6.9613486E9 4.576518E9)
EQL-OK: -1.5211015
(/ -1.486333E9 1.2476433E9)
EQL-OK: -1.1913126
(/ -7.653413E9 5.167656E9)
EQL-OK: -1.4810221
(/ -2.9815204E9 8.942396E9)
EQL-OK: -0.33341402
(/ 9.304549E9 -5.8002263E-11)
EQL-OK: -1.60417E20
(/ -2.0750719E9 1.272735E-11)
EQL-OK: -1.6304037E20
(/ -1.1557549E9 -7.2220556E-11)
EQL-OK: 1.6003129E19
(/ -3.3273495E9 -9.9207274E-11)
EQL-OK: 3.353937E19
(/ -3.2167434E9 7.7474506E-11)
EQL-OK: -4.1520026E19
(/ 4.4169416E9 -4.638272E-11)
EQL-OK: -9.5228166E19
(/ -3.732909E9 -2.2763849E18)
EQL-OK: 1.6398409E-9
(/ -6.243126E9 -4.1274483E19)
EQL-OK: 1.5125873E-10
(/ 4.7162563E9 -7.524631E19)
EQL-OK: -6.267758E-11
(/ -1.3657349E9 7.728982E19)
EQL-OK: -1.7670308E-11
(/ -4.6216906E8 -7.972877E19)
EQL-OK: 5.7967663E-12
(/ 4.4542986E9 3.1531836E19)
EQL-OK: 1.4126353E-10
(/ 1.4738977E9 -9.8130876E-21)
EQL-OK: -1.5019714E29
(/ -5.918336E9 2.9877495E-21)
EQL-OK: -1.9808676E30
(/ -3.7166292E9 -1.0826009E-21)
EQL-OK: 3.433056E30
(/ 7.390683E9 -2.1678685E-22)
EQL-OK: -3.4091935E31
(/ 6.2302886E8 8.9466635E-21)
EQL-OK: 6.963812E28
(/ 5.2357125E9 4.854464E-22)
EQL-OK: 1.0785356E31
(/ -2.7721167E-11 0.99550104)
EQL-OK: -2.7846447E-11
(/ 5.754337E-11 -0.6344538)
EQL-OK: -9.06975E-11
(/ -7.663363E-11 0.020810604)
EQL-OK: -3.6824317E-9
(/ 3.2576632E-11 0.6209498)
EQL-OK: 5.2462586E-11
(/ -9.507874E-11 -0.19174337)
EQL-OK: 4.958645E-10
(/ -9.681176E-11 -0.82680905)
EQL-OK: 1.1709084E-10
(/ 6.458532E-11 3.442031E8)
EQL-OK: 1.8763725E-19
(/ 1.9113166E-11 -7.0712125E9)
EQL-OK: -2.7029546E-21
(/ -2.0099402E-12 2.600844E9)
EQL-OK: -7.7280303E-22
(/ -4.9634992E-12 8.041176E9)
EQL-OK: -6.1726036E-22
(/ 3.2738747E-12 7.299675E9)
EQL-OK: 4.484959E-22
(/ 9.133733E-12 -2.6318538E9)
EQL-OK: -3.470456E-21
(/ -3.4146054E-11 -1.5331155E-11)
EQL-OK: 2.227233
(/ 6.06336E-11 4.3750472E-11)
EQL-OK: 1.385896
(/ -4.229064E-11 -9.169808E-11)
EQL-OK: 0.4611944
(/ 6.166104E-11 -3.5474658E-11)
EQL-OK: -1.7381715
(/ -3.979801E-11 -1.9510412E-11)
EQL-OK: 2.0398343
(/ 9.726933E-11 -5.6926824E-11)
EQL-OK: -1.7086731
(/ 8.041786E-11 2.3718388E19)
EQL-OK: 3.3905282E-30
(/ -6.747094E-11 -6.7324465E19)
EQL-OK: 1.0021756E-30
(/ -3.0713255E-11 -4.8310887E19)
EQL-OK: 6.357419E-31
(/ -2.8496396E-11 -4.9017306E19)
EQL-OK: 5.813538E-31
(/ -9.354275E-12 -9.035095E19)
EQL-OK: 1.0353266E-31
(/ 4.9274265E-12 7.241873E19)
EQL-OK: 6.8040775E-32
(/ -4.377009E-11 7.138917E-21)
EQL-OK: -6.131195E9
(/ 9.422678E-12 -5.8862136E-21)
EQL-OK: -1.6008046E9
(/ -6.83782E-11 -3.6098812E-21)
EQL-OK: 1.8941952E10
(/ -8.1755075E-11 -6.8725736E-21)
EQL-OK: 1.1895846E10
(/ -6.360949E-11 4.2976342E-21)
EQL-OK: -1.4801049E10
(/ 3.3879413E-11 -1.7169743E-21)
EQL-OK: -1.9732044E10
(/ -9.948093E18 -0.8695114)
EQL-OK: 1.1441014E19
(/ 6.2748975E19 -0.94829553)
EQL-OK: -6.6170272E19
(/ -6.204444E18 0.6874813)
EQL-OK: -9.0248915E18
(/ 6.7599936E19 -0.45808762)
EQL-OK: -1.4756988E20
(/ 7.624068E19 0.008471012)
EQL-OK: 9.0001855E21
(/ 8.342225E19 -0.3031574)
EQL-OK: -2.7517803E20
(/ -6.3366795E19 -1.4882481E9)
EQL-OK: 4.2578113E10
(/ -1.7335874E19 -7.42875E9)
EQL-OK: 2.3336195E9
(/ -8.662651E19 1.0327226E9)
EQL-OK: -8.388168E10
(/ -4.9590965E19 8.334462E9)
EQL-OK: -5.95011E9
(/ 8.191562E18 5.930472E9)
EQL-OK: 1.3812664E9
(/ -3.5910857E19 -7.342098E9)
EQL-OK: 4.8910894E9
(/ -3.6083056E19 5.7372277E-11)
EQL-OK: -6.2892843E29
(/ 2.2896613E19 -4.541202E-11)
EQL-OK: -5.0419717E29
(/ 6.1438805E19 8.512014E-11)
EQL-OK: 7.217893E29
(/ 6.3211746E19 -6.185377E-12)
EQL-OK: -1.0219547E31
(/ 4.5452835E18 2.0429606E-11)
EQL-OK: 2.2248514E29
(/ 9.226608E19 1.3297486E-11)
EQL-OK: 6.9386104E30
(/ 1.8852943E19 -1.623413E19)
EQL-OK: -1.1613153
(/ -3.117305E18 -9.5760065E19)
EQL-OK: 0.03255329
(/ -7.719376E19 3.3627052E19)
EQL-OK: -2.295585
(/ 3.1309093E19 -7.820006E19)
EQL-OK: -0.4003717
(/ 3.941958E19 -9.51598E19)
EQL-OK: -0.41424614
(/ -3.6364467E19 -1.0757047E19)
EQL-OK: 3.380525
(/ 2.906561E17 -8.595159E-21)
EQL-OK: -3.3816258E37
(/ -7.826226E-21 -0.21695328)
EQL-OK: 3.6073327E-20
(/ -1.888169E-21 0.5031878)
EQL-OK: -3.7524144E-21
(/ 8.304594E-21 -0.3528648)
EQL-OK: -2.3534775E-20
(/ -8.441606E-21 -0.3639353)
EQL-OK: 2.3195348E-20
(/ -7.815205E-21 0.38263506)
EQL-OK: -2.0424697E-20
(/ -3.2837188E-21 0.46961308)
EQL-OK: -6.992392E-21
(/ -5.1739832E-21 -3.8917279E9)
EQL-OK: 1.3294822E-30
(/ -5.3318596E-21 -7.1995423E9)
EQL-OK: 7.405831E-31
(/ -7.4979364E-22 9.148773E9)
EQL-OK: -8.195565E-32
(/ 4.6800053E-21 3.9532006E8)
EQL-OK: 1.1838522E-29
(/ 4.914653E-22 -2.414465E9)
EQL-OK: -2.035504E-31
(/ 5.4722133E-21 -9.977777E9)
EQL-OK: -5.484401E-31
(/ 9.815656E-21 6.059642E-11)
EQL-OK: 1.619841E-10
(/ 7.660357E-21 9.7074675E-11)
EQL-OK: 7.891201E-11
(/ 9.77743E-21 2.5170428E-11)
EQL-OK: 3.8844908E-10
(/ 8.818017E-21 1.18070545E-11)
EQL-OK: 7.468431E-10
(/ 5.445426E-21 9.6208916E-11)
EQL-OK: 5.6600016E-11
(/ 4.6823916E-21 -1.9853067E-11)
EQL-OK: -2.358523E-10
(/ 9.347429E-21 -7.285392E-22)
EQL-OK: -12.830372
(/ -7.304412E-21 6.766496E-21)
EQL-OK: -1.079497
(/ -2.6850204E-21 6.894023E-21)
EQL-OK: -0.38947076
(/ -2.24644E-21 -9.533858E-21)
EQL-OK: 0.23562758
(/ -8.525939E-21 -9.961187E-22)
EQL-OK: 8.559159
(/ 8.145676E-21 4.304153E-22)
EQL-OK: 18.925154
(+ 0.6049332056786565d0 -0.9611373574853808d0)
EQL-OK: -0.35620415180672427d0
(+ -0.4763715667865308d0 0.25936932107685584d0)
EQL-OK: -0.21700224570967497d0
(+ 0.2666481927718355d0 -0.04984768063142031d0)
EQL-OK: 0.21680051214041518d0
(+ -0.29478659758474846d0 0.3371004337672615d0)
EQL-OK: 0.042313836182513054d0
(+ 0.8203063910979178d0 0.28968607542857916d0)
EQL-OK: 1.109992466526497d0
(+ -0.08207985138263585d0 0.4368723951711785d0)
EQL-OK: 0.35479254378854264d0
(+ -0.8659875373355486d0 -6.631430771196765d9)
EQL-OK: -6.631430772062753d9
(+ 0.15071385783307878d0 -7.154424279496395d9)
EQL-OK: -7.154424279345681d9
(+ -0.8969642760814789d0 -2.4070067380831727d8)
EQL-OK: -2.4070067470528156d8
(+ -0.9610362081435054d0 9.070410778399954d9)
EQL-OK: 9.070410777438917d9
(+ 0.5129052501104072d0 -7.47841120327471d9)
EQL-OK: -7.478411202761805d9
(+ 0.3840242289740675d0 7.793048210060242d9)
EQL-OK: 7.793048210444266d9
(+ 0.07603066126204616d0 5.215008470388369d-11)
EQL-OK: 0.07603066131419625d0
(+ -0.17187858025312586d0 -5.116645189173968d-11)
EQL-OK: -0.17187858030429232d0
(+ 0.2521315816245864d0 8.603210607505339d-11)
EQL-OK: 0.2521315817106185d0
(+ -0.3557185853193914d0 -2.0371324697272998d-11)
EQL-OK: -0.3557185853397627d0
(+ 0.7142792289542045d0 -7.106356053331326d-11)
EQL-OK: 0.7142792288831409d0
(+ 0.4380415886629452d0 -3.069969538383403d-11)
EQL-OK: 0.43804158863224546d0
(+ 0.24798614227178573d0 3.972393639614975d19)
EQL-OK: 3.972393639614975d19
(+ -0.5210677288128815d0 4.846393336901129d19)
EQL-OK: 4.846393336901129d19
(+ 0.5825404819115d0 1.9710987361264255d19)
EQL-OK: 1.9710987361264255d19
(+ 0.9105175208730549d0 2.391166552096775d19)
EQL-OK: 2.391166552096775d19
(+ 0.48414423368371695d0 -9.696117779740095d19)
EQL-OK: -9.696117779740095d19
(+ 0.25780758450697716d0 6.094683117025535d19)
EQL-OK: 6.094683117025535d19
(+ 0.9824539149570484d0 -5.4680066990812835d-21)
EQL-OK: 0.9824539149570484d0
(+ -0.9520982941158654d0 3.2513564801568073d-21)
EQL-OK: -0.9520982941158654d0
(+ 0.0630170624560149d0 -9.858852595793203d-21)
EQL-OK: 0.0630170624560149d0
(+ 0.24705141169888878d0 1.4582081178692862d-22)
EQL-OK: 0.24705141169888878d0
(+ 0.7440948700757135d0 -3.0932442581890818d-21)
EQL-OK: 0.7440948700757135d0
(+ -0.5055970869515372d0 4.0277457257516025d-21)
EQL-OK: -0.5055970869515372d0
(+ 1.672355787134947d9 0.0064909681594120805d0)
EQL-OK: 1.672355787141438d9
(+ -9.694504381396599d9 -0.8925470085542831d0)
EQL-OK: -9.694504382289146d9
(+ -1.6695005924298635d9 -0.34426964741306d0)
EQL-OK: -1.6695005927741332d9
(+ -6.085591212594774d9 0.5107956920100049d0)
EQL-OK: -6.085591212083979d9
(+ 7.457486660952688d9 -0.4323787588338597d0)
EQL-OK: 7.457486660520309d9
(+ -8.790796444526546d9 0.911415263281967d0)
EQL-OK: -8.790796443615131d9
(+ 9.667548804251982d9 -1.266547751029956d8)
EQL-OK: 9.540894029148987d9
(+ -6.169561898845145d9 9.627911197121864d9)
EQL-OK: 3.458349298276719d9
(+ -9.870287253215279d9 9.004242781937655d8)
EQL-OK: -8.969862975021513d9
(+ -8.175630881172554d9 -4.08632236263908d9)
EQL-OK: -1.2261953243811634d10
(+ 2.9069444232153206d9 -7.961831315741894d9)
EQL-OK: -5.054886892526573d9
(+ -7.003647401371184d9 -1.768371514817526d9)
EQL-OK: -8.772018916188711d9
(+ -6.418847599138249d9 2.755257250162372d-11)
EQL-OK: -6.418847599138249d9
(+ 2.3093152687241793d9 1.2205440142364766d-11)
EQL-OK: 2.3093152687241793d9
(+ 8.634577667577518d9 -9.065714034538668d-11)
EQL-OK: 8.634577667577518d9
(+ 1.711283212591781d9 -3.235019197733951d-11)
EQL-OK: 1.711283212591781d9
(+ 2.583886638357791d9 -8.199109798920928d-11)
EQL-OK: 2.583886638357791d9
(+ -7.517123950474774d9 5.2057802142431697d-11)
EQL-OK: -7.517123950474774d9
(+ 3.266571938086574d9 -4.4782768261898355d19)
EQL-OK: -4.478276825863179d19
(+ 2.1000389219899452d9 -8.547158903365463d19)
EQL-OK: -8.54715890315546d19
(+ -3.9140926801217155d9 7.387959860641422d19)
EQL-OK: 7.387959860250013d19
(+ -7.087607465790431d9 7.96875093387599d19)
EQL-OK: 7.96875093316723d19
(+ -8.341000808926519d9 6.9360028397637304d19)
EQL-OK: 6.93600283892963d19
(+ -5.507940634743809d9 9.760028858210094d19)
EQL-OK: 9.7600288576593d19
(+ 8.492522971238823d9 -2.8253881864964467d-22)
EQL-OK: 8.492522971238823d9
(+ 1.2731765723336241d9 -5.8473937102910264d-21)
EQL-OK: 1.2731765723336241d9
(+ 9.654280758878323d9 -4.2332114049658973d-22)
EQL-OK: 9.654280758878323d9
(+ -6.864618926120946d9 -1.245648314796599d-21)
EQL-OK: -6.864618926120946d9
(+ -3.9916044043798673d8 1.697737588450543d-21)
EQL-OK: -3.9916044043798673d8
(+ -7.818041624198686d9 4.635421587404246d-21)
EQL-OK: -7.818041624198686d9
(+ 2.0609929543990767d-12 -0.2126306554359736d0)
EQL-OK: -0.2126306554339126d0
(+ -1.5923091695877845d-11 0.515731533720818d0)
EQL-OK: 0.515731533704895d0
(+ 4.794527092905871d-11 -0.9066947202676092d0)
EQL-OK: -0.9066947202196639d0
(+ -8.63854477728633d-11 0.3122982022565777d0)
EQL-OK: 0.3122982021701922d0
(+ -7.577966666552416d-11 -0.24137602092437593d0)
EQL-OK: -0.2413760210001556d0
(+ -4.971730475882754d-11 -0.8202688719750202d0)
EQL-OK: -0.8202688720247375d0
(+ -5.249369194379291d-11 -8.546120620321186d9)
EQL-OK: -8.546120620321186d9
(+ 8.280786962526793d-11 5.758373397436368d9)
EQL-OK: 5.758373397436368d9
(+ 6.370323595535815d-11 -8.470663335712393d9)
EQL-OK: -8.470663335712393d9
(+ 3.59771226839467d-11 3.5042505440266216d8)
EQL-OK: 3.5042505440266216d8
(+ -3.945501687396375d-11 -5.082779978069177d9)
EQL-OK: -5.082779978069177d9
(+ 9.780590963267516d-11 -5.05591945120475d9)
EQL-OK: -5.05591945120475d9
(+ 6.323293597096768d-11 -7.208898910487284d-11)
EQL-OK: -8.85605313390516d-12
(+ -4.549781732354749d-11 -6.095452636416357d-11)
EQL-OK: -1.0645234368771105d-10
(+ -5.372680267837374d-11 2.0748354219485134d-11)
EQL-OK: -3.297844845888861d-11
(+ 3.550879553916665d-11 -4.374873254056574d-11)
EQL-OK: -8.23993700139909d-12
(+ -6.746002242414832d-11 3.0803985031459436d-11)
EQL-OK: -3.665603739268888d-11
(+ -7.902512161494214d-11 -8.907842858073236d-11)
EQL-OK: -1.681035501956745d-10
(+ -4.1465935469350415d-11 6.244210696961323d19)
EQL-OK: 6.244210696961323d19
(+ 4.921297536286578d-11 -1.694436650099881d19)
EQL-OK: -1.694436650099881d19
(+ -7.879478980672654d-11 6.41757969360492d19)
EQL-OK: 6.41757969360492d19
(+ -8.200749317872953d-11 -9.490225542618815d19)
EQL-OK: -9.490225542618815d19
(+ -7.572981329795812d-11 -3.350367078181029d19)
EQL-OK: -3.350367078181029d19
(+ -5.955255565125549d-11 -5.009913629288125d19)
EQL-OK: -5.009913629288125d19
(+ -9.818180775332558d-11 -7.926156011681593d-21)
EQL-OK: -9.818180776125174d-11
(+ -5.2466438379505935d-12 8.468830229031857d-21)
EQL-OK: -5.246643829481763d-12
(+ 3.582774358441715d-11 3.6865211729351863d-22)
EQL-OK: 3.58277435847858d-11
(+ 7.169296413565744d-11 -9.974881413980864d-21)
EQL-OK: 7.169296412568256d-11
(+ -9.615073655516977d-11 4.9552491300097786d-21)
EQL-OK: -9.615073655021452d-11
(+ 6.7696956269187d-11 4.1431488006404866d-21)
EQL-OK: 6.769695627333016d-11
(+ -4.663397365185298d19 0.9758464195927673d0)
EQL-OK: -4.663397365185298d19
(+ -4.77977261393851d19 0.04145189313162445d0)
EQL-OK: -4.77977261393851d19
(+ 7.195364554121596d19 0.5169917736820715d0)
EQL-OK: 7.195364554121596d19
(+ -7.766254779507882d19 0.5919134938460356d0)
EQL-OK: -7.766254779507882d19
(+ -8.411122653901408d19 -0.14463225181516137d0)
EQL-OK: -8.411122653901408d19
(+ -9.101920591747218d19 0.23349918704239836d0)
EQL-OK: -9.101920591747218d19
(+ 7.037477746142529d18 -3.250947575909365d9)
EQL-OK: 7.037477742891581d18
(+ -6.864341752972099d19 -4.0510449339565725d9)
EQL-OK: -6.864341753377203d19
(+ -5.329540273290228d19 8.14869777458878d9)
EQL-OK: -5.329540272475358d19
(+ -9.726234388247201d19 2.053976989398215d9)
EQL-OK: -9.726234388041803d19
(+ -1.910324088450308d19 6.247052535748024d9)
EQL-OK: -1.910324087825603d19
(+ -6.079933001949367d18 6.316829148809886d9)
EQL-OK: -6.079932995632539d18
(+ -4.499107911798452d19 9.659763881732633d-11)
EQL-OK: -4.499107911798452d19
(+ -3.0972208018542522d19 -9.077209886078653d-11)
EQL-OK: -3.0972208018542522d19
(+ -2.3000547840875442d19 -3.2043634522621155d-11)
EQL-OK: -2.3000547840875442d19
(+ 2.124555308489292d19 2.252166800652451d-11)
EQL-OK: 2.124555308489292d19
(+ -7.74280238703686d19 1.7289553748884322d-11)
EQL-OK: -7.74280238703686d19
(+ -8.119446783121816d19 -4.3461802389685114d-11)
EQL-OK: -8.119446783121816d19
(+ -4.70848534032654d18 -4.698316648967506d19)
EQL-OK: -5.169165183000161d19
(+ 2.853799842810312d19 -5.56805968603395d19)
EQL-OK: -2.7142598432236384d19
(+ -2.9128622996090335d19 -5.153369106520702d19)
EQL-OK: -8.066231406129735d19
(+ -5.415993984772977d19 4.481932558278175d19)
EQL-OK: -9.340614264948015d18
(+ -1.4652301908531261d19 7.89284449966826d19)
EQL-OK: 6.427614308815133d19
(+ -8.241911630479252d19 5.377001886877124d19)
EQL-OK: -2.8649097436021277d19
(+ -6.923631123395076d19 7.100129853298664d-22)
EQL-OK: -6.923631123395076d19
(+ -5.864213410820717d19 -2.649878514627326d-21)
EQL-OK: -5.864213410820717d19
(+ 8.660575002861176d19 2.751926085897399d-21)
EQL-OK: 8.660575002861176d19
(+ -3.0252871646631318d19 6.852831573716124d-21)
EQL-OK: -3.0252871646631318d19
(+ -9.155476807340938d19 -5.552907466957205d-21)
EQL-OK: -9.155476807340938d19
(+ -4.03382621358461d19 6.670808279457885d-21)
EQL-OK: -4.03382621358461d19
(+ 8.842980509187577d-21 0.5028466982188534d0)
EQL-OK: 0.5028466982188534d0
(+ 1.7292043381396136d-21 0.19490424064972922d0)
EQL-OK: 0.19490424064972922d0
(+ -5.854820918836103d-21 -0.6700030154364615d0)
EQL-OK: -0.6700030154364615d0
(+ -2.152396491682048d-21 0.5002930268902921d0)
EQL-OK: 0.5002930268902921d0
(+ -1.0897149666610629d-21 0.16555534170490604d0)
EQL-OK: 0.16555534170490604d0
(+ 6.321421497987867d-24 -0.08008112131564671d0)
EQL-OK: -0.08008112131564671d0
(+ -6.1552667309563055d-21 7.235074489769488d9)
EQL-OK: 7.235074489769488d9
(+ -2.2311335001219955d-22 1.220011008333989d9)
EQL-OK: 1.220011008333989d9
(+ 8.523565724937177d-23 -4.1650242034123087d9)
EQL-OK: -4.1650242034123087d9
(+ -2.4400041303825447d-21 4.435554678685388d9)
EQL-OK: 4.435554678685388d9
(+ -3.4479065449345757d-22 8.491084033112451d8)
EQL-OK: 8.491084033112451d8
(+ -7.919939059912893d-21 -7.610637842585286d9)
EQL-OK: -7.610637842585286d9
(+ 4.4958602369105625d-21 5.758376768873417d-11)
EQL-OK: 5.7583767693230034d-11
(+ 2.4375297386412195d-21 9.417086717671841d-11)
EQL-OK: 9.417086717915595d-11
(+ 1.0040647133383462d-21 3.4701016271268983d-12)
EQL-OK: 3.470101628130963d-12
(+ -3.885093055726793d-21 -8.523534862249969d-11)
EQL-OK: -8.523534862638479d-11
(+ 1.027951323422187d-21 -7.65508060829868d-11)
EQL-OK: -7.655080608195885d-11
(+ -9.83813940552434d-21 -5.048380063082019d-11)
EQL-OK: -5.0483800640658324d-11
(+ -7.640856498925806d-21 -5.743808556015994d19)
EQL-OK: -5.743808556015994d19
(+ 8.053891045717591d-21 4.0840032650134725d19)
EQL-OK: 4.0840032650134725d19
(+ -4.794782783871528d-21 -3.431216587740782d18)
EQL-OK: -3.431216587740782d18
(+ 1.860870988390988d-21 -3.757945694933625d19)
EQL-OK: -3.757945694933625d19
(+ 5.445498222566789d-21 7.575823566817991d19)
EQL-OK: 7.575823566817991d19
(+ 2.631896745307223d-21 4.906449817201212d19)
EQL-OK: 4.906449817201212d19
(+ -6.61689881073516d-21 5.357007670385275d-21)
EQL-OK: -1.2598911403498852d-21
(+ 3.0173001109587537d-21 5.2947222461350496d-21)
EQL-OK: 8.312022357093803d-21
(+ -8.792518441030627d-21 -1.0516787854168774d-21)
EQL-OK: -9.844197226447504d-21
(+ 7.349451992884509d-21 -8.427997362671486d-21)
EQL-OK: -1.0785453697869767d-21
(+ -7.881179611953633d-21 3.2080446524364824d-21)
EQL-OK: -4.6731349595171506d-21
(+ -9.614117725927607d-21 -5.35667712698602d-21)
EQL-OK: -1.4970794852913628d-20
(- -0.011326914400453525d0 -0.6668141757661364d0)
EQL-OK: 0.6554872613656829d0
(- -0.46185382764946437d0 0.7488210697846337d0)
EQL-OK: -1.2106748974340982d0
(- -0.35834120541234993d0 -0.30919976341834987d0)
EQL-OK: -0.04914144199400006d0
(- 0.44705025064976966d0 -0.9277893553610955d0)
EQL-OK: 1.3748396060108652d0
(- -0.47647537517067917d0 0.29158058381073604d0)
EQL-OK: -0.7680559589814152d0
(- -0.021697999002707746d0 0.1779871773524142d0)
EQL-OK: -0.19968517635512195d0
(- 0.4179484378019861d0 9.9990307469939d9)
EQL-OK: -9.999030746575953d9
(- -0.7475415524823718d0 1.3993312799214797d9)
EQL-OK: -1.3993312806690214d9
(- 0.2519442433861928d0 -6.699632771871848d9)
EQL-OK: 6.699632772123793d9
(- -0.5124988631497671d0 2.7959244812290273d9)
EQL-OK: -2.795924481741526d9
(- -0.6870193827604301d0 4.851102442573468d9)
EQL-OK: -4.851102443260488d9
(- 0.7609656780357723d0 7.481252865855436d8)
EQL-OK: -7.481252858245779d8
(- -0.6301276042170191d0 -7.099314875214215d-11)
EQL-OK: -0.630127604146026d0
(- -0.4139053484357884d0 -2.897413526398709d-11)
EQL-OK: -0.41390534840681426d0
(- -0.6944623060197281d0 -3.291569879873739d-11)
EQL-OK: -0.6944623059868125d0
(- -0.2057822500703933d0 3.6505182026159854d-11)
EQL-OK: -0.2057822501068985d0
(- -0.8792706674467908d0 8.094527736950817d-11)
EQL-OK: -0.8792706675277361d0
(- -0.6888184243601332d0 9.127622796988807d-11)
EQL-OK: -0.6888184244514094d0
(- -0.980711030497252d0 8.752272461345245d19)
EQL-OK: -8.752272461345245d19
(- 0.8035082489836539d0 -3.903355151264917d19)
EQL-OK: 3.903355151264917d19
(- -0.7537841372394811d0 -5.879942447417834d19)
EQL-OK: 5.879942447417834d19
(- -0.6877475951546845d0 -2.3972266191169642d19)
EQL-OK: 2.3972266191169642d19
(- -0.43128282112433525d0 -5.422824998003439d19)
EQL-OK: 5.422824998003439d19
(- 0.29538116818276694d0 1.1291858990580939d19)
EQL-OK: -1.1291858990580939d19
(- 0.9166687388673976d0 6.395175407123937d-21)
EQL-OK: 0.9166687388673976d0
(- 0.41840538498193025d0 -2.6655662412599155d-21)
EQL-OK: 0.41840538498193025d0
(- -0.8036940092501853d0 6.7473779576832565d-21)
EQL-OK: -0.8036940092501853d0
(- 0.8555054025209989d0 -7.939970418096797d-21)
EQL-OK: 0.8555054025209989d0
(- 0.3365495704567003d0 8.694519827555395d-21)
EQL-OK: 0.3365495704567003d0
(- -0.7430322011471231d0 7.430332379292914d-22)
EQL-OK: -0.7430322011471231d0
(- 5.102372414731216d9 -0.5073635765350494d0)
EQL-OK: 5.10237241523858d9
(- 4.629827365822252d9 0.6534380055543355d0)
EQL-OK: 4.629827365168815d9
(- 7.218192507117569d9 0.9781542046565127d0)
EQL-OK: 7.218192506139415d9
(- 6.595760326622413d8 0.7339510561932947d0)
EQL-OK: 6.595760319282902d8
(- 7.191166637703489d9 0.80792475493853d0)
EQL-OK: 7.191166636895564d9
(- -7.95531405213956d9 0.5353636841430115d0)
EQL-OK: -7.955314052674924d9
(- 5.438904545553836d8 6.533536518165114d9)
EQL-OK: -5.989646063609731d9
(- -7.389650313101625d8 -9.983943153365381d9)
EQL-OK: 9.244978122055218d9
(- 8.364404619492165d9 -7.600563055115287d9)
EQL-OK: 1.5964967674607452d10
(- 2.070813748323649d9 6.421052769114957d9)
EQL-OK: -4.350239020791307d9
(- -2.8555256820439434d9 -3.4077342921686625d8)
EQL-OK: -2.514752252827077d9
(- 9.147878229420991d8 8.439982790150545d9)
EQL-OK: -7.5251949672084465d9
(- -4.315772980070098d9 -6.48869466068404d-11)
EQL-OK: -4.315772980070098d9
(- -3.5186299785635023d9 3.990046539849716d-11)
EQL-OK: -3.5186299785635023d9
(- 2.5645532837267537d9 8.566645694205622d-13)
EQL-OK: 2.5645532837267537d9
(- 6.145110896031829d9 -9.242734002954773d-11)
EQL-OK: 6.145110896031829d9
(- -6.6836855975624d9 9.117930361283473d-11)
EQL-OK: -6.6836855975624d9
(- -1.7472828462085754d8 -5.125838712019503d-11)
EQL-OK: -1.7472828462085754d8
(- 9.05675399397055d9 9.086705650502484d19)
EQL-OK: -9.08670564959681d19
(- -5.834806594586836d9 9.981576053842906d19)
EQL-OK: -9.981576054426386d19
(- 3.047010922754272d9 1.1715352070471352d19)
EQL-OK: -1.1715352067424342d19
(- 7.294295638574767d9 2.845702947515113d19)
EQL-OK: -2.8457029467856835d19
(- 8.264143132493019d9 -1.6322956072452289d19)
EQL-OK: 1.6322956080716431d19
(- -9.597823287256088d9 3.954126758718671d19)
EQL-OK: -3.954126759678453d19
(- 3.229389511771705d9 -4.329831377266493d-21)
EQL-OK: 3.229389511771705d9
(- 6.897089200279753d9 2.4428208790287663d-21)
EQL-OK: 6.897089200279753d9
(- 2.3579775300187545d9 4.729400988996349d-21)
EQL-OK: 2.3579775300187545d9
(- 1.6718929117460046d9 5.8162277016717065d-21)
EQL-OK: 1.6718929117460046d9
(- 2.537177500868296d9 1.4856605280697543d-21)
EQL-OK: 2.537177500868296d9
(- 6.117674696930935d9 -1.6187214719634357d-21)
EQL-OK: 6.117674696930935d9
(- 4.1877888304549216d-11 -0.06920550501017497d0)
EQL-OK: 0.06920550505205286d0
(- 9.61054846124015d-11 0.885309193732889d0)
EQL-OK: -0.8853091936367835d0
(- 2.5559085051828467d-11 -0.8112181469812297d0)
EQL-OK: 0.8112181470067888d0
(- -1.4549570208293283d-12 -0.5049325945871657d0)
EQL-OK: 0.5049325945857107d0
(- -7.091628047158497d-11 0.61946884965934d0)
EQL-OK: -0.6194688497302563d0
(- 2.877466355456826d-11 0.4496491857374d0)
EQL-OK: -0.44964918570862533d0
(- 1.3041612488449928d-12 5.408018587130755d9)
EQL-OK: -5.408018587130755d9
(- -5.379752339715717d-11 -4.009594691514288d9)
EQL-OK: 4.009594691514288d9
(- 7.023042501342336d-12 -3.4153434285746374d9)
EQL-OK: 3.4153434285746374d9
(- 6.968174934871611d-11 4.713087404332662d9)
EQL-OK: -4.713087404332662d9
(- -5.153562653896506d-11 -8.44732228013254d8)
EQL-OK: 8.44732228013254d8
(- -8.424177457818745d-11 1.6817117809824567d9)
EQL-OK: -1.6817117809824567d9
(- 3.374755984316538d-11 8.893678266883364d-11)
EQL-OK: -5.5189222825668264d-11
(- -8.684123447823306d-11 -7.888825869147879d-11)
EQL-OK: -7.952975786754267d-12
(- 7.788477523205632d-11 1.741674745286914d-11)
EQL-OK: 6.046802777918718d-11
(- 6.546622477606044d-11 -4.7719651007530584d-11)
EQL-OK: 1.1318587578359101d-10
(- -1.8595152377503265d-11 5.7288738553553045d-11)
EQL-OK: -7.588389093105631d-11
(- -8.184033550427558d-11 -8.834399228929296d-11)
EQL-OK: 6.503656785017376d-12
(- 5.749469292140762d-11 7.493129199779113d19)
EQL-OK: -7.493129199779113d19
(- -5.2285095120702066d-11 -2.0611179974216552d19)
EQL-OK: 2.0611179974216552d19
(- -8.84727820032067d-11 4.7423077384022024d19)
EQL-OK: -4.7423077384022024d19
(- 3.437676989338625d-11 -3.5368755480277647d19)
EQL-OK: 3.5368755480277647d19
(- 2.2665031619145437d-11 -6.072845659234921d19)
EQL-OK: 6.072845659234921d19
(- -8.429070146313393d-11 5.134329153614969d18)
EQL-OK: -5.134329153614969d18
(- -9.009531819191212d-11 2.301790665456671d-22)
EQL-OK: -9.00953181921423d-11
(- -2.706942469371907d-11 9.282350542107287d-21)
EQL-OK: -2.706942470300142d-11
(- 5.358266626996117d-11 -4.409057695582885d-22)
EQL-OK: 5.358266627040208d-11
(- -7.189537285608088d-11 9.569273217393917d-21)
EQL-OK: -7.189537286565016d-11
(- -4.160295905335358d-11 5.930867524794025d-21)
EQL-OK: -4.160295905928445d-11
(- 6.7922062777334035d-12 -7.747524338474154d-22)
EQL-OK: 6.792206278508156d-12
(- -9.038821102045805d19 0.04779131019959271d0)
EQL-OK: -9.038821102045805d19
(- 2.2020595055495963d19 -0.424631558292516d0)
EQL-OK: 2.2020595055495963d19
(- -8.164003027214308d19 0.6832198147365239d0)
EQL-OK: -8.164003027214308d19
(- -3.878233560364984d19 -0.28756619113600546d0)
EQL-OK: -3.878233560364984d19
(- 7.0829003521450525d19 -0.6071548125948544d0)
EQL-OK: 7.0829003521450525d19
(- 5.968540808784698d19 0.7674294173432648d0)
EQL-OK: 5.968540808784698d19
(- -2.2143621795153547d19 -2.443529365769125d9)
EQL-OK: -2.2143621792710017d19
(- -9.77092538926342d18 5.903189771537687d8)
EQL-OK: -9.77092538985374d18
(- 9.974714452399537d19 -6.980456691485629d9)
EQL-OK: 9.974714453097582d19
(- 1.7428950527159094d18 3.68843657888816d9)
EQL-OK: 1.742895049027473d18
(- -1.1094381875350845d19 -7.157723640671709d9)
EQL-OK: -1.1094381868193122d19
(- -3.638795590369631d19 6.9246542750294075d9)
EQL-OK: -3.6387955910620963d19
(- -5.66543282261991d19 -5.1005028153082024d-11)
EQL-OK: -5.66543282261991d19
(- -3.901527864456216d19 -1.064153465992923d-12)
EQL-OK: -3.901527864456216d19
(- 1.1477489418879848d19 3.327888063907735d-11)
EQL-OK: 1.1477489418879848d19
(- 3.508978072054437d19 9.238453417997638d-11)
EQL-OK: 3.508978072054437d19
(- -4.7642024461416964d19 -4.758309941438892d-11)
EQL-OK: -4.7642024461416964d19
(- -8.307715835429606d19 3.313910202186439d-11)
EQL-OK: -8.307715835429606d19
(- 2.704675010192592d18 -2.6840207147078365d19)
EQL-OK: 2.954488215727096d19
(- -9.860969100714668d18 -4.719594638795429d19)
EQL-OK: 3.7334977287239614d19
(- 7.87799781828944d18 -6.657221298850535d19)
EQL-OK: 7.44502108067948d19
(- -3.3937781740759863d19 4.783805995045389d19)
EQL-OK: -8.177584169121376d19
(- -1.0747572720102216d19 -1.7144708598072445d19)
EQL-OK: 6.397135877970229d18
(- 1.3938845733158445d19 5.604369854609131d19)
EQL-OK: -4.210485281293287d19
(- 6.0938348303695315d19 1.1005522580049531d-21)
EQL-OK: 6.0938348303695315d19
(- -2.4870844028694925d19 1.5391650322730598d-22)
EQL-OK: -2.4870844028694925d19
(- 7.323118607079343d19 6.637280375859432d-21)
EQL-OK: 7.323118607079343d19
(- -4.181201584825501d19 4.768935182006663d-21)
EQL-OK: -4.181201584825501d19
(- 4.1225910279381205d19 6.117191687463543d-21)
EQL-OK: 4.1225910279381205d19
(- 6.438313875980151d17 -1.4883489002691529d-21)
EQL-OK: 6.438313875980151d17
(- -4.573961206963222d-21 0.3586300020381973d0)
EQL-OK: -0.3586300020381973d0
(- 7.74206782371325d-22 0.23168389210368656d0)
EQL-OK: -0.23168389210368656d0
(- 8.572446613640605d-21 0.6114581963443891d0)
EQL-OK: -0.6114581963443891d0
(- -8.539467934859551d-21 0.33474735899049d0)
EQL-OK: -0.33474735899049d0
(- -5.55811309570968d-21 -0.9637216018651454d0)
EQL-OK: 0.9637216018651454d0
(- -6.705839413964189d-21 0.3787619614522374d0)
EQL-OK: -0.3787619614522374d0
(- 1.338539206480238d-22 6.683968625235106d9)
EQL-OK: -6.683968625235106d9
(- -9.64078167549023d-21 3.291420859310843d9)
EQL-OK: -3.291420859310843d9
(- -9.26536204591093d-22 2.9839295142529476d8)
EQL-OK: -2.9839295142529476d8
(- -3.647737608953592d-21 6.115300020921433d8)
EQL-OK: -6.115300020921433d8
(- 1.4069763806331204d-21 -1.183109060480878d9)
EQL-OK: 1.183109060480878d9
(- -6.0037865798761924d-21 -7.442246743849378d9)
EQL-OK: 7.442246743849378d9
(- -5.994118986299138d-21 -9.091558282012836d-11)
EQL-OK: 9.091558281413425d-11
(- 6.969393585974241d-21 3.435352867093995d-11)
EQL-OK: -3.435352866397056d-11
(- -6.278554484817533d-22 -4.7211920270841604d-11)
EQL-OK: 4.721192027021375d-11
(- -8.603262886304741d-21 1.7296517702077242d-11)
EQL-OK: -1.7296517710680505d-11
(- 4.104502790901735d-21 -4.8473213720301105d-11)
EQL-OK: 4.847321372440561d-11
(- -4.449725859444968d-21 -8.944265568403936d-11)
EQL-OK: 8.944265567958964d-11
(- 4.828216540804827d-21 -1.1712152029346877d19)
EQL-OK: 1.1712152029346877d19
(- -5.65034940464881d-21 -9.445303840982011d19)
EQL-OK: 9.445303840982011d19
(- -7.24107519738777d-21 2.340578690102746d19)
EQL-OK: -2.340578690102746d19
(- 1.7659593956231534d-21 -8.048768257390671d18)
EQL-OK: 8.048768257390671d18
(- -3.0538518255248124d-21 8.834631867521575d19)
EQL-OK: -8.834631867521575d19
(- 8.57952908388053d-21 -5.730742870111307d19)
EQL-OK: 5.730742870111307d19
(- -4.5090103564928485d-21 1.8907114777916313d-21)
EQL-OK: -6.399721834284479d-21
(- -3.8487625143236447d-22 5.354282198078924d-21)
EQL-OK: -5.739158449511288d-21
(- 2.6660110440404615d-22 3.833744224501756d-22)
EQL-OK: -1.1677331804612944d-22
(- -7.503762004261027d-22 -9.623906576475644d-21)
EQL-OK: 8.873530376049542d-21
(- -9.113431042260725d-21 -3.5516521546085545d-21)
EQL-OK: -5.56177888765217d-21
(- -3.4813735333296525d-21 -2.6602650182385188d-21)
EQL-OK: -8.211085150911337d-22
(* -0.2554913394465045d0 0.27042187315261135d0)
EQL-OK: -0.0690904465873934d0
(* -0.4489211233229662d0 -0.42892136850270857d0)
EQL-OK: 0.19255186256545986d0
(* -0.44586465919973783d0 -0.15168042462027043d0)
EQL-OK: 0.0676289408305884d0
(* 0.5509395670465355d0 0.3577558280766836d0)
EQL-OK: 0.19710184102894285d0
(* -0.42780066410606965d0 0.22704747885906007d0)
EQL-OK: -0.0971310622395147d0
(* 0.20955388816500042d0 0.605628751935113d0)
EQL-OK: 0.12691185975251945d0
(* 0.9993471610818964d0 -4.363771855901198d9)
EQL-OK: -4.360923015803941d9
(* 0.10502219375257282d0 3.425205053451057d9)
EQL-OK: 3.5972254876582843d8
(* 0.7768651149081368d0 1.666066330143864d9)
EQL-OK: 1.2943088110117908d9
(* -0.6438389801759042d0 2.8922130868526487d9)
EQL-OK: -1.8621195242906134d9
(* -0.7427680566504474d0 6.763974500466173d9)
EQL-OK: -5.02406419494444d9
(* -0.8563035843259611d0 2.9100478627456827d9)
EQL-OK: -2.4918844154292307d9
(* 0.6219502737119671d0 2.8868752190811842d-11)
EQL-OK: 1.7954928326798375d-11
(* 0.6767479505813657d0 2.9324524289075574d-11)
EQL-OK: 1.9845311714405376d-11
(* 0.7944531541461581d0 8.282076647859848d-11)
EQL-OK: 6.579721915772496d-11
(* -0.4662914070981966d0 -6.921260263903422d-11)
EQL-OK: 3.227324187348362d-11
(* 0.037804762510578516d0 -3.044514833184461d-11)
EQL-OK: -1.1509716022847211d-12
(* -0.5364168049485208d0 -3.695280705974925d-11)
EQL-OK: 1.9822106696869836d-11
(* 0.10343751426551051d0 4.8902635121181385d19)
EQL-OK: 5.058367017968255d18
(* -0.45511004829813784d0 1.8210069906740634d19)
EQL-OK: -8.287585794769196d18
(* -0.9675158737162977d0 8.097401718869682d19)
EQL-OK: -7.83436469886405d19
(* -0.06573561186185628d0 2.6049125586869125d19)
EQL-OK: -1.712355208919178d18
(* -0.5574365795036731d0 -8.822383181882661d19)
EQL-OK: 4.917919103979403d19
(* -0.4222667103024276d0 -1.8561723355961213d19)
EQL-OK: 7.837997859065477d18
(* -0.8412207478192143d0 2.3416069046402696d-22)
EQL-OK: -1.9698083114201234d-22
(* 0.24291385591230452d0 -9.448120185342916d-21)
EQL-OK: -2.295079305344525d-21
(* -0.37792600430678414d0 -2.3929024368177364d-21)
EQL-OK: 9.043400566424941d-22
(* -0.007648867433060369d0 -5.3162210182098465d-21)
EQL-OK: 4.066306981313633d-23
(* -0.7631807323096114d0 -4.534410248041209d-21)
EQL-OK: 3.4605745336922964d-21
(* 0.4735366300649959d0 -1.3895270471326203d-21)
EQL-OK: -6.579919552833457d-22
(* -8.64834403600587d9 -0.14057280586223464d0)
EQL-OK: 1.215721987203268d9
(* -1.5525713051163936d9 0.10621224657238759d0)
EQL-OK: -1.64902086280236d8
(* 3.297132746298694d9 0.05318660311813239d0)
EQL-OK: 1.7536329080518654d8
(* 2.1659831568875275d9 0.11704159596099262d0)
EQL-OK: 2.5351012550674528d8
(* -5.533403510176525d9 0.37778599060251605d0)
EQL-OK: -2.0904423264954782d9
(* -2.4217306331294374d9 0.6051350227557695d0)
EQL-OK: -1.465474021787126d9
(* 1.4048311850866513d9 -4.304799039580996d9)
EQL-OK: -6.047515936334449d18
(* -5.070278162013437d9 -9.116233758795675d9)
EQL-OK: 4.622184094703138d19
(* 8.452801605894673d9 -9.002885976919611d9)
EQL-OK: -7.609960904339272d19
(* 6.352601599408395d9 -4.484034289922495d9)
EQL-OK: -2.848528340196373d19
(* -6.565407710101401d8 -6.718825369609182d9)
EQL-OK: 4.4111827884457016d18
(* -9.37193973536698d9 9.577576231327314d9)
EQL-OK: -8.976046725088279d19
(* -1.7766859308675253d9 -4.079350537765101d-11)
EQL-OK: 0.0724772470752413d0
(* 2.3810136983742104d9 9.195156930614704d-11)
EQL-OK: 0.2189379461049417d0
(* -3.313966320976337d9 -3.44704749912067d-11)
EQL-OK: 0.11423399318891611d0
(* 6.598963960681895d9 -2.4298605961767928d-11)
EQL-OK: -0.1603456250365168d0
(* 7.908258993705348d9 1.528909719631646d-11)
EQL-OK: 0.12091014040840486d0
(* -5.906667889594469d9 5.917852809041966d-11)
EQL-OK: -0.3495479116251461d0
(* 4.86261281419926d9 -2.3925611132123714d19)
EQL-OK: -1.1634098327861323d29
(* -9.753392818607462d9 -2.5653634777279775d18)
EQL-OK: 2.502099772078992d28
(* 1.5861252889272392d9 5.12939252547053d19)
EQL-OK: 8.135859201483165d28
(* -8.422142961023593d8 1.0428099441045047d19)
EQL-OK: -8.782694430425161d27
(* -3.109042783121446d9 -4.138252722536039d19)
EQL-OK: 1.286600476173335d29
(* -6.459303282089468d8 1.8408981660472957d19)
EQL-OK: -1.189091956594178d28
(* -1.432764110232635d9 8.98766033001457d-21)
EQL-OK: -1.2877197155806476d-11
(* 8.539623949953406d9 -3.498784805440049d-21)
EQL-OK: -2.987830652026891d-11
(* 7.336784327799637d9 -1.048985206018761d-21)
EQL-OK: -7.696178219612119d-12
(* -4.320357143553698d9 2.591531476439043d-21)
EQL-OK: -1.119634152697768d-11
(* -9.374098076239548d9 5.5773248420603045d-21)
EQL-OK: -5.228239007252054d-11
(* 9.118926580475056d9 -1.379170270330765d-21)
EQL-OK: -1.2576552437120181d-11
(* 8.145792307872788d-11 -0.06511382435429458d0)
EQL-OK: -5.304036895613926d-12
(* -6.1928426627437d-11 0.2526275616632321d0)
EQL-OK: -1.5644827416529785d-11
(* -8.555119338859813d-11 -0.8366318482083728d0)
EQL-OK: 7.157485304113478d-11
(* 8.243060442429263d-12 0.3939656708074719d0)
EQL-OK: 3.2474828367081808d-12
(* 8.600529286105945d-11 -0.891441509265547d0)
EQL-OK: -7.666868807288822d-11
(* -7.531046724969747d-11 0.24398797995196886d0)
EQL-OK: -1.8374848773492595d-11
(* -3.7666526619188126d-12 4.659322150343885d9)
EQL-OK: -0.017550048180330083d0
(* 3.032501107241211d-11 -9.592046453776636d9)
EQL-OK: -0.2908789149178678d0
(* 7.311626957349528d-11 -9.061108567148174d9)
EQL-OK: -0.6625144566303135d0
(* 4.898078204161461d-11 8.88014689134599d9)
EQL-OK: 0.4349565393825394d0
(* 1.278207138618518d-11 -4.279966992086118d9)
EQL-OK: -0.05470684362336102d0
(* -8.538580654966055d-11 -5.191059833953482d8)
EQL-OK: 0.0443242830769665d0
(* 4.0761422500127225d-11 1.527607426117321d-11)
EQL-OK: 6.226745171030001d-22
(* -9.186363051001198d-11 8.557763803549676d-11)
EQL-OK: -7.861472520412421d-21
(* -9.89183505930065d-11 9.717968160611499d-11)
EQL-OK: -9.612853815630427d-21
(* 7.440627873114725d-12 -4.535521332601712d-11)
EQL-OK: -3.374712644646274d-22
(* 8.701410920357686d-11 -7.032883383151379d-12)
EQL-OK: -6.119600827175551d-22
(* 9.866226673114161d-11 -2.814669610817353d-11)
EQL-OK: -2.777016839025002d-21
(* 5.192240545105114d-11 -3.366056660574579d19)
EQL-OK: -1.747737587015645d9
(* -1.372355669576939d-11 -4.819955130360066d19)
EQL-OK: 6.61469275025609d8
(* 3.637511103766519d-11 -4.071776382810416d19)
EQL-OK: -1.4811131804527159d9
(* 7.446388208685151d-13 2.7760294268649034d19)
EQL-OK: 2.0671392791169815d7
(* 6.267855179410938d-11 7.471751480940298d19)
EQL-OK: 4.683185621908299d9
(* -4.336562006766369d-11 8.143188451558233d19)
EQL-OK: -3.5313441652966094d9
(* -1.0432655006975122d-11 -9.379512413340694d-21)
EQL-OK: 9.785321714202411d-32
(* -8.167646898574611d-11 -5.810795749825724d-21)
EQL-OK: 4.746052788431461d-31
(* -4.33805459341994d-11 -2.4289860591796017d-21)
EQL-OK: 1.053707413137707d-31
(* -1.384613082275421d-11 2.2174009100764947d-21)
EQL-OK: -3.070242308741339d-32
(* -4.910905591314494d-11 -5.456657623752349d-21)
EQL-OK: 2.679713043437427d-31
(* 1.3653011366548008d-11 -3.925911962906968d-21)
EQL-OK: -5.360052065363564d-32
(* 7.641468950470222d19 0.9034599537348024d0)
EQL-OK: 6.903761184457755d19
(* 5.146778093125584d19 -0.2791459460022878d0)
EQL-OK: -1.436702239669392d19
(* -8.874303077863696d19 -0.23153988023519345d0)
EQL-OK: 2.054755071819369d19
(* 7.10798162637783d19 -0.4719034863212067d0)
EQL-OK: -3.354281310194779d19
(* -9.820386602197546d19 0.03346146041258036d0)
EQL-OK: -3.286044775256677d18
(* -5.210458089116161d19 0.11173798093222442d0)
EQL-OK: -5.822060666098161d18
(* 3.257626718953688d18 -6.150510855712356d9)
EQL-OK: -2.0036068498783283d28
(* -7.755105754004988d19 5.514896832715505d9)
EQL-OK: -4.27686081601359d29
(* 2.426235084788384d19 8.685431434428486d9)
EQL-OK: 2.1072898472734294d29
(* -2.847383850475709d19 -2.412830829567453d9)
EQL-OK: 6.870255538040273d28
(* 1.4664659669727164d19 -4.8673539253155d9)
EQL-OK: -7.1378088806862425d28
(* -4.24770317054668d19 1.3102543269150825d9)
EQL-OK: -5.5655714586597015d28
(* 2.17116835964837d19 -3.654789326884115d-11)
EQL-OK: -7.935162947711353d8
(* -1.8125809977916906d17 -5.944782899600832d-11)
EQL-OK: 1.0775400519813456d7
(* -7.915462827540546d19 9.762153025588201d-11)
EQL-OK: -7.727195939080587d9
(* -4.360953588949649d19 -7.152431005584812d-11)
EQL-OK: 3.119141966351983d9
(* 3.550776271395866d19 -6.387656982922894d-11)
EQL-OK: -2.268114084477872d9
(* -8.278954580496595d19 -7.359178231519021d-11)
EQL-OK: 6.092630232852524d9
(* -5.5022682113038156d19 -8.979630229039327d19)
EQL-OK: 4.940833395850589d39
(* 1.1716230943203277d19 5.5764415854118265d19)
EQL-OK: 6.533487745596758d38
(* 7.462799608352103d19 6.061883497941003d19)
EQL-OK: 4.523862179431019d39
(* -3.2160334983646097d19 -3.8817785710003675d19)
EQL-OK: 1.2483929917571087d39
(* 5.868090263060238d19 -8.37300331667736d19)
EQL-OK: -4.91335392351655d39
(* -7.3652924769962656d19 9.725738480757314d19)
EQL-OK: -7.163290846555493d39
(* -6.447063647969567d19 4.0587529685661844d-21)
EQL-OK: -0.2616703871973161d0
(* -3.1999317568381926d17 3.015031281949113d-21)
EQL-OK: -9.647894346969533d-4
(* -1.5005852398726605d19 5.391316601974659d-21)
EQL-OK: -0.080901301164036d0
(* 1.0084552719733576d19 2.78150956101201d-21)
EQL-OK: 0.02805027980846861d0
(* -7.171404412051077d19 1.4733392992015492d-21)
EQL-OK: -0.10565911950742231d0
(* -5.909802783283228d19 5.356071274587122d-21)
EQL-OK: -0.31653324926018317d0
(* 8.272641144282955d-22 -0.16191056182923802d0)
EQL-OK: -1.3394279754825238d-22
(* 8.410471541398583d-21 -0.43256058128353736d0)
EQL-OK: -3.63803845881602d-21
(* -7.887238384137063d-22 0.5589746137044918d0)
EQL-OK: -4.408766028968254d-22
(* 4.778995446616728d-21 0.21608373898977795d0)
EQL-OK: 1.0326632047200663d-21
(* 3.992449163872154d-21 0.9593422165456676d0)
EQL-OK: 3.830125030315009d-21
(* -9.700320218813958d-21 -0.42620535269852766d0)
EQL-OK: 4.134328400148262d-21
(* -1.7901566262876555d-21 9.461674014776534d8)
EQL-OK: -1.6937878433325936d-12
(* 1.0928019952544443d-22 8.279199780524873d9)
EQL-OK: 9.047526039267738d-13
(* 9.942869097320962d-21 9.523169242022762d9)
EQL-OK: 9.468762516506561d-11
(* -2.7432601692209267d-21 -4.922145522647528d9)
EQL-OK: 1.3502725759388083d-11
(* -5.97929682563092d-21 -6.147792689359443d8)
EQL-OK: 3.6759477312123895d-12
(* -1.3564305221188254d-21 1.0862842413758955d9)
EQL-OK: -1.473469100698958d-12
(* -5.446806293721964d-21 -1.5358504316888942d-11)
EQL-OK: 8.365479797538665d-32
(* -1.0222776562632463d-21 -1.9781477525280056d-11)
EQL-OK: 2.0222162481967376d-32
(* 8.192540157543917d-21 3.3215076993103644d-11)
EQL-OK: 2.7211585210191467d-31
(* 9.685592607330157d-21 6.034805605641166d-11)
EQL-OK: 5.8450668560672665d-31
(* 6.671870463340688d-21 -9.07657686679269d-11)
EQL-OK: -6.055774510579552d-31
(* -1.109409648670322d-21 -4.7905821901849965d-11)
EQL-OK: 5.314718104539439d-32
(* -3.9052432481663676d-22 2.0306112771345453d19)
EQL-OK: -0.007930030979680168d0
(* 8.596834841113507d-21 -9.453548987989818d19)
EQL-OK: -0.8127059931212419d0
(* 3.946325780779758d-21 -9.084484011754447d19)
EQL-OK: -0.35850333460668093d0
(* 5.3518824877647604d-21 -6.814116447592617d19)
EQL-OK: -0.36468350485460743d0
(* -7.456278485417833d-22 9.61914445493285d19)
EQL-OK: -0.07172301984744206d0
(* -5.0781537010216826d-21 9.216915512986622d19)
EQL-OK: -0.4680491362427718d0
(* 3.2906792172396555d-22 4.571445785546992d-21)
EQL-OK: 1.50431616392373d-42
(* 5.39814714322422d-21 6.687033308557664d-21)
EQL-OK: 3.6097589751235757d-41
(* 4.3506183844841724d-21 7.266196706225928d-21)
EQL-OK: 3.1612448975384865d-41
(* 6.910763289107986d-21 3.910584203890238d-21)
EQL-OK: 2.702512175521024d-41
(* -4.6131515924393325d-21 5.228174479773633d-21)
EQL-OK: -2.411836142691841d-41
(* -2.1886866436065787d-21 6.29322016055891d-22)
EQL-OK: -1.3773886910690934d-42
(MULTIPLE-VALUE-LIST (FLOOR 0.6173351962722496d0 -0.11820538775792844d0))
EQUAL-OK: (-6 -0.09189713027532098d0)
(MULTIPLE-VALUE-LIST (FLOOR -0.17517225806171177d0 0.1118228341753209d0))
EQUAL-OK: (-2 0.04847341028893004d0)
(MULTIPLE-VALUE-LIST (FLOOR -0.9387909021047899d0 -0.16826318310698907d0))
EQUAL-OK: (5 -0.09747498656984459d0)
(MULTIPLE-VALUE-LIST (FLOOR 0.8036728904567848d0 0.6774308237913269d0))
EQUAL-OK: (1 0.1262420666654578d0)
(MULTIPLE-VALUE-LIST (FLOOR 0.6882568422881421d0 0.3302150266778784d0))
EQUAL-OK: (2 0.02782678893238538d0)
(MULTIPLE-VALUE-LIST (FLOOR 0.3618917435888378d0 0.5454396894763598d0))
EQUAL-OK: (0 0.3618917435888378d0)
(MULTIPLE-VALUE-LIST (FLOOR -0.478470818234076d0 9.035797971846054d9))
EQUAL-OK: (-1 9.035797971367584d9)
(MULTIPLE-VALUE-LIST (FLOOR 0.6423779722022549d0 2.0589504447793393d9))
EQUAL-OK: (0 0.6423779722022549d0)
(MULTIPLE-VALUE-LIST (FLOOR 0.21698095744051404d0 1.570908384361449d9))
EQUAL-OK: (0 0.21698095744051404d0)
(MULTIPLE-VALUE-LIST (FLOOR 0.24033995915823747d0 6.968395233824382d9))
EQUAL-OK: (0 0.24033995915823747d0)
(MULTIPLE-VALUE-LIST (FLOOR -0.8531247643149816d0 -5.299783511441018d9))
EQUAL-OK: (0 -0.8531247643149817d0)
(MULTIPLE-VALUE-LIST (FLOOR -0.5134978162655872d0 2.297671112225289d9))
EQUAL-OK: (-1 2.297671111711791d9)
(MULTIPLE-VALUE-LIST (FLOOR 0.6192405432591311d0 5.4403538407469436d-11))
EQUAL-OK: (11382357864 3.744539199218032d-11)
(MULTIPLE-VALUE-LIST (FLOOR -0.20340731452742233d0 5.44351944436815d-12))
EQUAL-OK: (-37366875715 2.4681729170135434d-12)
(MULTIPLE-VALUE-LIST (FLOOR -0.29394735220898527d0 -3.6328318262890404d-12))
EQUAL-OK: (80914109505 -3.3847154436219604d-12)
(MULTIPLE-VALUE-LIST (FLOOR -0.8359336184185098d0 6.064791537508077d-11))
EQUAL-OK: (-13783385847 1.2432123964511977d-11)
(MULTIPLE-VALUE-LIST (FLOOR -0.9762544843227843d0 2.2086465633336306d-11))
EQUAL-OK: (-44201480696 1.1997821346734454d-11)
(MULTIPLE-VALUE-LIST (FLOOR -0.2919696169517234d0 6.922295436251983d-11))
EQUAL-OK: (-4217815025 3.3402028237741715d-11)
(MULTIPLE-VALUE-LIST (FLOOR 0.9452118035872986d0 -1.1093667270485797d19))
EQUAL-OK: (-1 -1.1093667270485797d19)
(MULTIPLE-VALUE-LIST (FLOOR 0.3379784391207531d0 -3.0106029588222304d19))
EQUAL-OK: (-1 -3.0106029588222304d19)
(MULTIPLE-VALUE-LIST (FLOOR 0.3907483945162724d0 -9.823409070968835d19))
EQUAL-OK: (-1 -9.823409070968835d19)
(MULTIPLE-VALUE-LIST (FLOOR -0.4293216868359586d0 5.965415751655242d19))
EQUAL-OK: (-1 5.965415751655242d19)
(MULTIPLE-VALUE-LIST (FLOOR 0.13727607148241305d0 -8.310631671228052d19))
EQUAL-OK: (-1 -8.310631671228052d19)
(MULTIPLE-VALUE-LIST (FLOOR -0.7478116595122868d0 7.235991436975452d19))
EQUAL-OK: (-1 7.235991436975452d19)
(MULTIPLE-VALUE-LIST (FLOOR -0.9425796643098138d0 -1.7749544068364875d-21))
EQUAL-OK: (531044437355311857664 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR 0.20835281321620536d0 2.7983277403481253d-21))
EQUAL-OK: (74456186890490986496 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR -0.5404541167071248d0 9.266841531614177d-22))
EQUAL-OK: (-583212861537931100160 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR -0.06796825059990208d0 -6.350644782153893d-21))
EQUAL-OK: (10702574767038046208 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR 0.30647600932087793d0 -9.704243038852408d-21))
EQUAL-OK: (-31581650221851901952 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR -0.7939481974521416d0 -7.44148349933678d-21))
EQUAL-OK: (106692193501860495360 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR 2.622471924924206d9 0.3428958732728865d0))
EQUAL-OK: (7648012499 0.2776496600055352d0)
(MULTIPLE-VALUE-LIST (FLOOR 9.96303133513731d9 -0.6839887200892081d0))
EQUAL-OK: (-14566075496 -0.09450688719173875d0)
(MULTIPLE-VALUE-LIST (FLOOR 9.438132647041376d8 -0.9350840745499996d0))
EQUAL-OK: (-1009335193 -0.15301271996267998d0)
(MULTIPLE-VALUE-LIST (FLOOR -5.031281076435459d9 0.8566679205528436d0))
EQUAL-OK: (-5873082155 0.5244045303768723d0)
(MULTIPLE-VALUE-LIST (FLOOR -9.504293159523993d9 -0.17779074115973026d0))
EQUAL-OK: (53457750935 -0.058079864158457416d0)
(MULTIPLE-VALUE-LIST (FLOOR 5.593337221858664d8 0.6365106532159245d0))
EQUAL-OK: (878749977 0.3121177083383602d0)
(MULTIPLE-VALUE-LIST (FLOOR -9.849085830660753d9 5.465582064164139d9))
EQUAL-OK: (-2 1.0820782976675239d9)
(MULTIPLE-VALUE-LIST (FLOOR 6.254242990207708d9 1.9986128256161973d9))
EQUAL-OK: (3 2.5840451335911673d8)
(MULTIPLE-VALUE-LIST (FLOOR -9.644949290710447d9 3.677515142398587d9))
EQUAL-OK: (-3 1.3875961364853137d9)
(MULTIPLE-VALUE-LIST (FLOOR 9.966654669106707d9 3.622741134738514d9))
EQUAL-OK: (2 2.7211723996296782d9)
(MULTIPLE-VALUE-LIST (FLOOR -7.024110605080818d9 -1.3131548351819434d9))
EQUAL-OK: (5 -4.583364291711011d8)
(MULTIPLE-VALUE-LIST (FLOOR -4.5982831731090415d8 -4.587607917895467d9))
EQUAL-OK: (0 -4.5982831731090415d8)
(MULTIPLE-VALUE-LIST (FLOOR 6.779683583609543d9 -8.732134194560264d-11))
EQUAL-OK: (-77640625218895380480 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR 3.040910010354103d8 -6.386892985922651d-11))
EQUAL-OK: (-4761172634419539968 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR -9.081490496057175d9 -8.389512916135551d-11))
EQUAL-OK: (108248125807050637312 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR -2.3391140718625803d9 4.078343101769488d-11))
EQUAL-OK: (-57354519065541566464 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR 9.740679130260033d9 -4.1307299498162d-11))
EQUAL-OK: (-235810117064018001920 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR 4.630742761978566d9 -8.36053471494181d-11))
EQUAL-OK: (-55388117146413842432 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR 6.607827158404311d8 1.9791074337467208d19))
EQUAL-OK: (0 6.607827158404311d8)
(MULTIPLE-VALUE-LIST (FLOOR 1.5835379695092866d9 -5.599741962857091d19))
EQUAL-OK: (-1 -5.599741962698737d19)
(MULTIPLE-VALUE-LIST (FLOOR -9.972337740404726d9 -1.4833907125668299d19))
EQUAL-OK: (0 -9.972337740404726d9)
(MULTIPLE-VALUE-LIST (FLOOR -2.8545208802037845d9 5.460276762513134d19))
EQUAL-OK: (-1 5.4602767622276825d19)
(MULTIPLE-VALUE-LIST (FLOOR 3.4574292483978963d9 8.177006210253868d19))
EQUAL-OK: (0 3.4574292483978963d9)
(MULTIPLE-VALUE-LIST (FLOOR -6.94800692720856d9 5.400944544004402d19))
EQUAL-OK: (-1 5.400944543309601d19)
(MULTIPLE-VALUE-LIST (FLOOR 2.2301147741459103d9 4.352417825189536d-22))
EQUAL-OK: (5123852680777023531125296857088 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR 2.855798499915275d9 -2.1597757039453335d-21))
EQUAL-OK: (-1322266240285272897749142994944 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR 6.247757812861889d9 -8.000803060408911d-21))
EQUAL-OK: (-780891338743010366964468023296 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR -8.41352264607702d8 2.4583479152659926d-21))
EQUAL-OK: (-342242958933120698647142465536 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR 9.08798064415713d9 -4.6826703076651156d-21))
EQUAL-OK: (-1940768844921862497464005689344 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR -2.450923950975804d9 -8.516681149015905d-21))
EQUAL-OK: (287779230910741073293637320704 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR -6.535114995775952d-11 -0.4217447234387455d0))
EQUAL-OK: (0 -6.535114995775952d-11)
(MULTIPLE-VALUE-LIST (FLOOR 6.91351782048677d-13 -0.8578740601420116d0))
EQUAL-OK: (-1 -0.8578740601413203d0)
(MULTIPLE-VALUE-LIST (FLOOR -9.879448244992307d-11 -0.6016918305263045d0))
EQUAL-OK: (0 -9.879448244992307d-11)
(MULTIPLE-VALUE-LIST (FLOOR 7.820572196574365d-11 -0.8508242256358738d0))
EQUAL-OK: (-1 -0.8508242255576681d0)
(MULTIPLE-VALUE-LIST (FLOOR -4.4420680878896835d-11 0.6509799475016377d0))
EQUAL-OK: (-1 0.650979947457217d0)
(MULTIPLE-VALUE-LIST (FLOOR -8.35377304874932d-11 -0.7623592484047194d0))
EQUAL-OK: (0 -8.35377304874932d-11)
(MULTIPLE-VALUE-LIST (FLOOR -4.697219220983554d-11 -2.0199834401398075d9))
EQUAL-OK: (0 -4.697219220983554d-11)
(MULTIPLE-VALUE-LIST (FLOOR 4.027899822164905d-11 -3.0043885624092436d8))
EQUAL-OK: (-1 -3.0043885624092436d8)
(MULTIPLE-VALUE-LIST (FLOOR -9.473748837497406d-11 -6.081705720880249d8))
EQUAL-OK: (0 -9.473748837497406d-11)
(MULTIPLE-VALUE-LIST (FLOOR -6.257060775257221d-11 4.479345462936419d9))
EQUAL-OK: (-1 4.479345462936419d9)
(MULTIPLE-VALUE-LIST (FLOOR -4.076402998599221d-11 3.0379052042471523d9))
EQUAL-OK: (-1 3.0379052042471523d9)
(MULTIPLE-VALUE-LIST (FLOOR 3.2516054170046405d-11 9.075782126517027d9))
EQUAL-OK: (0 3.2516054170046405d-11)
(MULTIPLE-VALUE-LIST (FLOOR 7.77186165285192d-12 -7.011585244893556d-11))
EQUAL-OK: (-1 -6.234399079608364d-11)
(MULTIPLE-VALUE-LIST (FLOOR -4.129939073543463d-11 -4.398862671531905d-11))
EQUAL-OK: (0 -4.129939073543463d-11)
(MULTIPLE-VALUE-LIST (FLOOR -4.986332353670153d-11 4.056354917830567d-11))
EQUAL-OK: (-2 3.126377481990981d-11)
(MULTIPLE-VALUE-LIST (FLOOR -6.358815251785654d-11 3.044610839789864d-11))
EQUAL-OK: (-3 2.7750172675839383d-11)
(MULTIPLE-VALUE-LIST (FLOOR -1.5218538547762808d-11 -4.9239841620755075d-11))
EQUAL-OK: (0 -1.5218538547762808d-11)
(MULTIPLE-VALUE-LIST (FLOOR -3.714719523899548d-11 -3.338962509681127d-11))
EQUAL-OK: (1 -3.757570142184203d-12)
(MULTIPLE-VALUE-LIST (FLOOR -3.7559900032627426d-11 -7.103620895893612d19))
EQUAL-OK: (0 -3.7559900032627426d-11)
(MULTIPLE-VALUE-LIST (FLOOR 3.442771371655891d-11 3.2650979291930292d19))
EQUAL-OK: (0 3.442771371655891d-11)
(MULTIPLE-VALUE-LIST (FLOOR -8.026236668129701d-11 -7.030175018925641d19))
EQUAL-OK: (0 -8.026236668129701d-11)
(MULTIPLE-VALUE-LIST (FLOOR 4.0245932625540036d-11 9.919022649131396d19))
EQUAL-OK: (0 4.0245932625540036d-11)
(MULTIPLE-VALUE-LIST (FLOOR 6.558019989897738d-11 9.805879474847002d19))
EQUAL-OK: (0 6.558019989897738d-11)
(MULTIPLE-VALUE-LIST (FLOOR -8.950419173616613d-11 7.8967335533488d19))
EQUAL-OK: (-1 7.8967335533488d19)
(MULTIPLE-VALUE-LIST (FLOOR -4.2555105814142415d-11 -7.367149245343951d-22))
EQUAL-OK: (57763327980 -5.012024424412273d-22)
(MULTIPLE-VALUE-LIST (FLOOR -7.125466497249949d-11 -9.625683307253578d-21))
EQUAL-OK: (7402556545 -6.2922712544984485d-21)
(MULTIPLE-VALUE-LIST (FLOOR 8.076311292972551d-11 5.7198456178965606d-21))
EQUAL-OK: (14119806429 1.262169607592943d-21)
(MULTIPLE-VALUE-LIST (FLOOR -7.024787982764915d-11 1.5125149703168537d-21))
EQUAL-OK: (-46444419531 6.648179051963393d-22)
(MULTIPLE-VALUE-LIST (FLOOR 2.3153240875994985d-11 -1.5025822462858028d-21))
EQUAL-OK: (-15408967419 -1.3907844732195436d-21)
(MULTIPLE-VALUE-LIST (FLOOR 9.445189938981536d-11 -1.8886893988697117d-21))
EQUAL-OK: (-50009228329 -8.218058303553574d-22)
(MULTIPLE-VALUE-LIST (FLOOR -8.982223463756733d19 0.20677548795071854d0))
EQUAL-OK: (-434394983311440412672 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR -2.6872844858317455d19 0.00946240694180256d0))
EQUAL-OK: (-2839958693765316083712 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR -9.566658458393646d19 -0.38847162936974444d0))
EQUAL-OK: (246264018659858710528 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR -4.235085548018657d19 -0.06527446136754045d0))
EQUAL-OK: (648812025299173376000 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR 2.8443413501845017d19 -0.04996947402848739d0))
EQUAL-OK: (-569215787335074643968 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR -4.484750058861429d19 -0.2338784192921971d0))
EQUAL-OK: (191755616975433072640 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR -2.986802109112903d19 5.923385648786668d9))
EQUAL-OK: (-5042390090 3.561083576852057d9)
(MULTIPLE-VALUE-LIST (FLOOR 8.088567504347222d18 9.070536452627407d9))
EQUAL-OK: (891740807 8.158341046664973d9)
(MULTIPLE-VALUE-LIST (FLOOR -3.09688480137261d19 -6.508291621550677d9))
EQUAL-OK: (4758368219 -1.75538588669977d9)
(MULTIPLE-VALUE-LIST (FLOOR 4.226418080435591d19 7.892147197133178d9))
EQUAL-OK: (5355219530 6.335538696917366d8)
(MULTIPLE-VALUE-LIST (FLOOR 1.4013831972690205d19 -2.4924246236187544d9))
EQUAL-OK: (-5622570023 -6.556610185422871d8)
(MULTIPLE-VALUE-LIST (FLOOR 6.1838203826708914d19 8.941814127664919d9))
EQUAL-OK: (6915621700 8.062833976289089d9)
(MULTIPLE-VALUE-LIST (FLOOR -6.916774706038343d18 3.120694095597196d-11))
EQUAL-OK: (-221642189018039718512504602624 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR 9.435687674071892d19 -3.149833308668829d-11))
EQUAL-OK: (-2995614926067172775889444274176 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR -6.212546775235241d19 3.239266009361982d-11))
EQUAL-OK: (-1917887187183768183263136317440 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR 4.749482734068419d19 -5.5235623432819116d-11))
EQUAL-OK: (-859858627258009608103722483712 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR 3.0587261660909548d19 4.4929685621578874d-11))
EQUAL-OK: (680780674018761986414328414208 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR 4.141754743467259d19 5.235000122629564d-11))
EQUAL-OK: (791166121575339566219965497344 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR -1.2481803107227873d19 7.39878580568375d18))
EQUAL-OK: (-2 2.3157685041396265d18)
(MULTIPLE-VALUE-LIST (FLOOR -1.5884453212818639d19 -8.336283910718495d19))
EQUAL-OK: (0 -1.5884453212818639d19)
(MULTIPLE-VALUE-LIST (FLOOR 5.000368279611168d19 -5.031778160332162d19))
EQUAL-OK: (-1 -3.1409880720993677d17)
(MULTIPLE-VALUE-LIST (FLOOR -3.6360612893747024d19 4.7875734964388405d19))
EQUAL-OK: (-1 1.1515122070641383d19)
(MULTIPLE-VALUE-LIST (FLOOR 2.357251757890727d19 -4.493498319637942d19))
EQUAL-OK: (-1 -2.136246561747215d19)
(MULTIPLE-VALUE-LIST (FLOOR 5.0747068626287395d19 8.591364094011977d19))
EQUAL-OK: (0 5.0747068626287395d19)
(MULTIPLE-VALUE-LIST (FLOOR 2.1440483442615423d19 9.668454918695627d-21))
EQUAL-OK: (2217570813838780736509865871750106972160 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR 8.818664212173065d19 -8.186497379734964d-21))
EQUAL-OK: (-10772206724212702608743560617665161592832 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR -7.376250633760416d19 -6.382238421048869d-21))
EQUAL-OK: (11557466435965877316178494055246213414912 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR -4.374244855009332d19 3.864539687646209d-21))
EQUAL-OK: (-11318928536282082575630148538694692241408 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR 7.578656580690454d19 9.103502086399884d-22))
EQUAL-OK: (83249902166909342613269419960118328426496 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR 5.759312769216988d19 -9.830658049049094d-21))
EQUAL-OK: (-5858522125865295462884970652182979280896 0.0d0)
(MULTIPLE-VALUE-LIST (FLOOR -7.091696063135083d-21 0.3220521420236615d0))
EQUAL-OK: (-1 0.3220521420236615d0)
(MULTIPLE-VALUE-LIST (FLOOR -7.472975994693659d-21 -0.06404310380828848d0))
EQUAL-OK: (0 -7.472975994693657d-21)
(MULTIPLE-VALUE-LIST (FLOOR 2.2994935284804662d-21 0.8294627436562217d0))
EQUAL-OK: (0 2.2994935284804662d-21)
(MULTIPLE-VALUE-LIST (FLOOR -6.098532726052559d-21 -0.5103342535054871d0))
EQUAL-OK: (0 -6.098532726052559d-21)
(MULTIPLE-VALUE-LIST (FLOOR -7.8237727943808d-21 0.20193503990844952d0))
EQUAL-OK: (-1 0.20193503990844952d0)
(MULTIPLE-VALUE-LIST (FLOOR -5.357065560054238d-21 0.535324456368991d0))
EQUAL-OK: (-1 0.535324456368991d0)
(MULTIPLE-VALUE-LIST (FLOOR 8.67862366495009d-23 5.869284875063336d9))
EQUAL-OK: (0 8.67862366495009d-23)
(MULTIPLE-VALUE-LIST (FLOOR -3.913399519946995d-21 4.645302733766437d9))
EQUAL-OK: (-1 4.645302733766437d9)
(MULTIPLE-VALUE-LIST (FLOOR 6.256033435453117d-21 3.5904533516671333d9))
EQUAL-OK: (0 6.2560334354531166d-21)
(MULTIPLE-VALUE-LIST (FLOOR -7.970558626381476d-21 4.548434922363557d9))
EQUAL-OK: (-1 4.548434922363557d9)
(MULTIPLE-VALUE-LIST (FLOOR 7.442840440717647d-21 -3.3266294818989463d9))
EQUAL-OK: (-1 -3.3266294818989463d9)
(MULTIPLE-VALUE-LIST (FLOOR -4.6732789449833775d-21 5.614289998802058d8))
EQUAL-OK: (-1 5.614289998802058d8)
(MULTIPLE-VALUE-LIST (FLOOR 7.136201304639634d-21 -1.152382297069954d-12))
EQUAL-OK: (-1 -1.1523822899337527d-12)
(MULTIPLE-VALUE-LIST (FLOOR -7.575364316308001d-21 -4.790622052171537d-11))
EQUAL-OK: (0 -7.575364316308001d-21)
(MULTIPLE-VALUE-LIST (FLOOR 9.212759331893804d-21 -6.41398602124991d-11))
EQUAL-OK: (-1 -6.413986020328634d-11)
(MULTIPLE-VALUE-LIST (FLOOR -1.9103188467401064d-21 -5.1860189481412404d-11))
EQUAL-OK: (0 -1.9103188467401064d-21)
(MULTIPLE-VALUE-LIST (FLOOR -4.473075242507236d-21 2.3036197131739102d-11))
EQUAL-OK: (-1 2.303619712726603d-11)
(MULTIPLE-VALUE-LIST (FLOOR 5.138595152941494d-21 2.9424719822474346d-11))
EQUAL-OK: (0 5.138595152941494d-21)
(MULTIPLE-VALUE-LIST (FLOOR -5.137698996313833d-22 2.2468745456943227d19))
EQUAL-OK: (-1 2.2468745456943227d19)
(MULTIPLE-VALUE-LIST (FLOOR -7.229848882029144d-21 -3.031606285079872d19))
EQUAL-OK: (0 -7.229848882029144d-21)
(MULTIPLE-VALUE-LIST (FLOOR -6.85451854164106d-21 1.7676693722776926d19))
EQUAL-OK: (-1 1.7676693722776926d19)
(MULTIPLE-VALUE-LIST (FLOOR 5.372223270507929d-21 -7.439745956384552d19))
EQUAL-OK: (-1 -7.439745956384552d19)
(MULTIPLE-VALUE-LIST (FLOOR 5.598138480271164d-21 5.149401801116799d19))
EQUAL-OK: (0 5.598138480271163d-21)
(MULTIPLE-VALUE-LIST (FLOOR 9.285618896860432d-21 6.546424273112694d19))
EQUAL-OK: (0 9.285618896860432d-21)
(MULTIPLE-VALUE-LIST (FLOOR 7.511556502656318d-21 4.2351039143592516d-21))
EQUAL-OK: (1 3.2764525882970666d-21)
(MULTIPLE-VALUE-LIST (FLOOR 6.050106800286075d-21 -1.187392681676287d-21))
EQUAL-OK: (-6 -1.0742492897716469d-21)
(MULTIPLE-VALUE-LIST (FLOOR 4.274671258683056d-21 8.647095729321104d-21))
EQUAL-OK: (0 4.274671258683056d-21)
(MULTIPLE-VALUE-LIST (FLOOR 7.344809600387072d-21 6.305446958850813d-21))
EQUAL-OK: (1 1.039362641536258d-21)
(MULTIPLE-VALUE-LIST (FLOOR 9.753544125648588d-21 9.227661371269332d-21))
EQUAL-OK: (1 5.258827543792571d-22)
(MULTIPLE-VALUE-LIST (FLOOR -7.227362780459908d-21 -6.70179577363263d-21))
EQUAL-OK: (1 -5.255670068272766d-22)
(/ -0.651381628953465d0 -0.9237050214744277d0)
EQL-OK: 0.7051835962889135d0
(/ 0.5067986732438687d0 0.6260017267692811d0)
EQL-OK: 0.8095803119575966d0
(/ -0.8399445051045212d0 0.1829250718359493d0)
EQL-OK: -4.591740742120902d0
(/ -0.5987041550692662d0 -0.4124053212463479d0)
EQL-OK: 1.4517372211878756d0
(/ 0.5861382519823647d0 -0.7560374696447822d0)
EQL-OK: -0.7752767230673855d0
(/ -0.012882644582824954d0 -0.4671067448591679d0)
EQL-OK: 0.02757965866390787d0
(/ -0.7830198970435231d0 2.1690164135025935d9)
EQL-OK: -3.610022921767931d-10
(/ -0.2339206226652567d0 2.729373380002701d9)
EQL-OK: -8.57048817062271d-11
(/ -0.2285806315782951d0 -2.602073870582813d9)
EQL-OK: 8.784555817667759d-11
(/ -0.5298716781559242d0 1.3509547453340487d9)
EQL-OK: -3.9222015392151683d-10
(/ 0.7287190523338418d0 -8.244205871151566d9)
EQL-OK: -8.839166121309548d-11
(/ 0.18973054487786212d0 6.557593452200545d9)
EQL-OK: 2.893295326415727d-11
(/ 0.5084032300982587d0 4.5431682148621014d-11)
EQL-OK: 1.119049980221105d10
(/ 0.6621212705475221d0 -1.838873437953206d-11)
EQL-OK: -3.600689731450519d10
(/ -0.4041791750277005d0 7.707875701307648d-11)
EQL-OK: -5.243716825365141d9
(/ -0.09569063343466655d0 4.789751448902253d-11)
EQL-OK: -1.9978204392338054d9
(/ -0.6471008513340974d0 1.890250884404079d-11)
EQL-OK: -3.4233596009563705d10
(/ -0.4301276572683971d0 9.134844738134672d-11)
EQL-OK: -4.708647706651978d9
(/ -0.5061027989171409d0 4.246468515299164d19)
EQL-OK: -1.1918204434902915d-20
(/ -0.9601783702217944d0 7.495754288877955d19)
EQL-OK: -1.2809629734615065d-20
(/ -0.6477754868655262d0 -8.507334914535449d19)
EQL-OK: 7.614317449272521d-21
(/ 0.1934462826116784d0 3.6173521417193476d19)
EQL-OK: 5.347731573618163d-21
(/ -0.7794308505212441d0 4.172217291786081d19)
EQL-OK: -1.8681453913144062d-20
(/ -0.8462346361305484d0 7.378170819620111d19)
EQL-OK: -1.1469436759043748d-20
(/ 0.9783005897625496d0 6.175045007596078d-21)
EQL-OK: 1.584280905740958d20
(/ -0.9700832605850568d0 -1.7695051741124812d-21)
EQL-OK: 5.482229013948009d20
(/ 0.07062591404368701d0 -8.855398515753737d-21)
EQL-OK: -7.975464223100028d18
(/ 0.4751383409805402d0 -8.1371029771106d-21)
EQL-OK: -5.8391585103087485d19
(/ -0.5103510786836052d0 8.302178001281015d-21)
EQL-OK: -6.14719509271975d19
(/ 0.7148807879199733d0 4.338856119331781d-21)
EQL-OK: 1.6476250151158982d20
(/ 4.180670608983218d9 -0.8621420131862095d0)
EQL-OK: -4.849167010818503d9
(/ 3.202209376555907d9 0.008113117870009012d0)
EQL-OK: 3.9469528581523615d11
(/ 7.767843042272955d9 -0.04145956871894663d0)
EQL-OK: -1.8735947532235483d11
(/ 1.1937839884817846d9 0.45557753834605563d0)
EQL-OK: 2.6203749921818776d9
(/ -2.4205138097471213d9 -0.3737757916008485d0)
EQL-OK: 6.475844247109412d9
(/ -7.534066568550288d9 -0.3609372553147958d0)
EQL-OK: 2.0873618496321087d10
(/ 6.098867840095913d9 3.0464612528039427d9)
EQL-OK: 2.0019515542771322d0
(/ 4.956687716396978d9 7.035407926465974d9)
EQL-OK: 0.704534515724495d0
(/ 6.969049109639194d9 -8.115758334653503d9)
EQL-OK: -0.8587058438990264d0
(/ -8.0699835500126705d9 -1.1896420666819375d9)
EQL-OK: 6.783539163608158d0
(/ -2.229793060172571d9 -2.658809828346301d9)
EQL-OK: 0.8386433043838396d0
(/ 3.0672739776038485d9 -7.988270854370873d9)
EQL-OK: -0.3839722054398737d0
(/ 2.477055391151669d9 -1.3522358047779648d-11)
EQL-OK: -1.8318220700851785d20
(/ 1.1318646612469008d9 -8.457695758685169d-11)
EQL-OK: -1.3382659929385544d19
(/ -7.978772126259147d9 6.210468872769038d-11)
EQL-OK: -1.2847294286013678d20
(/ -9.057338243339752d9 7.364415429198257d-11)
EQL-OK: -1.2298787772658011d20
(/ -5.341117220720213d9 4.7359651161519756d-11)
EQL-OK: -1.1277779902779204d20
(/ 5.838003830912871d9 -5.0625478501901024d-11)
EQL-OK: -1.153175042225754d20
(/ 6.407156672927742d9 5.006339136594536d19)
EQL-OK: 1.279808758079079d-10
(/ 4.687485139826675d8 -3.5561755068968083d19)
EQL-OK: -1.3181253655045475d-11
(/ -5.838044723576891d9 -6.843985743599882d19)
EQL-OK: 8.530182473036721d-11
(/ 3.9279221543350096d9 -5.882918042982924d19)
EQL-OK: -6.67682623765291d-11
(/ -9.686323716926361d9 -3.44800215666902d19)
EQL-OK: 2.8092568614527606d-10
(/ 7.301304808910639d9 1.2845297359643038d19)
EQL-OK: 5.684029419085038d-10
(/ 4.380345662298534d9 -4.352751895415198d-21)
EQL-OK: -1.0063393842668593d30
(/ 8.239490918139045d9 3.2397577733346748d-21)
EQL-OK: 2.5432428886984834d30
(/ 3.8980499504872713d9 8.311650110069505d-21)
EQL-OK: 4.689862901910189d29
(/ -9.425472285331268d9 -3.294031046828316d-21)
EQL-OK: 2.861379310436876d30
(/ 2.517833161624173d9 3.6891560299469316d-21)
EQL-OK: 6.824957093669991d29
(/ -5.463519676339016d9 -7.298583081866205d-22)
EQL-OK: 7.485726496576409d30
(/ 1.39357009199772d-11 0.417842407627649d0)
EQL-OK: 3.335157146709649d-11
(/ 8.58494900746665d-11 -0.6481371063028898d0)
EQL-OK: -1.3245575548724563d-10
(/ -9.310282234439046d-11 0.9146343299129254d0)
EQL-OK: -1.0179239866631073d-10
(/ -8.800556770159418d-11 -0.9305573406536135d0)
EQL-OK: 9.45729659601417d-11
(/ -1.3361456473382827d-11 0.06420301636905124d0)
EQL-OK: -2.081125970247039d-10
(/ 6.1406425153971765d-12 -0.3082496074575478d0)
EQL-OK: -1.992100676476244d-11
(/ -3.6962256202372035d-11 3.089420488573177d9)
EQL-OK: -1.1964139015418631d-20
(/ -6.145126590884831d-11 -6.225608984106817d9)
EQL-OK: 9.870723661849874d-21
(/ 9.052281678541901d-11 -6.9187138778508625d9)
EQL-OK: -1.3083763598782874d-20
(/ -3.4950245360118636d-11 7.543342567738434d9)
EQL-OK: -4.633257080169575d-21
(/ -3.482822570743636d-11 -3.87599225187502d9)
EQL-OK: 8.985628309909062d-21
(/ -9.42226868788213d-11 7.501937454180854d9)
EQL-OK: -1.2559780383974101d-20
(/ -4.8165035309367155d-11 9.484620130429997d-11)
EQL-OK: -0.5078225026096383d0
(/ 6.880022773725747d-11 -9.699156104509544d-11)
EQL-OK: -0.7093424107822056d0
(/ 1.5817962388036865d-11 -7.11651152335492d-11)
EQL-OK: -0.22227129593095693d0
(/ -7.0140750853949335d-12 -4.4677941652531186d-11)
EQL-OK: 0.15699190307254357d0
(/ -2.6947489262085355d-11 8.365454450205894d-11)
EQL-OK: -0.3221282169723859d0
(/ 8.703167674410303d-11 -4.88739813223768d-11)
EQL-OK: -1.7807363834354917d0
(/ 1.165112061543483d-12 -5.899528740399518d19)
EQL-OK: -1.9749239520860124d-32
(/ 7.126386981630328d-12 5.091741402945837d19)
EQL-OK: 1.3995971942933598d-31
(/ -7.132349854872655d-13 7.70347159367981d19)
EQL-OK: -9.258617712985763d-33
(/ 4.507266517270466d-11 -1.6192737232544485d19)
EQL-OK: -2.7835111831566513d-30
(/ -3.025128309814261d-11 -5.606736896306867d19)
EQL-OK: 5.395523930874836d-31
(/ -5.390258677516223d-11 6.628750121976767d18)
EQL-OK: -8.131636550373976d-30
(/ -8.484515181627938d-11 6.226893371743352d-21)
EQL-OK: -1.3625598954575508d10
(/ 5.110456708789676d-11 -7.434814854731122d-21)
EQL-OK: -6.873683889434922d9
(/ -7.784815533665352d-11 -8.942884975553875d-21)
EQL-OK: 8.705038200698988d9
(/ 6.06871371776654d-11 -8.4720755768444d-21)
EQL-OK: -7.163195916657484d9
(/ 6.395725883763629d-11 3.2465500186809204d-21)
EQL-OK: 1.970006883295217d10
(/ 8.23766365482318d-11 3.5665958051648335d-21)
EQL-OK: 2.3096712116618633d10
(/ -6.882125490660233d19 0.680553203393516d0)
EQL-OK: -1.0112545876418106d20
(/ -8.955858402134752d19 0.11144092291315044d0)
EQL-OK: -8.03641801236189d20
(/ 4.517225460957592d19 -0.5804969398143229d0)
EQL-OK: -7.781652496570381d19
(/ -9.741926397385082d19 -0.9037000739789977d0)
EQL-OK: 1.0780043819728059d20
(/ 9.654390326446178d19 -0.061963385089831124d0)
EQL-OK: -1.558079874501655d21
(/ 9.50855454738802d19 0.30375471599023185d0)
EQL-OK: 3.130339727036138d20
(/ 4.323538184184934d19 -2.6027608151521606d9)
EQL-OK: -1.661135421670383d10
(/ 4.0554081767557594d17 4.814123702784068d9)
EQL-OK: 8.423979995384136d7
(/ 5.12727309625028d19 1.761988796449604d9)
EQL-OK: 2.9099351293162037d10
(/ -7.335661993746345d19 -4.961351435504d9)
EQL-OK: 1.4785612527368061d10
(/ 3.7135994768593306d18 3.273427798269768d8)
EQL-OK: 1.1344681189614824d10
(/ 1.3911083524706402d19 8.651242909451927d9)
EQL-OK: 1.6079866985942366d9
(/ 6.473382688386894d19 -3.700509647679497d-11)
EQL-OK: -1.7493219325738552d30
(/ 7.25328632809461d19 6.793518758100849d-11)
EQL-OK: 1.0676773828651782d30
(/ 7.053090091571119d19 8.009021819073383d-11)
EQL-OK: 8.806431360661643d29
(/ -1.6322872380348074d19 -1.234889420758779d-11)
EQL-OK: 1.3218084231637898d30
(/ -7.716951191497702d19 -2.473367210466666d-11)
EQL-OK: 3.12001839388891d30
(/ -2.1174708383466066d19 -9.66632270128099d-11)
EQL-OK: 2.1905650202077337d29
(/ 4.0902039392392786d18 -5.029423690873208d19)
EQL-OK: -0.08132549951322827d0
(/ 1.4562115759233494d17 4.2665150414889705d19)
EQL-OK: 0.0034131171735308037d0
(/ -3.309692589578652d19 1.1329455009949342d19)
EQL-OK: -2.9213166799922274d0
(/ 3.059130103268258d19 -7.719433592654628d19)
EQL-OK: -0.3962894513632647d0
(/ 5.622979366632147d19 -8.407251901594788d19)
EQL-OK: -0.6688248945610293d0
(/ -7.457587910839625d18 1.102755747735572d19)
EQL-OK: -0.6762683328700153d0
(/ 1.2026615920578564d19 -3.77964792582931d-21)
EQL-OK: -3.1819407935832407d39
(/ -2.74643694419756d19 2.538907641816601d-22)
EQL-OK: -1.0817396028760112d41
(/ 8.267361397156658d18 -4.986401395715489d-21)
EQL-OK: -1.6579815263689556d39
(/ 9.876393891158812d19 -5.792612775193684d-22)
EQL-OK: -1.7049981199250076d41
(/ 3.927461252713038d17 4.810589424292295d-21)
EQL-OK: 8.164199656866003d37
(/ 7.29943837795987d19 -4.8820727437034755d-21)
EQL-OK: -1.4951514983823475d40
(/ -7.837850970911807d-21 0.41514160181315674d0)
EQL-OK: -1.8879945870708947d-20
(/ 1.1499234744049124d-21 0.4643166529612681d0)
EQL-OK: 2.4765932194571437d-21
(/ -1.094368243984769d-21 0.9008053219044149d0)
EQL-OK: -1.2148776404552516d-21
(/ 2.4821206327531197d-21 0.22988631081892086d0)
EQL-OK: 1.0797165885654937d-20
(/ -4.56226662576732d-22 0.6695285124602162d0)
EQL-OK: -6.814148375851899d-22
(/ 6.442796853653397d-21 -0.0419134640377401d0)
EQL-OK: -1.5371663978553802d-19
(/ -5.584403218169678d-21 -8.092869169805251d9)
EQL-OK: 6.9003997235062955d-31
(/ -9.796722996869492d-21 -3.2988270899833827d9)
EQL-OK: 2.9697594719700335d-30
(/ 9.441829923771915d-22 5.464575083746736d9)
EQL-OK: 1.7278250877830762d-31
(/ -6.419360319610147d-21 -7.333962810289677d9)
EQL-OK: 8.752921831841952d-31
(/ 7.973734412555454d-21 -9.367577614661436d9)
EQL-OK: -8.512055880994846d-31
(/ 8.105484193881594d-21 -8.664550975192905d9)
EQL-OK: -9.354765431108951d-31
(/ -5.3151708182942476d-21 -3.406928289732576d-11)
EQL-OK: 1.560106455516696d-10
(/ -7.026602845639829d-21 -9.92483846943868d-11)
EQL-OK: 7.079815824989677d-11
(/ -5.901970468193158d-21 2.074489043942647d-11)
EQL-OK: -2.8450236868815825d-10
(/ -6.40466723844613d-21 -2.551008177490094d-11)
EQL-OK: 2.510641594550906d-10
(/ 8.056066940872177d-21 4.645883100460603d-11)
EQL-OK: 1.7340227394170724d-10
(/ 7.453765056481805d-21 6.956136187014756d-11)
EQL-OK: 1.0715381148511711d-10
(/ 7.357434693258832d-21 -7.093525088486332d19)
EQL-OK: -1.0372042956753416d-40
(/ -3.3759558579798473d-21 9.991075630444324d19)
EQL-OK: -3.3789713769084054d-41
(/ 6.908026973557955d-21 -4.20805893397862d19)
EQL-OK: -1.6416183998227845d-40
(/ 5.181767322756247d-21 7.46986056263721d19)
EQL-OK: 6.936899664063931d-41
(/ -5.7217313601659264d-21 5.604979023134118d19)
EQL-OK: -1.0208301113260054d-40
(/ -9.340193892824771d-21 9.147101848766205d19)
EQL-OK: -1.021109641857176d-40
(/ 8.331002176099931d-21 2.0276444314093977d-21)
EQL-OK: 4.108709617449606d0
(/ -3.747505523684784d-21 4.394623185543803d-21)
EQL-OK: -0.8527478615259381d0
(/ -3.310403953328861d-21 2.3420390876737627d-21)
EQL-OK: -1.413470838617356d0
(/ 6.23845405853013d-21 -8.933620117412232d-21)
EQL-OK: -0.6983119918397873d0
(/ -4.276770609150315d-21 6.853299965034864d-21)
EQL-OK: -0.624045442483205d0
(/ -8.847946637724495d-21 6.33827952828724d-21)
EQL-OK: -1.3959539963860554d0
(+ 0.31465012912061093874L0 -0.07221963987249409544L0)
EQL-OK: 0.2424304892481168433L0
(+ 0.7168586654865411176L0 -0.19348808923554474066L0)
EQL-OK: 0.52337057625099637695L0
(+ -0.64115701400120904706L0 0.70535558267169594756L0)
EQL-OK: 0.0641985686704869005L0
(+ -0.8607621650923123159L0 0.8368256394262067108L0)
EQL-OK: -0.023936525666105605082L0
(+ 0.44168990042410450855L0 -0.6041911435521196045L0)
EQL-OK: -0.16250124312801509594L0
(+ 0.0234267775301613878L0 -0.43594485933986284478L0)
EQL-OK: -0.41251808180970145698L0
(+ -0.99559578594307881024L0 -9.836107054378142702L9)
EQL-OK: -9.836107055373738488L9
(+ -0.72423071295455899397L0 9.238843039595790172L9)
EQL-OK: 9.238843038871559459L9
(+ -0.20719390117857393156L0 -9.029224604657100362L9)
EQL-OK: -9.029224604864294263L9
(+ 0.20816015380514039224L0 -7.4782571284307568003L9)
EQL-OK: -7.4782571282225966468L9
(+ -0.16613875159201114463L0 -1.203554507952656804L9)
EQL-OK: -1.2035545081187955556L9
(+ -0.9837368636729942673L0 7.5892747601936916704L9)
EQL-OK: 7.5892747592099548066L9
(+ -0.92391870362276300936L0 -5.309205414965326826L-11)
EQL-OK: -0.9239187036758550635L0
(+ -0.2308075581152660786L0 -2.5400598439608570973L-11)
EQL-OK: -0.23080755814066667704L0
(+ 0.5668336039528930528L0 1.9300606943253841182L-12)
EQL-OK: 0.56683360395482311353L0
(+ -0.19685144163870526662L0 -8.548847281762266571L-11)
EQL-OK: -0.19685144172419373944L0
(+ 0.053837363417219887007L0 -8.4734948552444605444L-11)
EQL-OK: 0.053837363332484938454L0
(+ 0.24539562474220232599L0 -1.3753029433519360674L-11)
EQL-OK: 0.24539562472844929655L0
(+ -0.83198492765474177585L0 -1.0728971972413839207L19)
EQL-OK: -1.0728971972413839208L19
(+ 0.58494670591273850794L0 -2.6078285749436068966L19)
EQL-OK: -2.6078285749436068966L19
(+ -0.6489422625947265175L0 5.675479528094312524L19)
EQL-OK: 5.675479528094312524L19
(+ 0.82416783003308421654L0 3.4337105673864461624L19)
EQL-OK: 3.4337105673864461624L19
(+ 0.5977825969561704576L0 9.447212597358366985L19)
EQL-OK: 9.447212597358366985L19
(+ 0.81709616259702447027L0 1.8840697606071622024L19)
EQL-OK: 1.8840697606071622024L19
(+ 0.99140689029640294337L0 -7.9441986163714183364L-21)
EQL-OK: 0.99140689029640294337L0
(+ 0.49487318874207713882L0 -2.377409962381832069L-21)
EQL-OK: 0.49487318874207713882L0
(+ 0.050320977002567080524L0 -1.3329877923173878127L-21)
EQL-OK: 0.050320977002567080524L0
(+ -0.25724170819862546218L0 7.609825486664252559L-22)
EQL-OK: -0.25724170819862546218L0
(+ 0.3667308347763138993L0 4.077152141636570548L-21)
EQL-OK: 0.3667308347763138993L0
(+ 0.5130660492586603372L0 -5.091230019243679202L-21)
EQL-OK: 0.5130660492586603372L0
(+ 8.916053557053472733L8 0.59999700846599703845L0)
EQL-OK: 8.916053563053442818L8
(+ 1.250980635471676891L9 -0.46325398810664378442L0)
EQL-OK: 1.2509806350084229029L9
(+ -5.548594356609427516L9 -0.21577258386321002115L0)
EQL-OK: -5.5485943568252001L9
(+ 1.06508055885340104636L9 0.8422978396429581549L0)
EQL-OK: 1.065080559695698886L9
(+ 6.225756677310580186L9 0.49531151031004978726L0)
EQL-OK: 6.2257566778058916964L9
(+ -2.273191688409860673L9 -0.80983784631745405196L0)
EQL-OK: -2.2731916892196985192L9
(+ 5.688674258485728496L8 8.2409948814224157357L9)
EQL-OK: 8.809862307270988585L9
(+ -2.7544302700606018156L9 9.230174236450698873L9)
EQL-OK: 6.4757439663900970574L9
(+ -4.588747139238971857L9 6.342892129519977196L9)
EQL-OK: 1.7541449902810053392L9
(+ 1.5275587581475159762L9 4.3720035959575018324L9)
EQL-OK: 5.8995623541050178087L9
(+ 2.8881760807020099163L9 7.5622154923755766074L9)
EQL-OK: 1.0450391573077586524L10
(+ 6.1044519092512786468L9 1.3858854402983849103L9)
EQL-OK: 7.490337349549663557L9
(+ 4.8767035174458515886L9 6.3051681974292703475L-11)
EQL-OK: 4.8767035174458515886L9
(+ -9.4188975960705796466L8 -8.975187577611984141L-12)
EQL-OK: -9.4188975960705796466L8
(+ -9.689819354179956828L9 -9.7453604450079548966L-11)
EQL-OK: -9.689819354179956828L9
(+ 4.987209054002559248L9 9.284991248759031191L-11)
EQL-OK: 4.987209054002559248L9
(+ -3.5572071813296941216L9 -6.261737879308894803L-11)
EQL-OK: -3.5572071813296941216L9
(+ -7.5872628366112743053L9 2.2152240842834943001L-11)
EQL-OK: -7.5872628366112743053L9
(+ 7.0206128338340270845L9 5.9246012493594508704L19)
EQL-OK: 5.9246012500615121536L19
(+ 5.3017367315254228474L9 -1.0933628665004153848L19)
EQL-OK: -1.0933628659702417116L19
(+ -6.339538144593375358L9 -8.0543624921112893224L19)
EQL-OK: -8.054362492745243137L19
(+ -1.6010717980362600647L9 9.973849926670833376L19)
EQL-OK: 9.973849926510726196L19
(+ 3.2030522063397198562L9 -2.4396867565423101768L19)
EQL-OK: -2.4396867562220049562L19
(+ 8.8622195973163761245L9 -6.4961266512803550736L19)
EQL-OK: -6.496126650394133114L19
(+ 5.45529926142043848L9 6.939479435912862762L-21)
EQL-OK: 5.45529926142043848L9
(+ -4.484627189114150671L9 -1.6571134694524616111L-21)
EQL-OK: -4.484627189114150671L9
(+ 8.813820141949620774L9 -2.8267147580155665537L-21)
EQL-OK: 8.813820141949620774L9
(+ -9.972890003927356798L9 -3.0273462676816521264L-21)
EQL-OK: -9.972890003927356798L9
(+ 6.792889851253184185L9 -5.937539083879130763L-21)
EQL-OK: 6.792889851253184185L9
(+ -3.2663407400779399923L9 -4.0747082067253115984L-21)
EQL-OK: -3.2663407400779399923L9
(+ -3.4242541190221825202L-11 -0.71988400153646663195L0)
EQL-OK: -0.71988400157070917316L0
(+ -7.8906347145510431055L-11 -0.22021321631029436988L0)
EQL-OK: -0.22021321638920071702L0
(+ -7.486719858997914782L-11 0.38102237422222776873L0)
EQL-OK: 0.38102237414736057013L0
(+ -2.6956794925506179954L-12 -0.49627581161649902356L0)
EQL-OK: -0.49627581161919470304L0
(+ -8.312064814531952837L-11 0.5797009072836515581L0)
EQL-OK: 0.57970090720053090995L0
(+ -4.0305959593285763394L-11 0.16233584979062195143L0)
EQL-OK: 0.16233584975031599183L0
(+ 3.731977491280278192L-11 3.0305998235716452734L9)
EQL-OK: 3.0305998235716452734L9
(+ 2.7847304030282320388L-11 -6.146190065628934066L9)
EQL-OK: -6.146190065628934066L9
(+ -1.1797664511795163538L-11 1.4888590774768513251L9)
EQL-OK: 1.4888590774768513251L9
(+ -3.736849276790130025L-11 1.9988395869145483342L9)
EQL-OK: 1.9988395869145483342L9
(+ 5.7818526942690563386L-12 3.5155514714363584847L9)
EQL-OK: 3.5155514714363584847L9
(+ 1.8183862272066184134L-11 -4.635399960322760982L9)
EQL-OK: -4.635399960322760982L9
(+ 3.5539523819420841283L-11 4.3044646394847154864L-11)
EQL-OK: 7.858417021426799615L-11
(+ 8.719537619908441472L-11 -8.580989797275158101L-11)
EQL-OK: 1.3854782263328337111L-12
(+ 2.49701168436805957L-12 -2.6066406246366064513L-11)
EQL-OK: -2.3569394561998004944L-11
(+ 4.2774640500882048993L-11 3.7620100241760410496L-11)
EQL-OK: 8.039474074264245949L-11
(+ 3.9907211434460210612L-11 9.72066373418363098L-11)
EQL-OK: 1.3711384877629652041L-10
(+ -7.851637932849992129L-11 4.9296626910685147652L-11)
EQL-OK: -2.9219752417814773637L-11
(+ 3.14874349918113769L-11 -1.8148353890339025639L19)
EQL-OK: -1.8148353890339025639L19
(+ -8.444922682942673745L-11 -5.0034364072191331772L19)
EQL-OK: -5.0034364072191331772L19
(+ 4.762299619586316462L-12 -1.3412404578328588061L19)
EQL-OK: -1.3412404578328588061L19
(+ -9.22833351501850052L-12 3.1000370791158631634L19)
EQL-OK: 3.1000370791158631634L19
(+ 6.1164399913981911425L-11 6.1863455383782109436L19)
EQL-OK: 6.1863455383782109436L19
(+ -8.413645565754525347L-11 -2.5034082588556447364L19)
EQL-OK: -2.5034082588556447364L19
(+ 3.4875247204061292656L-11 -7.8682893445087250245L-21)
EQL-OK: 3.487524719619300331L-11
(+ -2.1647610944488691768L-11 -8.371089558230910183L-21)
EQL-OK: -2.1647610952859781326L-11
(+ 5.7598234760228848032L-11 2.8011007358408259187L-21)
EQL-OK: 5.7598234763029948767L-11
(+ -9.268425959344303144L-11 -6.4655012698265179856L-21)
EQL-OK: -9.2684259599908532713L-11
(+ 7.067467072298381137L-11 -3.8206328350148818058L-21)
EQL-OK: 7.0674670719163178536L-11
(+ 7.8912028748606542386L-11 8.456364925917236866L-21)
EQL-OK: 7.891202875706290731L-11
(+ -6.976183652817340798L18 0.08822040416435015717L0)
EQL-OK: -6.976183652817340798L18
(+ -1.2414457404200743984L19 -0.85791705029429396234L0)
EQL-OK: -1.2414457404200743985L19
(+ -8.9687515173878579424L19 -0.3328210335620137057L0)
EQL-OK: -8.9687515173878579424L19
(+ -5.438581645592863998L19 -0.67774278184358142436L0)
EQL-OK: -5.438581645592863998L19
(+ -5.4350840695201649084L19 -0.72739900682842943577L0)
EQL-OK: -5.4350840695201649084L19
(+ 7.814697448090367615L19 0.24326892882624165414L0)
EQL-OK: 7.814697448090367615L19
(+ -2.4356768540932142124L19 6.5169042447583127604L9)
EQL-OK: -2.435676853441523788L19
(+ -8.7464253032141704904L19 6.8315507162032823036L9)
EQL-OK: -8.7464253025310154184L19
(+ -2.4810334273518910993L18 -7.638114077520272164L9)
EQL-OK: -2.4810334349900051768L18
(+ -9.80334620432051716L19 4.474822777555302305L9)
EQL-OK: -9.8033462038730348824L19
(+ -1.5185085475715921137L19 8.496315073274781452L9)
EQL-OK: -1.5185085467219606064L19
(+ -9.3842548893937585184L19 -9.948865349103608366L9)
EQL-OK: -9.3842548903886450536L19
(+ 5.9391253980818643888L19 5.6213951287112563564L-11)
EQL-OK: 5.9391253980818643888L19
(+ -4.8270749631022207188L19 6.506986668488438766L-11)
EQL-OK: -4.8270749631022207188L19
(+ 8.953940231252599753L19 -1.7735448342981541823L-11)
EQL-OK: 8.953940231252599753L19
(+ -6.1065165153181616235L18 -1.8103764902203059955L-11)
EQL-OK: -6.1065165153181616235L18
(+ -9.6224955477275161216L19 9.4659333494557267205L-11)
EQL-OK: -9.6224955477275161216L19
(+ -9.2620034246522033504L19 -8.920063409062509698L-11)
EQL-OK: -9.2620034246522033504L19
(+ 5.9633456897700879935L18 4.0390945943970882336L19)
EQL-OK: 4.6354291633740970328L19
(+ -6.1420542659063065884L19 -3.9869088703267959336L19)
EQL-OK: -1.01289631362331025216L20
(+ 7.804124970286546613L19 8.061318173712112305L19)
EQL-OK: 1.5865443143998658918L20
(+ -7.763817772329800516L19 -4.9349702057713961232L19)
EQL-OK: -1.2698787978101196639L20
(+ -3.1480955091040648274L19 -4.706529024129812914L19)
EQL-OK: -7.8546245332338777416L19
(+ -4.7131343507844737428L19 5.4602299451983202032L19)
EQL-OK: 7.470955944138464604L18
(+ 5.9403761194093478956L19 -6.280541343011718101L-21)
EQL-OK: 5.9403761194093478956L19
(+ -3.763295388652278206L19 -9.963494853851408371L-21)
EQL-OK: -3.763295388652278206L19
(+ 2.5136958358030666948L19 5.335607709622335287L-21)
EQL-OK: 2.5136958358030666948L19
(+ 6.2273952762016960176L19 -5.6012630121574213906L-21)
EQL-OK: 6.2273952762016960176L19
(+ -9.3934610912833028936L19 -2.59552531586503232L-21)
EQL-OK: -9.3934610912833028936L19
(+ 2.9584554660239488776L19 6.875837450751388893L-21)
EQL-OK: 2.9584554660239488776L19
(+ -8.4905558825256936576L-21 0.112912972443893420624L0)
EQL-OK: 0.11291297244389342062L0
(+ -5.3259362300699140443L-21 0.44064771529278198132L0)
EQL-OK: 0.44064771529278198132L0
(+ -9.245572241572266517L-21 0.043497459079983070442L0)
EQL-OK: 0.043497459079983070432L0
(+ 7.6311333407948593004L-22 0.74437178299084331024L0)
EQL-OK: 0.74437178299084331024L0
(+ -7.71114100404407176L-21 -0.30667849853816871164L0)
EQL-OK: -0.30667849853816871164L0
(+ 3.544120177696956032L-21 0.79322122717232419205L0)
EQL-OK: 0.79322122717232419205L0
(+ 7.7913861181291523115L-21 8.526554352243632931L9)
EQL-OK: 8.526554352243632931L9
(+ -3.9196632415032070805L-21 -2.5228304289307799614L9)
EQL-OK: -2.5228304289307799614L9
(+ 7.643174046933518012L-22 2.9248526891356128762L9)
EQL-OK: 2.9248526891356128762L9
(+ 1.8801815336593227227L-21 6.8178694125314363L9)
EQL-OK: 6.8178694125314363L9
(+ -2.6985037225367287349L-21 -4.5571976978858014136L9)
EQL-OK: -4.5571976978858014136L9
(+ 6.0444611510506986126L-21 -8.64585025875790907L9)
EQL-OK: -8.64585025875790907L9
(+ -1.250177749198396931L-21 6.428634063301101147L-11)
EQL-OK: 6.428634063176083372L-11
(+ -1.5666058964343815161L-21 3.552568414787808555L-11)
EQL-OK: 3.5525684146311479653L-11
(+ -5.8078119773790503857L-21 8.896395897015492877L-12)
EQL-OK: 8.8963958912076809L-12
(+ 6.7472260162031965506L-21 -6.617115409846031908L-11)
EQL-OK: -6.617115409171309306L-11
(+ -4.16121984125470857L-21 -3.095053467302410671L-11)
EQL-OK: -3.095053467718532655L-11
(+ -2.114411383443366621L-21 9.716046816037651671L-11)
EQL-OK: 9.716046815826210533L-11
(+ -2.3406730990296292957L-21 7.900725768498098123L18)
EQL-OK: 7.900725768498098123L18
(+ -4.1514248667302411754L-21 -8.4325334951006246184L19)
EQL-OK: -8.4325334951006246184L19
(+ 8.433933541545648577L-21 -4.9459088765496691632L19)
EQL-OK: -4.9459088765496691632L19
(+ 2.2922577085250648752L-21 7.813245819908182463L19)
EQL-OK: 7.813245819908182463L19
(+ 8.887270525300553388L-21 8.651116139112459977L19)
EQL-OK: 8.651116139112459977L19
(+ 1.1406539199130032192L-21 2.3931812472136783544L19)
EQL-OK: 2.3931812472136783544L19
(+ -3.778523001798117503L-21 2.0779948578933832532L-22)
EQL-OK: -3.5707235160087791776L-21
(+ -1.6066062689688361383L-21 -3.5232009896946632975L-21)
EQL-OK: -5.1298072586634994358L-21
(+ 3.9703618511174300454L-21 -8.036088455194107478L-21)
EQL-OK: -4.0657266040766774324L-21
(+ 6.46657477279861825L-21 2.6384883907642781157L-21)
EQL-OK: 9.105063163562896366L-21
(+ 4.9706631077050274314L-21 2.3628052244020145395L-21)
EQL-OK: 7.333468332107041971L-21
(+ 7.065951142271372955L-21 3.1965272324939519L-21)
EQL-OK: 1.02624783747653248544L-20
(- 0.3211111183819802968L0 -0.7024866236309383056L0)
EQL-OK: 1.0235977420129186024L0
(- -0.29770116676264721836L0 0.8494818768850108081L0)
EQL-OK: -1.1471830436476580264L0
(- -0.7677860965279355367L0 0.9474539728585997539L0)
EQL-OK: -1.7152400693865352905L0
(- -0.25414380069764370257L0 0.82619594943351718565L0)
EQL-OK: -1.0803397501311608883L0
(- 0.21685951051311267031L0 0.13084151170902027524L0)
EQL-OK: 0.08601799880409239507L0
(- -0.6658362643286463323L0 -0.101768362258000388376L0)
EQL-OK: -0.56406790207064594393L0
(- -0.8594165074009265017L0 3.58724520062188585L9)
EQL-OK: -3.5872452014813023575L9
(- -0.58779846333918551446L0 -2.8410824560251060135L9)
EQL-OK: 2.84108245543730755L9
(- 0.37819983918255152712L0 1.75837003745458279L9)
EQL-OK: -1.7583700370763829509L9
(- -0.19345242719447268632L0 -8.900743696911070234L9)
EQL-OK: 8.900743696717617807L9
(- 0.9170636757513836193L0 -5.181144559509726756L9)
EQL-OK: 5.1811445604267904316L9
(- 0.20643137049004858552L0 3.3215544303850617772L9)
EQL-OK: -3.3215544301786304067L9
(- -0.4014437452394343757L0 4.7898418688154180505L-11)
EQL-OK: -0.40144374528733279438L0
(- 0.0725076594551243524L0 -3.5321788599004111594L-11)
EQL-OK: 0.072507659490446140996L0
(- -0.65551702819898271043L0 3.1653130032883009534L-11)
EQL-OK: -0.6555170282306358405L0
(- 0.9237105409310637695L0 -8.9028024814928743296L-11)
EQL-OK: 0.9237105410200917943L0
(- 0.8779771368966066218L0 7.399233988536237696L-12)
EQL-OK: 0.8779771368892073878L0
(- 0.51385216558296334914L0 -3.3989256599054576304L-11)
EQL-OK: 0.51385216561695260575L0
(- 0.74939199427992763254L0 -6.6998781480191798724L19)
EQL-OK: 6.6998781480191798724L19
(- 0.8073774220299670944L0 2.0433771569275457978L18)
EQL-OK: -2.043377156927545797L18
(- -0.75286822781531276375L0 -7.7011647701976081504L19)
EQL-OK: 7.7011647701976081504L19
(- -0.6361916050116532222L0 1.2717052281488651182L19)
EQL-OK: -1.2717052281488651183L19
(- 0.08977643006115956575L0 1.2624046205072289204L19)
EQL-OK: -1.2624046205072289204L19
(- -0.4220171145412169327L0 8.9155115345908061576L19)
EQL-OK: -8.9155115345908061576L19
(- 0.397772867452284942L0 5.7785851646148710778L-21)
EQL-OK: 0.397772867452284942L0
(- -0.53062845978690011166L0 -3.648685738612220277L-21)
EQL-OK: -0.53062845978690011166L0
(- 0.25409096540159836552L0 -7.8088660109317384514L-21)
EQL-OK: 0.25409096540159836552L0
(- 0.78038095936361252965L0 5.166705522400390383L-21)
EQL-OK: 0.78038095936361252965L0
(- 0.2384997171475220939L0 9.580584601627251829L-21)
EQL-OK: 0.23849971714752209389L0
(- 0.38777493167494073L0 -7.930455614605653916L-22)
EQL-OK: 0.38777493167494073L0
(- 9.34906594120583919L8 -0.06276538462885111519L0)
EQL-OK: 9.349065941833493036L8
(- 3.8000098261497040978L9 0.08156195452126583918L0)
EQL-OK: 3.8000098260681421433L9
(- -8.5084000619874580647L9 -0.49084164337509169664L0)
EQL-OK: -8.5084000614966164213L9
(- -9.367354572017391158L9 0.7369625068937909906L0)
EQL-OK: -9.367354572754353665L9
(- 6.810025547716964613L9 -0.65456201729278556224L0)
EQL-OK: 6.8100255483715266306L9
(- -2.0476539871173359762L9 -0.61684944260168028793L0)
EQL-OK: -2.0476539865004865336L9
(- 7.927587886187347037L9 -9.075678068210342653L9)
EQL-OK: 1.700326595439768969L10
(- 8.3881162961959078424L9 -8.168276983460029623L9)
EQL-OK: 1.6556393279655937465L10
(- -9.837108887605194379L9 -5.518197215327419734L9)
EQL-OK: -4.3189116722777746445L9
(- 6.0530403690423784372L9 -4.794777582812792957L9)
EQL-OK: 1.0847817951855171394L10
(- -7.6786817362598780694L8 3.0685743382723052597L9)
EQL-OK: -3.8364425118982930668L9
(- -1.035869943077157163L9 6.964469962306024778L8)
EQL-OK: -1.7323169393077596407L9
(- -5.236689202734255992L9 -3.2118444581504684365L-12)
EQL-OK: -5.236689202734255992L9
(- -5.374622629137047618L9 6.0449117144963868685L-11)
EQL-OK: -5.374622629137047618L9
(- -1.03444332932187716727L9 -7.849504746710041045L-11)
EQL-OK: -1.0344433293218771672L9
(- 5.1103879354813158946L8 6.53093826849017485L-11)
EQL-OK: 5.110387935481315894L8
(- -9.748335199611953219L9 -1.0598402609119659922L-11)
EQL-OK: -9.748335199611953219L9
(- -7.3482164921795502603L9 7.644598674874161005L-11)
EQL-OK: -7.3482164921795502603L9
(- -7.4770248834652064083L8 -6.510822784079429222L19)
EQL-OK: 6.5108227840046589732L19
(- 8.3114910321533068423L9 -6.2387352982669333472L19)
EQL-OK: 6.2387352990980824504L19
(- -1.0718584220381511548L9 8.521462332927085385L19)
EQL-OK: -8.521462333034271227L19
(- -1.9155322368803175137L8 1.3150623743950738752L19)
EQL-OK: -1.3150623744142291976L19
(- 3.8652241507510457716L9 8.702412273358053775L19)
EQL-OK: -8.70241227297153136L19
(- 2.922009617968977308L8 -8.409184530486676791L19)
EQL-OK: 8.409184530515896887L19
(- -7.3431860804237713437L9 9.020687655591526829L-21)
EQL-OK: -7.3431860804237713437L9
(- -1.1188563145822172016L9 -2.7575065881283248758L-21)
EQL-OK: -1.1188563145822172016L9
(- 2.5835681218682880315L9 -3.786022710650191692L-21)
EQL-OK: 2.5835681218682880315L9
(- 4.3854765424506375063L9 1.8847509423241615905L-21)
EQL-OK: 4.3854765424506375063L9
(- -3.4713769831512517224L9 -2.322290027198980782L-21)
EQL-OK: -3.4713769831512517224L9
(- 414355.71501652302632L0 3.5411352752491676944L-21)
EQL-OK: 414355.71501652302632L0
(- 9.032857346451659148L-11 0.45111022909893884074L0)
EQL-OK: -0.45111022900861026729L0
(- -6.5860623447077106086L-11 -0.16349916999618723413L0)
EQL-OK: 0.16349916993032661068L0
(- -9.239429491581222244L-11 0.34742997377809253703L0)
EQL-OK: -0.34742997387048683193L0
(- -1.3189202177704638207L-11 0.6447775025861344695L0)
EQL-OK: -0.64477750259932367166L0
(- -8.6095719029859522596L-11 0.36611643318066821885L0)
EQL-OK: -0.3661164332667639379L0
(- -7.9284738631391966236L-11 -0.28883099180012157807L0)
EQL-OK: 0.28883099172083683944L0
(- -9.9602023259578447484L-11 8.944817052366967221L9)
EQL-OK: -8.944817052366967221L9
(- -4.7036434158090755064L-11 -7.652311009876441256L9)
EQL-OK: 7.652311009876441256L9
(- -7.237899450242616437L-11 -2.0865196011945540415L9)
EQL-OK: 2.0865196011945540414L9
(- 1.619466049424876382L-11 5.1184733211578935236L9)
EQL-OK: -5.1184733211578935236L9
(- 4.1799408897021043963L-11 7.3289378733409777703L9)
EQL-OK: -7.3289378733409777703L9
(- -7.1652994078281664426L-11 -8.756819754593247181L9)
EQL-OK: 8.756819754593247181L9
(- -3.7074082585707708083L-11 7.8185038704847907146L-11)
EQL-OK: -1.1525912129055561523L-10
(- -6.236585731179139659L-11 7.2778046100364844843L-11)
EQL-OK: -1.3514390341215624144L-10
(- 4.435573645212270856L-11 -5.0777570123416204425L-11)
EQL-OK: 9.5133306575538912986L-11
(- -8.308776483243665939L-11 9.147453931535851365L-11)
EQL-OK: -1.7456230414779517304L-10
(- 9.9047307392438733836L-11 -2.5521271062995892868L-11)
EQL-OK: 1.245685784554346267L-10
(- 7.964304540045338675L-11 -8.2763721216842256806L-11)
EQL-OK: 1.6240676661729564355L-10
(- 6.3981149909251410836L-11 -8.199461198383311753L19)
EQL-OK: 8.199461198383311753L19
(- 3.2676777703423324814L-11 4.4068061681801047868L19)
EQL-OK: -4.4068061681801047868L19
(- -6.239367423070186989L-11 3.6883672788938434168L19)
EQL-OK: -3.6883672788938434168L19
(- -2.2122757699951901351L-11 2.1264312306673926188L19)
EQL-OK: -2.1264312306673926188L19
(- 8.873182931301984606L-11 1.6930709481447417272L19)
EQL-OK: -1.6930709481447417272L19
(- -6.88393272917067128L-11 9.590650870092490293L19)
EQL-OK: -9.590650870092490293L19
(- 6.858643038376546876L-11 7.344128953107545512L-21)
EQL-OK: 6.858643037642133981L-11
(- 2.6458055358368033053L-11 5.403788941414579396L-21)
EQL-OK: 2.6458055352964244111L-11
(- -2.0808117056914325832L-11 -9.598437242399057154L-21)
EQL-OK: -2.080811704731588859L-11
(- -6.7475294377176982065L-11 7.066634775850918749L-21)
EQL-OK: -6.747529438424361684L-11
(- -9.3542684131795074026L-11 -2.671834604826394793L-22)
EQL-OK: -9.354268413152789057L-11
(- -3.656675383727620855L-11 -5.7226858095399702763L-21)
EQL-OK: -3.656675383155352274L-11
(- 4.4004114393746579576L19 0.9981645829158248139L0)
EQL-OK: 4.4004114393746579576L19
(- -2.1157157847974045162L19 -0.73136590134089295135L0)
EQL-OK: -2.1157157847974045162L19
(- -6.58288354566033103L19 0.6435204448077814454L0)
EQL-OK: -6.58288354566033103L19
(- -6.1300052513232283715L18 0.37782114066015354996L0)
EQL-OK: -6.130005251323228372L18
(- -8.3428987469650376416L19 0.092302889297602909923L0)
EQL-OK: -8.3428987469650376416L19
(- 4.478146018721476673L18 -0.7594367116407568048L0)
EQL-OK: 4.4781460187214766738L18
(- 3.9553793567888621644L19 7.272309486263127643L9)
EQL-OK: 3.9553793560616312156L19
(- 8.4985452245750157485L18 -8.180191224624705388L9)
EQL-OK: 8.498545232755206973L18
(- -4.9006940756698268444L19 5.635530637330344937L9)
EQL-OK: -4.900694076233379908L19
(- 3.321094625885548145L19 7.739325488496469393L9)
EQL-OK: 3.3210946251116155962L19
(- -4.094717236852398814L19 2.8833151826524522544L9)
EQL-OK: -4.0947172371407303324L19
(- -7.297938416992967256L19 1.7849049534461509205L9)
EQL-OK: -7.2979384171714577512L19
(- -1.6274534493365811085L19 -7.214220253590898893L-11)
EQL-OK: -1.6274534493365811085L19
(- -8.8349360721401487896L19 4.4201546048906225832L-11)
EQL-OK: -8.8349360721401487896L19
(- 2.1193875854469716176L19 5.4852102858193519493L-11)
EQL-OK: 2.1193875854469716176L19
(- 5.8956188285652689564L19 5.2591781987716878005L-12)
EQL-OK: 5.8956188285652689564L19
(- 3.8130742288947136824L19 -6.2032926048476626596L-11)
EQL-OK: 3.8130742288947136824L19
(- -8.2648264381835919784L19 5.240041099543619651L-11)
EQL-OK: -8.2648264381835919784L19
(- -8.9795702979594840016L19 5.3071479395700422216L19)
EQL-OK: -1.4286718237529526223L20
(- 7.4902067869555502376L19 8.527286348112666809L18)
EQL-OK: 6.6374781521442835568L19
(- -9.945686226441305483L19 -7.164943842935287866L19)
EQL-OK: -2.7807423835060176172L19
(- -6.9451908461424534725L18 1.7337328244166615333L19)
EQL-OK: -2.4282519090309068806L19
(- -7.2554820480127785552L19 -3.6345553532831870424L19)
EQL-OK: -3.6209266947295915128L19
(- 4.80739562024854996L19 -9.8058600290712759904L19)
EQL-OK: 1.46132556493198259504L20
(- -2.2910115296639597206L19 3.7450560231732721633L-21)
EQL-OK: -2.2910115296639597206L19
(- 6.3398397438838205245L18 5.9452907771459291318L-21)
EQL-OK: 6.3398397438838205245L18
(- -3.6223171453314706578L19 -7.3897558037422565484L-21)
EQL-OK: -3.6223171453314706578L19
(- -5.253323265732561348L19 -2.4894382246759080012L-21)
EQL-OK: -5.253323265732561348L19
(- 8.706482285826808214L18 -5.353671688426432468L-21)
EQL-OK: 8.706482285826808214L18
(- 2.2257683364797036278L18 -8.640543721759613242L-21)
EQL-OK: 2.2257683364797036278L18
(- 4.793610535063041737L-21 -0.46707949288138879385L0)
EQL-OK: 0.46707949288138879385L0
(- -8.1177127707349576126L-22 -0.524723160625887566L0)
EQL-OK: 0.524723160625887566L0
(- 4.3845050204409245572L-21 0.25137862247046227512L0)
EQL-OK: -0.25137862247046227512L0
(- 9.521149905664397992L-21 -0.8412363166750659234L0)
EQL-OK: 0.8412363166750659234L0
(- 9.174773471390805996L-21 -0.101196005202611894716L0)
EQL-OK: 0.10119600520261189472L0
(- 7.109559498077443181L-21 0.9205539164614073537L0)
EQL-OK: -0.9205539164614073537L0
(- 4.698785699006337068L-21 -2.1800327611972026394L9)
EQL-OK: 2.1800327611972026394L9
(- 5.613624265510662971L-21 -9.950548243828975189L9)
EQL-OK: 9.950548243828975189L9
(- 4.6909741937286841078L-21 -1.7837781830572891826L9)
EQL-OK: 1.7837781830572891826L9
(- -4.846242463794952647L-21 -8.0162418694778434667L9)
EQL-OK: 8.0162418694778434667L9
(- 2.40959428070040729L-21 -8.889381116534260471L9)
EQL-OK: 8.889381116534260471L9
(- 3.767840665510686708L-21 -6.5742819327593306936L9)
EQL-OK: 6.5742819327593306936L9
(- -4.2984578582437655097L-21 -7.11707524430297521L-11)
EQL-OK: 7.117075243873129424L-11
(- -8.2197602823824843314L-21 5.6157517586290544195L-11)
EQL-OK: -5.6157517594510304478L-11
(- 9.693403466151038911L-21 -2.4790192993953556532L-11)
EQL-OK: 2.4790193003646959998L-11
(- -1.7473025967684817638L-21 -6.763791909706180161L-11)
EQL-OK: 6.763791909531449901L-11
(- -4.545821853960128388L-21 -2.0149758755990572603L-11)
EQL-OK: 2.0149758751444750749L-11
(- -6.727743751498960878L-21 4.6105155267302345166L-11)
EQL-OK: -4.6105155274030088917L-11
(- 3.1693009676315354841L-21 -8.292132887357976433L19)
EQL-OK: 8.292132887357976433L19
(- -1.5197222855116101305L-21 -6.8790212191073234628L19)
EQL-OK: 6.8790212191073234628L19
(- 9.221684449614781083L-21 -5.9085200983462461748L19)
EQL-OK: 5.9085200983462461748L19
(- 8.784720275148798145L-21 -3.507151222326700691L19)
EQL-OK: 3.507151222326700691L19
(- 3.824100155304652155L-21 1.2903444775641864255L19)
EQL-OK: -1.2903444775641864255L19
(- -1.0750770892330241413L-21 2.516785805333378789L19)
EQL-OK: -2.516785805333378789L19
(- -9.607606672669937465L-21 2.8158700323501294737L-21)
EQL-OK: -1.2423476705020066939L-20
(- 7.9685140548406097L-21 -1.4252185339263422407L-21)
EQL-OK: 9.393732588766951941L-21
(- -3.1900732903251523987L-21 1.30212230775860485605L-21)
EQL-OK: -4.4921955980837572548L-21
(- 2.845180721925488069L-21 9.0340678136597289194L-21)
EQL-OK: -6.1888870917342408505L-21
(- -5.1500491616497403683L-21 -5.4818765813663490764L-21)
EQL-OK: 3.3182741971660870814L-22
(- 5.3946808417918276896L-21 2.1630450195342998269L-21)
EQL-OK: 3.2316358222575278627L-21
(* 0.49162375558276684976L0 -0.27595139770835290185L0)
EQL-OK: -0.13566426249969417521L0
(* -0.43085705615141429406L0 0.76537655129782028376L0)
EQL-OK: -0.32976788773950077688L0
(* -0.34725675573811781168L0 -0.44040731024013641718L0)
EQL-OK: 0.15293441375734052306L0
(* -0.47158645084591665022L0 -0.5531952534025612003L0)
EQL-OK: 0.26087938617692133303L0
(* -0.86377959068682791106L0 -0.8711108145957097161L0)
EQL-OK: 0.7524477428743513754L0
(* 0.07688091831246728666L0 -0.727039245375017451L0)
EQL-OK: -0.055895444833634576195L0
(* -0.65693719777446694155L0 -5.4929597366864347663L9)
EQL-OK: 3.6085295769067602507L9
(* 0.9553509506606886749L0 2.7316499794256227606L9)
EQL-OK: 2.609684404716519364L9
(* 0.86245066819702621825L0 -5.6471738746979076876L9)
EQL-OK: -4.8704088816580000957L9
(* -0.0011095142242845852372L0 3.5868904614046262004L9)
EQL-OK: -3979705.9878791318615L0
(* -0.07537979049336559763L0 8.268739091555253606L9)
EQL-OK: -6.2329582036573719373L8
(* -0.67924101443000006024L0 -4.2094803212494913754L9)
EQL-OK: 2.8592516836286270604L9
(* 0.30774277681107480866L0 -2.7334742019139702906L-11)
EQL-OK: -8.412069412384417957L-12
(* -0.35713749207523871768L0 -6.5398928539622633783L-11)
EQL-OK: 2.3356409323048581577L-11
(* -0.14801577485738927266L0 -9.963460779718656755L-11)
EQL-OK: 1.474749367571264873L-11
(* 0.3104124542612814659L0 -2.9286317751062608258L-11)
EQL-OK: -9.09083776938307737L-12
(* -0.11446530018625016218L0 6.4232974401995419684L-11)
EQL-OK: -7.352446696780128213L-12
(* -0.96939447601348607505L0 4.1094462170225605183L-11)
EQL-OK: -3.9836744622561876338L-11
(* 0.051486415762180288123L0 9.676829213398296352L19)
EQL-OK: 4.9822525214063672425L18
(* 0.6313327973134614946L0 3.2653448877462378072L19)
EQL-OK: 2.06151932217404323L19
(* -0.37403303660944479204L0 9.102796469067070187L19)
EQL-OK: -3.4047466049628882508L19
(* 0.8707828063294901403L0 -5.5603708853312765524L19)
EQL-OK: -4.8418753637615606188L19
(* -0.21026381134874289964L0 -8.2572592232280544185L18)
EQL-OK: 1.7362027955704909688L18
(* -0.77817271482774886984L0 -5.862569134483721118L19)
EQL-OK: 4.5620913392465632268L19
(* 0.10774233598980040668L0 8.42277329172514105L-21)
EQL-OK: 9.074892699629673044L-22
(* 0.25190108887664378198L0 9.9261121984538427104L-21)
EQL-OK: 2.5003984711022594346L-21
(* -0.6756036645959631085L0 9.531794528346356556L-21)
EQL-OK: -6.4397153135265482465L-21
(* -0.6857203923976410447L0 -1.6874445000752253093L-21)
EQL-OK: 1.1571151047408247225L-21
(* -0.44633489376857998266L0 2.2805928928283052886L-21)
EQL-OK: -1.0179081865499001544L-21
(* 0.6194914893234261562L0 6.122106446320417613L-21)
EQL-OK: 3.7925928402275834338L-21
(* 6.0914569120648219218L9 -0.13082334282848865785L0)
EQL-OK: -7.969047559320230858L8
(* 3.6214037646489572409L9 -0.42724054260765242458L0)
EQL-OK: -1.5472105094100157093L9
(* -2.3587970682548096273L9 0.30389573937962490564L0)
EQL-OK: -7.168283791037869264L8
(* -1.2092840284272862272L9 -0.9464357317324953064L0)
EQL-OK: 1.1445096143169982957L9
(* 9.742195251878672378L9 -0.8436238049826486367L0)
EQL-OK: -8.2187478272737786206L9
(* -1.6670311480587791415L9 -0.7664626357070004785L0)
EQL-OK: 1.277717087546798815L9
(* -9.63709082566058824L8 3.5038182805272664595L9)
EQL-OK: -3.376661500605117691L18
(* -6.819958133674458717L9 5.570090504807835795L9)
EQL-OK: -3.7987784043567071428L19
(* 5.7990616985027046753L9 5.7633314369957429715L9)
EQL-OK: 3.3421914592058566914L19
(* -8.4466610113280742876L9 -8.965949996407538079L9)
EQL-OK: 7.5732340264172639616L19
(* -7.670563670654851578L9 -6.431751468798164421L9)
EQL-OK: 4.9335159155244181172L19
(* 8.268803418474998627L9 -6.6310260568279516366L9)
EQL-OK: -5.4830650926695757004L19
(* -9.461472353405244053L9 -3.3101188730107237675L-11)
EQL-OK: 0.31318598203475886787L0
(* 6.8579221981166585744L9 -8.515361268298587097L-11)
EQL-OK: -0.5839768506684770405L0
(* 1.6137913170162297342L9 -8.897666779537493419L-11)
EQL-OK: -0.14358977390521366923L0
(* 8.022366744559274285L9 6.8759798363047156095L-11)
EQL-OK: 0.5516163197503107306L0
(* 6.268637730252729325L8 3.8798987053952144677L-13)
EQL-OK: 2.4321679414199160154L-4
(* 8.165455714479826517L9 -7.748491839935670887L-11)
EQL-OK: -0.6326996697300302909L0
(* -9.245309913477613381L9 -2.7267702243723164598L19)
EQL-OK: 2.5209835787164953515L29
(* 9.113617507957836761L9 -3.6781774780542862056L19)
EQL-OK: -3.3521502661371744663L29
(* 3695599.756951605604L0 -4.4160607831464309996L19)
EQL-OK: -1.6319993156879467502L26
(* -3.1080975558777002585L9 4.5635619314557275256L19)
EQL-OK: -1.41839956852540638L29
(* 4.379846040113489209L9 -2.380244519018666713L19)
EQL-OK: -1.0425104531125744157L29
(* 7.799437686108443071L9 -8.213835920178370665L19)
EQL-OK: -6.40633014233504056L29
(* -5.0032293022496024175L9 3.9947928432298324106L-21)
EQL-OK: -1.9986864609664499789L-11
(* 5.1002825856458055377L9 -8.630588067810955288L-21)
EQL-OK: -4.4018438026138695895L-11
(* -1.4798783656292287931L9 -2.1821599778945012917L-21)
EQL-OK: 3.2293313416280286032L-12
(* 6.2153176651245460436L9 -4.842239650508967686L-21)
EQL-OK: -3.009605763857489489L-11
(* 1.1476929860538426329L9 8.143327858153323155L-21)
EQL-OK: 9.34604026593943011L-12
(* -6.8097130569212408313L9 -4.5006072118169309446L-21)
EQL-OK: 3.0647843694383655263L-11
(* -8.088711469864653681L-11 0.55856748494727835656L0)
EQL-OK: -4.518091222186502735L-11
(* 4.4880121763658923538L-11 0.14537105272497022953L0)
EQL-OK: 6.52427054720794526L-12
(* 2.0273639671422034382L-11 0.5267742506127895251L0)
EQL-OK: 1.0679631345107062621L-11
(* -9.078881981481347403L-11 0.86040896737522678964L0)
EQL-OK: -7.811551470607918988L-11
(* -7.2713602444015266416L-11 0.029963115152720655096L0)
EQL-OK: -2.1787260431991794891L-12
(* 5.8587076221559354985L-11 0.39205420166003709617L0)
EQL-OK: 2.2969309395639195554L-11
(* 9.465227148840012531L-12 -8.4020295562921954743L9)
EQL-OK: -0.07952711826157309293L0
(* -9.156088652050785426L-11 -7.272635024207867507L9)
EQL-OK: 0.66588891015656744834L0
(* 3.6865969618651574387L-11 4.532198690564411727L9)
EQL-OK: 0.16708389923204005057L0
(* -7.773548969171738747L-11 6.487140494299404015L9)
EQL-OK: -0.5042810430233337584L0
(* 3.181536837232243521L-12 -8.8275599983550392825L8)
EQL-OK: -0.0028085207317644360498L0
(* 3.512130320642090343L-11 -6.775467122704530228L9)
EQL-OK: -0.23796323518164203024L0
(* -7.489684894543042722L-11 1.3562671200654034619L-11)
EQL-OK: -1.015801336211924759L-21
(* -6.615171167169027831L-11 6.4492881876773102747L-11)
EQL-OK: -4.2663145267886736825L-21
(* 5.9969037329081164062L-12 6.979117807067958578L-11)
EQL-OK: 4.1853097629611348155L-22
(* -9.1419010578306515213L-11 -3.0321662473944421986L-11)
EQL-OK: 2.7719763824573648138L-21
(* 8.653994294784604749L-11 -2.618325063862645785L-12)
EQL-OK: -2.2658970164558872502L-22
(* 3.778177082827084054L-11 5.7986141594804582746L-11)
EQL-OK: 2.1908191129505701787L-21
(* 9.107023861930220456L-11 -8.1609888558011610015L18)
EQL-OK: -7.432232024672778029L8
(* -6.185675579794400257L-11 8.145498215172660237L19)
EQL-OK: -5.0385409394852397568L9
(* -5.0086846264250856304L-12 7.333671928137704804L19)
EQL-OK: -3.6732049841708537418L8
(* -6.133300578664362783L-11 -4.647031661618042392L19)
EQL-OK: 2.8501641979273554706L9
(* 4.014159298839782726L-12 7.077385833663047478L18)
EQL-OK: 2.8409754155675469803L7
(* 3.9529027598797003857L-11 3.1931221840357166776L19)
EQL-OK: 1.2622101493907881026L9
(* 5.2407793550579649295L-11 8.178146405814506225L-21)
EQL-OK: 4.2859860846234161862L-31
(* -4.5792905534935737864L-11 -1.1970719995732820388L-21)
EQL-OK: 5.481740499497593831L-32
(* 4.113879746633747024L-11 5.1093090279978304893L-21)
EQL-OK: 2.1019082929573231173L-31
(* 1.9918804321687295055L-11 1.8243807936344826748L-21)
EQL-OK: 3.6339484036649830696L-32
(* -6.1549842617771214656L-11 7.210193834294849238L-22)
EQL-OK: -4.4378629574447235495L-32
(* -3.483482946766538465L-12 7.8771698631837073084L-22)
EQL-OK: -2.743998688718375137L-33
(* -3.0540130142847980374L19 -0.08015004741507677209L0)
EQL-OK: 2.4477928790118809798L18
(* -7.721729897125586787L19 -0.71282981020428696123L0)
EQL-OK: 5.5042792570168003116L19
(* 6.855667806362567159L18 0.83087248440613607433L0)
EQL-OK: 5.69618574253563119L18
(* -1.0247670372283575993L17 -0.21215039186338500874L0)
EQL-OK: 2.1740472851667611836L16
(* -4.2451902701279432204L19 0.363650960045267158L0)
EQL-OK: -1.5437675173068535736L19
(* -2.3286355030172533736L19 0.49713327148260372132L0)
EQL-OK: -1.1576421857055056984L19
(* -6.1529172975127592432L19 -7.1685660040728041152L9)
EQL-OK: 4.4107593764821477366L29
(* 6.7120643409032119372L19 -2.1673488299796731996L9)
EQL-OK: -1.45473847960048627434L29
(* 8.1354429987417636456L19 -7.205222753181797397L9)
EQL-OK: -5.861767900174770815L29
(* 7.1263614941049137416L19 5.4835530180135407083L8)
EQL-OK: 3.907778107845448494L28
(* 5.0833800113097826724L19 -6.2188724451883454807L9)
EQL-OK: -3.1612891880755627472L29
(* -7.0947371956905508468L19 -2.434705753418370145L9)
EQL-OK: 1.7273597469339097183L29
(* 6.6532780031620346828L19 -5.126482819920582625L-11)
EQL-OK: -3.4107915379365690604L9
(* 3.3916052110984390742L19 1.2477416554656457027L-11)
EQL-OK: 4.2318471007818771302L8
(* -2.0596546301412947634L18 1.4681903489886446838L-11)
EQL-OK: -3.0239650502232254483L7
(* 5.4448198096650564945L18 -8.328351500006325204L-11)
EQL-OK: -4.534637322908812735L8
(* -9.0101064221252591136L19 -8.313725422339249255L-11)
EQL-OK: 7.4907550819604901853L9
(* 9.807792586975021252L19 -8.1013942555768171325L-11)
EQL-OK: -7.9456794524008327797L9
(* -6.569928333884882197L17 1.8031274577764523257L19)
EQL-OK: -1.1846418174451330701L37
(* 9.966374081256518232L19 1.1925741835931471136L18)
EQL-OK: 1.1885640433338393863L38
(* -5.1958776350000747272L19 9.541066943279536452L19)
EQL-OK: -4.957421634462466998L39
(* 3.0864687811444473814L19 -7.292720897062086383L17)
EQL-OK: -2.2508755378381858676L37
(* -4.9023499593352016396L19 -7.837521201177228469L19)
EQL-OK: 3.8422271741879966693L39
(* 1.1092141282192635266L19 -8.705681388875638857L19)
EQL-OK: -9.656464792316359058L38
(* 9.719341608862581484L18 3.910223765755272544L-21)
EQL-OK: 0.038004800546468552602L0
(* 9.0834836835472717744L19 2.3217130663560934873L-22)
EQL-OK: 0.021089242756124079488L0
(* -8.9569500426805542816L19 -6.8114530414478270673L-22)
EQL-OK: 0.061009844610312705923L0
(* -6.250871904307721917L18 -1.7897852706103755451L-21)
EQL-OK: 0.01118771846280218958L0
(* -4.8350255195162635852L19 -5.4114390027140489403L-21)
EQL-OK: 0.26164445675428065787L0
(* -3.787718813779143278L19 4.715777953310022763L-22)
EQL-OK: -0.017862040875357275534L0
(* -9.6946973380533561685L-21 0.29842171245928506197L0)
EQL-OK: -2.8931081813963549629L-21
(* -1.5138229787560283214L-21 -0.63587548364028950173L0)
EQL-OK: 9.626029187622732088L-22
(* 6.9088409628577453984L-21 0.6675889882861618064L0)
EQL-OK: 4.6122661486241942486L-21
(* -5.9331491274547789645L-21 0.1840021396402183602L0)
EQL-OK: -1.0917121342561739605L-21
(* 6.5714942924276749333L-21 0.042451475976117785684L0)
EQL-OK: 2.789696320821885891L-22
(* 8.381861494201174241L-21 -0.14355711097860731382L0)
EQL-OK: -1.2032758207303532943L-21
(* 2.014342763215141127L-21 -1.2338457666735291661L9)
EQL-OK: -2.4853882910224610282L-12
(* -5.670580024618139724L-21 -8.0192486381311308156L8)
EQL-OK: 4.5473791139832611237L-12
(* -1.9225557816894129732L-21 7.9269598913745234357L9)
EQL-OK: -1.5240022570382171054L-11
(* 4.0368254062037218916L-21 -9.5325393449487114215L8)
EQL-OK: -3.848119701332554298L-12
(* 4.2776037356780859957L-21 -5.1221437260809706463L9)
EQL-OK: -2.1910501137364030878L-11
(* -6.7334467986153699064L-21 -7.7745493828541701813L9)
EQL-OK: 5.2349514652656512034L-11
(* -4.315187380180362795L-21 1.3410692406986483366L-11)
EQL-OK: -5.786965063410868682L-32
(* 3.343397258359340776L-21 3.0757040339096610197L-12)
EQL-OK: 1.0283300434498325547L-32
(* 8.5537743863632264L-21 7.5263454541513394514L-11)
EQL-OK: 6.4378660968641032133L-31
(* -2.842610565794174946L-21 3.153716909493170071L-11)
EQL-OK: -8.9647890084490369953L-32
(* 2.8400800161467519014L-22 2.0497242686367281441L-11)
EQL-OK: 5.8213809339661880995L-33
(* 9.982896581447590365L-21 1.6568727649785948007L-11)
EQL-OK: 1.654038946139843086L-31
(* 4.678227176611232891L-21 8.297236114758786796L19)
EQL-OK: 0.38816355482824754693L0
(* -2.7181316933272033506L-21 -7.7081523870452907184L19)
EQL-OK: 0.20951773300223540615L0
(* 3.755562697893016061L-21 -9.043255746258523336L19)
EQL-OK: -0.33962513948155180184L0
(* -6.788248742851763723L-21 -2.3639021583849588926L19)
EQL-OK: 0.16046755854881268057L0
(* -4.100847017987407598L-21 -3.6481227061862975968L19)
EQL-OK: 0.14960393120916230025L0
(* -2.001548479939126796L-21 -8.705055796099425971L19)
EQL-OK: 0.17423591196468091344L0
(* -3.670443367722997441L-21 3.6588667206894740936L-22)
EQL-OK: -1.34296630883370731296L-42
(* -6.6783435670093499397L-22 -8.113066551196750321L-21)
EQL-OK: 5.4181845810903550342L-42
(* 4.816859192586505112L-21 -1.1868626619923445382L-22)
EQL-OK: -5.716950323755514841L-43
(* 4.6402358755296483015L-21 -4.244356902115351796L-22)
EQL-OK: -1.9694817165747535215L-42
(* 9.3247068197076461794L-21 3.5271238356611001996L-21)
EQL-OK: 3.288939568434245211L-41
(* 8.7860048755888267426L-21 7.187872989134290154L-21)
EQL-OK: 6.315268712764710716L-41
(MULTIPLE-VALUE-LIST (FLOOR -0.9677507664075728311L0 0.09829392666835353511L0))
EQUAL-OK: (-10 0.015188500275962520004L0)
(MULTIPLE-VALUE-LIST (FLOOR -0.084596576622269801105L0 -0.78271578747309396924L0))
EQUAL-OK: (0 -0.084596576622269801105L0)
(MULTIPLE-VALUE-LIST (FLOOR 0.97785517019559092334L0 -0.24687352093087197807L0))
EQUAL-OK: (-4 -0.009638913527896988987L0)
(MULTIPLE-VALUE-LIST (FLOOR 0.36348468689259258175L0 0.5156866254701831051L0))
EQUAL-OK: (0 0.36348468689259258175L0)
(MULTIPLE-VALUE-LIST (FLOOR -0.51463186192345608164L0 0.8683136279312965567L0))
EQUAL-OK: (-1 0.35368176600784047506L0)
(MULTIPLE-VALUE-LIST (FLOOR 0.36128372948365635348L0 -0.5061584717303788097L0))
EQUAL-OK: (-1 -0.1448747422467224562L0)
(MULTIPLE-VALUE-LIST (FLOOR -0.83188875677783952054L0 -6.988497329115560525L9))
EQUAL-OK: (0 -0.83188875677783952054L0)
(MULTIPLE-VALUE-LIST (FLOOR -0.09110744229488624391L0 -9.792597852253288497L9))
EQUAL-OK: (0 -0.09110744229488624391L0)
(MULTIPLE-VALUE-LIST (FLOOR 0.23616060202132526459L0 -1.5882829404848723914L9))
EQUAL-OK: (-1 -1.5882829402487117894L9)
(MULTIPLE-VALUE-LIST (FLOOR -0.09652925723903261584L0 6.2261024177069773893L9))
EQUAL-OK: (-1 6.226102417610448132L9)
(MULTIPLE-VALUE-LIST (FLOOR 0.5413601234707634158L0 9.144943549323542538L9))
EQUAL-OK: (0 0.5413601234707634158L0)
(MULTIPLE-VALUE-LIST (FLOOR -0.57037258938648310115L0 4.436821091919698621L9))
EQUAL-OK: (-1 4.4368210913493260317L9)
(MULTIPLE-VALUE-LIST (FLOOR -0.9973297751770725278L0 3.4051851548139874998L-11))
EQUAL-OK: (-29288562291 1.4506986275662661537L-11)
(MULTIPLE-VALUE-LIST (FLOOR 0.6604979952397203417L0 -4.3497555374342239963L-11))
EQUAL-OK: (-15184715315 -1.8114827519649365006L-11)
(MULTIPLE-VALUE-LIST (FLOOR 0.38589975187928444138L0 1.0289103184336123803L-12))
EQUAL-OK: (375056742036 3.5046726009323829848L-13)
(MULTIPLE-VALUE-LIST (FLOOR 0.9402638162334174371L0 4.2262799834524861567L-11))
EQUAL-OK: (22248024738 1.7766010468098603481L-11)
(MULTIPLE-VALUE-LIST (FLOOR -0.8642082843541437474L0 8.911777256338402297L-11))
EQUAL-OK: (-9697373033 6.304376014060421794L-11)
(MULTIPLE-VALUE-LIST (FLOOR 0.7435773981922973139L0 5.910629837324535378L-11))
EQUAL-OK: (12580341159 1.1224045374678474888L-11)
(MULTIPLE-VALUE-LIST (FLOOR 0.7898063255151059068L0 1.2757118849664610875L18))
EQUAL-OK: (0 0.7898063255151059068L0)
(MULTIPLE-VALUE-LIST (FLOOR 0.19544684487626281231L0 -3.6071314846523434156L19))
EQUAL-OK: (-1 -3.6071314846523434156L19)
(MULTIPLE-VALUE-LIST (FLOOR -0.032130218136830583316L0 -3.367647816525978896L18))
EQUAL-OK: (0 -0.032130218136830583316L0)
(MULTIPLE-VALUE-LIST (FLOOR -0.25693079625787854222L0 2.3815464531684079734L19))
EQUAL-OK: (-1 2.3815464531684079734L19)
(MULTIPLE-VALUE-LIST (FLOOR -0.3975875412090936933L0 3.9957351306215043416L19))
EQUAL-OK: (-1 3.9957351306215043416L19)
(MULTIPLE-VALUE-LIST (FLOOR 0.16223305219726616216L0 -5.3922124894358790612L19))
EQUAL-OK: (-1 -5.3922124894358790612L19)
(MULTIPLE-VALUE-LIST (FLOOR 0.14869268750642991106L0 -4.676414410846522305L-21))
EQUAL-OK: (-31796302560686368198 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR 0.4848921957991629974L0 7.275052251851656838L-21))
EQUAL-OK: (66651369504012501536 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR 0.44996459510190342355L0 -3.96515259272563559L-21))
EQUAL-OK: (-113479767696052002376 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR 0.7246909129638354568L0 -1.2540349367528059089L-21))
EQUAL-OK: (-577887339279675740320 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR 0.83383904440522878455L0 3.5186204165781412753L-21))
EQUAL-OK: (236978970643311773536 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR 0.26779759740636464572L0 -6.954613119627800336L-21))
EQUAL-OK: (-38506469418200611672 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR -7.4845680268023566543L9 -0.2629469688312594538L0))
EQUAL-OK: (28464173061 -0.1240146549242767677L0)
(MULTIPLE-VALUE-LIST (FLOOR 6.1612132433805581187L9 -0.09975641287987705455L0))
EQUAL-OK: (-61762578120 -0.083822638930812785824L0)
(MULTIPLE-VALUE-LIST (FLOOR -3.6629628120558108524L9 0.35361739315194823028L0))
EQUAL-OK: (-10358548203 0.32784699422401302726L0)
(MULTIPLE-VALUE-LIST (FLOOR -6.999024858613990497L9 -0.6086338795192380592L0))
EQUAL-OK: (11499564999 -0.48897756390533489348L0)
(MULTIPLE-VALUE-LIST (FLOOR 4.2927999071819381092L9 -0.8483437666321241058L0))
EQUAL-OK: (-5060212707 -0.6341788853647631104L0)
(MULTIPLE-VALUE-LIST (FLOOR -4.377925687006929662L9 0.3220507356662819166L0))
EQUAL-OK: (-13593900595 0.18712780555802854961L0)
(MULTIPLE-VALUE-LIST (FLOOR -9.5387759396672939425L9 7.7154581598602048657L9))
EQUAL-OK: (-2 5.892140380053115789L9)
(MULTIPLE-VALUE-LIST (FLOOR -5.64339842966998351L9 4.025489717604319313L9))
EQUAL-OK: (-2 2.4075810055386551162L9)
(MULTIPLE-VALUE-LIST (FLOOR -4.811594948157823536L9 -7.834071766040306942L9))
EQUAL-OK: (0 -4.811594948157823536L9)
(MULTIPLE-VALUE-LIST (FLOOR 4.4476035118893197435L9 3.0450117757143498866L9))
EQUAL-OK: (1 1.4025917361749698569L9)
(MULTIPLE-VALUE-LIST (FLOOR -7.3465328576805684287L9 -4.603589573313564281L9))
EQUAL-OK: (1 -2.7429432843670041477L9)
(MULTIPLE-VALUE-LIST (FLOOR 4.956277095163508632L9 -6.664438280281275845L9))
EQUAL-OK: (-1 -1.708161185117767213L9)
(MULTIPLE-VALUE-LIST (FLOOR 4.367757792316331005L9 -7.8163461329531150714L-11))
EQUAL-OK: (-55879789840705743024 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR -4.7778036898247465523L8 3.4933422750724630952L-11))
EQUAL-OK: (-13676883951274541565 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR -6.667353710605079077L9 5.3863219342714070564L-11))
EQUAL-OK: (-123783052553596643928 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR -6.6004002390836614547L9 -9.313678706634845693L-11))
EQUAL-OK: (70867811173061956036 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR -9.439278803200832958L9 -6.7075776392225367144L-11))
EQUAL-OK: (140725598880953434976 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR -9.207319097846486017L9 -5.7812820689283059893L-11))
EQUAL-OK: (159260852317369718528 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR -7.564134292866958547L9 6.4508269927189105468L19))
EQUAL-OK: (-1 6.4508269919624971176L19)
(MULTIPLE-VALUE-LIST (FLOOR -5.7520914080101070246L9 -4.4901662701989554116L17))
EQUAL-OK: (0 -5.7520914080101070246L9)
(MULTIPLE-VALUE-LIST (FLOOR -9.801170739094381102L9 9.482698257311007893L19))
EQUAL-OK: (-1 9.482698256330890819L19)
(MULTIPLE-VALUE-LIST (FLOOR 7.471594576665974082L8 3.1667053210759199935L18))
EQUAL-OK: (0 7.471594576665974081L8)
(MULTIPLE-VALUE-LIST (FLOOR -6.4762144691604037974L9 -8.2417624342716462896L19))
EQUAL-OK: (0 -6.4762144691604037974L9)
(MULTIPLE-VALUE-LIST (FLOOR -5.5263312844382694187L9 9.5950716135522835064L19))
EQUAL-OK: (-1 9.5950716129996503776L19)
(MULTIPLE-VALUE-LIST (FLOOR 3.1312033848911460338L9 -8.61316266389637687L-21))
EQUAL-OK: (-363537008074414891396807786496 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR 2.6279029713558476835L9 -4.516664720059022692L-21))
EQUAL-OK: (-581823786849847663134534270976 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR 4.502075635961923785L9 -9.685834626464620576L-21))
EQUAL-OK: (-464810293545679143271024033792 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR 1.4031562604294053729L9 3.412866773725220897L-21))
EQUAL-OK: (411137132932332056394984325120 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR -4.3024038761755407723L9 2.485284435684751149L-21))
EQUAL-OK: (-1731151498959165530746191347712 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR 6.136473603422627364L9 5.6959828635137213127L-21))
EQUAL-OK: (1077333578850898685241017237504 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR -8.202208473677937235L-11 0.12393605769441814725L0))
EQUAL-OK: (-1 0.123936057612396062516L0)
(MULTIPLE-VALUE-LIST (FLOOR -8.6757073154686102475L-11 -0.37237633673270687662L0))
EQUAL-OK: (0 -8.675707315468610247L-11)
(MULTIPLE-VALUE-LIST (FLOOR 5.6028622390057924218L-11 0.6499341232771672055L0))
EQUAL-OK: (0 5.6028622390057924218L-11)
(MULTIPLE-VALUE-LIST (FLOOR 4.5783899320025937576L-11 -0.7229560019811405793L0))
EQUAL-OK: (-1 -0.7229560019353566799L0)
(MULTIPLE-VALUE-LIST (FLOOR 7.224213822400873615L-11 -0.87051303270552073176L0))
EQUAL-OK: (-1 -0.87051303263327859354L0)
(MULTIPLE-VALUE-LIST (FLOOR -5.5008008233955830292L-11 -0.45974678868400245752L0))
EQUAL-OK: (0 -5.5008008233955830295L-11)
(MULTIPLE-VALUE-LIST (FLOOR -5.949553569817051437L-11 -4.9088361621296460857L9))
EQUAL-OK: (0 -5.949553569817051437L-11)
(MULTIPLE-VALUE-LIST (FLOOR 9.068981360820356321L-11 3.9567179334666110438L9))
EQUAL-OK: (0 9.068981360820356321L-11)
(MULTIPLE-VALUE-LIST (FLOOR 3.4621680776088405294L-13 4.3691679646970805987L9))
EQUAL-OK: (0 3.4621680776088405294L-13)
(MULTIPLE-VALUE-LIST (FLOOR 4.005939678622022073L-11 -9.2132271371400602936L8))
EQUAL-OK: (-1 -9.213227137140060293L8)
(MULTIPLE-VALUE-LIST (FLOOR 6.8015601712459487755L-11 -4.769849366969915586L9))
EQUAL-OK: (-1 -4.769849366969915586L9)
(MULTIPLE-VALUE-LIST (FLOOR 8.736177705951390388L-11 8.3701230195943479203L9))
EQUAL-OK: (0 8.736177705951390388L-11)
(MULTIPLE-VALUE-LIST (FLOOR -8.8368349664293751446L-11 1.7247862508910726963L-11))
EQUAL-OK: (-6 1.5118825389170610328L-11)
(MULTIPLE-VALUE-LIST (FLOOR -2.0922301210797840822L-11 2.9157326021078492393L-11))
EQUAL-OK: (-1 8.235024810280651572L-12)
(MULTIPLE-VALUE-LIST (FLOOR -9.929248815922456709L-11 -6.9934608623319373425L-11))
EQUAL-OK: (1 -2.9357879535905193665L-11)
(MULTIPLE-VALUE-LIST (FLOOR 8.809298490106908006L-11 2.521478295865126635L-11))
EQUAL-OK: (3 1.244863602511528101L-11)
(MULTIPLE-VALUE-LIST (FLOOR 7.3620267190952160604L-11 -5.0806267993123045533L-11))
EQUAL-OK: (-2 -2.7992268795293930463L-11)
(MULTIPLE-VALUE-LIST (FLOOR -9.070716461299934103L-11 1.372581158818204212L-11))
EQUAL-OK: (-7 5.3735165042749538097L-12)
(MULTIPLE-VALUE-LIST (FLOOR -7.459630170957188741L-11 -3.429772398019229389L19))
EQUAL-OK: (0 -7.459630170957188741L-11)
(MULTIPLE-VALUE-LIST (FLOOR 1.9725650506989118904L-11 -1.7770668980460508816L19))
EQUAL-OK: (-1 -1.7770668980460508816L19)
(MULTIPLE-VALUE-LIST (FLOOR 6.3974118251214889016L-12 -5.69117448017374684L19))
EQUAL-OK: (-1 -5.69117448017374684L19)
(MULTIPLE-VALUE-LIST (FLOOR 9.080192761938897539L-11 5.1550284925054312868L19))
EQUAL-OK: (0 9.080192761938897539L-11)
(MULTIPLE-VALUE-LIST (FLOOR 7.694299339180548789L-11 3.1601030797220572842L19))
EQUAL-OK: (0 7.694299339180548789L-11)
(MULTIPLE-VALUE-LIST (FLOOR 5.5788554873601060938L-11 5.5699367746931070664L19))
EQUAL-OK: (0 5.5788554873601060938L-11)
(MULTIPLE-VALUE-LIST (FLOOR -4.087371164243010522L-11 1.7025318283693090775L-21))
EQUAL-OK: (-24007605005 1.5007203773756006028L-21)
(MULTIPLE-VALUE-LIST (FLOOR -7.3575974688385316083L-11 -1.6670029902289832508L-21))
EQUAL-OK: (44136678290 -1.8066891019200848581L-22)
(MULTIPLE-VALUE-LIST (FLOOR 1.0850282868697332469L-11 5.7344803128377181472L-21))
EQUAL-OK: (1892112672 1.4425616831217755076L-21)
(MULTIPLE-VALUE-LIST (FLOOR -9.848519351300913193L-11 -7.121687974823219785L-21))
EQUAL-OK: (13828911609 -2.300608125189343731L-21)
(MULTIPLE-VALUE-LIST (FLOOR 3.0260591554314098406L-12 1.7303586387117179437L-22))
EQUAL-OK: (17488046048 9.689796116124082976L-23)
(MULTIPLE-VALUE-LIST (FLOOR 5.867643793784483945L-11 2.9831220978672803306L-21))
EQUAL-OK: (19669472456 9.594326475082730988L-22)
(MULTIPLE-VALUE-LIST (FLOOR 9.453252855247919707L19 0.3964594556008910194L0))
EQUAL-OK: (238441856328540902016 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR 1.9865852464762410773L17 0.8745495786051183551L0))
EQUAL-OK: (227155245977568008 0.08198902299422984579L0)
(MULTIPLE-VALUE-LIST (FLOOR 5.8003655986843771616L19 -0.57075967601329721915L0))
EQUAL-OK: (-101625357264188433960 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR 6.5463855676706502812L19 0.5124698839969514896L0))
EQUAL-OK: (127741859026189966704 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR 8.053368905864221505L19 0.40679331708739617821L0))
EQUAL-OK: (197972006116659527920 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR 8.5722362029533885376L19 0.1793174966141533504L0))
EQUAL-OK: (478047952085719142240 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR -6.6056603867132043536L19 1.8364346532401849241L9))
EQUAL-OK: (-35970026895 8.274070785684816422L8)
(MULTIPLE-VALUE-LIST (FLOOR 2.473965171745108034L19 5.5749126908032718576L9))
EQUAL-OK: (4437675186 5.356910410798194379L9)
(MULTIPLE-VALUE-LIST (FLOOR -4.405924011882179756L19 -6.4568556406242929674L9))
EQUAL-OK: (6823637165 -4.1798826632701602209L8)
(MULTIPLE-VALUE-LIST (FLOOR 2.1093676314099077168L19 5.727620773112868108L8))
EQUAL-OK: (36827990451 1.8408274540307780489L8)
(MULTIPLE-VALUE-LIST (FLOOR -1.0962340119185741432L19 -8.173187675545835245L9))
EQUAL-OK: (1341256380 -4.422519927692124746L9)
(MULTIPLE-VALUE-LIST (FLOOR -9.664836922872330681L19 -4.5461452948374001435L9))
EQUAL-OK: (21259410546 -4.0088028420210172099L9)
(MULTIPLE-VALUE-LIST (FLOOR 9.9654629946168490416L19 -6.27691916031617149L-11))
EQUAL-OK: (-1587636026543136775574879469568 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR -1.2700534905234296955L19 -7.6392648594402208417L-11))
EQUAL-OK: (166253365198349054807791108096 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR -7.837735447773461618L18 -8.6041613252133785413L-11))
EQUAL-OK: (91092381366746282195935035392 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR 4.849306367034469812L19 -8.744903371098252931L-11))
EQUAL-OK: (-554529439749024491444258209792 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR -6.3895751736590951245L18 -8.9218106166526971406L-11))
EQUAL-OK: (71617471477514379195326660608 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR -1.1249006547358954392L19 -3.749899421128778124L-11))
EQUAL-OK: (299981553744522252727485464576 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR -4.8298889769606521412L19 3.2897859420995047714L19))
EQUAL-OK: (-2 1.7496829072383574016L19)
(MULTIPLE-VALUE-LIST (FLOOR -7.618272569239742257L19 -2.4246730847406800364L19))
EQUAL-OK: (3 -3.4425331501770214745L18)
(MULTIPLE-VALUE-LIST (FLOOR -9.9344217376670949096L19 -2.187787768895506888L19))
EQUAL-OK: (4 -1.1832706620850673572L19)
(MULTIPLE-VALUE-LIST (FLOOR 3.9222824564168688912L19 -9.476307993509074433L19))
EQUAL-OK: (-1 -5.5540255370922055412L19)
(MULTIPLE-VALUE-LIST (FLOOR -2.012988112115775752L19 -1.01146191266402097525L18))
EQUAL-OK: (19 -9.1210478054135899006L17)
(MULTIPLE-VALUE-LIST (FLOOR 8.6136075623649245696L19 -9.374471951386232653L19))
EQUAL-OK: (-1 -7.6086438902130808345L18)
(MULTIPLE-VALUE-LIST (FLOOR -4.0954879593227223964L19 3.4785793369902262412L-21))
EQUAL-OK: (-11773449913223093127289481096658923028480 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR -5.7633820540313762628L19 -6.9799216943629666126L-21))
EQUAL-OK: (8257086979479904139315172946770002968576 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR -4.5945941433359568196L19 -9.26874309885338918L-21))
EQUAL-OK: (4957084357969034092339972319162935541760 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR 9.069653875532044557L19 1.1607862998892810815L-21))
EQUAL-OK: (78133708817868823323292026086376001765376 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR 1.9663881236128118596L19 -7.53224056983834607L-21))
EQUAL-OK: (-2610628411799403924128603371383036051456 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR 3.8155182638858600344L19 -9.78280482738867461L-21))
EQUAL-OK: (-3900229362854759958152852242692868931584 0.0L0)
(MULTIPLE-VALUE-LIST (FLOOR 2.0785751397779279812L-21 0.84874462118484074924L0))
EQUAL-OK: (0 2.0785751397779279812L-21)
(MULTIPLE-VALUE-LIST (FLOOR 9.468679817093889512L-22 -0.14230041428757812886L0))
EQUAL-OK: (-1 -0.14230041428757812886L0)
(MULTIPLE-VALUE-LIST (FLOOR -3.5329587582370771722L-21 -0.75145077780984780047L0))
EQUAL-OK: (0 -3.5329587582370771722L-21)
(MULTIPLE-VALUE-LIST (FLOOR 1.0147425004279850959L-21 0.55049889413410685307L0))
EQUAL-OK: (0 1.0147425004279850959L-21)
(MULTIPLE-VALUE-LIST (FLOOR -9.214176537319943048L-21 -0.45008902557926736644L0))
EQUAL-OK: (0 -9.214176537319943048L-21)
(MULTIPLE-VALUE-LIST (FLOOR -1.146684367801419132L-21 0.3317375182580383851L0))
EQUAL-OK: (-1 0.3317375182580383851L0)
(MULTIPLE-VALUE-LIST (FLOOR 9.8958965362796452575L-23 -8742129.925142999928L0))
EQUAL-OK: (-1 -8742129.925142999928L0)
(MULTIPLE-VALUE-LIST (FLOOR -8.629925553125559817L-22 1.4904768761159059732L9))
EQUAL-OK: (-1 1.4904768761159059732L9)
(MULTIPLE-VALUE-LIST (FLOOR -1.7636696713810751494L-21 1.2803675755746476424L9))
EQUAL-OK: (-1 1.2803675755746476424L9)
(MULTIPLE-VALUE-LIST (FLOOR 7.8572218293550540256L-21 7.311951574932556098L9))
EQUAL-OK: (0 7.8572218293550540256L-21)
(MULTIPLE-VALUE-LIST (FLOOR 5.8831628670454666175L-21 -2.430599936529262355L9))
EQUAL-OK: (-1 -2.430599936529262355L9)
(MULTIPLE-VALUE-LIST (FLOOR 5.891885696934149925L-21 6.0077688200842341403L9))
EQUAL-OK: (0 5.891885696934149925L-21)
(MULTIPLE-VALUE-LIST (FLOOR -5.5378511525885539255L-21 -4.317564477957860586L-11))
EQUAL-OK: (0 -5.5378511525885539255L-21)
(MULTIPLE-VALUE-LIST (FLOOR -1.9525004120740256159L-21 9.454884961900014292L-11))
EQUAL-OK: (-1 9.454884961704764251L-11)
(MULTIPLE-VALUE-LIST (FLOOR 5.461359828153347278L-21 -9.7061135180917529105L-11))
EQUAL-OK: (-1 -9.706113517545616928L-11)
(MULTIPLE-VALUE-LIST (FLOOR 9.644530490453124287L-21 8.28693431641614359L-11))
EQUAL-OK: (0 9.644530490453124287L-21)
(MULTIPLE-VALUE-LIST (FLOOR 8.997549905605484822L-21 5.2672865249640494307L-11))
EQUAL-OK: (0 8.997549905605484822L-21)
(MULTIPLE-VALUE-LIST (FLOOR -1.55338435917637846L-21 5.9708770769690056966L-11))
EQUAL-OK: (-1 5.9708770768136672606L-11)
(MULTIPLE-VALUE-LIST (FLOOR 3.9285675924255819076L-21 5.674913585946206864L19))
EQUAL-OK: (0 3.9285675924255819076L-21)
(MULTIPLE-VALUE-LIST (FLOOR -3.6185336116295331734L-21 -9.043926006483480333L19))
EQUAL-OK: (0 -3.6185336116295331734L-21)
(MULTIPLE-VALUE-LIST (FLOOR -7.32672036508508268L-21 1.205614654464109627L19))
EQUAL-OK: (-1 1.205614654464109627L19)
(MULTIPLE-VALUE-LIST (FLOOR -3.3565132746900103151L-21 8.585503247975515849L19))
EQUAL-OK: (-1 8.585503247975515849L19)
(MULTIPLE-VALUE-LIST (FLOOR -6.9204354176156616745L-21 -3.6158709669328356396L19))
EQUAL-OK: (0 -6.9204354176156616745L-21)
(MULTIPLE-VALUE-LIST (FLOOR -7.5176747956103960436L-21 9.3440027997860057096L19))
EQUAL-OK: (-1 9.3440027997860057096L19)
(MULTIPLE-VALUE-LIST (FLOOR -6.302622462978502841L-21 8.1107309029375862425L-21))
EQUAL-OK: (-1 1.8081084399590834014L-21)
(MULTIPLE-VALUE-LIST (FLOOR 1.4803054325001667241L-22 6.3345497995208400772L-21))
EQUAL-OK: (0 1.4803054325001667241L-22)
(MULTIPLE-VALUE-LIST (FLOOR -5.7089861270321677843L-21 9.540482421100450586L-21))
EQUAL-OK: (-1 3.831496294068282802L-21)
(MULTIPLE-VALUE-LIST (FLOOR 3.3765199428161524112L-21 9.669802014415968729L-21))
EQUAL-OK: (0 3.3765199428161524112L-21)
(MULTIPLE-VALUE-LIST (FLOOR 7.52101063082155294L-21 8.827949370572986921L-21))
EQUAL-OK: (0 7.52101063082155294L-21)
(MULTIPLE-VALUE-LIST (FLOOR 4.196504310402249954L-23 3.785428476220113075L-21))
EQUAL-OK: (0 4.196504310402249954L-23)
(/ 0.8476517865511829377L0 0.14598720922015648169L0)
EQL-OK: 5.8063428370144327317L0
(/ -0.16515392772872533974L0 0.2885771921352848653L0)
EQL-OK: -0.5723041606534907598L0
(/ -0.25791761734650428572L0 -0.17472849542471660309L0)
EQL-OK: 1.4761050664322265015L0
(/ -0.9418668871216534004L0 -0.25801526180943099573L0)
EQL-OK: 3.6504309106230792821L0
(/ -0.25726582509610465451L0 0.7704327058756196045L0)
EQL-OK: -0.33392381078074095957L0
(/ -0.021409432992321506645L0 -0.44293479613874918959L0)
EQL-OK: 0.048335405524597819813L0
(/ -0.26771090178828336857L0 -7.7011892538310270067L9)
EQL-OK: 3.4762280599078659542L-11
(/ 0.82867609196336006595L0 -3.0042819216966844948L9)
EQL-OK: -2.7583166745395210866L-10
(/ 0.40732354689187331287L0 -7.559832309976744222L9)
EQL-OK: -5.387997116739304149L-11
(/ -0.53349543673778000914L0 -5.104278761341346705L8)
EQL-OK: 1.045192595628502556L-9
(/ 0.17669669311850475256L0 -9.181879875841464834L9)
EQL-OK: -1.9244064996255633173L-11
(/ -0.38525727576606363245L0 -4.8936643582468263693L9)
EQL-OK: 7.872572525674472248L-11
(/ 0.028580272067667963345L0 -7.9841173999044091L-11)
EQL-OK: -3.5796407587907142282L8
(/ 0.72167998280372380157L0 -3.6437273419914776347L-12)
EQL-OK: -1.980609181391958688L11
(/ -0.5863461999919387516L0 7.881986348526466578L-11)
EQL-OK: -7.4390664239294943926L9
(/ 0.54541403791059564303L0 -2.6107257402815120583L-11)
EQL-OK: -2.089128051619026705L10
(/ 0.7985324354238058011L0 9.752737902348257611L-12)
EQL-OK: 8.187777047012979847L10
(/ 0.14104671220162837288L0 -1.679932803469743255L-11)
EQL-OK: -8.3959734526470136372L9
(/ 0.84226961154302812054L0 -3.7790325979515268584L19)
EQL-OK: -2.2287968936801211454L-20
(/ -0.17023320737807742781L0 -7.0544793122604881768L19)
EQL-OK: 2.4131222141684768152L-21
(/ 0.51147038234753495475L0 7.2890488826322506176L19)
EQL-OK: 7.01697012303244035L-21
(/ 0.15424860911694467965L0 -9.2121691156562017736L19)
EQL-OK: -1.6744005367291526718L-21
(/ 0.18043991101271504866L0 -1.5135729370916590423L19)
EQL-OK: -1.1921454631676461953L-20
(/ -0.8669749687756526617L0 8.7133495928438747096L19)
EQL-OK: -9.949961946754488136L-21
(/ -0.6448505560111598971L0 3.636469578348857873L-21)
EQL-OK: -1.7732873659951112376L20
(/ -0.81857582399766609004L0 5.2916132942068490006L-21)
EQL-OK: -1.546930545536701092L20
(/ 0.77524450276763022L0 -7.652595302708246449L-21)
EQL-OK: -1.0130478250865714831L20
(/ 0.627858729575384142L0 9.627326573065363056L-21)
EQL-OK: 6.5216311590796329432L19
(/ -0.42943946308533227006L0 -2.2414950519882640498L-21)
EQL-OK: 1.9158617490786266339L20
(/ -0.34220208112358558038L0 -7.4545803279812700505L-21)
EQL-OK: 4.5904942473972275588L19
(/ 5.560943842255079481L9 -0.55841023848214400133L0)
EQL-OK: -9.958527725728472542L9
(/ -8.661678305761957921L9 -0.87958882986448744696L0)
EQL-OK: 9.847417351919312785L9
(/ 3.6954900583503502368L9 -0.36989453222048823558L0)
EQL-OK: -9.9906587863470431315L9
(/ 6.740385471899914443L8 -0.2745720588185960522L0)
EQL-OK: -2.454869406924301959L9
(/ -5.1381279403866914758L9 -0.32555782051482221485L0)
EQL-OK: 1.578253574821668073L10
(/ -3.2065087686035281697L9 0.50505516522796299416L0)
EQL-OK: -6.3488287802308291444L9
(/ -7.7979994067331648055L9 -6.4459990751639263853L9)
EQL-OK: 1.2097425574847536075L0
(/ -4.7272619195621447717L9 -3.825695015629283172L8)
EQL-OK: 12.356609453314103588L0
(/ -3.5376744034596315073L9 2.7483444719369282795L9)
EQL-OK: -1.2872019645217230068L0
(/ -2.2400216393287578975L9 -3.7058330823204350567L9)
EQL-OK: 0.6044583200509807153L0
Makefile:2150: recipe for target 'check-tests' failed
make[1]: *** [check-tests] Terminated
Makefile:45: recipe for target 'EMA-XPS/bin/clisp' failed
make: *** [EMA-XPS/bin/clisp] Terminated
Exiting on signal 15
Real time: 762.2355 sec.
Run time: 38.964 sec.
Space: 609629896 Bytes
GC: 383, GC time: 5.912 sec.
Bye.
Makefile:24: recipe for target 'tests' failed
make[2]: *** [tests] Terminated
