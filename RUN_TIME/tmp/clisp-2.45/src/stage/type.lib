#0Y_ #0Y |CHARSET|::|UTF-8|
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "EXT"))
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "SYSTEM"))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|CLASS-NAME|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|SYSTEM|::|C|)))
(|SYSTEM|::|C-DEFUN| '|SYSTEM|::|TYPESPEC-ERROR|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|SYSTEM|::|FUN| |COMMON-LISP|::|TYPE|)))
(|SYSTEM|::|C-DEFUN| '|SYSTEM|::|CLOS-CLASS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|SYSTEM|::|TYPESPEC|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP|::|TYPEP|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|SYSTEM|::|X| |SYSTEM|::|Y| |COMMON-LISP|::|&OPTIONAL| |SYSTEM|::|ENV|
    |COMMON-LISP|::|&AUX| |SYSTEM|::|F|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP|::|UPGRADED-ARRAY-ELEMENT-TYPE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|TYPE| |COMMON-LISP|::|&OPTIONAL| |SYSTEM|::|ENVIRONMENT|)))
(|SYSTEM|::|C-DEFUN| '|COMMON-LISP|::|UPGRADED-COMPLEX-PART-TYPE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|TYPE| |COMMON-LISP|::|&OPTIONAL| |SYSTEM|::|ENVIRONMENT|)))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|SPECIAL| |SYSTEM|::|C-TYPEP-ALIST1|))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|SPECIAL| |SYSTEM|::|C-TYPEP-ALIST2|))
(|SYSTEM|::|C-PROCLAIM| '(|COMMON-LISP|::|SPECIAL| |SYSTEM|::|C-TYPEP-ALIST3|))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|SYSTEM|::|DEF-ATOMIC-TYPE|)
(|SYSTEM|::|%PUTD| '|SYSTEM|::|DEF-ATOMIC-TYPE|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |SYSTEM|::|DEF-ATOMIC-TYPE|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3.
       3.))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP|::|SYMBOL|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|SYSTEM|::|FUNNAME| (|COMMON-LISP|::|CADDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |SYSTEM|::|DEF-ATOMIC-TYPE|
       (|COMMON-LISP|::|LET|
        ((|SYSTEM|::|LAMBDAP|
          (|COMMON-LISP|::|AND| (|COMMON-LISP|::|CONSP| |SYSTEM|::|FUNNAME|)
           (|COMMON-LISP|::|EQ| (|COMMON-LISP|::|CAR| |SYSTEM|::|FUNNAME|)
            '|COMMON-LISP|::|LAMBDA|))))
        `(|COMMON-LISP|::|PROGN|
          (|COMMON-LISP|::|SETF|
           (|COMMON-LISP|::|GET| ',|COMMON-LISP|::|SYMBOL|
            '|SYSTEM|::|TYPE-SYMBOL|)
           ,(|COMMON-LISP|::|IF| |SYSTEM|::|LAMBDAP|
             `(|COMMON-LISP|::|FUNCTION|
               ,(|SYSTEM|::|CONCAT-PNAMES| "TYPE-SYMBOL-"
                 |COMMON-LISP|::|SYMBOL|)
               ,|SYSTEM|::|FUNNAME|)
             `#',|SYSTEM|::|FUNNAME|))
          ,(|COMMON-LISP|::|IF| |SYSTEM|::|LAMBDAP|
            `(|COMMON-LISP|::|SETQ| |SYSTEM|::|C-TYPEP-ALIST2|
              (|COMMON-LISP|::|NCONC| |SYSTEM|::|C-TYPEP-ALIST2|
               (|COMMON-LISP|::|LIST|
                (|COMMON-LISP|::|CONS| ',|COMMON-LISP|::|SYMBOL|
                 ',(|COMMON-LISP|::|CDR| |SYSTEM|::|FUNNAME|)))))
            `(|COMMON-LISP|::|SETQ| |SYSTEM|::|C-TYPEP-ALIST1|
              (|COMMON-LISP|::|NCONC| |SYSTEM|::|C-TYPEP-ALIST1|
               (|COMMON-LISP|::|LIST|
                (|COMMON-LISP|::|CONS| ',|COMMON-LISP|::|SYMBOL|
                 ',|SYSTEM|::|FUNNAME|)))))
          ',|COMMON-LISP|::|SYMBOL|)))))))
  '(|COMMON-LISP|::|SYMBOL| |SYSTEM|::|FUNNAME|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|SYSTEM|::|DEF-COMPOUND-TYPE|)
(|SYSTEM|::|%PUTD| '|SYSTEM|::|DEF-COMPOUND-TYPE|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |SYSTEM|::|DEF-COMPOUND-TYPE|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 7.
       7.))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP|::|SYMBOL|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|SYSTEM|::|LAMBDALIST| (|COMMON-LISP|::|CADDR| . #1#))
       (#2=#:|G2990| (|COMMON-LISP|::|CADDDR| . #1#))
       (#3=#:|G2991|
        (|COMMON-LISP|::|IF|
         (|COMMON-LISP|::|NOT|
          (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| #2# 1. 1.))
         (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |SYSTEM|::|<MACRO-FORM>| :|DETAIL| #2#
          (|SYSTEM|::|TEXT| "~S: ~S does not match lambda list element ~:S")
          '|SYSTEM|::|DEF-COMPOUND-TYPE| #2# '#4=(|SYSTEM|::|VAR|))
         #2#))
       (|SYSTEM|::|VAR| (|COMMON-LISP|::|CAR| #3#))
       (|SYSTEM|::|CHECK-FORM| (|COMMON-LISP|::|FIFTH| . #1#))
       (|SYSTEM|::|TYPEP-FORM|
        (|COMMON-LISP|::|CADR| . #5=((|COMMON-LISP|::|CDDDDR| . #1#))))
       (|SYSTEM|::|C-TYPEP-FORM| (|COMMON-LISP|::|CADDR| . #5#)))
      (|COMMON-LISP|::|BLOCK| |SYSTEM|::|DEF-COMPOUND-TYPE|
       `(|COMMON-LISP|::|PROGN|
         (|COMMON-LISP|::|SETF|
          (|COMMON-LISP|::|GET| ',|COMMON-LISP|::|SYMBOL|
           '|SYSTEM|::|TYPE-LIST|)
          (|COMMON-LISP|::|FUNCTION|
           ,(|SYSTEM|::|CONCAT-PNAMES| "TYPE-LIST-" |COMMON-LISP|::|SYMBOL|)
           (|COMMON-LISP|::|LAMBDA| (,|SYSTEM|::|VAR| ,@|SYSTEM|::|LAMBDALIST|)
            ,@(|COMMON-LISP|::|IF| |SYSTEM|::|CHECK-FORM|
               `((|COMMON-LISP|::|MACROLET|
                  ((|COMMON-LISP|::|ERROR|
                    (|COMMON-LISP|::|&REST| |SYSTEM|::|ERROR-ARGS|)
                    (|COMMON-LISP|::|LIST*| '|SYSTEM|::|ERROR-OF-TYPE|
                     ''|COMMON-LISP|::|ERROR| |SYSTEM|::|ERROR-ARGS|)))
                  ,|SYSTEM|::|CHECK-FORM|)))
            ,|SYSTEM|::|TYPEP-FORM|)))
         (|COMMON-LISP|::|SETQ| |SYSTEM|::|C-TYPEP-ALIST3|
          (|COMMON-LISP|::|NCONC| |SYSTEM|::|C-TYPEP-ALIST3|
           (|COMMON-LISP|::|LIST|
            (|COMMON-LISP|::|CONS| ',|COMMON-LISP|::|SYMBOL|
             #'(|COMMON-LISP|::|LAMBDA|
                (,|SYSTEM|::|VAR| ,@|SYSTEM|::|LAMBDALIST|
                 |COMMON-LISP|::|&REST| |SYSTEM|::|ILLEGAL-ARGS|)
                (|COMMON-LISP|::|DECLARE|
                 (|COMMON-LISP|::|IGNORE| |SYSTEM|::|ILLEGAL-ARGS|))
                ,@(|COMMON-LISP|::|IF| |SYSTEM|::|CHECK-FORM|
                   `((|COMMON-LISP|::|MACROLET|
                      ((|COMMON-LISP|::|ERROR|
                        (|COMMON-LISP|::|&REST| |SYSTEM|::|ERROR-ARGS|)
                        (|COMMON-LISP|::|LIST| '|COMMON-LISP|::|PROGN|
                         (|COMMON-LISP|::|LIST*| '|SYSTEM|::|C-WARN|
                          |SYSTEM|::|ERROR-ARGS|)
                         '(|COMMON-LISP|::|THROW| '|SYSTEM|::|C-TYPEP|
                           |COMMON-LISP|::|NIL|))))
                      ,|SYSTEM|::|CHECK-FORM|)))
                ,|SYSTEM|::|C-TYPEP-FORM|)))))
         ',|COMMON-LISP|::|SYMBOL|))))))
  '(|COMMON-LISP|::|SYMBOL| |SYSTEM|::|LAMBDALIST| #4# |SYSTEM|::|CHECK-FORM|
    |SYSTEM|::|TYPEP-FORM| |SYSTEM|::|C-TYPEP-FORM|)))
(|SYSTEM|::|C-DEFUN| '|SYSTEM|::|%STANDARD-CHAR-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|SYSTEM|::|X|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|SYSTEM|::|ENSURE-DIM|)
(|SYSTEM|::|%PUTD| '|SYSTEM|::|ENSURE-DIM|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |SYSTEM|::|ENSURE-DIM|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3.
       3.))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP|::|TYPE|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|SYSTEM|::|DIM| (|COMMON-LISP|::|CADDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |SYSTEM|::|ENSURE-DIM|
       `(|COMMON-LISP|::|UNLESS|
         (|COMMON-LISP|::|OR|
          (|COMMON-LISP|::|EQ| ,|SYSTEM|::|DIM| '|COMMON-LISP|::|*|)
          (|COMMON-LISP|::|TYPEP| ,|SYSTEM|::|DIM|
           `(|COMMON-LISP|::|INTEGER| 0.
             (,|COMMON-LISP|::|ARRAY-DIMENSION-LIMIT|))))
         (|COMMON-LISP|::|ERROR|
          (|SYSTEM|::|TEXT| "~S: dimension ~S is invalid")
          ',|COMMON-LISP|::|TYPE| ,|SYSTEM|::|DIM|)))))))
  '(|COMMON-LISP|::|TYPE| |SYSTEM|::|DIM|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|SYSTEM|::|ENSURE-RANK|)
(|SYSTEM|::|%PUTD| '|SYSTEM|::|ENSURE-RANK|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |SYSTEM|::|ENSURE-RANK|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3.
       3.))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|COMMON-LISP|::|TYPE|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|SYSTEM|::|RANK| (|COMMON-LISP|::|CADDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |SYSTEM|::|ENSURE-RANK|
       `(|COMMON-LISP|::|UNLESS|
         (|COMMON-LISP|::|TYPEP| ,|SYSTEM|::|RANK|
          `(|COMMON-LISP|::|INTEGER| 0. (,|COMMON-LISP|::|ARRAY-RANK-LIMIT|)))
         (|COMMON-LISP|::|ERROR| (|SYSTEM|::|TEXT| "~S: rank ~S is invalid")
          ',|COMMON-LISP|::|TYPE| ,|SYSTEM|::|RANK|)))))))
  '(|COMMON-LISP|::|TYPE| |SYSTEM|::|RANK|)))
(|SYSTEM|::|C-DEFUN| '|SYSTEM|::|C-TYPEP-ARRAY|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|SYSTEM|::|TESTER| |SYSTEM|::|EL-TYPE| |SYSTEM|::|DIMS| |SYSTEM|::|X|)))
(|SYSTEM|::|C-DEFUN| '|SYSTEM|::|C-TYPEP-VECTOR|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|SYSTEM|::|TESTER| |SYSTEM|::|SIZE| |SYSTEM|::|X|)))
(|SYSTEM|::|C-DEFUN| '|SYSTEM|::|TYPEP-NUMBER-TEST|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|SYSTEM|::|X| |SYSTEM|::|LOW| |SYSTEM|::|HIGH| |SYSTEM|::|TEST|
    |COMMON-LISP|::|TYPE|)))
(|SYSTEM|::|C-DEFUN| '|SYSTEM|::|C-TYPEP-NUMBER|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|SYSTEM|::|CALLER| |SYSTEM|::|TESTER| |SYSTEM|::|LOW| |SYSTEM|::|HIGH|
    |SYSTEM|::|X|)))
(|SYSTEM|::|C-DEFUN| '|SYSTEM|::|SAFE-TYPEP|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|SYSTEM|::|X| |SYSTEM|::|Y| |COMMON-LISP|::|&OPTIONAL| |SYSTEM|::|ENV|)))
(|SYSTEM|::|C-DEFUN| '|SYSTEM|::|TYPE-FOR-DISCRIMINATION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|SYSTEM|::|Y| |COMMON-LISP|::|&OPTIONAL|
    (|SYSTEM|::|NOTP| |COMMON-LISP|::|NIL|) |COMMON-LISP|::|&AUX|
    |SYSTEM|::|F|)))
(|SYSTEM|::|C-DEFUN| '|SYSTEM|::|%THE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|COMMON-LISP|::|VALUES| |COMMON-LISP|::|TYPE|)))
(|SYSTEM|::|C-DEFUN| '|SYSTEM|::|ENCODING-ZEROES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|EXT|::|ENCODING|)))
(|SYSTEM|::|C-DEFUN| '|SYSTEM|::|SUBTYPE-INTEGER|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|TYPE|)))
(|SYSTEM|::|C-DEFUN| '|SYSTEM|::|SUBTYPE-SEQUENCE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|COMMON-LISP|::|TYPE|)))
(|SYSTEM|::|C-DEFUN| '|SYSTEM|::|TYPE-OF-SEQUENCE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|SYSTEM|::|X|)))
(|SYSTEM|::|C-DEFUN| '|SYSTEM|::|SEQUENCE-TYPE-UNION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|SYSTEM|::|T1| |SYSTEM|::|T2|)))
(|SYSTEM|::|C-DEFUN| '|SYSTEM|::|SEQUENCE-TYPE-INTERSECTION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|SYSTEM|::|T1| |SYSTEM|::|T2|)))
(|SYSTEM|::|C-DEFUN| '|EXT|::|TYPE-EXPAND|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|SYSTEM|::|TYPESPEC| |COMMON-LISP|::|&OPTIONAL| |SYSTEM|::|ONCE-P|)))
