#0Y_ #0Y |CHARSET|::|UTF-8|
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "CLOS"))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|SPECIALIZERS-AGREE-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|SPECIALIZERS1| |CLOS|::|SPECIALIZERS2|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|SAME-SPECIALIZERS-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|SPECIALIZER1| |CLOS|::|SPECIALIZER2|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|METHOD-LIST-TO-CONTINUATION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CLOS|::|METHODS-LIST|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|STD-METHOD-FUNCTION-OR-SUBSTITUTE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CLOS|::|METHOD|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|METHOD-FUNCTION-SUBSTITUTE|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CLOS|::|H|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|METHOD-FUNCTION-INITARGS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CLOS|::|METHOD-CLASS| |CLOS|::|H|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |CLOS|::|*METHOD-COMBINATION-ARGUMENTS*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |CLOS|::|*METHOD-COMBINATION-GENERIC-FUNCTION*|))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |CLOS|::|*METHOD-COMBINATION*|))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|INVALID-METHOD-ERROR|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|METHOD| |CLOS|::|FORMAT-STRING| |COMMON-LISP|::|&REST|
    |CLOS|::|ARGS|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|METHOD-COMBINATION-ERROR|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|FORMAT-STRING| |COMMON-LISP|::|&REST| |CLOS|::|ARGS|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|INVALID-METHOD-SORT-ORDER-ERROR|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|ORDER-FORM| |CLOS|::|ORDER-VALUE|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|CALL-METHOD-DUPLICATES-ERROR|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|GF| |CLOS|::|METHOD+GROUPNAME|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|INVALID-SORT-ORDER-ERROR|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|ORDER-FORM| |CLOS|::|ORDER-VALUE|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|ANY-METHOD-COMBINATION-CHECK-OPTIONS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|GF-NAME| |CLOS|::|COMBINATION| |CLOS|::|OPTIONS|
    |CLOS|::|CHECKER|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|CHECK-EM-ARGUMENTS-OPTION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|OPTION| |CLOS|::|CALLER| |CLOS|::|WHOLE-FORM| |CLOS|::|NAME|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|CHECK-EM-GENERIC-FUNCTION-OPTION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|OPTION| |CLOS|::|CALLER| |CLOS|::|WHOLE-FORM| |CLOS|::|NAME|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|CHECK-EM-DUPLICATES-OPTION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|OPTION| |CLOS|::|CALLER| |CLOS|::|NAME|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|ADD-NEXT-METHOD-LOCAL-FUNCTIONS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|BACKPOINTER| |CLOS|::|CONT| |CLOS|::|REQ-DUMMIES|
    |CLOS|::|REST-DUMMY| |CLOS|::|BODY|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CLOS|::|CALL-METHOD|)
(|SYSTEM|::|%PUTD| '|CLOS|::|CALL-METHOD|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CLOS|::|CALL-METHOD|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2.
       3.))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|CLOS|::|WHOLE-FORM| |SYSTEM|::|<MACRO-FORM>|)
       (|CLOS|::|METHOD|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|CLOS|::|NEXT-METHODS-LIST| (|COMMON-LISP|::|CADDR| . #1#)))
      (|COMMON-LISP|::|DECLARE|
       (|COMMON-LISP|::|IGNORE| |CLOS|::|METHOD| |CLOS|::|NEXT-METHODS-LIST|))
      (|COMMON-LISP|::|BLOCK| |CLOS|::|CALL-METHOD|
       (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
        |CLOS|::|WHOLE-FORM| :|DETAIL| |CLOS|::|WHOLE-FORM|
        (|SYSTEM|::|TEXT|
         "~S is possible only from within the context of an effective method function. See ~S.")
        '|CLOS|::|CALL-METHOD| '|CLOS|::|DEFINE-METHOD-COMBINATION|))))))
  '(|COMMON-LISP|::|&WHOLE| |CLOS|::|WHOLE-FORM| |CLOS|::|METHOD|
    |COMMON-LISP|::|&OPTIONAL| |CLOS|::|NEXT-METHODS-LIST|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CLOS|::|MAKE-METHOD|)
(|SYSTEM|::|%PUTD| '|CLOS|::|MAKE-METHOD|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CLOS|::|MAKE-METHOD|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2.
       2.))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|CLOS|::|WHOLE-FORM| |SYSTEM|::|<MACRO-FORM>|)
       (|CLOS|::|FORM| (|COMMON-LISP|::|CADR| |SYSTEM|::|<MACRO-FORM>|)))
      (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |CLOS|::|FORM|))
      (|COMMON-LISP|::|BLOCK| |CLOS|::|MAKE-METHOD|
       (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
        |CLOS|::|WHOLE-FORM| :|DETAIL| |CLOS|::|WHOLE-FORM|
        (|SYSTEM|::|TEXT|
         "~S is possible only at particular places from within the context of an effective method function. See ~S.")
        '|CLOS|::|MAKE-METHOD| '|CLOS|::|DEFINE-METHOD-COMBINATION|))))))
  '(|COMMON-LISP|::|&WHOLE| |CLOS|::|WHOLE-FORM| |CLOS|::|FORM|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|MAKE-METHOD-ERROR|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CLOS|::|WHOLE-FORM|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|CALLABLE-METHOD-FORM-P|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CLOS|::|FORM|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|CALL-METHOD-ARG1-ERROR|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CLOS|::|WHOLE-FORM|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|CALL-METHOD-ARG2-ERROR|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CLOS|::|WHOLE-FORM|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|CALL-METHOD-ARG2ELEMENTS-ERROR|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CLOS|::|WHOLE-FORM|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|EFFECTIVE-METHOD-CODE-BRICKS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|GF| |CLOS|::|METHODS| |CLOS|::|DUPLICATES|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|BUILD-EFFECTIVE-METHOD-FUNCTION-FORM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|GENERIC-FUNCTION| |CLOS|::|COMBINATION| |CLOS|::|METHODS|
    |CLOS|::|EFFECTIVE-METHOD-FORM| |CLOS|::|COMBINATION-ARGUMENTS-LAMBDA-LIST|
    |CLOS|::|GENERIC-FUNCTION-VARIABLE| |CLOS|::|DUPLICATES|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|COMPUTE-EFFECTIVE-METHOD-<GENERIC-FUNCTION>|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|GF| |CLOS|::|COMBINATION| |CLOS|::|METHODS|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|COMPUTE-EFFECTIVE-METHOD|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|GF| |CLOS|::|COMBINATION| |CLOS|::|METHODS|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|COMPUTE-EFFECTIVE-METHOD-AS-FUNCTION-FORM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|GF| |CLOS|::|COMBINATION| |CLOS|::|METHODS|
    |CLOS|::|*METHOD-COMBINATION-ARGUMENTS*|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|STANDARD-METHOD-COMBINATION-CHECK-OPTIONS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|GF-NAME| |CLOS|::|COMBINATION| |CLOS|::|OPTIONS|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|PARTITION-METHOD-LIST|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE| '(|CLOS|::|METHODS| |CLOS|::|GF|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|STANDARD-METHOD-COMBINATION-EXPANDER|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|GF| |CLOS|::|COMBINATION| |CLOS|::|OPTIONS| |CLOS|::|METHODS|)))
(|SYSTEM|::|C-DEFUN|
 '|CLOS|::|STANDARD-METHOD-COMBINATION-CHECK-METHOD-QUALIFIERS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|GF| |CLOS|::|METHOD-COMBO| |CLOS|::|METHOD|)))
(|SYSTEM|::|C-DEFUN|
 '|CLOS|::|STANDARD-METHOD-COMBINATION-CALL-NEXT-METHOD-ALLOWED|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|GF| |CLOS|::|METHOD-COMBO| |CLOS|::|METHOD|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|SHORT-FORM-METHOD-COMBINATION-CHECK-OPTIONS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|GF-NAME| |CLOS|::|COMBINATION| |CLOS|::|OPTIONS|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|SHORT-FORM-METHOD-COMBINATION-EXPANDER|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|GF| |CLOS|::|COMBINATION| |CLOS|::|OPTIONS| |CLOS|::|METHODS|)))
(|SYSTEM|::|C-DEFUN|
 '|CLOS|::|SHORT-FORM-METHOD-COMBINATION-CHECK-METHOD-QUALIFIERS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|GF| |CLOS|::|METHOD-COMBO| |CLOS|::|METHOD|)))
(|SYSTEM|::|C-DEFUN|
 '|CLOS|::|SHORT-FORM-METHOD-COMBINATION-CALL-NEXT-METHOD-ALLOWED|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|GF| |CLOS|::|METHOD-COMBO| |CLOS|::|METHOD|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|LONG-FORM-METHOD-COMBINATION-EXPANDER|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|*METHOD-COMBINATION-GENERIC-FUNCTION*|
    |CLOS|::|*METHOD-COMBINATION*| |CLOS|::|OPTIONS| |CLOS|::|METHODS|)))
(|SYSTEM|::|C-DEFUN|
 '|CLOS|::|LONG-FORM-METHOD-COMBINATION-CALL-NEXT-METHOD-ALLOWED|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|GF| |CLOS|::|METHOD-COMBO| |CLOS|::|METHOD|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|LONG-FORM-METHOD-COMBINATION-COLLECT-DUPLICATES|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|METHODS| |CLOS|::|GROUPNAME|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|PARSE-METHOD-GROUPS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|WHOLE-FORM| |CLOS|::|NAME| |CLOS|::|METHOD-GROUPS|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|COMPUTE-METHOD-PARTITION-LAMBDAS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|METHOD-GROUPS| |CLOS|::|BODY|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CLOS|::|DEFINE-METHOD-COMBINATION|)
(|SYSTEM|::|%PUTD| '|CLOS|::|DEFINE-METHOD-COMBINATION|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CLOS|::|DEFINE-METHOD-COMBINATION|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    "The macro define-method-combination defines a new method combination.\n
Short-form options are :documentation, :identity-with-one-argument,\n
 and :operator.\n
Long-form options are a list of method-group specifiers,\n
 each of which comprises a sequence of qualifier patterns\n
 followed by respective :description, :order, :required options,\n
 and optional :generic-function, and :arguments options preceeding\n
 the definition body."
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2.))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|CLOS|::|WHOLE-FORM| |SYSTEM|::|<MACRO-FORM>|)
       (|CLOS|::|NAME| (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|CLOS|::|OPTIONS| (|COMMON-LISP|::|CDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |CLOS|::|DEFINE-METHOD-COMBINATION|
       (|COMMON-LISP|::|UNLESS| (|COMMON-LISP|::|SYMBOLP| |CLOS|::|NAME|)
        (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
         |CLOS|::|WHOLE-FORM| :|DETAIL| |CLOS|::|NAME|
         (|SYSTEM|::|TEXT| "~S: method combination name ~S should be a symbol")
         '|CLOS|::|DEFINE-METHOD-COMBINATION| |CLOS|::|NAME|))
       (|SYSTEM|::|CHECK-REDEFINITION| |CLOS|::|NAME|
        '|CLOS|::|DEFINE-METHOD-COMBINATION|
        (|COMMON-LISP|::|AND|
         (|CLOS|::|GET-METHOD-COMBINATION| |CLOS|::|NAME| |COMMON-LISP|::|NIL|)
         (|SYSTEM|::|TEXT| "method combination")))
       (|COMMON-LISP|::|COND|
        ((|COMMON-LISP|::|OR| (|COMMON-LISP|::|NULL| |CLOS|::|OPTIONS|)
          (|COMMON-LISP|::|AND| (|COMMON-LISP|::|CONSP| |CLOS|::|OPTIONS|)
           (|COMMON-LISP|::|TYPEP| (|COMMON-LISP|::|FIRST| |CLOS|::|OPTIONS|)
            '(|COMMON-LISP|::|AND| |COMMON-LISP|::|SYMBOL|
              (|COMMON-LISP|::|NOT| |COMMON-LISP|::|NULL|)))))
         (|COMMON-LISP|::|WHEN|
          (|COMMON-LISP|::|ODDP| (|COMMON-LISP|::|LENGTH| |CLOS|::|OPTIONS|))
          (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
           |CLOS|::|WHOLE-FORM| :|DETAIL| |CLOS|::|OPTIONS|
           (|SYSTEM|::|TEXT| "~S ~S: options must come in pairs")
           '|CLOS|::|DEFINE-METHOD-COMBINATION| |CLOS|::|NAME|))
         (|COMMON-LISP|::|LET|
          ((|CLOS|::|DOCUMENTATION| |COMMON-LISP|::|NIL|)
           (|CLOS|::|IDENTITIES| '|COMMON-LISP|::|NIL|)
           (|CLOS|::|OPERATORS| '|COMMON-LISP|::|NIL|))
          (|COMMON-LISP|::|DO|
           ((|CLOS|::|OPTIONSR| |CLOS|::|OPTIONS|
             (|COMMON-LISP|::|CDDR| |CLOS|::|OPTIONSR|)))
           ((|COMMON-LISP|::|ATOM| |CLOS|::|OPTIONSR|))
           (|COMMON-LISP|::|WHEN|
            (|COMMON-LISP|::|ATOM| (|COMMON-LISP|::|CDR| |CLOS|::|OPTIONSR|))
            (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
             |CLOS|::|WHOLE-FORM| :|DETAIL| |CLOS|::|OPTIONS|
             (|SYSTEM|::|TEXT| "~S ~S: options must come in pairs")
             '|CLOS|::|DEFINE-METHOD-COMBINATION| |CLOS|::|NAME|))
           (|COMMON-LISP|::|LET|
            ((|CLOS|::|OPTIONKEY| (|COMMON-LISP|::|FIRST| |CLOS|::|OPTIONSR|))
             (|CLOS|::|ARGUMENT| (|COMMON-LISP|::|SECOND| |CLOS|::|OPTIONSR|)))
            (|COMMON-LISP|::|CASE| |CLOS|::|OPTIONKEY|
             (:|DOCUMENTATION|
              (|COMMON-LISP|::|WHEN| |CLOS|::|DOCUMENTATION|
               (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR|
                :|FORM| |CLOS|::|WHOLE-FORM| :|DETAIL| |CLOS|::|OPTIONS|
                (|SYSTEM|::|TEXT| "~S ~S: option ~S may only be given once")
                '|CLOS|::|DEFINE-METHOD-COMBINATION| |CLOS|::|NAME|
                ':|DOCUMENTATION|))
              (|COMMON-LISP|::|UNLESS|
               (|COMMON-LISP|::|STRINGP| |CLOS|::|ARGUMENT|)
               (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR|
                :|FORM| |CLOS|::|WHOLE-FORM| :|DETAIL| |CLOS|::|ARGUMENT|
                (|SYSTEM|::|TEXT| "~S ~S: ~S is not a string")
                '|CLOS|::|DEFINE-METHOD-COMBINATION| |CLOS|::|NAME|
                |CLOS|::|ARGUMENT|))
              (|COMMON-LISP|::|SETQ| |CLOS|::|DOCUMENTATION|
               |CLOS|::|ARGUMENT|))
             (:|IDENTITY-WITH-ONE-ARGUMENT|
              (|COMMON-LISP|::|WHEN| |CLOS|::|IDENTITIES|
               (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR|
                :|FORM| |CLOS|::|WHOLE-FORM| :|DETAIL| |CLOS|::|OPTIONS|
                (|SYSTEM|::|TEXT| "~S ~S: option ~S may only be given once")
                '|CLOS|::|DEFINE-METHOD-COMBINATION| |CLOS|::|NAME|
                ':|IDENTITY-WITH-ONE-ARGUMENT|))
              (|COMMON-LISP|::|SETQ| |CLOS|::|IDENTITIES|
               (|COMMON-LISP|::|LIST|
                (|COMMON-LISP|::|NOT|
                 (|COMMON-LISP|::|NULL| |CLOS|::|ARGUMENT|)))))
             (:|OPERATOR|
              (|COMMON-LISP|::|WHEN| |CLOS|::|OPERATORS|
               (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR|
                :|FORM| |CLOS|::|WHOLE-FORM| :|DETAIL| |CLOS|::|OPTIONS|
                (|SYSTEM|::|TEXT| "~S ~S: option ~S may only be given once")
                '|CLOS|::|DEFINE-METHOD-COMBINATION| |CLOS|::|NAME|
                ':|OPERATOR|))
              (|COMMON-LISP|::|UNLESS|
               (|COMMON-LISP|::|SYMBOLP| |CLOS|::|ARGUMENT|)
               (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR|
                :|FORM| |CLOS|::|WHOLE-FORM| :|DETAIL| |CLOS|::|ARGUMENT|
                (|SYSTEM|::|TEXT| "~S ~S, option ~S: ~S is not a symbol")
                '|CLOS|::|DEFINE-METHOD-COMBINATION| |CLOS|::|NAME|
                ':|OPERATOR| |CLOS|::|ARGUMENT|))
              (|COMMON-LISP|::|SETQ| |CLOS|::|OPERATORS|
               (|COMMON-LISP|::|LIST| |CLOS|::|ARGUMENT|)))
             (|COMMON-LISP|::|T|
              (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
               |CLOS|::|WHOLE-FORM| :|DETAIL| |CLOS|::|OPTIONKEY|
               (|SYSTEM|::|TEXT| "~S ~S: ~S is not a valid short-form option")
               '|CLOS|::|DEFINE-METHOD-COMBINATION| |CLOS|::|NAME|
               |CLOS|::|OPTIONKEY|)))))
          `(|CLOS|::|DO-DEFINE-METHOD-COMBINATION| ',|CLOS|::|NAME|
            ,@(|COMMON-LISP|::|WHEN| |CLOS|::|DOCUMENTATION|
               `(:|DOCUMENTATION| ',|CLOS|::|DOCUMENTATION|))
            ,@(|COMMON-LISP|::|WHEN| |CLOS|::|IDENTITIES|
               `(:|IDENTITY-WITH-ONE-ARGUMENT|
                 ',(|COMMON-LISP|::|FIRST| |CLOS|::|IDENTITIES|)))
            :|OPERATOR|
            ',(|COMMON-LISP|::|IF| |CLOS|::|OPERATORS|
               (|COMMON-LISP|::|FIRST| |CLOS|::|OPERATORS|) |CLOS|::|NAME|)
            :|QUALIFIERS| ',(|COMMON-LISP|::|LIST| |CLOS|::|NAME| ':|AROUND|)
            :|CHECK-OPTIONS|
            #'|CLOS|::|SHORT-FORM-METHOD-COMBINATION-CHECK-OPTIONS| :|EXPANDER|
            #'|CLOS|::|SHORT-FORM-METHOD-COMBINATION-EXPANDER|
            :|CHECK-METHOD-QUALIFIERS|
            #'|CLOS|::|SHORT-FORM-METHOD-COMBINATION-CHECK-METHOD-QUALIFIERS|
            :|CALL-NEXT-METHOD-ALLOWED|
            #'|CLOS|::|SHORT-FORM-METHOD-COMBINATION-CALL-NEXT-METHOD-ALLOWED|)))
        ((|COMMON-LISP|::|AND| (|COMMON-LISP|::|CONSP| |CLOS|::|OPTIONS|)
          (|COMMON-LISP|::|LISTP| (|COMMON-LISP|::|FIRST| |CLOS|::|OPTIONS|)))
         (|COMMON-LISP|::|UNLESS|
          (|COMMON-LISP|::|AND|
           (|COMMON-LISP|::|>=| (|COMMON-LISP|::|LENGTH| |CLOS|::|OPTIONS|) 2.)
           (|COMMON-LISP|::|LISTP|
            (|COMMON-LISP|::|SECOND| |CLOS|::|OPTIONS|)))
          (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
           |CLOS|::|WHOLE-FORM| :|DETAIL| |CLOS|::|OPTIONS|
           (|SYSTEM|::|TEXT| "~S ~S: invalid syntax for long form: ~S")
           '|CLOS|::|DEFINE-METHOD-COMBINATION| |CLOS|::|NAME|
           |CLOS|::|WHOLE-FORM|))
         (|COMMON-LISP|::|LET|
          ((|CLOS|::|LAMBDA-LIST| (|COMMON-LISP|::|FIRST| |CLOS|::|OPTIONS|))
           (|CLOS|::|METHOD-GROUP-SPECIFIERS|
            (|COMMON-LISP|::|SECOND| |CLOS|::|OPTIONS|))
           (|CLOS|::|BODY| (|COMMON-LISP|::|CDDR| |CLOS|::|OPTIONS|)))
          (|SYSTEM|::|ANALYZE-LAMBDALIST| |CLOS|::|LAMBDA-LIST|
           #'(|COMMON-LISP|::|LAMBDA|
              (|CLOS|::|DETAIL| |CLOS|::|ERRORSTRING| |COMMON-LISP|::|&REST|
               |CLOS|::|ARGUMENTS|)
              (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
               |CLOS|::|WHOLE-FORM| :|DETAIL| |CLOS|::|DETAIL|
               (|SYSTEM|::|TEXT| "~S ~S: invalid lambda-list: ~A")
               '|CLOS|::|DEFINE-METHOD-COMBINATION| |CLOS|::|NAME|
               (|COMMON-LISP|::|APPLY| #'|COMMON-LISP|::|FORMAT|
                |COMMON-LISP|::|NIL| |CLOS|::|ERRORSTRING|
                |CLOS|::|ARGUMENTS|))))
          (|COMMON-LISP|::|LET|
           ((|CLOS|::|METHOD-GROUPS|
             (|CLOS|::|PARSE-METHOD-GROUPS| |CLOS|::|WHOLE-FORM| |CLOS|::|NAME|
              |CLOS|::|METHOD-GROUP-SPECIFIERS|))
            (|CLOS|::|ARGUMENTS-LAMBDA-LIST| |COMMON-LISP|::|NIL|)
            (|CLOS|::|ARGUMENTS-VARIABLES| '|COMMON-LISP|::|NIL|)
            (|CLOS|::|USER-GF-VARIABLE| |COMMON-LISP|::|NIL|)
            (|CLOS|::|GF-NAME-VARIABLE| (|COMMON-LISP|::|GENSYM| "GF-NAME-"))
            (|CLOS|::|GF-VARIABLE| (|COMMON-LISP|::|GENSYM| "GF-"))
            (|CLOS|::|COMBINATION-VARIABLE|
             (|COMMON-LISP|::|GENSYM| "COMBINATION-"))
            (|CLOS|::|OPTIONS-VARIABLE| (|COMMON-LISP|::|GENSYM| "OPTIONS-"))
            (|CLOS|::|METHODS-VARIABLE| (|COMMON-LISP|::|GENSYM| "METHODS-"))
            (|CLOS|::|METHOD-VARIABLE| (|COMMON-LISP|::|GENSYM| "METHOD-")))
           (|COMMON-LISP|::|WHEN|
            (|COMMON-LISP|::|AND| (|COMMON-LISP|::|CONSP| |CLOS|::|BODY|)
             (|COMMON-LISP|::|CONSP| (|COMMON-LISP|::|CAR| |CLOS|::|BODY|))
             (|COMMON-LISP|::|EQ| (|COMMON-LISP|::|CAAR| |CLOS|::|BODY|)
              ':|ARGUMENTS|))
            (|COMMON-LISP|::|MULTIPLE-VALUE-SETQ|
             (|CLOS|::|ARGUMENTS-LAMBDA-LIST| |CLOS|::|ARGUMENTS-VARIABLES|)
             (|CLOS|::|CHECK-EM-ARGUMENTS-OPTION|
              (|COMMON-LISP|::|CAR| |CLOS|::|BODY|)
              '|CLOS|::|DEFINE-METHOD-COMBINATION| |CLOS|::|WHOLE-FORM|
              |CLOS|::|NAME|))
            (|COMMON-LISP|::|SETQ| |CLOS|::|BODY|
             (|COMMON-LISP|::|CDR| |CLOS|::|BODY|)))
           (|COMMON-LISP|::|WHEN|
            (|COMMON-LISP|::|AND| (|COMMON-LISP|::|CONSP| |CLOS|::|BODY|)
             (|COMMON-LISP|::|CONSP| (|COMMON-LISP|::|CAR| |CLOS|::|BODY|))
             (|COMMON-LISP|::|EQ| (|COMMON-LISP|::|CAAR| |CLOS|::|BODY|)
              ':|GENERIC-FUNCTION|))
            (|COMMON-LISP|::|SETQ| |CLOS|::|USER-GF-VARIABLE|
             (|CLOS|::|CHECK-EM-GENERIC-FUNCTION-OPTION|
              (|COMMON-LISP|::|CAR| |CLOS|::|BODY|)
              '|CLOS|::|DEFINE-METHOD-COMBINATION| |CLOS|::|WHOLE-FORM|
              |CLOS|::|NAME|))
            (|COMMON-LISP|::|SETQ| |CLOS|::|BODY|
             (|COMMON-LISP|::|CDR| |CLOS|::|BODY|)))
           (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
            (|CLOS|::|BODY-REST| |CLOS|::|DECLARATIONS|
             |CLOS|::|DOCUMENTATION|)
            (|SYSTEM|::|PARSE-BODY| |CLOS|::|BODY| |COMMON-LISP|::|T|)
            (|COMMON-LISP|::|WHEN| |CLOS|::|ARGUMENTS-VARIABLES|
             (|COMMON-LISP|::|SETQ| |CLOS|::|BODY-REST|
              `((|COMMON-LISP|::|LET|
                 ,(|COMMON-LISP|::|MAPCAN|
                   #'(|COMMON-LISP|::|LAMBDA| (|COMMON-LISP|::|VARIABLE|)
                      (|COMMON-LISP|::|LIST|
                       `(,|COMMON-LISP|::|VARIABLE|
                         ',|COMMON-LISP|::|VARIABLE|)))
                   |CLOS|::|ARGUMENTS-VARIABLES|)
                 ,@|CLOS|::|BODY-REST|))))
            (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
             (|CLOS|::|CHECK-OPTIONS-LAMBDA| |CLOS|::|PARTITION-LAMBDA|
              |CLOS|::|CHECK-LAMBDA|)
             (|CLOS|::|COMPUTE-METHOD-PARTITION-LAMBDAS|
              |CLOS|::|METHOD-GROUPS| |CLOS|::|BODY-REST|)
             `(|CLOS|::|DO-DEFINE-METHOD-COMBINATION| ',|CLOS|::|NAME|
               ,@(|COMMON-LISP|::|WHEN| |CLOS|::|DOCUMENTATION|
                  `(:|DOCUMENTATION| ',|CLOS|::|DOCUMENTATION|))
               ,@(|COMMON-LISP|::|WHEN| |CLOS|::|DECLARATIONS|
                  `(:|DECLARATIONS|
                    '((|COMMON-LISP|::|DECLARE| ,@|CLOS|::|DECLARATIONS|))))
               ,@(|COMMON-LISP|::|WHEN| |CLOS|::|ARGUMENTS-LAMBDA-LIST|
                  `(:|ARGUMENTS-LAMBDA-LIST|
                    ',|CLOS|::|ARGUMENTS-LAMBDA-LIST|))
               :|CHECK-OPTIONS|
               #'(|COMMON-LISP|::|LAMBDA|
                  (,|CLOS|::|GF-NAME-VARIABLE| ,|CLOS|::|COMBINATION-VARIABLE|
                   ,|CLOS|::|OPTIONS-VARIABLE|)
                  (|CLOS|::|ANY-METHOD-COMBINATION-CHECK-OPTIONS|
                   ,|CLOS|::|GF-NAME-VARIABLE| ,|CLOS|::|COMBINATION-VARIABLE|
                   ,|CLOS|::|OPTIONS-VARIABLE|
                   (|COMMON-LISP|::|FUNCTION|
                    |CLOS|::|METHOD-COMBINATION-OPTION-CHECKER|
                    (|COMMON-LISP|::|LAMBDA| (,@|CLOS|::|LAMBDA-LIST|)
                     (,|CLOS|::|CHECK-OPTIONS-LAMBDA|)))))
               :|EXPANDER| #'|CLOS|::|LONG-FORM-METHOD-COMBINATION-EXPANDER|
               :|LONG-EXPANDER|
               #'(|COMMON-LISP|::|LAMBDA|
                  (,|CLOS|::|GF-VARIABLE| ,|CLOS|::|METHODS-VARIABLE|
                   ,@|CLOS|::|LAMBDA-LIST|)
                  (|COMMON-LISP|::|LET|
                   (,@(|COMMON-LISP|::|WHEN| |CLOS|::|USER-GF-VARIABLE|
                       `(,|CLOS|::|USER-GF-VARIABLE| ,|CLOS|::|GF-VARIABLE|)))
                   (,|CLOS|::|PARTITION-LAMBDA| ,|CLOS|::|METHODS-VARIABLE|)))
               :|CHECK-METHOD-QUALIFIERS|
               #'(|COMMON-LISP|::|LAMBDA|
                  (,|CLOS|::|GF-VARIABLE| ,|CLOS|::|COMBINATION-VARIABLE|
                   ,|CLOS|::|METHOD-VARIABLE|)
                  (|COMMON-LISP|::|DECLARE|
                   (|COMMON-LISP|::|IGNORE| ,|CLOS|::|COMBINATION-VARIABLE|))
                  (,|CLOS|::|CHECK-LAMBDA| ,|CLOS|::|GF-VARIABLE|
                   ,|CLOS|::|METHOD-VARIABLE|))
               :|CALL-NEXT-METHOD-ALLOWED|
               #'|CLOS|::|LONG-FORM-METHOD-COMBINATION-CALL-NEXT-METHOD-ALLOWED|))))))
        (|COMMON-LISP|::|T|
         (|SYSTEM|::|ERROR-OF-TYPE| '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
          |CLOS|::|WHOLE-FORM| :|DETAIL| |CLOS|::|WHOLE-FORM|
          (|SYSTEM|::|TEXT|
           "~S ~S: invalid syntax, neither short form nor long form syntax: ~S")
          '|CLOS|::|DEFINE-METHOD-COMBINATION| |CLOS|::|NAME|
          |CLOS|::|WHOLE-FORM|))))))))
  '(|COMMON-LISP|::|&WHOLE| |CLOS|::|WHOLE-FORM| |CLOS|::|NAME|
    |COMMON-LISP|::|&REST| |CLOS|::|OPTIONS|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|DO-DEFINE-METHOD-COMBINATION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|NAME| |COMMON-LISP|::|&REST| |CLOS|::|INITARGS|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|METHOD-COMBINATION-WITH-OPTIONS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|GF-NAME| |CLOS|::|COMBINATION| |CLOS|::|OPTIONS|)))
(|SYSTEM|::|C-DEFUN|
 '|CLOS|::|FIND-METHOD-COMBINATION-<GENERIC-FUNCTION>-<SYMBOL>|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|GF| |CLOS|::|NAME| |CLOS|::|OPTIONS|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|FIND-METHOD-COMBINATION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|GF| |CLOS|::|NAME| |CLOS|::|OPTIONS|)))
