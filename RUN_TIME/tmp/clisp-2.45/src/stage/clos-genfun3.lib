#0Y_ #0Y |CHARSET|::|UTF-8|
(|COMMON-LISP|::|SETQ| |COMMON-LISP|::|*PACKAGE*|
 (|SYSTEM|::|%FIND-PACKAGE| "CLOS"))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|%CALL-NEXT-METHOD|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|BACKPOINTER| |CLOS|::|NEXT-METHODS| |CLOS|::|ORIGINAL-ARGS|
    |CLOS|::|NEW-ARGS|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|MAKE-GENERIC-FUNCTION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|GENERIC-FUNCTION-CLASS| |CLOS|::|CALLER| |CLOS|::|WHOLE-FORM|
    |CLOS|::|FUNNAME| |CLOS|::|LAMBDA-LIST| |CLOS|::|ARGUMENT-PRECEDENCE-ORDER|
    |CLOS|::|METHOD-COMBINATION| |CLOS|::|METHOD-COMBINATION-P|
    |CLOS|::|METHOD-CLASS| |CLOS|::|METHOD-CLASS-P| |CLOS|::|DECLSPECS|
    |CLOS|::|DECLSPECS-P| |CLOS|::|DOCUMENTATION| |CLOS|::|DOCUMENTATION-P|
    |CLOS|::|USER-DEFINED-ARGS| |COMMON-LISP|::|&REST| |CLOS|::|METHODS|)))
(|SYSTEM|::|C-PROCLAIM|
 '(|COMMON-LISP|::|SPECIAL| |CLOS|::|*ALLOW-MAKING-GENERIC*|))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|ENSURE-GENERIC-FUNCTION-USING-CLASS-<T>|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|GF| |CLOS|::|FUNNAME| |COMMON-LISP|::|&REST| |CLOS|::|ALL-KEYS|
    |COMMON-LISP|::|&KEY|
    (|CLOS|::|GENERIC-FUNCTION-CLASS| |CLOS|::|<STANDARD-GENERIC-FUNCTION>|)
    |CLOS|::|LAMBDA-LIST| |CLOS|::|ARGUMENT-PRECEDENCE-ORDER|
    (|CLOS|::|METHOD-CLASS| |COMMON-LISP|::|NIL| |CLOS|::|METHOD-CLASS-P|)
    |CLOS|::|METHOD-COMBINATION| |CLOS|::|DOCUMENTATION| |CLOS|::|DECLARATIONS|
    |COMMON-LISP|::|DECLARE| |CLOS|::|ENVIRONMENT|
    ((|CLOS|::|METHODS| |CLOS|::|METHODS|) |COMMON-LISP|::|NIL|)
    |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|ENSURE-GENERIC-FUNCTION-USING-CLASS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|GF| |CLOS|::|FUNNAME| |COMMON-LISP|::|&REST| |CLOS|::|ARGS|
    |COMMON-LISP|::|&KEY| |CLOS|::|GENERIC-FUNCTION-CLASS|
    |CLOS|::|LAMBDA-LIST| |CLOS|::|ARGUMENT-PRECEDENCE-ORDER|
    |CLOS|::|METHOD-CLASS| |CLOS|::|METHOD-COMBINATION| |CLOS|::|DOCUMENTATION|
    |CLOS|::|DECLARATIONS| |COMMON-LISP|::|DECLARE| |CLOS|::|ENVIRONMENT|
    |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|ENSURE-GENERIC-FUNCTION|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|FUNNAME| |COMMON-LISP|::|&REST| |CLOS|::|ARGS|
    |COMMON-LISP|::|&KEY| |CLOS|::|GENERIC-FUNCTION-CLASS|
    |CLOS|::|LAMBDA-LIST| |CLOS|::|ARGUMENT-PRECEDENCE-ORDER|
    |CLOS|::|METHOD-CLASS| |CLOS|::|METHOD-COMBINATION| |CLOS|::|DOCUMENTATION|
    |CLOS|::|DECLARATIONS| |COMMON-LISP|::|DECLARE| |CLOS|::|ENVIRONMENT|
    |COMMON-LISP|::|&ALLOW-OTHER-KEYS|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CLOS|::|DEFMETHOD|)
(|SYSTEM|::|%PUTD| '|CLOS|::|DEFMETHOD|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CLOS|::|DEFMETHOD|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2.))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|CLOS|::|WHOLE-FORM| |SYSTEM|::|<MACRO-FORM>|)
       (|CLOS|::|FUNNAME|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|CLOS|::|METHOD-DESCRIPTION| (|COMMON-LISP|::|CDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |CLOS|::|DEFMETHOD|
       (|COMMON-LISP|::|SETQ| |CLOS|::|FUNNAME|
        (|SYSTEM|::|CHECK-FUNCTION-NAME| |CLOS|::|FUNNAME|
         '|CLOS|::|DEFMETHOD|))
       (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
        (|CLOS|::|FAST-FUNCTION-FACTORY-LAMBDA| |CLOS|::|METHOD-INITARGS-FORMS|
         |CLOS|::|SIGNATURE|)
        (|CLOS|::|ANALYZE-METHOD-DESCRIPTION| '|CLOS|::|DEFMETHOD|
         |CLOS|::|WHOLE-FORM| |CLOS|::|FUNNAME| |CLOS|::|METHOD-DESCRIPTION|)
        `(|COMMON-LISP|::|LET| |COMMON-LISP|::|NIL|
          (|SYSTEM|::|EVAL-WHEN-COMPILE|
           (|SYSTEM|::|C-DEFUN| ',|CLOS|::|FUNNAME| ,|CLOS|::|SIGNATURE|
            |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|))
          (|COMMON-LISP|::|WHEN|
           (|COMMON-LISP|::|GET|
            ',(|SYSTEM|::|GET-FUNNAME-SYMBOL| |CLOS|::|FUNNAME|)
            '|SYSTEM|::|TRACED-DEFINITION|)
           (|SYSTEM|::|UNTRACE1| ',|CLOS|::|FUNNAME|))
          (|CLOS|::|DO-DEFMETHOD| ',|CLOS|::|FUNNAME|
           #',|CLOS|::|FAST-FUNCTION-FACTORY-LAMBDA|
           (|COMMON-LISP|::|LIST| ,@|CLOS|::|METHOD-INITARGS-FORMS|)))))))))
  '(|COMMON-LISP|::|&WHOLE| |CLOS|::|WHOLE-FORM| |CLOS|::|FUNNAME|
    |COMMON-LISP|::|&REST| |CLOS|::|METHOD-DESCRIPTION|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|DO-DEFMETHOD|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|FUNNAME| |CLOS|::|ARG1| |COMMON-LISP|::|&OPTIONAL|
    (|CLOS|::|ARG2| |COMMON-LISP|::|NIL| |CLOS|::|MUST-BUILD-METHOD|))))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CLOS|::|DECLAIM-METHOD|)
(|SYSTEM|::|%PUTD| '|CLOS|::|DECLAIM-METHOD|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CLOS|::|DECLAIM-METHOD|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2.))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|CLOS|::|WHOLE-FORM| |SYSTEM|::|<MACRO-FORM>|)
       (|CLOS|::|FUNNAME|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|CLOS|::|METHOD-DESCRIPTION| (|COMMON-LISP|::|CDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |CLOS|::|DECLAIM-METHOD|
       (|COMMON-LISP|::|SETQ| |CLOS|::|FUNNAME|
        (|SYSTEM|::|CHECK-FUNCTION-NAME| |CLOS|::|FUNNAME|
         '|CLOS|::|DECLAIM-METHOD|))
       (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
        (|CLOS|::|FAST-FUNCTION-FACTORY-LAMBDA| |CLOS|::|METHOD-INITARGS-FORMS|
         |CLOS|::|SIGNATURE|)
        (|CLOS|::|ANALYZE-METHOD-DESCRIPTION| '|CLOS|::|DEFMETHOD|
         |CLOS|::|WHOLE-FORM| |CLOS|::|FUNNAME| |CLOS|::|METHOD-DESCRIPTION|)
        (|COMMON-LISP|::|DECLARE|
         (|COMMON-LISP|::|IGNORE| |CLOS|::|FAST-FUNCTION-FACTORY-LAMBDA|
          |CLOS|::|METHOD-INITARGS-FORMS|))
        `(|SYSTEM|::|EVAL-WHEN-COMPILE|
          (|SYSTEM|::|C-DEFUN| ',|CLOS|::|FUNNAME| ,|CLOS|::|SIGNATURE|
           |COMMON-LISP|::|NIL| '|CLOS|::|DEFMETHOD|))))))))
  '(|COMMON-LISP|::|&WHOLE| |CLOS|::|WHOLE-FORM| |CLOS|::|FUNNAME|
    |COMMON-LISP|::|&REST| |CLOS|::|METHOD-DESCRIPTION|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|ANALYZE-DEFGENERIC|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|CALLER| |CLOS|::|WHOLE-FORM| |CLOS|::|FUNNAME|
    |CLOS|::|LAMBDALIST| |CLOS|::|OPTIONS|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|ANALYZE-DEFGENERIC-LAMBDALIST|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|CALLER| |CLOS|::|WHOLE-FORM| |CLOS|::|FUNNAME|
    |CLOS|::|LAMBDALIST|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CLOS|::|DEFGENERIC|)
(|SYSTEM|::|%PUTD| '|CLOS|::|DEFGENERIC|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CLOS|::|DEFGENERIC|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 3.))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|CLOS|::|WHOLE-FORM| |SYSTEM|::|<MACRO-FORM>|)
       (|CLOS|::|FUNNAME|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|CLOS|::|LAMBDA-LIST| (|COMMON-LISP|::|CADDR| . #1#))
       (|CLOS|::|OPTIONS| (|COMMON-LISP|::|CDDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |CLOS|::|DEFGENERIC|
       (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
        (|CLOS|::|GENERIC-FUNCTION-CLASS-FORM| |CLOS|::|SIGNATURE|
         |CLOS|::|ARGUMENT-PRECEDENCE-ORDER|
         |CLOS|::|METHOD-COMBINATION-LAMBDA| |CLOS|::|METHOD-COMBINATION-P|
         |CLOS|::|METHOD-CLASS-FORM| |CLOS|::|METHOD-CLASS-P|
         |CLOS|::|DECLSPECS| |CLOS|::|DECLSPECS-P| |CLOS|::|DOCSTRING|
         |CLOS|::|DOCSTRING-P| |CLOS|::|USER-DEFINED-ARGS|
         |CLOS|::|METHOD-FORMS|)
        (|CLOS|::|ANALYZE-DEFGENERIC| '|CLOS|::|DEFGENERIC|
         |CLOS|::|WHOLE-FORM| |CLOS|::|FUNNAME| |CLOS|::|LAMBDA-LIST|
         |CLOS|::|OPTIONS|)
        (|COMMON-LISP|::|LET*|
         ((|CLOS|::|GENERIC-FUNCTION-CLASS-VAR| (|COMMON-LISP|::|GENSYM|))
          (|CLOS|::|GENERIC-FUNCTION-CLASS-KEYWORDS-VAR|
           (|COMMON-LISP|::|GENSYM|))
          (|CLOS|::|FUNNAME-SYMBOL|
           (|SYSTEM|::|GET-FUNNAME-SYMBOL| |CLOS|::|FUNNAME|))
          (|CLOS|::|METHOD-COMBINATION-FORM|
           `(,|CLOS|::|METHOD-COMBINATION-LAMBDA|
             ,|CLOS|::|GENERIC-FUNCTION-CLASS-VAR|)))
         `(|COMMON-LISP|::|LET| |COMMON-LISP|::|NIL|
           (|COMMON-LISP|::|DECLARE| (|SYSTEM|::|IN-DEFUN| ,|CLOS|::|FUNNAME|))
           (|SYSTEM|::|EVAL-WHEN-COMPILE|
            (|SYSTEM|::|C-DEFUN| ',|CLOS|::|FUNNAME| ',|CLOS|::|SIGNATURE|
             |COMMON-LISP|::|NIL| '|CLOS|::|DEFGENERIC|))
           (|COMMON-LISP|::|WHEN|
            (|COMMON-LISP|::|GET| ',|CLOS|::|FUNNAME-SYMBOL|
             '|SYSTEM|::|TRACED-DEFINITION|)
            (|SYSTEM|::|UNTRACE1| ',|CLOS|::|FUNNAME|))
           (|SYSTEM|::|CHECK-REDEFINITION| ',|CLOS|::|FUNNAME|
            '|CLOS|::|DEFGENERIC|
            (|SYSTEM|::|FBOUND-STRING| ',|CLOS|::|FUNNAME-SYMBOL|))
           (|COMMON-LISP|::|LET*|
            ((,|CLOS|::|GENERIC-FUNCTION-CLASS-VAR|
              ,|CLOS|::|GENERIC-FUNCTION-CLASS-FORM|)
             ,@(|COMMON-LISP|::|IF| |CLOS|::|USER-DEFINED-ARGS|
                `((,|CLOS|::|GENERIC-FUNCTION-CLASS-KEYWORDS-VAR|
                   (|CLOS|::|CLASS-VALID-INITIALIZATION-KEYWORDS|
                    ,|CLOS|::|GENERIC-FUNCTION-CLASS-VAR|)))))
            ,@(|COMMON-LISP|::|IF| |CLOS|::|USER-DEFINED-ARGS|
               `((|COMMON-LISP|::|UNLESS|
                  (|COMMON-LISP|::|EQ|
                   ,|CLOS|::|GENERIC-FUNCTION-CLASS-KEYWORDS-VAR|
                   '|COMMON-LISP|::|T|)
                  ,@(|COMMON-LISP|::|MAPCAR|
                     #'(|COMMON-LISP|::|LAMBDA| (|CLOS|::|OPTION|)
                        `(|COMMON-LISP|::|UNLESS|
                          (|COMMON-LISP|::|MEMBER|
                           ',(|COMMON-LISP|::|FIRST| |CLOS|::|OPTION|)
                           ,|CLOS|::|GENERIC-FUNCTION-CLASS-KEYWORDS-VAR|)
                          (|SYSTEM|::|ERROR-OF-TYPE|
                           '|EXT|::|SOURCE-PROGRAM-ERROR| :|FORM|
                           ',|CLOS|::|WHOLE-FORM| :|DETAIL| ',|CLOS|::|OPTION|
                           (|SYSTEM|::|TEXT| "~S ~S: invalid option ~S")
                           '|CLOS|::|DEFGENERIC| ',|CLOS|::|FUNNAME|
                           ',|CLOS|::|OPTION|)))
                     |CLOS|::|USER-DEFINED-ARGS|))))
            (|COMMON-LISP|::|APPLY| #'|CLOS|::|ENSURE-GENERIC-FUNCTION|
             ',|CLOS|::|FUNNAME| :|GENERIC-FUNCTION-CLASS|
             ,|CLOS|::|GENERIC-FUNCTION-CLASS-VAR| :|LAMBDA-LIST|
             ',|CLOS|::|LAMBDA-LIST| :|ARGUMENT-PRECEDENCE-ORDER|
             ',|CLOS|::|ARGUMENT-PRECEDENCE-ORDER|
             ,@(|COMMON-LISP|::|IF| |CLOS|::|METHOD-CLASS-P|
                `(:|METHOD-CLASS| ,|CLOS|::|METHOD-CLASS-FORM|))
             ,@(|COMMON-LISP|::|IF| |CLOS|::|METHOD-COMBINATION-P|
                `(:|METHOD-COMBINATION| ,|CLOS|::|METHOD-COMBINATION-FORM|))
             ,@(|COMMON-LISP|::|IF| |CLOS|::|DOCSTRING-P|
                `(:|DOCUMENTATION| ',|CLOS|::|DOCSTRING|))
             ,@(|COMMON-LISP|::|IF| |CLOS|::|DECLSPECS-P|
                `(:|DECLARATIONS| ',|CLOS|::|DECLSPECS|))
             '|CLOS|::|METHODS|
             (|COMMON-LISP|::|LIST| ,@|CLOS|::|METHOD-FORMS|)
             ,@(|COMMON-LISP|::|MAPCAN|
                #'(|COMMON-LISP|::|LAMBDA| (|CLOS|::|OPTION|)
                   (|COMMON-LISP|::|LIST|
                    `',(|COMMON-LISP|::|FIRST| |CLOS|::|OPTION|)
                    `',(|COMMON-LISP|::|REST| |CLOS|::|OPTION|)))
                |CLOS|::|USER-DEFINED-ARGS|)
             (|COMMON-LISP|::|APPEND|
              (|COMMON-LISP|::|MAPCAN|
               #'(|COMMON-LISP|::|LAMBDA| (|CLOS|::|X|)
                  (|COMMON-LISP|::|LIST| (|COMMON-LISP|::|FIRST| |CLOS|::|X|)
                   (|COMMON-LISP|::|FUNCALL|
                    (|COMMON-LISP|::|THIRD| |CLOS|::|X|))))
               (|CLOS|::|CLASS-DEFAULT-INITARGS|
                ,|CLOS|::|GENERIC-FUNCTION-CLASS-VAR|))
              (|COMMON-LISP|::|LIST|
               ,@(|COMMON-LISP|::|UNLESS| |CLOS|::|METHOD-CLASS-P|
                  '(:|METHOD-CLASS| |CLOS|::|<STANDARD-METHOD>|))
               ,@(|COMMON-LISP|::|UNLESS| |CLOS|::|METHOD-COMBINATION-P|
                  `(:|METHOD-COMBINATION| ,|CLOS|::|METHOD-COMBINATION-FORM|))
               ,@(|COMMON-LISP|::|UNLESS| |CLOS|::|DOCSTRING-P|
                  '(:|DOCUMENTATION| |COMMON-LISP|::|NIL|))
               ,@(|COMMON-LISP|::|UNLESS| |CLOS|::|DECLSPECS-P|
                  '(:|DECLARATIONS| |COMMON-LISP|::|NIL|))))))))))))))
  '(|COMMON-LISP|::|&WHOLE| |CLOS|::|WHOLE-FORM| |CLOS|::|FUNNAME|
    |CLOS|::|LAMBDA-LIST| |COMMON-LISP|::|&REST| |CLOS|::|OPTIONS|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|DEFGENERIC-LAMBDALIST-CALLINFO|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|CALLER| |CLOS|::|WHOLE-FORM| |CLOS|::|FUNNAME|
    |CLOS|::|LAMBDALIST|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|MAKE-GENERIC-FUNCTION-FORM|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|CALLER| |CLOS|::|WHOLE-FORM| |CLOS|::|FUNNAME|
    |CLOS|::|LAMBDA-LIST| |CLOS|::|OPTIONS|)))
(|SYSTEM|::|C-DEFUN| '|CLOS|::|ANALYZE-GENERIC-FUNDEFS|
 (|SYSTEM|::|LAMBDA-LIST-TO-SIGNATURE|
  '(|CLOS|::|CALLER| |CLOS|::|WHOLE-FORM| |CLOS|::|FUNDEFS|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CLOS|::|GENERIC-FLET|)
(|SYSTEM|::|%PUTD| '|CLOS|::|GENERIC-FLET|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CLOS|::|GENERIC-FLET|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2.))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|CLOS|::|WHOLE-FORM| |SYSTEM|::|<MACRO-FORM>|)
       (|CLOS|::|FUNDEFS|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|CLOS|::|BODY| (|COMMON-LISP|::|CDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |CLOS|::|GENERIC-FLET|
       (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
        (|CLOS|::|FUNNAMES| |CLOS|::|FUNFORMS|)
        (|CLOS|::|ANALYZE-GENERIC-FUNDEFS| '|CLOS|::|GENERIC-FLET|
         |CLOS|::|WHOLE-FORM| |CLOS|::|FUNDEFS|)
        (|COMMON-LISP|::|LET|
         ((|CLOS|::|VARNAMES| (|SYSTEM|::|GENSYM-LIST| |CLOS|::|FUNNAMES|)))
         `(|COMMON-LISP|::|LET|
           ,(|COMMON-LISP|::|MAPCAR| #'|COMMON-LISP|::|LIST| |CLOS|::|VARNAMES|
             |CLOS|::|FUNFORMS|)
           (|COMMON-LISP|::|FLET|
            ,(|COMMON-LISP|::|MAPCAR|
              #'(|COMMON-LISP|::|LAMBDA| (|CLOS|::|VARNAME| |CLOS|::|FUNNAME|)
                 `(,|CLOS|::|FUNNAME| (|COMMON-LISP|::|&REST| |CLOS|::|ARGS|)
                   (|COMMON-LISP|::|APPLY| ,|CLOS|::|VARNAME| |CLOS|::|ARGS|)))
              |CLOS|::|VARNAMES| |CLOS|::|FUNNAMES|)
            ,@|CLOS|::|BODY|)))))))))
  '(|COMMON-LISP|::|&WHOLE| |CLOS|::|WHOLE-FORM| |CLOS|::|FUNDEFS|
    |COMMON-LISP|::|&BODY| |CLOS|::|BODY|)))
(|SYSTEM|::|REMOVE-OLD-DEFINITIONS| '|CLOS|::|GENERIC-LABELS|)
(|SYSTEM|::|%PUTD| '|CLOS|::|GENERIC-LABELS|
 (|SYSTEM|::|MAKE-MACRO|
  (|COMMON-LISP|::|FUNCTION| |CLOS|::|GENERIC-LABELS|
   (|COMMON-LISP|::|LAMBDA| (|SYSTEM|::|<MACRO-FORM>| |SYSTEM|::|<ENV-ARG>|)
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|CONS| |SYSTEM|::|<MACRO-FORM>|))
    (|COMMON-LISP|::|DECLARE| (|COMMON-LISP|::|IGNORE| |SYSTEM|::|<ENV-ARG>|))
    (|COMMON-LISP|::|IF|
     (|COMMON-LISP|::|NOT|
      (|SYSTEM|::|PROPER-LIST-LENGTH-IN-BOUNDS-P| |SYSTEM|::|<MACRO-FORM>| 2.))
     (|SYSTEM|::|MACRO-CALL-ERROR| |SYSTEM|::|<MACRO-FORM>|)
     (|COMMON-LISP|::|LET*|
      ((|CLOS|::|WHOLE-FORM| |SYSTEM|::|<MACRO-FORM>|)
       (|CLOS|::|FUNDEFS|
        (|COMMON-LISP|::|CADR| . #1=(|SYSTEM|::|<MACRO-FORM>|)))
       (|CLOS|::|BODY| (|COMMON-LISP|::|CDDR| . #1#)))
      (|COMMON-LISP|::|BLOCK| |CLOS|::|GENERIC-LABELS|
       (|COMMON-LISP|::|MULTIPLE-VALUE-BIND|
        (|CLOS|::|FUNNAMES| |CLOS|::|FUNFORMS|)
        (|CLOS|::|ANALYZE-GENERIC-FUNDEFS| '|CLOS|::|GENERIC-LABELS|
         |CLOS|::|WHOLE-FORM| |CLOS|::|FUNDEFS|)
        (|COMMON-LISP|::|LET|
         ((|CLOS|::|VARNAMES| (|SYSTEM|::|GENSYM-LIST| |CLOS|::|FUNNAMES|)))
         `(|COMMON-LISP|::|LET| ,|CLOS|::|VARNAMES|
           (|COMMON-LISP|::|FLET|
            ,(|COMMON-LISP|::|MAPCAR|
              #'(|COMMON-LISP|::|LAMBDA| (|CLOS|::|VARNAME| |CLOS|::|FUNNAME|)
                 `(,|CLOS|::|FUNNAME| (|COMMON-LISP|::|&REST| |CLOS|::|ARGS|)
                   (|COMMON-LISP|::|APPLY| ,|CLOS|::|VARNAME| |CLOS|::|ARGS|)))
              |CLOS|::|VARNAMES| |CLOS|::|FUNNAMES|)
            ,@(|COMMON-LISP|::|MAPCAR|
               #'(|COMMON-LISP|::|LAMBDA| (|CLOS|::|VARNAME| |CLOS|::|FUNFORM|)
                  `(|COMMON-LISP|::|SETQ| ,|CLOS|::|VARNAME|
                    ,|CLOS|::|FUNFORM|))
               |CLOS|::|VARNAMES| |CLOS|::|FUNFORMS|)
            ,@|CLOS|::|BODY|)))))))))
  '(|COMMON-LISP|::|&WHOLE| |CLOS|::|WHOLE-FORM| |CLOS|::|FUNDEFS|
    |COMMON-LISP|::|&BODY| |CLOS|::|BODY|)))
